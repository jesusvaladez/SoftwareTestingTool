"Name of Test","Assertion","Number of Assertions","Kind of Assertions","Body Code","Method Signature","Annotations","File Path","Git Log"
"start","FALSE","0","None","{
    com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new org.apache.ambari.server.orm.InMemoryDefaultTestModule());
    com.google.inject.persist.jpa.AmbariJpaPersistService persistService = injector.getInstance(com.google.inject.persist.jpa.AmbariJpaPersistService.class);
    persistService.start();
    persistService.start();
}","start()","Test","ambari/ambari-server/src/test/java/com/google/inject/persist/jpa/AmbariJpaPersistServiceTest.java","60a05a806fc3203cda35cc3a6be3a5c713d18be3
b4b8e16c75538f412f74a344e096d9bd0721312c
30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
fae3fa56d453aec038890c0fc4d04f4ba69824a3
897e5fd8b82d23cbb08304337fca34fac774c012
8d9a423e44630fb73ce70857069db7dc26eefbb1
e3e237a088626235d518087a25069115ea905bd4
0c5f8d21dc935bad434fd54f918b47e828f5a397
42118f0e8e56f41f4450c754d4066a58011dd778"
"testTransactionalLockInstantiation","TRUE","3","assertNotNull
assertTrue","{
    org.apache.ambari.server.orm.TransactionalLocks locks = m_injector.getInstance(org.apache.ambari.server.orm.TransactionalLocks.class);
    java.util.List<java.util.concurrent.locks.ReadWriteLock> lockList = new java.util.ArrayList<>();
    java.util.Set<org.apache.ambari.annotations.TransactionalLock.LockArea> lockAreas = java.util.EnumSet.allOf(org.apache.ambari.annotations.TransactionalLock.LockArea.class);
    for (org.apache.ambari.annotations.TransactionalLock.LockArea lockArea : lockAreas) {
        java.util.concurrent.locks.ReadWriteLock lock = locks.getLock(lockArea);
        junit.framework.Assert.assertNotNull(lock);
        lockList.add(lock);
    }
    for (org.apache.ambari.annotations.TransactionalLock.LockArea lockArea : lockAreas) {
        junit.framework.Assert.assertTrue(lockList.contains(locks.getLock(lockArea)));
    }
}","testTransactionalLockInstantiation()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/annotations/LockAreaTest.java","3a7906c84737511475e718a0da50397b31ef7b52
365c74b53c653a96fda189846ad5e07ab268e0fc"
"testTransactionalLockInvocation","FALSE","0","None","{
    org.apache.ambari.server.orm.TransactionalLocks transactionalLocks = m_injector.getInstance(org.apache.ambari.server.orm.TransactionalLocks.class);
    java.util.concurrent.locks.ReadWriteLock readWriteLock = org.easymock.EasyMock.createStrictMock(java.util.concurrent.locks.ReadWriteLock.class);
    java.util.concurrent.locks.Lock readLock = org.easymock.EasyMock.createStrictMock(java.util.concurrent.locks.Lock.class);
    java.util.concurrent.locks.Lock writeLock = org.easymock.EasyMock.createStrictMock(java.util.concurrent.locks.Lock.class);
    org.easymock.EasyMock.expect(transactionalLocks.getLock(org.apache.ambari.annotations.TransactionalLock.LockArea.HRC_STATUS_CACHE)).andReturn(readWriteLock).times(2);
    org.easymock.EasyMock.expect(readWriteLock.writeLock()).andReturn(writeLock).times(2);
    writeLock.lock();
    org.easymock.EasyMock.expectLastCall().once();
    writeLock.unlock();
    org.easymock.EasyMock.expectLastCall().once();
    org.easymock.EasyMock.replay(transactionalLocks, readWriteLock, readLock, writeLock);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAO = m_injector.getInstance(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    hostRoleCommandDAO.mergeAll(new java.util.ArrayList<>());
    org.easymock.EasyMock.verify(transactionalLocks, readWriteLock, readLock, writeLock);
}","testTransactionalLockInvocation()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/annotations/TransactionalLockInterceptorTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
3a7906c84737511475e718a0da50397b31ef7b52
365c74b53c653a96fda189846ad5e07ab268e0fc
73ac59fc33e64cc1443fc19ba5360d047b0e348a"
"testNestedTransactional","FALSE","0","None","{
    org.apache.ambari.server.orm.TransactionalLocks transactionalLocks = m_injector.getInstance(org.apache.ambari.server.orm.TransactionalLocks.class);
    java.util.concurrent.locks.ReadWriteLock readWriteLock = org.easymock.EasyMock.createStrictMock(java.util.concurrent.locks.ReadWriteLock.class);
    java.util.concurrent.locks.Lock readLock = org.easymock.EasyMock.createStrictMock(java.util.concurrent.locks.Lock.class);
    java.util.concurrent.locks.Lock writeLock = org.easymock.EasyMock.createStrictMock(java.util.concurrent.locks.Lock.class);
    org.easymock.EasyMock.expect(transactionalLocks.getLock(org.apache.ambari.annotations.TransactionalLock.LockArea.HRC_STATUS_CACHE)).andReturn(readWriteLock).times(2);
    org.easymock.EasyMock.expect(readWriteLock.writeLock()).andReturn(writeLock).times(2);
    writeLock.lock();
    org.easymock.EasyMock.expectLastCall().once();
    writeLock.unlock();
    org.easymock.EasyMock.expectLastCall().once();
    org.easymock.EasyMock.replay(transactionalLocks, readWriteLock, readLock, writeLock);
    org.apache.ambari.annotations.TransactionalLockInterceptorTest.TestObject testObject = m_injector.getInstance(org.apache.ambari.annotations.TransactionalLockInterceptorTest.TestObject.class);
    testObject.testLockMethodAsChildOfActiveTransaction();
    org.easymock.EasyMock.verify(transactionalLocks, readWriteLock, readLock, writeLock);
}","testNestedTransactional()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/annotations/TransactionalLockInterceptorTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
3a7906c84737511475e718a0da50397b31ef7b52
365c74b53c653a96fda189846ad5e07ab268e0fc
73ac59fc33e64cc1443fc19ba5360d047b0e348a"
"testMultipleLocks","FALSE","0","None","{
    org.apache.ambari.server.orm.TransactionalLocks transactionalLocks = m_injector.getInstance(org.apache.ambari.server.orm.TransactionalLocks.class);
    java.util.concurrent.locks.ReadWriteLock readWriteLock = org.easymock.EasyMock.createStrictMock(java.util.concurrent.locks.ReadWriteLock.class);
    java.util.concurrent.locks.Lock readLock = org.easymock.EasyMock.createStrictMock(java.util.concurrent.locks.Lock.class);
    java.util.concurrent.locks.Lock writeLock = org.easymock.EasyMock.createStrictMock(java.util.concurrent.locks.Lock.class);
    org.easymock.EasyMock.expect(transactionalLocks.getLock(org.apache.ambari.annotations.TransactionalLock.LockArea.HRC_STATUS_CACHE)).andReturn(readWriteLock).times(2);
    org.easymock.EasyMock.expect(readWriteLock.writeLock()).andReturn(writeLock).times(2);
    writeLock.lock();
    org.easymock.EasyMock.expectLastCall().once();
    writeLock.unlock();
    org.easymock.EasyMock.expectLastCall().once();
    org.easymock.EasyMock.expect(transactionalLocks.getLock(org.apache.ambari.annotations.TransactionalLock.LockArea.HRC_STATUS_CACHE)).andReturn(readWriteLock).times(2);
    org.easymock.EasyMock.expect(readWriteLock.writeLock()).andReturn(writeLock).times(2);
    writeLock.lock();
    org.easymock.EasyMock.expectLastCall().once();
    writeLock.unlock();
    org.easymock.EasyMock.expectLastCall().once();
    org.easymock.EasyMock.replay(transactionalLocks, readWriteLock, readLock, writeLock);
    org.apache.ambari.annotations.TransactionalLockInterceptorTest.TestObject testObject = m_injector.getInstance(org.apache.ambari.annotations.TransactionalLockInterceptorTest.TestObject.class);
    testObject.testMultipleLocks();
    org.easymock.EasyMock.verify(transactionalLocks, readWriteLock, readLock, writeLock);
}","testMultipleLocks()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/annotations/TransactionalLockInterceptorTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
3a7906c84737511475e718a0da50397b31ef7b52
365c74b53c653a96fda189846ad5e07ab268e0fc
73ac59fc33e64cc1443fc19ba5360d047b0e348a"
"testNestedMultipleLocks","FALSE","0","None","{
    org.apache.ambari.server.orm.TransactionalLocks transactionalLocks = m_injector.getInstance(org.apache.ambari.server.orm.TransactionalLocks.class);
    java.util.concurrent.locks.ReadWriteLock readWriteLock = org.easymock.EasyMock.createStrictMock(java.util.concurrent.locks.ReadWriteLock.class);
    java.util.concurrent.locks.Lock readLock = org.easymock.EasyMock.createStrictMock(java.util.concurrent.locks.Lock.class);
    java.util.concurrent.locks.Lock writeLock = org.easymock.EasyMock.createStrictMock(java.util.concurrent.locks.Lock.class);
    org.easymock.EasyMock.expect(transactionalLocks.getLock(org.apache.ambari.annotations.TransactionalLock.LockArea.HRC_STATUS_CACHE)).andReturn(readWriteLock).times(2);
    org.easymock.EasyMock.expect(readWriteLock.writeLock()).andReturn(writeLock).times(2);
    writeLock.lock();
    org.easymock.EasyMock.expectLastCall().once();
    writeLock.unlock();
    org.easymock.EasyMock.expectLastCall().once();
    org.easymock.EasyMock.replay(transactionalLocks, readWriteLock, readLock, writeLock);
    org.apache.ambari.annotations.TransactionalLockInterceptorTest.TestObject testObject = m_injector.getInstance(org.apache.ambari.annotations.TransactionalLockInterceptorTest.TestObject.class);
    testObject.testMultipleNestedLocks();
    org.easymock.EasyMock.verify(transactionalLocks, readWriteLock, readLock, writeLock);
}","testNestedMultipleLocks()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/annotations/TransactionalLockInterceptorTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
3a7906c84737511475e718a0da50397b31ef7b52
365c74b53c653a96fda189846ad5e07ab268e0fc
73ac59fc33e64cc1443fc19ba5360d047b0e348a"
"testLockAreaEnabled","TRUE","2","assertTrue","{
    final java.util.Properties ambariProperties = new java.util.Properties();
    ambariProperties.put(org.apache.ambari.server.configuration.Configuration.SERVER_HRC_STATUS_SUMMARY_CACHE_ENABLED.getKey(), ""true"");
    org.apache.ambari.server.configuration.Configuration configuration = new org.apache.ambari.server.configuration.Configuration(ambariProperties);
    org.apache.ambari.annotations.TransactionalLock.LockArea lockArea = org.apache.ambari.annotations.TransactionalLock.LockArea.HRC_STATUS_CACHE;
    lockArea.clearEnabled();
    junit.framework.Assert.assertTrue(lockArea.isEnabled(configuration));
}","testLockAreaEnabled()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/annotations/TransactionalLockTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
365c74b53c653a96fda189846ad5e07ab268e0fc
73ac59fc33e64cc1443fc19ba5360d047b0e348a
1621a53dc5820ba1ca5bf5204628b51d341f0caa"
"testLockAreaEnabledDisabled","TRUE","2","assertFalse","{
    final java.util.Properties ambariProperties = new java.util.Properties();
    ambariProperties.put(org.apache.ambari.server.configuration.Configuration.SERVER_HRC_STATUS_SUMMARY_CACHE_ENABLED.getKey(), ""false"");
    org.apache.ambari.server.configuration.Configuration configuration = new org.apache.ambari.server.configuration.Configuration(ambariProperties);
    org.apache.ambari.annotations.TransactionalLock.LockArea lockArea = org.apache.ambari.annotations.TransactionalLock.LockArea.HRC_STATUS_CACHE;
    lockArea.clearEnabled();
    junit.framework.Assert.assertFalse(lockArea.isEnabled(configuration));
}","testLockAreaEnabledDisabled()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/annotations/TransactionalLockTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
365c74b53c653a96fda189846ad5e07ab268e0fc
73ac59fc33e64cc1443fc19ba5360d047b0e348a
1621a53dc5820ba1ca5bf5204628b51d341f0caa"
"testAnnotationEquality","TRUE","3","assertEquals","{
    java.util.HashSet<org.apache.ambari.annotations.TransactionalLock> annotations = new java.util.HashSet<>();
    int annotationsFound = 0;
    java.lang.reflect.Method[] methods = getClass().getDeclaredMethods();
    for (java.lang.reflect.Method method : methods) {
        org.apache.ambari.annotations.TransactionalLock annotation = method.getAnnotation(org.apache.ambari.annotations.TransactionalLock.class);
        if (null != annotation) {
            annotations.add(annotation);
            annotationsFound++;
        }
    }
    junit.framework.Assert.assertEquals(2, annotations.size());
    junit.framework.Assert.assertEquals(3, annotationsFound);
}","testAnnotationEquality()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/annotations/TransactionalLockTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
365c74b53c653a96fda189846ad5e07ab268e0fc
73ac59fc33e64cc1443fc19ba5360d047b0e348a
1621a53dc5820ba1ca5bf5204628b51d341f0caa"
"transactionalOnPrivateMethod","FALSE","0","None","{
    final com.puppycrawl.tools.checkstyle.DefaultConfiguration config = createModuleConfig(org.apache.ambari.checkstyle.AvoidTransactionalOnPrivateMethodsCheck.class);
    final java.lang.String[] expected = new java.lang.String[]{ ""32: "" + org.apache.ambari.checkstyle.AvoidTransactionalOnPrivateMethodsCheck.MSG_TRANSACTIONAL_ON_PRIVATE_METHOD, ""41: "" + org.apache.ambari.checkstyle.AvoidTransactionalOnPrivateMethodsCheck.MSG_TRANSACTIONAL_ON_PRIVATE_METHOD };
    verify(config, getPath(""InputTransactionalOnPrivateMethods.java""), expected);
}","transactionalOnPrivateMethod()","Test","ambari/ambari-utility/src/test/java/org/apache/ambari/checkstyle/AvoidTransactionalOnPrivateMethodsCheckTest.java","ef774a4f8c283040bcdbcdd5570a9155deef3997
1fbb933ef91d5a1ccf704e8d043c0ab0f6c30df7
4ede671514563a3cc116bc2059d6d8b878a5a784
304a5bf6027efa9e70b1deaba325d54e586e4292"
"test","FALSE","0","None","{
    final com.puppycrawl.tools.checkstyle.DefaultConfiguration config = createModuleConfig(org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.class);
    final java.lang.String[] expected = new java.lang.String[]{ ""36: "" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, ""53: "" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, ""70: "" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, ""87: "" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, ""104: "" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE, ""121: "" + org.apache.ambari.checkstyle.UndocumentedRestApiOperationCheck.MESSAGE };
    verify(config, getPath(""InputRestApiOperation.java""), expected);
}","test()","Test
Ignore","ambari/ambari-utility/src/test/java/org/apache/ambari/checkstyle/UndocumentedRestApiOperationCheckTest.java","60248d232b99ca5981d1d99464658b9eee246588
ef774a4f8c283040bcdbcdd5570a9155deef3997
1fbb933ef91d5a1ccf704e8d043c0ab0f6c30df7
4ede671514563a3cc116bc2059d6d8b878a5a784
304a5bf6027efa9e70b1deaba325d54e586e4292"
"testDeleteService","TRUE","19","assertTrue
assertEquals","{
    java.lang.String clusterName = ""c1"";
    java.lang.String serviceName = ""HDFS"";
    org.apache.ambari.funtest.server.ConnectionParams params = new org.apache.ambari.funtest.server.ConnectionParams();
    params.setServerName(""localhost"");
    params.setServerApiPort(org.apache.ambari.funtest.server.tests.ServerTestBase.serverPort);
    params.setServerAgentPort(org.apache.ambari.funtest.server.tests.ServerTestBase.serverAgentPort);
    params.setUserName(""admin"");
    params.setPassword(""admin"");
    org.apache.ambari.funtest.server.utils.ClusterUtils clusterUtils = org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(org.apache.ambari.funtest.server.utils.ClusterUtils.class);
    clusterUtils.createSampleCluster(params);
    com.google.gson.JsonElement jsonResponse = org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.service.GetServiceWebRequest(params, clusterName, serviceName));
    org.junit.Assert.assertTrue(!jsonResponse.isJsonNull());
    com.google.gson.JsonObject jsonServiceInfoObj = jsonResponse.getAsJsonObject().get(""ServiceInfo"").getAsJsonObject();
    java.lang.String cluster_name = jsonServiceInfoObj.get(""cluster_name"").getAsString();
    org.junit.Assert.assertEquals(cluster_name, clusterName);
    java.lang.String service_name = jsonServiceInfoObj.get(""service_name"").getAsString();
    org.junit.Assert.assertEquals(service_name, serviceName);
    jsonResponse = org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.service.StopServiceWebRequest(params, clusterName, serviceName));
    org.apache.ambari.server.orm.dao.ClusterServiceDAO clusterServiceDAO = org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(org.apache.ambari.server.orm.dao.ClusterServiceDAO.class);
    java.util.List<org.apache.ambari.server.orm.entities.ClusterServiceEntity> clusterServiceEntities = clusterServiceDAO.findAll();
    org.junit.Assert.assertEquals(clusterServiceEntities.size(), 1);
    org.junit.Assert.assertEquals(clusterServiceEntities.get(0).getServiceName(), serviceName);
    org.apache.ambari.server.orm.entities.ClusterServiceEntity clusterServiceEntity = clusterServiceEntities.get(0);
    long clusterId = clusterServiceEntity.getClusterId();
    org.apache.ambari.server.orm.dao.ServiceDesiredStateDAO serviceDesiredStateDAO = org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(org.apache.ambari.server.orm.dao.ServiceDesiredStateDAO.class);
    java.util.List<org.apache.ambari.server.orm.entities.ServiceDesiredStateEntity> serviceDesiredStateEntities = serviceDesiredStateDAO.findAll();
    org.junit.Assert.assertEquals(serviceDesiredStateEntities.size(), 1);
    org.apache.ambari.server.orm.entities.ServiceDesiredStateEntity serviceDesiredStateEntity = serviceDesiredStateEntities.get(0);
    org.junit.Assert.assertEquals(serviceDesiredStateEntity.getServiceName(), serviceName);
    org.junit.Assert.assertEquals(serviceDesiredStateEntity.getDesiredState(), org.apache.ambari.server.state.State.INSTALLED);
    org.apache.ambari.server.orm.dao.ServiceComponentDesiredStateDAO serviceComponentDesiredStateDAO = org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(org.apache.ambari.server.orm.dao.ServiceComponentDesiredStateDAO.class);
    java.util.List<org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity> serviceComponentDesiredStateEntities = serviceComponentDesiredStateDAO.findAll();
    org.junit.Assert.assertEquals(serviceComponentDesiredStateEntities.size(), 3);
    for (org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity : serviceComponentDesiredStateEntities) {
        org.junit.Assert.assertEquals(serviceComponentDesiredStateEntity.getDesiredState(), org.apache.ambari.server.state.State.INSTALLED);
    }
    org.apache.ambari.server.orm.dao.HostComponentStateDAO hostComponentStateDAO = org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(org.apache.ambari.server.orm.dao.HostComponentStateDAO.class);
    java.util.List<org.apache.ambari.server.orm.entities.HostComponentStateEntity> hostComponentStateEntities = hostComponentStateDAO.findAll();
    org.junit.Assert.assertEquals(hostComponentStateEntities.size(), 3);
    org.apache.ambari.server.orm.dao.HostComponentDesiredStateDAO hostComponentDesiredStateDAO = org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(org.apache.ambari.server.orm.dao.HostComponentDesiredStateDAO.class);
    java.util.List<org.apache.ambari.server.orm.entities.HostComponentDesiredStateEntity> hostComponentDesiredStateEntities = hostComponentDesiredStateDAO.findAll();
    org.junit.Assert.assertEquals(hostComponentDesiredStateEntities.size(), 3);
    jsonResponse = org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.service.DeleteServiceWebRequest(params, clusterName, serviceName));
    org.apache.ambari.funtest.server.WebResponse webResponse = new org.apache.ambari.funtest.server.api.service.GetServiceWebRequest(params, clusterName, serviceName).getResponse();
    org.junit.Assert.assertEquals(webResponse.getStatusCode(), HttpStatus.SC_NOT_FOUND);
    clusterServiceEntity = clusterServiceDAO.findByClusterAndServiceNames(clusterName, serviceName);
    org.junit.Assert.assertTrue(clusterServiceEntity == null);
    org.apache.ambari.server.orm.entities.ServiceDesiredStateEntityPK serviceDesiredStateEntityPK = org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(org.apache.ambari.server.orm.entities.ServiceDesiredStateEntityPK.class);
    serviceDesiredStateEntityPK.setClusterId(clusterId);
    serviceDesiredStateEntityPK.setServiceName(serviceName);
    serviceDesiredStateEntity = serviceDesiredStateDAO.findByPK(serviceDesiredStateEntityPK);
    org.junit.Assert.assertTrue(serviceDesiredStateEntity == null);
    org.apache.ambari.server.orm.entities.ServiceComponentDesiredStateEntity serviceComponentDesiredStateEntity = serviceComponentDesiredStateDAO.findById(0L);
    org.junit.Assert.assertTrue(serviceComponentDesiredStateEntity == null);
    hostComponentStateEntities = hostComponentStateDAO.findByService(serviceName);
    org.junit.Assert.assertEquals(hostComponentStateEntities.size(), 0);
    hostComponentDesiredStateEntities = hostComponentDesiredStateDAO.findAll();
    org.junit.Assert.assertEquals(hostComponentDesiredStateEntities.size(), 0);
    jsonResponse = org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.cluster.DeleteClusterWebRequest(params, clusterName));
    org.apache.ambari.funtest.server.tests.DeleteServiceTest.LOG.info(jsonResponse);
}","testDeleteService()","Test","ambari/ambari-funtest/src/test/java/org/apache/ambari/funtest/server/tests/DeleteServiceTest.java","3c28378fa4e6f4299e7df01c47359b4c8643ef63
b38cdb9b77e489f28f656e89964c04e65f9b326f
2a9f49c0e3a1839076fd271cb7caf09b3fc897f4
f2e797abd9ce6db53995085c6693ed16d278f185
ffb4d3b8ce043d3cb3e9b8a69619dc82797c68ce
b5e8a3bf825413ad8d03a14416ae7813c3123dea"
"testServerStatus","TRUE","6","assertEquals
assertTrue","{
    java.lang.String stacksPath = ""/api/v1/stacks"";
    java.lang.String stacksUrl = java.lang.String.format(org.apache.ambari.funtest.server.tests.ServerTestBase.SERVER_URL_FORMAT, org.apache.ambari.funtest.server.tests.ServerTestBase.serverPort) + stacksPath;
    org.apache.http.impl.client.CloseableHttpClient httpClient = org.apache.http.impl.client.HttpClients.createDefault();
    org.apache.http.client.methods.HttpGet httpGet = new org.apache.http.client.methods.HttpGet(stacksUrl);
    httpGet.addHeader(""Authorization"", org.apache.ambari.funtest.server.tests.ServerTestBase.getBasicAdminAuthentication());
    httpGet.addHeader(""X-Requested-By"", ""ambari"");
    try {
        org.apache.http.HttpResponse httpResponse = httpClient.execute(httpGet);
        int statusCode = httpResponse.getStatusLine().getStatusCode();
        org.junit.Assert.assertEquals(HttpStatus.SC_OK, statusCode);
        org.apache.http.HttpEntity entity = httpResponse.getEntity();
        java.lang.String responseBody = (entity != null) ? org.apache.http.util.EntityUtils.toString(entity) : null;
        org.junit.Assert.assertTrue(responseBody != null);
        com.google.gson.JsonElement jsonElement = new com.google.gson.JsonParser().parse(new com.google.gson.stream.JsonReader(new java.io.StringReader(responseBody)));
        org.junit.Assert.assertTrue(jsonElement != null);
        com.google.gson.JsonObject jsonObject = jsonElement.getAsJsonObject();
        org.junit.Assert.assertTrue(jsonObject.has(""items""));
        com.google.gson.JsonArray stacksArray = jsonObject.get(""items"").getAsJsonArray();
        org.junit.Assert.assertTrue(stacksArray.size() > 0);
    } finally {
        httpClient.close();
    }
}","testServerStatus()","Test","ambari/ambari-funtest/src/test/java/org/apache/ambari/funtest/server/tests/GetStacksTest.java","39bda71b43c5572f057fd6c3cb6cbd91fcefa698
3c28378fa4e6f4299e7df01c47359b4c8643ef63
b38cdb9b77e489f28f656e89964c04e65f9b326f
f2e797abd9ce6db53995085c6693ed16d278f185
ffb4d3b8ce043d3cb3e9b8a69619dc82797c68ce
b5e8a3bf825413ad8d03a14416ae7813c3123dea
396e8725a3d3232a6672c65f9c3829ec6ddbf3b6
d49cc72e92a72596571061622aacb3c5b5721200"
"testGetClustersAsAnonUser","TRUE","2","assertFalse","{
    com.google.gson.JsonElement jsonResponse;
    org.apache.ambari.funtest.server.ConnectionParams adminConnectionParams = createAdminConnectionParams();
    java.lang.String anonUserName = ""nothing"";
    java.lang.String anonUserPwd = ""nothing"";
    org.apache.ambari.funtest.server.utils.ClusterUtils.createUser(adminConnectionParams, clusterName, anonUserName, anonUserPwd, org.apache.ambari.funtest.server.AmbariUserRole.NONE);
    org.apache.ambari.funtest.server.ConnectionParams anonUserParams = createConnectionParams(anonUserName, anonUserPwd);
    jsonResponse = org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.cluster.GetAllClustersWebRequest(anonUserParams));
    org.junit.Assert.assertFalse(jsonResponse.isJsonNull());
    jsonResponse = org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.user.DeleteUserWebRequest(adminConnectionParams, anonUserName));
    org.apache.ambari.funtest.server.tests.RoleBasedAccessControlBasicTest.LOG.info(jsonResponse);
}","testGetClustersAsAnonUser()","Test","ambari/ambari-funtest/src/test/java/org/apache/ambari/funtest/server/tests/RoleBasedAccessControlBasicTest.java","39bda71b43c5572f057fd6c3cb6cbd91fcefa698
3c28378fa4e6f4299e7df01c47359b4c8643ef63
b38cdb9b77e489f28f656e89964c04e65f9b326f
f2e797abd9ce6db53995085c6693ed16d278f185"
"testAddClusterConfigAsAnonUser","TRUE","2","assertEquals","{
    org.apache.ambari.funtest.server.ConnectionParams adminConnectionParams = createAdminConnectionParams();
    java.lang.String anonUserName = ""nothing"";
    java.lang.String anonUserPwd = ""nothing"";
    org.apache.ambari.funtest.server.utils.ClusterUtils.createUser(adminConnectionParams, clusterName, anonUserName, anonUserPwd, org.apache.ambari.funtest.server.AmbariUserRole.NONE);
    java.lang.String configType = ""test-hadoop-env"";
    java.lang.String configTag = ""version1"";
    org.apache.ambari.funtest.server.ClusterConfigParams configParams = new org.apache.ambari.funtest.server.ClusterConfigParams();
    configParams.setClusterName(clusterName);
    configParams.setConfigType(configType);
    configParams.setConfigTag(configTag);
    configParams.setProperties(new java.util.HashMap<java.lang.String, java.lang.String>() {
        {
            put(""fs.default.name"", ""localhost:9995"");
        }
    });
    org.apache.ambari.funtest.server.ConnectionParams anonUserParams = createConnectionParams(anonUserName, anonUserPwd);
    org.apache.ambari.funtest.server.WebRequest webRequest = new org.apache.ambari.funtest.server.api.cluster.CreateConfigurationWebRequest(anonUserParams, configParams);
    org.apache.ambari.funtest.server.WebResponse webResponse = webRequest.getResponse();
    org.junit.Assert.assertEquals(HttpStatus.SC_FORBIDDEN, webResponse.getStatusCode());
    com.google.gson.JsonElement jsonResponse = org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.user.DeleteUserWebRequest(adminConnectionParams, ""nothing""));
    org.apache.ambari.funtest.server.tests.RoleBasedAccessControlBasicTest.LOG.info(jsonResponse);
}","testAddClusterConfigAsAnonUser()","Test","ambari/ambari-funtest/src/test/java/org/apache/ambari/funtest/server/tests/RoleBasedAccessControlBasicTest.java","39bda71b43c5572f057fd6c3cb6cbd91fcefa698
3c28378fa4e6f4299e7df01c47359b4c8643ef63
b38cdb9b77e489f28f656e89964c04e65f9b326f
f2e797abd9ce6db53995085c6693ed16d278f185"
"testAddClusterConfigAsClusterAdmin","TRUE","2","assertEquals","{
    org.apache.ambari.funtest.server.ConnectionParams adminConnectionParams = createAdminConnectionParams();
    java.lang.String clusterAdminName = ""clusterAdmin"";
    java.lang.String clusterAdminPwd = ""clusterAdmin"";
    org.apache.ambari.funtest.server.utils.ClusterUtils.createUserClusterAdministrator(adminConnectionParams, clusterName, clusterAdminName, clusterAdminPwd);
    java.lang.String configType = ""test-hadoop-env"";
    java.lang.String configTag = ""version1"";
    org.apache.ambari.funtest.server.ClusterConfigParams configParams = new org.apache.ambari.funtest.server.ClusterConfigParams();
    configParams.setClusterName(clusterName);
    configParams.setConfigType(configType);
    configParams.setConfigTag(configTag);
    configParams.setProperties(new java.util.HashMap<java.lang.String, java.lang.String>() {
        {
            put(""fs.default.name"", ""localhost:9995"");
        }
    });
    org.apache.ambari.funtest.server.ConnectionParams userConnectionParams = createConnectionParams(clusterAdminName, clusterAdminPwd);
    org.apache.ambari.funtest.server.WebRequest webRequest = new org.apache.ambari.funtest.server.api.cluster.CreateConfigurationWebRequest(userConnectionParams, configParams);
    org.apache.ambari.funtest.server.WebResponse webResponse = webRequest.getResponse();
    org.junit.Assert.assertEquals(HttpStatus.SC_CREATED, webResponse.getStatusCode());
    org.apache.ambari.funtest.server.utils.RestApiUtils.executeRequest(new org.apache.ambari.funtest.server.api.user.DeleteUserWebRequest(adminConnectionParams, clusterAdminName));
}","testAddClusterConfigAsClusterAdmin()","Test","ambari/ambari-funtest/src/test/java/org/apache/ambari/funtest/server/tests/RoleBasedAccessControlBasicTest.java","39bda71b43c5572f057fd6c3cb6cbd91fcefa698
3c28378fa4e6f4299e7df01c47359b4c8643ef63
b38cdb9b77e489f28f656e89964c04e65f9b326f
f2e797abd9ce6db53995085c6693ed16d278f185"
"setupTest","FALSE","0","None","{
    if (!org.apache.ambari.funtest.server.tests.ServerTestBase.isInitialized) {
        java.util.Properties properties = org.apache.ambari.funtest.server.tests.ServerTestBase.readConfigFile();
        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_PERSISTENCE_TYPE.getKey(), ""remote"");
        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_URL.getKey(), org.apache.ambari.server.configuration.Configuration.JDBC_IN_MEMORY_URL);
        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_JDBC_DRIVER.getKey(), org.apache.ambari.server.configuration.Configuration.JDBC_IN_MEMORY_DRIVER);
        properties.setProperty(org.apache.ambari.server.configuration.Configuration.OS_VERSION.getKey(), ""centos7"");
        properties.setProperty(org.apache.ambari.server.configuration.Configuration.AGENT_USE_SSL.getKey(), ""false"");
        properties.setProperty(org.apache.ambari.server.configuration.Configuration.CLIENT_API_PORT.getKey(), java.lang.Integer.toString(org.apache.ambari.funtest.server.tests.ServerTestBase.serverPort));
        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SRVR_ONE_WAY_SSL_PORT.getKey(), java.lang.Integer.toString(org.apache.ambari.funtest.server.tests.ServerTestBase.serverAgentPort));
        java.lang.String tmpDir = java.lang.System.getProperty(""java.io.tmpdir"");
        properties.setProperty(org.apache.ambari.server.configuration.Configuration.SRVR_KSTR_DIR.getKey(), tmpDir);
        org.apache.ambari.server.controller.ControllerModule testModule = new org.apache.ambari.server.controller.ControllerModule(properties);
        org.apache.ambari.funtest.server.tests.ServerTestBase.injector = com.google.inject.Guice.createInjector(testModule, new org.apache.ambari.server.audit.AuditLoggerModule(), new org.apache.ambari.server.ldap.LdapModule());
        org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(com.google.inject.persist.PersistService.class).start();
        org.apache.ambari.funtest.server.tests.ServerTestBase.initDB();
        org.apache.ambari.funtest.server.tests.ServerTestBase.server = org.apache.ambari.funtest.server.tests.ServerTestBase.injector.getInstance(org.apache.ambari.funtest.server.LocalAmbariServer.class);
        org.apache.ambari.funtest.server.tests.ServerTestBase.serverThread = new java.lang.Thread(org.apache.ambari.funtest.server.tests.ServerTestBase.server);
        org.apache.ambari.funtest.server.tests.ServerTestBase.serverThread.start();
        org.apache.ambari.funtest.server.tests.ServerTestBase.waitForServer();
        org.apache.ambari.funtest.server.tests.ServerTestBase.isInitialized = true;
    }
}","setupTest()","BeforeClass","ambari/ambari-funtest/src/test/java/org/apache/ambari/funtest/server/tests/ServerTestBase.java","39bda71b43c5572f057fd6c3cb6cbd91fcefa698
9911267f0727c99f5355a60df06584023dd49983
b38cdb9b77e489f28f656e89964c04e65f9b326f
f2e797abd9ce6db53995085c6693ed16d278f185
ffb4d3b8ce043d3cb3e9b8a69619dc82797c68ce
b5e8a3bf825413ad8d03a14416ae7813c3123dea"
"mysql","FALSE","0","None","{
    org.apache.ambari.funtest.server.tests.db.DDLCreateIT.testSchemaCreate(() -> new org.testcontainers.containers.MariaDBContainer(""mariadb:10.2"").withConfigurationOverride(null).withInitScript(""Ambari-DDL-MySQL-CREATE.sql""));
    org.apache.ambari.funtest.server.tests.db.DDLCreateIT.testSchemaCreate(() -> new org.testcontainers.containers.MySQLContainer(""mysql:5.7"").withConfigurationOverride(null).withInitScript(""Ambari-DDL-MySQL-CREATE.sql""));
}","mysql()","Test","ambari/ambari-funtest/src/test/java/org/apache/ambari/funtest/server/tests/db/DDLCreateIT.java","3c28378fa4e6f4299e7df01c47359b4c8643ef63"
"postgres","FALSE","0","None","{
    org.apache.ambari.funtest.server.tests.db.DDLCreateIT.testSchemaCreate(() -> new org.testcontainers.containers.PostgreSQLContainer(""postgres:9.6"").withInitScript(""Ambari-DDL-Postgres-CREATE.sql""));
    org.apache.ambari.funtest.server.tests.db.DDLCreateIT.testSchemaCreate(() -> new org.testcontainers.containers.PostgreSQLContainer(""postgres:10"").withInitScript(""Ambari-DDL-Postgres-CREATE.sql""));
}","postgres()","Test","ambari/ambari-funtest/src/test/java/org/apache/ambari/funtest/server/tests/db/DDLCreateIT.java","3c28378fa4e6f4299e7df01c47359b4c8643ef63"
"testGetResourceProvider","TRUE","2","assertEquals","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    clusterDefinition.setServiceState(""HDFS"", ""INSTALLED"");
    for (org.apache.ambari.msi.Resource.Type type : org.apache.ambari.msi.AbstractResourceProviderTest.types) {
        org.apache.ambari.msi.ResourceProvider provider = org.apache.ambari.msi.AbstractResourceProvider.getResourceProvider(type, clusterDefinition);
        org.apache.ambari.msi.Set<org.apache.ambari.msi.Resource> resources = provider.getResources(org.apache.ambari.msi.PropertyHelper.getReadRequest(), null);
        for (org.apache.ambari.msi.Resource resource : resources) {
            org.junit.Assert.assertEquals(type, resource.getType());
        }
    }
}","testGetResourceProvider()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/AbstractResourceProviderTest.java","a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
227b47926322e8e7bef2ae454bd7007cc3ec77e5
c417961570d98f05709fce07526a4b74cfaf8d64
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetServices","TRUE","8","assertTrue","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    java.util.Set<java.lang.String> services = clusterDefinition.getServices();
    org.junit.Assert.assertTrue(services.contains(""HDFS""));
    org.junit.Assert.assertTrue(services.contains(""FLUME""));
    org.junit.Assert.assertTrue(services.contains(""OOZIE""));
    org.junit.Assert.assertTrue(services.contains(""MAPREDUCE""));
    org.junit.Assert.assertTrue(services.contains(""HBASE""));
    org.junit.Assert.assertTrue(services.contains(""ZOOKEEPER""));
    org.junit.Assert.assertTrue(services.contains(""HIVE""));
}","testGetServices()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetHosts","TRUE","14","assertTrue","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    java.util.Set<java.lang.String> hosts = clusterDefinition.getHosts();
    org.junit.Assert.assertTrue(hosts.contains(""NAMENODE_MASTER.acme.com""));
    org.junit.Assert.assertTrue(hosts.contains(""SECONDARY_NAMENODE_MASTER.acme.com""));
    org.junit.Assert.assertTrue(hosts.contains(""FLUME_SERVICE1.acme.com""));
    org.junit.Assert.assertTrue(hosts.contains(""FLUME_SERVICE2.acme.com""));
    org.junit.Assert.assertTrue(hosts.contains(""FLUME_SERVICE3.acme.com""));
    org.junit.Assert.assertTrue(hosts.contains(""HBASE_MASTER.acme.com""));
    org.junit.Assert.assertTrue(hosts.contains(""HIVE_SERVER_MASTER.acme.com""));
    org.junit.Assert.assertTrue(hosts.contains(""JOBTRACKER_MASTER.acme.com""));
    org.junit.Assert.assertTrue(hosts.contains(""OOZIE_SERVER_MASTER.acme.com""));
    org.junit.Assert.assertTrue(hosts.contains(""slave1.acme.com""));
    org.junit.Assert.assertTrue(hosts.contains(""slave2.acme.com""));
    org.junit.Assert.assertTrue(hosts.contains(""slave3.acme.com""));
    org.junit.Assert.assertTrue(hosts.contains(""WEBHCAT_MASTER.acme.com""));
}","testGetHosts()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetComponents","TRUE","21","assertTrue","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    java.util.Set<java.lang.String> components = clusterDefinition.getComponents(""HDFS"");
    org.junit.Assert.assertTrue(components.contains(""NAMENODE""));
    org.junit.Assert.assertTrue(components.contains(""SECONDARY_NAMENODE""));
    org.junit.Assert.assertTrue(components.contains(""DATANODE""));
    components = clusterDefinition.getComponents(""MAPREDUCE"");
    org.junit.Assert.assertTrue(components.contains(""JOBTRACKER""));
    org.junit.Assert.assertTrue(components.contains(""TASKTRACKER""));
    components = clusterDefinition.getComponents(""FLUME"");
    org.junit.Assert.assertTrue(components.contains(""FLUME_SERVER""));
    components = clusterDefinition.getComponents(""OOZIE"");
    org.junit.Assert.assertTrue(components.contains(""OOZIE_SERVER""));
    components = clusterDefinition.getComponents(""HBASE"");
    org.junit.Assert.assertTrue(components.contains(""HBASE_MASTER""));
    org.junit.Assert.assertTrue(components.contains(""HBASE_REGIONSERVER""));
    components = clusterDefinition.getComponents(""ZOOKEEPER"");
    org.junit.Assert.assertTrue(components.contains(""ZOOKEEPER_SERVER""));
    components = clusterDefinition.getComponents(""HIVE"");
    org.junit.Assert.assertTrue(components.contains(""HIVE_SERVER""));
    clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(""clusterproperties_HDP2_HA.txt"", ""myCluster"", ""HDP-2.0.6""), new org.apache.ambari.scom.TestHostInfoProvider());
    components = clusterDefinition.getComponents(""HDFS"");
    org.junit.Assert.assertTrue(components.contains(""NAMENODE""));
    org.junit.Assert.assertTrue(components.contains(""SECONDARY_NAMENODE""));
    org.junit.Assert.assertTrue(components.contains(""DATANODE""));
    org.junit.Assert.assertTrue(components.contains(""ZKFC""));
    org.junit.Assert.assertTrue(components.contains(""JOURNALNODE""));
    clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(""clusterproperties_HDP21_HA.txt"", ""myCluster"", ""HDP-2.1.2""), new org.apache.ambari.scom.TestHostInfoProvider());
    components = clusterDefinition.getComponents(""HDFS"");
    org.junit.Assert.assertTrue(components.contains(""NAMENODE""));
    org.junit.Assert.assertTrue(components.contains(""ZKFC""));
    org.junit.Assert.assertTrue(components.contains(""JOURNALNODE""));
    components = clusterDefinition.getComponents(""YARN"");
    org.junit.Assert.assertTrue(components.contains(""RESOURCEMANAGER""));
}","testGetComponents()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetHostComponents","TRUE","20","assertTrue
assertFalse","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    java.util.Set<java.lang.String> hostComponents = clusterDefinition.getHostComponents(""HDFS"", ""NAMENODE_MASTER.acme.com"");
    org.junit.Assert.assertTrue(hostComponents.contains(""NAMENODE""));
    hostComponents = clusterDefinition.getHostComponents(""HDFS"", ""slave1.acme.com"");
    org.junit.Assert.assertTrue(hostComponents.contains(""DATANODE""));
    hostComponents = clusterDefinition.getHostComponents(""HDFS"", ""slave2.acme.com"");
    org.junit.Assert.assertTrue(hostComponents.contains(""DATANODE""));
    clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(""clusterproperties_HDP2_HA.txt"", ""myCluster"", ""HDP-2.0.6""), new org.apache.ambari.scom.TestHostInfoProvider());
    hostComponents = clusterDefinition.getHostComponents(""HDFS"", ""WINHDP-1"");
    org.junit.Assert.assertTrue(hostComponents.contains(""NAMENODE""));
    org.junit.Assert.assertTrue(hostComponents.contains(""JOURNALNODE""));
    org.junit.Assert.assertTrue(hostComponents.contains(""ZKFC""));
    org.junit.Assert.assertFalse(hostComponents.contains(""DATANODE""));
    org.junit.Assert.assertFalse(hostComponents.contains(""SECONDARY_NAMENODE""));
    hostComponents = clusterDefinition.getHostComponents(""HDFS"", ""WINHDP-2"");
    org.junit.Assert.assertTrue(hostComponents.contains(""NAMENODE""));
    org.junit.Assert.assertTrue(hostComponents.contains(""JOURNALNODE""));
    org.junit.Assert.assertTrue(hostComponents.contains(""ZKFC""));
    org.junit.Assert.assertTrue(hostComponents.contains(""DATANODE""));
    org.junit.Assert.assertTrue(hostComponents.contains(""SECONDARY_NAMENODE""));
    clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(""clusterproperties_HDP21_HA.txt"", ""myCluster"", ""HDP-2.1.2""), new org.apache.ambari.scom.TestHostInfoProvider());
    hostComponents = clusterDefinition.getHostComponents(""YARN"", ""WINHDP-1"");
    org.junit.Assert.assertTrue(hostComponents.contains(""RESOURCEMANAGER""));
    hostComponents = clusterDefinition.getHostComponents(""HDFS"", ""WINHDP-1"");
    org.junit.Assert.assertTrue(hostComponents.contains(""NAMENODE""));
    org.junit.Assert.assertTrue(hostComponents.contains(""JOURNALNODE""));
    hostComponents = clusterDefinition.getHostComponents(""YARN"", ""WINHDP-2"");
    org.junit.Assert.assertTrue(hostComponents.contains(""RESOURCEMANAGER""));
    hostComponents = clusterDefinition.getHostComponents(""HDFS"", ""WINHDP-2"");
    org.junit.Assert.assertTrue(hostComponents.contains(""NAMENODE""));
    org.junit.Assert.assertTrue(hostComponents.contains(""JOURNALNODE""));
}","testGetHostComponents()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetHostState","TRUE","5","assertEquals","{
    org.apache.ambari.msi.TestStateProvider stateProvider = new org.apache.ambari.msi.TestStateProvider();
    org.apache.ambari.scom.TestClusterDefinitionProvider definitionProvider = new org.apache.ambari.scom.TestClusterDefinitionProvider();
    org.apache.ambari.scom.TestHostInfoProvider hostInfoProvider = new org.apache.ambari.scom.TestHostInfoProvider();
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(stateProvider, definitionProvider, hostInfoProvider);
    org.junit.Assert.assertEquals(""HEALTHY"", clusterDefinition.getHostState(""NAMENODE_MASTER.acme.com""));
    stateProvider.setState(org.apache.ambari.msi.StateProvider.State.Stopped);
    org.junit.Assert.assertEquals(""UNHEALTHY"", clusterDefinition.getHostState(""NAMENODE_MASTER.acme.com""));
    stateProvider.setState(org.apache.ambari.msi.StateProvider.State.Paused);
    org.junit.Assert.assertEquals(""UNHEALTHY"", clusterDefinition.getHostState(""NAMENODE_MASTER.acme.com""));
    stateProvider.setState(org.apache.ambari.msi.StateProvider.State.Unknown);
    org.junit.Assert.assertEquals(""UNHEALTHY"", clusterDefinition.getHostState(""NAMENODE_MASTER.acme.com""));
}","testGetHostState()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testSetServiceState_IfStateAlreadySetToDesired","TRUE","2","assertEquals","{
    org.apache.ambari.msi.StateProvider mockStateProvider = createStrictMock(org.apache.ambari.msi.StateProvider.class);
    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider = createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);
    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider = createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);
    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider = new org.apache.ambari.scom.TestClusterDefinitionProvider();
    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(org.apache.ambari.msi.StateProvider.State.Running).times(5);
    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);
    org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(""HDFS"", ""STARTED""));
    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
}","testSetServiceState_IfStateAlreadySetToDesired()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testSetServiceState_IfStateUnknown","TRUE","2","assertEquals","{
    org.apache.ambari.msi.StateProvider mockStateProvider = createStrictMock(org.apache.ambari.msi.StateProvider.class);
    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider = createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);
    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider = createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);
    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider = new org.apache.ambari.scom.TestClusterDefinitionProvider();
    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);
    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);
    org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(""HDFS"", ""UNKNOWN""));
    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
}","testSetServiceState_IfStateUnknown()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testSetServiceState_FromInstalledToStarted","TRUE","2","assertEquals","{
    org.apache.ambari.msi.StateProvider mockStateProvider = createStrictMock(org.apache.ambari.msi.StateProvider.class);
    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider = createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);
    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider = createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);
    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider = new org.apache.ambari.scom.TestClusterDefinitionProvider();
    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(org.apache.ambari.msi.StateProvider.State.Stopped);
    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(org.apache.ambari.msi.StateProvider.State.Stopped);
    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(org.apache.ambari.msi.StateProvider.State.Running))).andReturn(null);
    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(org.apache.ambari.msi.StateProvider.State.Stopped);
    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(org.apache.ambari.msi.StateProvider.State.Running))).andReturn(null);
    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(org.apache.ambari.msi.StateProvider.State.Stopped);
    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(org.apache.ambari.msi.StateProvider.State.Running))).andReturn(null);
    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(org.apache.ambari.msi.StateProvider.State.Stopped);
    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(org.apache.ambari.msi.StateProvider.State.Running))).andReturn(null);
    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(org.apache.ambari.msi.StateProvider.State.Stopped);
    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(org.apache.ambari.msi.StateProvider.State.Running))).andReturn(null);
    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);
    org.junit.Assert.assertEquals(1, clusterDefinition.setServiceState(""HDFS"", ""STARTED""));
    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
}","testSetServiceState_FromInstalledToStarted()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testSetServiceStateFromInstalledToStartedWhenOneOfTheComponentsAlreadyStarted","TRUE","2","assertEquals","{
    org.apache.ambari.msi.StateProvider mockStateProvider = createStrictMock(org.apache.ambari.msi.StateProvider.class);
    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider = createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);
    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider = createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);
    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider = new org.apache.ambari.scom.TestClusterDefinitionProvider();
    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(org.apache.ambari.msi.StateProvider.State.Stopped);
    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(org.apache.ambari.msi.StateProvider.State.Running).times(4);
    expect(mockStateProvider.getRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class))).andReturn(org.apache.ambari.msi.StateProvider.State.Stopped);
    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(org.apache.ambari.msi.StateProvider.State.Running))).andReturn(null);
    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);
    org.junit.Assert.assertEquals(1, clusterDefinition.setServiceState(""HDFS"", ""STARTED""));
    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
}","testSetServiceStateFromInstalledToStartedWhenOneOfTheComponentsAlreadyStarted()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testSetHostComponentState_IfStateUnknown","TRUE","2","assertEquals","{
    org.apache.ambari.msi.StateProvider mockStateProvider = createStrictMock(org.apache.ambari.msi.StateProvider.class);
    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider = createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);
    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider = createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);
    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider = new org.apache.ambari.scom.TestClusterDefinitionProvider();
    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);
    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);
    org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(""hostName"", ""DATANODE"", ""UNKNOWN""));
    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
}","testSetHostComponentState_IfStateUnknown()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testSetHostComponentState_IfStateAlreadySetToDesired","TRUE","2","assertEquals","{
    org.apache.ambari.msi.StateProvider mockStateProvider = createStrictMock(org.apache.ambari.msi.StateProvider.class);
    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider = createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);
    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider = createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);
    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider = new org.apache.ambari.scom.TestClusterDefinitionProvider();
    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockStateProvider.getRunningState(isA(java.lang.String.class), isA(java.lang.String.class))).andReturn(org.apache.ambari.msi.StateProvider.State.Running);
    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);
    org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(""hostName"", ""DATANODE"", ""STARTED""));
    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
}","testSetHostComponentState_IfStateAlreadySetToDesired()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testSetHostComponentState_FromInstalledToStarted","TRUE","2","assertEquals","{
    org.apache.ambari.msi.StateProvider mockStateProvider = createStrictMock(org.apache.ambari.msi.StateProvider.class);
    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider = createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);
    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider = createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);
    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider = new org.apache.ambari.scom.TestClusterDefinitionProvider();
    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockStateProvider.getRunningState(isA(java.lang.String.class), isA(java.lang.String.class))).andReturn(org.apache.ambari.msi.StateProvider.State.Stopped);
    expect(mockStateProvider.setRunningState(anyObject(java.lang.String.class), anyObject(java.lang.String.class), eq(org.apache.ambari.msi.StateProvider.State.Running))).andReturn(null);
    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);
    org.junit.Assert.assertEquals(1, clusterDefinition.setHostComponentState(""hostName"", ""DATANODE"", ""STARTED""));
    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
}","testSetHostComponentState_FromInstalledToStarted()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testHDP2ServicesAndComponents","TRUE","10","assertFalse
assertTrue","{
    org.apache.ambari.msi.StateProvider mockStateProvider = createStrictMock(org.apache.ambari.msi.StateProvider.class);
    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider = createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);
    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider = createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);
    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider = new org.apache.ambari.scom.TestClusterDefinitionProvider(""clusterproperties_HDP2.txt"", ""myCluster"", ""HDP-2.0.6"");
    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);
    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);
    org.junit.Assert.assertFalse(clusterDefinition.getServices().contains(""MAPREDUCE""));
    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(""PIG""));
    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(""SQOOP""));
    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(""YARN""));
    org.junit.Assert.assertTrue(clusterDefinition.getServices().contains(""MAPREDUCE2""));
    org.junit.Assert.assertTrue(clusterDefinition.getComponents(""MAPREDUCE2"").contains(""MAPREDUCE2_CLIENT""));
    org.junit.Assert.assertTrue(clusterDefinition.getComponents(""YARN"").contains(""NODEMANAGER""));
    org.junit.Assert.assertTrue(clusterDefinition.getComponents(""YARN"").contains(""RESOURCEMANAGER""));
    org.junit.Assert.assertTrue(clusterDefinition.getComponents(""YARN"").contains(""YARN_CLIENT""));
    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
}","testHDP2ServicesAndComponents()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testSetServiceState_IfServiceIsClientOnly","TRUE","2","assertEquals","{
    org.apache.ambari.msi.StateProvider mockStateProvider = createStrictMock(org.apache.ambari.msi.StateProvider.class);
    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider = createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);
    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider = createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);
    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider = new org.apache.ambari.scom.TestClusterDefinitionProvider();
    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);
    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);
    org.junit.Assert.assertEquals(-1, clusterDefinition.setServiceState(""PIG"", ""STARTED""));
    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
}","testSetServiceState_IfServiceIsClientOnly()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testSetHostComponentState_IfHostComponentIsClientOnly","TRUE","2","assertEquals","{
    org.apache.ambari.msi.StateProvider mockStateProvider = createStrictMock(org.apache.ambari.msi.StateProvider.class);
    org.apache.ambari.scom.ClusterDefinitionProvider mockClusterDefinitionProvider = createStrictMock(org.apache.ambari.scom.ClusterDefinitionProvider.class);
    org.apache.ambari.scom.HostInfoProvider mockHostInfoProvider = createStrictMock(org.apache.ambari.scom.HostInfoProvider.class);
    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider = new org.apache.ambari.scom.TestClusterDefinitionProvider();
    expect(mockClusterDefinitionProvider.getClusterName()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getVersionId()).andDelegateTo(testClusterDefinitionProvider);
    expect(mockClusterDefinitionProvider.getInputStream()).andDelegateTo(testClusterDefinitionProvider);
    replay(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(mockStateProvider, mockClusterDefinitionProvider, mockHostInfoProvider);
    org.junit.Assert.assertEquals(-1, clusterDefinition.setHostComponentState(""hostName"", ""SQOOP"", ""STARTED""));
    verify(mockClusterDefinitionProvider, mockHostInfoProvider, mockStateProvider);
}","testSetHostComponentState_IfHostComponentIsClientOnly()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetMajorStackVersion","TRUE","3","assertTrue","{
    org.apache.ambari.scom.TestClusterDefinitionProvider testClusterDefinitionProvider = new org.apache.ambari.scom.TestClusterDefinitionProvider(""clusterproperties_HDP2.txt"", ""myCluster"", ""HDP-2.0.6"");
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), testClusterDefinitionProvider, new org.apache.ambari.scom.TestHostInfoProvider());
    java.lang.Integer majorVersion = clusterDefinition.getMajorStackVersion();
    java.lang.Integer minorVersion = clusterDefinition.getMinorStackVersion();
    org.junit.Assert.assertTrue(2 == majorVersion);
    org.junit.Assert.assertTrue(0 == minorVersion);
}","testGetMajorStackVersion()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterDefinitionTest.java","601014ed8b047c676ece41016a3278c19703794f
dc917a9f275710f458d60f1552a749a3f52db3db
d5453695e19ff8b4aa7e1fd01318b7d8193f9699
8ae56643bc8d3a5f7c7228bf1772b4a965161402
16affea25e805322edaf377d144256c53250cd66
e7e67085e168aadd0909d5f65872802508dc7dc2
c4a778da041ee56d01ef2dc88fd7fcfebe2a0680
e41b89cbdd6be9935d223f501284f8d0a078909b
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetResources","TRUE","3","assertEquals","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ClusterProvider provider = new org.apache.ambari.msi.ClusterProvider(clusterDefinition);
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);
    junit.framework.Assert.assertEquals(1, resources.size());
    junit.framework.Assert.assertEquals(""myCluster"", resources.iterator().next().getPropertyValue(org.apache.ambari.msi.ClusterProvider.CLUSTER_NAME_PROPERTY_ID));
}","testGetResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
151a81276debc2cd96836f2393c2b2c1356f674e
625d482a5c4132f6d60c3188669d2ba96a7e9ded
ff096b56b547df4a43f57045d1e501ba4976adb3"
"testGetResourcesWithPredicate","TRUE","5","assertEquals
assertTrue","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ClusterProvider provider = new org.apache.ambari.msi.ClusterProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.ClusterProvider.CLUSTER_NAME_PROPERTY_ID).equals(""myCluster"").toPredicate();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(1, resources.size());
    org.apache.ambari.server.controller.spi.Resource next = resources.iterator().next();
    junit.framework.Assert.assertEquals(""myCluster"", next.getPropertyValue(org.apache.ambari.msi.ClusterProvider.CLUSTER_NAME_PROPERTY_ID));
    junit.framework.Assert.assertEquals(""HDP-1.2.9"", next.getPropertyValue(org.apache.ambari.msi.ClusterProvider.CLUSTER_VERSION_PROPERTY_ID));
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.ClusterProvider.CLUSTER_NAME_PROPERTY_ID).equals(""non-existent Cluster"").toPredicate();
    resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertTrue(resources.isEmpty());
}","testGetResourcesWithPredicate()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
151a81276debc2cd96836f2393c2b2c1356f674e
625d482a5c4132f6d60c3188669d2ba96a7e9ded
ff096b56b547df4a43f57045d1e501ba4976adb3"
"testCreateResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ClusterProvider provider = new org.apache.ambari.msi.ClusterProvider(clusterDefinition);
    try {
        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());
        junit.framework.Assert.fail(""Expected UnsupportedOperationException."");
    } catch (java.lang.UnsupportedOperationException e) {
    }
}","testCreateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
151a81276debc2cd96836f2393c2b2c1356f674e
625d482a5c4132f6d60c3188669d2ba96a7e9ded
ff096b56b547df4a43f57045d1e501ba4976adb3"
"testUpdateResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ClusterProvider provider = new org.apache.ambari.msi.ClusterProvider(clusterDefinition);
    provider.updateResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(new java.util.HashMap<java.lang.String, java.lang.Object>(), null), null);
}","testUpdateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
151a81276debc2cd96836f2393c2b2c1356f674e
625d482a5c4132f6d60c3188669d2ba96a7e9ded
ff096b56b547df4a43f57045d1e501ba4976adb3"
"testDeleteResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ClusterProvider provider = new org.apache.ambari.msi.ClusterProvider(clusterDefinition);
    try {
        provider.deleteResources(null);
        junit.framework.Assert.fail(""Expected UnsupportedOperationException."");
    } catch (java.lang.UnsupportedOperationException e) {
    }
}","testDeleteResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ClusterProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
151a81276debc2cd96836f2393c2b2c1356f674e
625d482a5c4132f6d60c3188669d2ba96a7e9ded
ff096b56b547df4a43f57045d1e501ba4976adb3"
"testGetResources","TRUE","2","assertEquals","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ComponentProvider provider = new org.apache.ambari.msi.ComponentProvider(clusterDefinition);
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);
    junit.framework.Assert.assertEquals(15, resources.size());
}","testGetResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ComponentProviderTest.java","18ab92c9c645353644402a4d51f31d28c9fa12ea
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetResourcesWithPredicate","TRUE","4","assertEquals
assertTrue","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ComponentProvider provider = new org.apache.ambari.msi.ComponentProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(""TASKTRACKER"").toPredicate();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(1, resources.size());
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(""TASKTRACKER"").or().property(org.apache.ambari.msi.ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(""DATANODE"").toPredicate();
    resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(2, resources.size());
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(""BadComponent"").toPredicate();
    resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertTrue(resources.isEmpty());
}","testGetResourcesWithPredicate()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ComponentProviderTest.java","18ab92c9c645353644402a4d51f31d28c9fa12ea
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testCreateResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ComponentProvider provider = new org.apache.ambari.msi.ComponentProvider(clusterDefinition);
    try {
        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());
        junit.framework.Assert.fail(""Expected UnsupportedOperationException."");
    } catch (java.lang.UnsupportedOperationException e) {
    }
}","testCreateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ComponentProviderTest.java","18ab92c9c645353644402a4d51f31d28c9fa12ea
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testUpdateResources","TRUE","4","assertEquals","{
    org.apache.ambari.msi.TestStateProvider stateProvider = new org.apache.ambari.msi.TestStateProvider();
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ComponentProvider provider = new org.apache.ambari.msi.ComponentProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.ComponentProvider.COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(""TASKTRACKER"").toPredicate();
    java.util.HashMap<java.lang.String, java.lang.Object> properties = new java.util.HashMap<java.lang.String, java.lang.Object>();
    properties.put(org.apache.ambari.msi.ComponentProvider.COMPONENT_STATE_PROPERTY_ID, ""STARTED"");
    org.apache.ambari.server.controller.spi.Request updateRequest = org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);
    provider.updateResources(updateRequest, predicate);
    junit.framework.Assert.assertEquals(org.apache.ambari.msi.StateProvider.State.Running, stateProvider.getState());
    properties.put(org.apache.ambari.msi.ComponentProvider.COMPONENT_STATE_PROPERTY_ID, ""INSTALLED"");
    updateRequest = org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);
    provider.updateResources(updateRequest, predicate);
    junit.framework.Assert.assertEquals(org.apache.ambari.msi.StateProvider.State.Stopped, stateProvider.getState());
    properties.put(org.apache.ambari.msi.ComponentProvider.COMPONENT_STATE_PROPERTY_ID, ""STARTED"");
    updateRequest = org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);
    provider.updateResources(updateRequest, predicate);
    junit.framework.Assert.assertEquals(org.apache.ambari.msi.StateProvider.State.Running, stateProvider.getState());
}","testUpdateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ComponentProviderTest.java","18ab92c9c645353644402a4d51f31d28c9fa12ea
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testDeleteResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ComponentProvider provider = new org.apache.ambari.msi.ComponentProvider(clusterDefinition);
    try {
        provider.deleteResources(null);
        junit.framework.Assert.fail(""Expected UnsupportedOperationException."");
    } catch (java.lang.UnsupportedOperationException e) {
    }
}","testDeleteResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ComponentProviderTest.java","18ab92c9c645353644402a4d51f31d28c9fa12ea
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testConfigurationProvider_init_method_file_doesnt_exists","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinitionMock = createStrictMock(org.apache.ambari.msi.ClusterDefinition.class);
    org.powermock.api.easymock.PowerMock.suppress(org.powermock.api.easymock.PowerMock.methods(org.apache.ambari.msi.ConfigurationProvider.class, ""initConfigurationResources""));
    com.thoughtworks.xstream.io.xml.StaxDriver staxDriver = org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.io.xml.StaxDriver.class);
    com.thoughtworks.xstream.XStream xstream = org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.XStream.class);
    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.io.xml.StaxDriver.class).andReturn(staxDriver);
    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.XStream.class, staxDriver).andReturn(xstream);
    xstream.alias(""configuration"", java.util.Map.class);
    expectLastCall();
    xstream.registerConverter(anyObject(org.apache.ambari.msi.ConfigurationProvider.ScomConfigConverter.class));
    expectLastCall();
    org.powermock.api.easymock.PowerMock.replay(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class);
    replay(clusterDefinitionMock);
    new org.apache.ambari.msi.ConfigurationProvider(clusterDefinitionMock);
    org.powermock.api.easymock.PowerMock.verify(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class);
    verify(clusterDefinitionMock);
}","testConfigurationProvider_init_method_file_doesnt_exists()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ConfigurationProviderTest.java","227b47926322e8e7bef2ae454bd7007cc3ec77e5"
"testConfigurationProvider_init_method_file_exists","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinitionMock = createStrictMock(org.apache.ambari.msi.ClusterDefinition.class);
    org.powermock.api.easymock.PowerMock.suppress(org.powermock.api.easymock.PowerMock.methods(org.apache.ambari.msi.ConfigurationProvider.class, ""initConfigurationResources""));
    com.thoughtworks.xstream.io.xml.StaxDriver staxDriver = org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.io.xml.StaxDriver.class);
    com.thoughtworks.xstream.XStream xstream = org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.XStream.class);
    org.powermock.api.easymock.PowerMock.mockStatic(java.lang.ClassLoader.class);
    java.io.InputStream mockInputStream = createMock(java.io.InputStream.class);
    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.io.xml.StaxDriver.class).andReturn(staxDriver);
    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.XStream.class, staxDriver).andReturn(xstream);
    xstream.alias(""configuration"", java.util.Map.class);
    expectLastCall();
    xstream.registerConverter(anyObject(org.apache.ambari.msi.ConfigurationProvider.ScomConfigConverter.class));
    expectLastCall();
    expect(java.lang.ClassLoader.getSystemResourceAsStream(anyObject(java.lang.String.class))).andReturn(mockInputStream).times(5);
    expect(xstream.fromXML(mockInputStream)).andReturn(new java.util.HashMap<java.lang.String, java.lang.String>()).times(5);
    org.powermock.api.easymock.PowerMock.replay(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class, java.lang.ClassLoader.class);
    replay(clusterDefinitionMock, mockInputStream);
    new org.apache.ambari.msi.ConfigurationProvider(clusterDefinitionMock);
    org.powermock.api.easymock.PowerMock.verify(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class, java.lang.ClassLoader.class);
    verify(clusterDefinitionMock, mockInputStream);
}","testConfigurationProvider_init_method_file_exists()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ConfigurationProviderTest.java","227b47926322e8e7bef2ae454bd7007cc3ec77e5"
"testConfigurationProvider_initConfigurationResources_method","TRUE","2","assertEquals","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinitionMock = createStrictMock(org.apache.ambari.msi.ClusterDefinition.class);
    com.thoughtworks.xstream.io.xml.StaxDriver staxDriver = org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.io.xml.StaxDriver.class);
    com.thoughtworks.xstream.XStream xstream = org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.XStream.class);
    org.powermock.api.easymock.PowerMock.mockStatic(java.lang.ClassLoader.class);
    java.io.InputStream mockInputStream = createMock(java.io.InputStream.class);
    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.io.xml.StaxDriver.class).andReturn(staxDriver);
    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.XStream.class, staxDriver).andReturn(xstream);
    xstream.alias(""configuration"", java.util.Map.class);
    expectLastCall();
    xstream.registerConverter(anyObject(org.apache.ambari.msi.ConfigurationProvider.ScomConfigConverter.class));
    expectLastCall();
    expect(java.lang.ClassLoader.getSystemResourceAsStream(anyObject(java.lang.String.class))).andReturn(mockInputStream).times(5);
    expect(xstream.fromXML(mockInputStream)).andReturn(new java.util.HashMap<java.lang.String, java.lang.String>() {
        {
            put(""property_key"", ""propery_value"");
        }
    }).times(5);
    expect(clusterDefinitionMock.getClusterName()).andReturn(""ambari"");
    org.powermock.api.easymock.PowerMock.replay(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class, java.lang.ClassLoader.class);
    replay(clusterDefinitionMock, mockInputStream);
    org.apache.ambari.msi.ConfigurationProvider configurationProvider = new org.apache.ambari.msi.ConfigurationProvider(clusterDefinitionMock);
    org.powermock.api.easymock.PowerMock.verify(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class, java.lang.ClassLoader.class);
    verify(clusterDefinitionMock, mockInputStream);
    org.junit.Assert.assertEquals(5, configurationProvider.getResources().size());
}","testConfigurationProvider_initConfigurationResources_method()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ConfigurationProviderTest.java","227b47926322e8e7bef2ae454bd7007cc3ec77e5"
"testGetResourcesWithPredicate","TRUE","3","assertNotNull
assertEquals","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinitionMock = createStrictMock(org.apache.ambari.msi.ClusterDefinition.class);
    com.thoughtworks.xstream.io.xml.StaxDriver staxDriver = org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.io.xml.StaxDriver.class);
    com.thoughtworks.xstream.XStream xstream = org.powermock.api.easymock.PowerMock.createStrictMock(com.thoughtworks.xstream.XStream.class);
    org.powermock.api.easymock.PowerMock.mockStatic(java.lang.ClassLoader.class);
    java.io.InputStream mockInputStream = createMock(java.io.InputStream.class);
    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.io.xml.StaxDriver.class).andReturn(staxDriver);
    org.powermock.api.easymock.PowerMock.expectNew(com.thoughtworks.xstream.XStream.class, staxDriver).andReturn(xstream);
    xstream.alias(""configuration"", java.util.Map.class);
    expectLastCall();
    xstream.registerConverter(anyObject(org.apache.ambari.msi.ConfigurationProvider.ScomConfigConverter.class));
    expectLastCall();
    expect(java.lang.ClassLoader.getSystemResourceAsStream(anyObject(java.lang.String.class))).andReturn(mockInputStream).times(5);
    expect(xstream.fromXML(mockInputStream)).andReturn(new java.util.HashMap<java.lang.String, java.lang.String>() {
        {
            put(""property_key"", ""propery_value"");
        }
    }).times(5);
    expect(clusterDefinitionMock.getClusterName()).andReturn(""ambari"");
    org.powermock.api.easymock.PowerMock.replay(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class, java.lang.ClassLoader.class);
    replay(clusterDefinitionMock, mockInputStream);
    org.apache.ambari.msi.ConfigurationProvider configurationProvider = new org.apache.ambari.msi.ConfigurationProvider(clusterDefinitionMock);
    org.powermock.api.easymock.PowerMock.verify(staxDriver, com.thoughtworks.xstream.io.xml.StaxDriver.class, xstream, com.thoughtworks.xstream.XStream.class, java.lang.ClassLoader.class);
    verify(clusterDefinitionMock, mockInputStream);
    org.apache.ambari.server.controller.spi.Predicate configPredicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.ConfigurationProvider.CONFIGURATION_CLUSTER_NAME_PROPERTY_ID).equals(""ambari"").and().property(org.apache.ambari.msi.ConfigurationProvider.CONFIGURATION_CONFIG_TYPE_PROPERTY_ID).equals(""yarn-site"").and().property(org.apache.ambari.msi.ConfigurationProvider.CONFIGURATION_CONFIG_TAG_PROPERTY_ID).equals(""version1"").toPredicate();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = configurationProvider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), configPredicate);
    org.junit.Assert.assertNotNull(resources);
    org.junit.Assert.assertEquals(1, resources.size());
}","testGetResourcesWithPredicate()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ConfigurationProviderTest.java","227b47926322e8e7bef2ae454bd7007cc3ec77e5"
"testGetResources","TRUE","2","assertEquals","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostComponentProvider provider = new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);
    junit.framework.Assert.assertEquals(25, resources.size());
}","testGetResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostComponentProviderTest.java","18ab92c9c645353644402a4d51f31d28c9fa12ea
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetResourcesWithPredicate","TRUE","3","assertEquals
assertTrue","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostComponentProvider provider = new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.HostComponentProvider.HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID).equals(""MAPREDUCE"").toPredicate();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(5, resources.size());
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.HostComponentProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID).equals(""UnknownHost"").toPredicate();
    resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertTrue(resources.isEmpty());
}","testGetResourcesWithPredicate()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostComponentProviderTest.java","18ab92c9c645353644402a4d51f31d28c9fa12ea
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetResourcesCheckState","TRUE","5","assertEquals","{
    org.apache.ambari.msi.TestStateProvider stateProvider = new org.apache.ambari.msi.TestStateProvider();
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostComponentProvider provider = new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.HostComponentProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(""HBASE_REGIONSERVER"").toPredicate();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(3, resources.size());
    for (org.apache.ambari.server.controller.spi.Resource resource : resources) {
        junit.framework.Assert.assertEquals(""STARTED"", resource.getPropertyValue(org.apache.ambari.msi.HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));
    }
    stateProvider.setHealthy(false);
    resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(3, resources.size());
    for (org.apache.ambari.server.controller.spi.Resource resource : resources) {
        junit.framework.Assert.assertEquals(""INSTALLED"", resource.getPropertyValue(org.apache.ambari.msi.HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));
    }
}","testGetResourcesCheckState()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostComponentProviderTest.java","18ab92c9c645353644402a4d51f31d28c9fa12ea
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetResourcesCheckStateFromCategory","TRUE","5","assertEquals","{
    org.apache.ambari.msi.TestStateProvider stateProvider = new org.apache.ambari.msi.TestStateProvider();
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostComponentProvider provider = new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.HostComponentProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(""HBASE_REGIONSERVER"").toPredicate();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(""HostRoles""), predicate);
    junit.framework.Assert.assertEquals(3, resources.size());
    for (org.apache.ambari.server.controller.spi.Resource resource : resources) {
        junit.framework.Assert.assertEquals(""STARTED"", resource.getPropertyValue(org.apache.ambari.msi.HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));
    }
    stateProvider.setHealthy(false);
    resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(3, resources.size());
    for (org.apache.ambari.server.controller.spi.Resource resource : resources) {
        junit.framework.Assert.assertEquals(""INSTALLED"", resource.getPropertyValue(org.apache.ambari.msi.HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID));
    }
}","testGetResourcesCheckStateFromCategory()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostComponentProviderTest.java","18ab92c9c645353644402a4d51f31d28c9fa12ea
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testCreateResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostComponentProvider provider = new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);
    try {
        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());
        junit.framework.Assert.fail(""Expected UnsupportedOperationException."");
    } catch (java.lang.UnsupportedOperationException e) {
    }
}","testCreateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostComponentProviderTest.java","18ab92c9c645353644402a4d51f31d28c9fa12ea
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testUpdateResources","TRUE","4","assertEquals","{
    org.apache.ambari.msi.TestStateProvider stateProvider = new org.apache.ambari.msi.TestStateProvider();
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostComponentProvider provider = new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.HostComponentProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(""HBASE_REGIONSERVER"").toPredicate();
    java.util.HashMap<java.lang.String, java.lang.Object> properties = new java.util.HashMap<java.lang.String, java.lang.Object>();
    properties.put(org.apache.ambari.msi.HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID, ""STARTED"");
    org.apache.ambari.server.controller.spi.Request updateRequest = org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);
    provider.updateResources(updateRequest, predicate);
    junit.framework.Assert.assertEquals(org.apache.ambari.msi.StateProvider.State.Running, stateProvider.getState());
    properties.put(org.apache.ambari.msi.HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID, ""INSTALLED"");
    updateRequest = org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);
    provider.updateResources(updateRequest, predicate);
    junit.framework.Assert.assertEquals(org.apache.ambari.msi.StateProvider.State.Stopped, stateProvider.getState());
    properties.put(org.apache.ambari.msi.HostComponentProvider.HOST_COMPONENT_STATE_PROPERTY_ID, ""STARTED"");
    updateRequest = org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);
    provider.updateResources(updateRequest, predicate);
    junit.framework.Assert.assertEquals(org.apache.ambari.msi.StateProvider.State.Running, stateProvider.getState());
}","testUpdateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostComponentProviderTest.java","18ab92c9c645353644402a4d51f31d28c9fa12ea
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testDeleteResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostComponentProvider provider = new org.apache.ambari.msi.HostComponentProvider(clusterDefinition);
    try {
        provider.deleteResources(null);
        junit.framework.Assert.fail(""Expected UnsupportedOperationException."");
    } catch (java.lang.UnsupportedOperationException e) {
    }
}","testDeleteResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostComponentProviderTest.java","18ab92c9c645353644402a4d51f31d28c9fa12ea
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetResources","TRUE","2","assertEquals","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostProvider provider = new org.apache.ambari.msi.HostProvider(clusterDefinition);
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);
    junit.framework.Assert.assertEquals(13, resources.size());
}","testGetResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b8caaf8c44fde9ee47c7704328876979e88e1f76
e0f0f4e96227f0a0cd8924ba120fb083c3c75b05
151a81276debc2cd96836f2393c2b2c1356f674e
ff096b56b547df4a43f57045d1e501ba4976adb3"
"testGetResourcesWithPredicate","TRUE","4","assertEquals
assertTrue","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostProvider provider = new org.apache.ambari.msi.HostProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.HostProvider.HOST_NAME_PROPERTY_ID).equals(""NAMENODE_MASTER.acme.com"").toPredicate();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(1, resources.size());
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.HostProvider.HOST_NAME_PROPERTY_ID).equals(""HBASE_MASTER.acme.com"").or().property(org.apache.ambari.msi.HostProvider.HOST_NAME_PROPERTY_ID).equals(""slave3.acme.com"").toPredicate();
    resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(2, resources.size());
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.HostProvider.HOST_NAME_PROPERTY_ID).equals(""unknownHost"").toPredicate();
    resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertTrue(resources.isEmpty());
}","testGetResourcesWithPredicate()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b8caaf8c44fde9ee47c7704328876979e88e1f76
e0f0f4e96227f0a0cd8924ba120fb083c3c75b05
151a81276debc2cd96836f2393c2b2c1356f674e
ff096b56b547df4a43f57045d1e501ba4976adb3"
"testGetResourcesHostIP","TRUE","3","assertEquals","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostProvider provider = new org.apache.ambari.msi.HostProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.HostProvider.HOST_NAME_PROPERTY_ID).equals(""NAMENODE_MASTER.acme.com"").toPredicate();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(1, resources.size());
    org.apache.ambari.server.controller.spi.Resource resource = resources.iterator().next();
    java.lang.String ip = ((java.lang.String) (resource.getPropertyValue(org.apache.ambari.msi.HostProvider.HOST_IP_PROPERTY_ID)));
    junit.framework.Assert.assertEquals(""127.0.0.1"", ip);
}","testGetResourcesHostIP()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b8caaf8c44fde9ee47c7704328876979e88e1f76
e0f0f4e96227f0a0cd8924ba120fb083c3c75b05
151a81276debc2cd96836f2393c2b2c1356f674e
ff096b56b547df4a43f57045d1e501ba4976adb3"
"testGetResourcesCheckState","TRUE","5","assertEquals","{
    org.apache.ambari.msi.TestStateProvider stateProvider = new org.apache.ambari.msi.TestStateProvider();
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostProvider provider = new org.apache.ambari.msi.HostProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.HostProvider.HOST_NAME_PROPERTY_ID).equals(""slave3.acme.com"").toPredicate();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(1, resources.size());
    org.apache.ambari.server.controller.spi.Resource resource = resources.iterator().next();
    junit.framework.Assert.assertEquals(""HEALTHY"", resource.getPropertyValue(org.apache.ambari.msi.HostProvider.HOST_STATE_PROPERTY_ID));
    stateProvider.setState(org.apache.ambari.msi.StateProvider.State.Unknown);
    resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(1, resources.size());
    resource = resources.iterator().next();
    junit.framework.Assert.assertEquals(""UNHEALTHY"", resource.getPropertyValue(org.apache.ambari.msi.HostProvider.HOST_STATE_PROPERTY_ID));
}","testGetResourcesCheckState()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b8caaf8c44fde9ee47c7704328876979e88e1f76
e0f0f4e96227f0a0cd8924ba120fb083c3c75b05
151a81276debc2cd96836f2393c2b2c1356f674e
ff096b56b547df4a43f57045d1e501ba4976adb3"
"testGetResourcesCheckStateFromCategory","TRUE","5","assertEquals","{
    org.apache.ambari.msi.TestStateProvider stateProvider = new org.apache.ambari.msi.TestStateProvider();
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostProvider provider = new org.apache.ambari.msi.HostProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.HostProvider.HOST_NAME_PROPERTY_ID).equals(""slave3.acme.com"").toPredicate();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(""Hosts""), predicate);
    junit.framework.Assert.assertEquals(1, resources.size());
    org.apache.ambari.server.controller.spi.Resource resource = resources.iterator().next();
    junit.framework.Assert.assertEquals(""HEALTHY"", resource.getPropertyValue(org.apache.ambari.msi.HostProvider.HOST_STATE_PROPERTY_ID));
    stateProvider.setState(org.apache.ambari.msi.StateProvider.State.Unknown);
    resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(1, resources.size());
    resource = resources.iterator().next();
    junit.framework.Assert.assertEquals(""UNHEALTHY"", resource.getPropertyValue(org.apache.ambari.msi.HostProvider.HOST_STATE_PROPERTY_ID));
}","testGetResourcesCheckStateFromCategory()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b8caaf8c44fde9ee47c7704328876979e88e1f76
e0f0f4e96227f0a0cd8924ba120fb083c3c75b05
151a81276debc2cd96836f2393c2b2c1356f674e
ff096b56b547df4a43f57045d1e501ba4976adb3"
"testCreateResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostProvider provider = new org.apache.ambari.msi.HostProvider(clusterDefinition);
    try {
        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());
        junit.framework.Assert.fail(""Expected UnsupportedOperationException."");
    } catch (java.lang.UnsupportedOperationException e) {
    }
}","testCreateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b8caaf8c44fde9ee47c7704328876979e88e1f76
e0f0f4e96227f0a0cd8924ba120fb083c3c75b05
151a81276debc2cd96836f2393c2b2c1356f674e
ff096b56b547df4a43f57045d1e501ba4976adb3"
"testUpdateResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostProvider provider = new org.apache.ambari.msi.HostProvider(clusterDefinition);
    provider.updateResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(new java.util.HashMap<java.lang.String, java.lang.Object>(), null), null);
}","testUpdateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b8caaf8c44fde9ee47c7704328876979e88e1f76
e0f0f4e96227f0a0cd8924ba120fb083c3c75b05
151a81276debc2cd96836f2393c2b2c1356f674e
ff096b56b547df4a43f57045d1e501ba4976adb3"
"testDeleteResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.HostProvider provider = new org.apache.ambari.msi.HostProvider(clusterDefinition);
    try {
        provider.deleteResources(null);
        junit.framework.Assert.fail(""Expected UnsupportedOperationException."");
    } catch (java.lang.UnsupportedOperationException e) {
    }
}","testDeleteResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/HostProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b8caaf8c44fde9ee47c7704328876979e88e1f76
e0f0f4e96227f0a0cd8924ba120fb083c3c75b05
151a81276debc2cd96836f2393c2b2c1356f674e
ff096b56b547df4a43f57045d1e501ba4976adb3"
"testGetKeyPropertyIds","TRUE","2","assertNotNull","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.NoOpProvider provider = new org.apache.ambari.msi.NoOpProvider(org.apache.ambari.server.controller.spi.Resource.Type.Workflow, clusterDefinition);
    junit.framework.Assert.assertNotNull(provider.getKeyPropertyIds());
}","testGetKeyPropertyIds()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/NoOpProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testCheckPropertyIds","TRUE","2","assertTrue","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.NoOpProvider provider = new org.apache.ambari.msi.NoOpProvider(org.apache.ambari.server.controller.spi.Resource.Type.Workflow, clusterDefinition);
    junit.framework.Assert.assertTrue(provider.checkPropertyIds(java.util.Collections.singleton(""id"")).isEmpty());
}","testCheckPropertyIds()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/NoOpProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetResources","TRUE","2","assertEquals","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    clusterDefinition.getRequestResources().add(new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.Request));
    org.apache.ambari.msi.RequestProvider provider = new org.apache.ambari.msi.RequestProvider(clusterDefinition);
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);
    junit.framework.Assert.assertEquals(1, resources.size());
}","testGetResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/RequestProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testCreateResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.RequestProvider provider = new org.apache.ambari.msi.RequestProvider(clusterDefinition);
    try {
        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());
        junit.framework.Assert.fail(""Expected UnsupportedOperationException."");
    } catch (java.lang.UnsupportedOperationException e) {
    }
}","testCreateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/RequestProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testUpdateResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.RequestProvider provider = new org.apache.ambari.msi.RequestProvider(clusterDefinition);
    provider.updateResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(new java.util.HashMap<java.lang.String, java.lang.Object>(), null), null);
}","testUpdateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/RequestProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testDeleteResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.RequestProvider provider = new org.apache.ambari.msi.RequestProvider(clusterDefinition);
    try {
        provider.deleteResources(null);
        junit.framework.Assert.fail(""Expected UnsupportedOperationException."");
    } catch (java.lang.UnsupportedOperationException e) {
    }
}","testDeleteResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/RequestProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetResources","TRUE","2","assertEquals","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ServiceProvider provider = new org.apache.ambari.msi.ServiceProvider(clusterDefinition);
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);
    junit.framework.Assert.assertEquals(7, resources.size());
}","testGetResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ServiceProviderTest.java","27821a2677692a889b50603f4f66adc7e5ff1434
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetResourcesWithPredicate","TRUE","4","assertEquals
assertTrue","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ServiceProvider provider = new org.apache.ambari.msi.ServiceProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(""MAPREDUCE"").toPredicate();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(1, resources.size());
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(""HDFS"").or().property(org.apache.ambari.msi.ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(""FLUME"").toPredicate();
    resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(2, resources.size());
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(""NO SERVICE"").toPredicate();
    resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertTrue(resources.isEmpty());
}","testGetResourcesWithPredicate()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ServiceProviderTest.java","27821a2677692a889b50603f4f66adc7e5ff1434
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetResourcesCheckState","TRUE","5","assertEquals","{
    org.apache.ambari.msi.TestStateProvider stateProvider = new org.apache.ambari.msi.TestStateProvider();
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ServiceProvider provider = new org.apache.ambari.msi.ServiceProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(""MAPREDUCE"").toPredicate();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(1, resources.size());
    org.apache.ambari.server.controller.spi.Resource resource = resources.iterator().next();
    junit.framework.Assert.assertEquals(""STARTED"", resource.getPropertyValue(org.apache.ambari.msi.ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID));
    stateProvider.setHealthy(false);
    resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(1, resources.size());
    resource = resources.iterator().next();
    junit.framework.Assert.assertEquals(""INSTALLED"", resource.getPropertyValue(org.apache.ambari.msi.ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID));
}","testGetResourcesCheckState()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ServiceProviderTest.java","27821a2677692a889b50603f4f66adc7e5ff1434
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetResourcesCheckStateFromCategory","TRUE","5","assertEquals","{
    org.apache.ambari.msi.TestStateProvider stateProvider = new org.apache.ambari.msi.TestStateProvider();
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ServiceProvider provider = new org.apache.ambari.msi.ServiceProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(""MAPREDUCE"").toPredicate();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(""ServiceInfo""), predicate);
    junit.framework.Assert.assertEquals(1, resources.size());
    org.apache.ambari.server.controller.spi.Resource resource = resources.iterator().next();
    junit.framework.Assert.assertEquals(""STARTED"", resource.getPropertyValue(org.apache.ambari.msi.ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID));
    stateProvider.setHealthy(false);
    resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), predicate);
    junit.framework.Assert.assertEquals(1, resources.size());
    resource = resources.iterator().next();
    junit.framework.Assert.assertEquals(""INSTALLED"", resource.getPropertyValue(org.apache.ambari.msi.ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID));
}","testGetResourcesCheckStateFromCategory()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ServiceProviderTest.java","27821a2677692a889b50603f4f66adc7e5ff1434
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testCreateResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ServiceProvider provider = new org.apache.ambari.msi.ServiceProvider(clusterDefinition);
    try {
        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());
        junit.framework.Assert.fail(""Expected UnsupportedOperationException."");
    } catch (java.lang.UnsupportedOperationException e) {
    }
}","testCreateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ServiceProviderTest.java","27821a2677692a889b50603f4f66adc7e5ff1434
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testUpdateResources","TRUE","4","assertEquals","{
    org.apache.ambari.msi.TestStateProvider stateProvider = new org.apache.ambari.msi.TestStateProvider();
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(stateProvider, new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ServiceProvider provider = new org.apache.ambari.msi.ServiceProvider(clusterDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.msi.ServiceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(""MAPREDUCE"").toPredicate();
    java.util.HashMap<java.lang.String, java.lang.Object> properties = new java.util.HashMap<java.lang.String, java.lang.Object>();
    properties.put(org.apache.ambari.msi.ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID, ""STARTED"");
    org.apache.ambari.server.controller.spi.Request updateRequest = org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);
    provider.updateResources(updateRequest, predicate);
    junit.framework.Assert.assertEquals(org.apache.ambari.msi.StateProvider.State.Running, stateProvider.getState());
    properties.put(org.apache.ambari.msi.ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID, ""INSTALLED"");
    updateRequest = org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);
    provider.updateResources(updateRequest, predicate);
    junit.framework.Assert.assertEquals(org.apache.ambari.msi.StateProvider.State.Stopped, stateProvider.getState());
    properties.put(org.apache.ambari.msi.ServiceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID, ""STARTED"");
    updateRequest = org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(properties, null);
    provider.updateResources(updateRequest, predicate);
    junit.framework.Assert.assertEquals(org.apache.ambari.msi.StateProvider.State.Running, stateProvider.getState());
}","testUpdateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ServiceProviderTest.java","27821a2677692a889b50603f4f66adc7e5ff1434
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testDeleteResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.ServiceProvider provider = new org.apache.ambari.msi.ServiceProvider(clusterDefinition);
    try {
        provider.deleteResources(null);
        junit.framework.Assert.fail(""Expected UnsupportedOperationException."");
    } catch (java.lang.UnsupportedOperationException e) {
    }
}","testDeleteResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/ServiceProviderTest.java","27821a2677692a889b50603f4f66adc7e5ff1434
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetResources","TRUE","2","assertEquals","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    clusterDefinition.getTaskResources().add(new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.Task));
    org.apache.ambari.msi.TaskProvider provider = new org.apache.ambari.msi.TaskProvider(clusterDefinition);
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> resources = provider.getResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(), null);
    junit.framework.Assert.assertEquals(1, resources.size());
}","testGetResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/TaskProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testCreateResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.TaskProvider provider = new org.apache.ambari.msi.TaskProvider(clusterDefinition);
    try {
        provider.createResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest());
        junit.framework.Assert.fail(""Expected UnsupportedOperationException."");
    } catch (java.lang.UnsupportedOperationException e) {
    }
}","testCreateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/TaskProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testUpdateResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.TaskProvider provider = new org.apache.ambari.msi.TaskProvider(clusterDefinition);
    provider.updateResources(org.apache.ambari.server.controller.utilities.PropertyHelper.getUpdateRequest(new java.util.HashMap<java.lang.String, java.lang.Object>(), null), null);
}","testUpdateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/TaskProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testDeleteResources","FALSE","0","None","{
    org.apache.ambari.msi.ClusterDefinition clusterDefinition = new org.apache.ambari.msi.ClusterDefinition(new org.apache.ambari.msi.TestStateProvider(), new org.apache.ambari.scom.TestClusterDefinitionProvider(), new org.apache.ambari.scom.TestHostInfoProvider());
    org.apache.ambari.msi.TaskProvider provider = new org.apache.ambari.msi.TaskProvider(clusterDefinition);
    try {
        provider.deleteResources(null);
        junit.framework.Assert.fail(""Expected UnsupportedOperationException."");
    } catch (java.lang.UnsupportedOperationException e) {
    }
}","testDeleteResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/msi/TaskProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetFileName","TRUE","2","assertEquals","{
    org.apache.ambari.scom.ClusterDefinitionProvider provider = org.apache.ambari.scom.ClusterDefinitionProviderTest.getProvider(""myFile"", ""myCluster"", ""myVersion"");
    org.junit.Assert.assertEquals(""myFile"", provider.getFileName());
}","testGetFileName()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/ClusterDefinitionProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetClusterName","TRUE","2","assertEquals","{
    org.apache.ambari.scom.ClusterDefinitionProvider provider = org.apache.ambari.scom.ClusterDefinitionProviderTest.getProvider(""myFile"", ""myCluster"", ""myVersion"");
    org.junit.Assert.assertEquals(""myCluster"", provider.getClusterName());
}","testGetClusterName()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/ClusterDefinitionProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetVersionId","TRUE","2","assertEquals","{
    org.apache.ambari.scom.ClusterDefinitionProvider provider = org.apache.ambari.scom.ClusterDefinitionProviderTest.getProvider(""myFile"", ""myCluster"", ""myVersion"");
    org.junit.Assert.assertEquals(""myVersion"", provider.getVersionId());
}","testGetVersionId()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/ClusterDefinitionProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetInputStream","TRUE","2","assertNotNull","{
    org.apache.ambari.scom.ClusterDefinitionProvider provider = org.apache.ambari.scom.ClusterDefinitionProviderTest.getProvider(""clusterproperties.txt"", ""myCluster"", ""myVersion"");
    java.io.InputStream inputStream = provider.getInputStream();
    org.junit.Assert.assertNotNull(inputStream);
}","testGetInputStream()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/ClusterDefinitionProviderTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testPopulateResources","TRUE","5","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);
    java.sql.Connection connection = EasyMock.createNiceMock(java.sql.Connection.class);
    java.sql.Statement statement = EasyMock.createNiceMock(java.sql.Statement.class);
    java.sql.ResultSet resultSet = EasyMock.createNiceMock(java.sql.ResultSet.class);
    EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();
    EasyMock.expect(connection.createStatement()).andReturn(statement).once();
    EasyMock.expect(statement.executeQuery(EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999990L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""0"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999991L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""1"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999992L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""2"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999993L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""3"");
    EasyMock.expect(resultSet.next()).andReturn(false);
    EasyMock.replay(connectionFactory, connection, statement, resultSet);
    org.apache.ambari.scom.SQLPropertyProvider provider = new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent), new org.apache.ambari.scom.TestHostInfoProvider(), org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, connectionFactory);
    org.apache.ambari.server.controller.spi.Resource resource = new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent);
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, ""c1"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, ""domU-12-31-39-0E-34-E1.compute-1.internal"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, ""DATANODE"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, ""HDFS"");
    java.util.Map<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo> temporalInfoMap = new java.util.HashMap<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo>();
    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, 20L, 1L));
    org.apache.ambari.server.controller.spi.Request request = org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);
    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());
    org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]);
    java.lang.Number[][] datapoints = ((java.lang.Number[][]) (resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1)));
    for (int i = 0; i < datapoints.length; ++i) {
        org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);
        org.junit.Assert.assertEquals((999990L + i) / 1000, datapoints[i][1]);
    }
    EasyMock.verify(connectionFactory, connection, statement, resultSet);
}","testPopulateResources()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/SQLPropertyProviderTest.java","848e78742452f5f66c97435035210470ebdf288a
a3403e5d625657fd4494edc66c5cd64f45da5c55
b84b0732aa09092721a27e9bc701e5926e21a227
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testPopulateResources_temporalStartTimeOnly","TRUE","5","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);
    java.sql.Connection connection = EasyMock.createNiceMock(java.sql.Connection.class);
    java.sql.Statement statement = EasyMock.createNiceMock(java.sql.Statement.class);
    java.sql.ResultSet resultSet = EasyMock.createNiceMock(java.sql.ResultSet.class);
    EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();
    EasyMock.expect(connection.createStatement()).andReturn(statement).once();
    EasyMock.expect(statement.executeQuery(EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999990L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""0"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999991L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""1"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999992L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""2"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999993L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""3"");
    EasyMock.expect(resultSet.next()).andReturn(false);
    EasyMock.replay(connectionFactory, connection, statement, resultSet);
    org.apache.ambari.scom.TestHostInfoProvider hostProvider = new org.apache.ambari.scom.TestHostInfoProvider();
    org.apache.ambari.scom.SQLPropertyProvider provider = new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent), hostProvider, org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, connectionFactory);
    org.apache.ambari.server.controller.spi.Resource resource = new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent);
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, ""c1"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, ""domU-12-31-39-0E-34-E1.compute-1.internal"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, ""DATANODE"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, ""HDFS"");
    java.util.Map<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo> temporalInfoMap = new java.util.HashMap<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo>();
    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, -1L, -1L));
    org.apache.ambari.server.controller.spi.Request request = org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);
    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());
    org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]);
    java.lang.Number[][] datapoints = ((java.lang.Number[][]) (resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1)));
    for (int i = 0; i < datapoints.length; ++i) {
        org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);
        org.junit.Assert.assertEquals((999990L + i) / 1000, datapoints[i][1]);
    }
    EasyMock.verify(connectionFactory, connection, statement, resultSet);
}","testPopulateResources_temporalStartTimeOnly()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/SQLPropertyProviderTest.java","848e78742452f5f66c97435035210470ebdf288a
a3403e5d625657fd4494edc66c5cd64f45da5c55
b84b0732aa09092721a27e9bc701e5926e21a227
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testPopulateResources_hostNameProperty","TRUE","4","assertEquals
assertNull","{
    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);
    java.sql.Connection connection = EasyMock.createNiceMock(java.sql.Connection.class);
    java.sql.Statement statement = EasyMock.createNiceMock(java.sql.Statement.class);
    java.sql.ResultSet resultSet = EasyMock.createNiceMock(java.sql.ResultSet.class);
    EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();
    EasyMock.expect(connection.createStatement()).andReturn(statement).once();
    EasyMock.expect(statement.executeQuery(EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999990L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""0"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999991L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""1"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999992L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""2"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999993L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""3"");
    EasyMock.expect(resultSet.next()).andReturn(false);
    EasyMock.replay(connectionFactory, connection, statement, resultSet);
    org.apache.ambari.scom.TestHostInfoProvider hostProvider = new org.apache.ambari.scom.TestHostInfoProvider();
    org.apache.ambari.scom.SQLPropertyProvider provider = new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent), hostProvider, org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, connectionFactory);
    org.apache.ambari.server.controller.spi.Resource resource = new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent);
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, ""c1"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, ""domU-12-31-39-0E-34-E1.compute-1.internal"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, ""DATANODE"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, ""HDFS"");
    java.util.Map<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo> temporalInfoMap = new java.util.HashMap<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo>();
    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, -1L, -1L));
    org.apache.ambari.server.controller.spi.Request request = org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);
    provider.populateResources(java.util.Collections.singleton(resource), request, null);
    org.junit.Assert.assertEquals(""domU-12-31-39-0E-34-E1.compute-1.internal"", hostProvider.getHostId());
    org.junit.Assert.assertNull(hostProvider.getClusterName());
    org.junit.Assert.assertNull(hostProvider.getComponentName());
    EasyMock.verify(connectionFactory, connection, statement, resultSet);
}","testPopulateResources_hostNameProperty()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/SQLPropertyProviderTest.java","848e78742452f5f66c97435035210470ebdf288a
a3403e5d625657fd4494edc66c5cd64f45da5c55
b84b0732aa09092721a27e9bc701e5926e21a227
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testPopulateResources_noHostNameProperty","TRUE","4","assertNull
assertEquals","{
    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);
    java.sql.Connection connection = EasyMock.createNiceMock(java.sql.Connection.class);
    java.sql.Statement statement = EasyMock.createNiceMock(java.sql.Statement.class);
    java.sql.ResultSet resultSet = EasyMock.createNiceMock(java.sql.ResultSet.class);
    EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();
    EasyMock.expect(connection.createStatement()).andReturn(statement).once();
    EasyMock.expect(statement.executeQuery(EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999990L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""0"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999991L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""1"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999992L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""2"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999993L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""3"");
    EasyMock.expect(resultSet.next()).andReturn(false);
    EasyMock.replay(connectionFactory, connection, statement, resultSet);
    org.apache.ambari.scom.TestHostInfoProvider hostProvider = new org.apache.ambari.scom.TestHostInfoProvider();
    org.apache.ambari.scom.SQLPropertyProvider provider = new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent), hostProvider, org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, null, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, connectionFactory);
    org.apache.ambari.server.controller.spi.Resource resource = new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent);
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, ""c1"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, ""DATANODE"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, ""HDFS"");
    java.util.Map<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo> temporalInfoMap = new java.util.HashMap<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo>();
    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, -1L, -1L));
    org.apache.ambari.server.controller.spi.Request request = org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1), temporalInfoMap);
    provider.populateResources(java.util.Collections.singleton(resource), request, null);
    org.junit.Assert.assertNull(hostProvider.getHostId());
    org.junit.Assert.assertEquals(""c1"", hostProvider.getClusterName());
    org.junit.Assert.assertEquals(""DATANODE"", hostProvider.getComponentName());
    EasyMock.verify(connectionFactory, connection, statement, resultSet);
}","testPopulateResources_noHostNameProperty()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/SQLPropertyProviderTest.java","848e78742452f5f66c97435035210470ebdf288a
a3403e5d625657fd4494edc66c5cd64f45da5c55
b84b0732aa09092721a27e9bc701e5926e21a227
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testPopulateResources_pointInTime","TRUE","3","assertEquals","{
    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);
    java.sql.Connection connection = EasyMock.createNiceMock(java.sql.Connection.class);
    java.sql.Statement statement = EasyMock.createNiceMock(java.sql.Statement.class);
    java.sql.ResultSet resultSet = EasyMock.createNiceMock(java.sql.ResultSet.class);
    EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();
    EasyMock.expect(connection.createStatement()).andReturn(statement).once();
    EasyMock.expect(statement.executeQuery(EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getString(""RecordTypeContext"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""RecordTypeName"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""TagPairs"")).andReturn("""");
    EasyMock.expect(resultSet.getString(""MetricName"")).andReturn(""RpcSlowResponse_num_ops"");
    EasyMock.expect(resultSet.getString(""ServiceName"")).andReturn(""datanode"");
    EasyMock.expect(resultSet.getString(""NodeName"")).andReturn(""host1"");
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""0"");
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999990L);
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getString(""RecordTypeContext"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""RecordTypeName"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""TagPairs"")).andReturn("""");
    EasyMock.expect(resultSet.getString(""MetricName"")).andReturn(""RpcSlowResponse_num_ops"");
    EasyMock.expect(resultSet.getString(""ServiceName"")).andReturn(""datanode"");
    EasyMock.expect(resultSet.getString(""NodeName"")).andReturn(""host1"");
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""1"");
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999991L);
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getString(""RecordTypeContext"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""RecordTypeName"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""TagPairs"")).andReturn("""");
    EasyMock.expect(resultSet.getString(""MetricName"")).andReturn(""RpcSlowResponse_num_ops"");
    EasyMock.expect(resultSet.getString(""ServiceName"")).andReturn(""datanode"");
    EasyMock.expect(resultSet.getString(""NodeName"")).andReturn(""host1"");
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""2"");
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999992L);
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getString(""RecordTypeContext"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""RecordTypeName"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""TagPairs"")).andReturn("""");
    EasyMock.expect(resultSet.getString(""MetricName"")).andReturn(""RpcSlowResponse_num_ops"");
    EasyMock.expect(resultSet.getString(""ServiceName"")).andReturn(""datanode"");
    EasyMock.expect(resultSet.getString(""NodeName"")).andReturn(""host1"");
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""3"");
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999993L);
    EasyMock.expect(resultSet.next()).andReturn(false);
    EasyMock.replay(connectionFactory, connection, statement, resultSet);
    org.apache.ambari.scom.SQLPropertyProvider provider = new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent), new org.apache.ambari.scom.TestHostInfoProvider(), org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, connectionFactory);
    org.apache.ambari.server.controller.spi.Resource resource = new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent);
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, ""c1"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, ""domU-12-31-39-0E-34-E1.compute-1.internal"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, ""DATANODE"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, ""HDFS"");
    java.util.Map<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo> temporalInfoMap = new java.util.HashMap<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo>();
    org.apache.ambari.server.controller.spi.Request request = org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(java.util.Collections.singleton(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2), temporalInfoMap);
    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());
    org.junit.Assert.assertEquals(3L, resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2));
    EasyMock.verify(connectionFactory, connection, statement, resultSet);
}","testPopulateResources_pointInTime()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/SQLPropertyProviderTest.java","848e78742452f5f66c97435035210470ebdf288a
a3403e5d625657fd4494edc66c5cd64f45da5c55
b84b0732aa09092721a27e9bc701e5926e21a227
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testPopulateResources_multi","TRUE","6","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.jdbc.ConnectionFactory connectionFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.jdbc.ConnectionFactory.class);
    java.sql.Connection connection = EasyMock.createNiceMock(java.sql.Connection.class);
    java.sql.Statement statement = EasyMock.createNiceMock(java.sql.Statement.class);
    java.sql.ResultSet resultSet = EasyMock.createNiceMock(java.sql.ResultSet.class);
    EasyMock.expect(connectionFactory.getConnection()).andReturn(connection).once();
    EasyMock.expect(connection.createStatement()).andReturn(statement).once();
    EasyMock.expect(statement.executeQuery(EasyMock.anyObject(java.lang.String.class))).andReturn(resultSet).once();
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getString(""RecordTypeContext"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""RecordTypeName"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""TagPairs"")).andReturn("""");
    EasyMock.expect(resultSet.getString(""MetricName"")).andReturn(""RpcQueueTime_avg_time"");
    EasyMock.expect(resultSet.getString(""ServiceName"")).andReturn(""datanode"");
    EasyMock.expect(resultSet.getString(""NodeName"")).andReturn(""host1"");
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999990L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""0"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getString(""RecordTypeContext"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""RecordTypeName"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""TagPairs"")).andReturn("""");
    EasyMock.expect(resultSet.getString(""MetricName"")).andReturn(""RpcQueueTime_avg_time"");
    EasyMock.expect(resultSet.getString(""ServiceName"")).andReturn(""datanode"");
    EasyMock.expect(resultSet.getString(""NodeName"")).andReturn(""host1"");
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999991L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""1"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getString(""RecordTypeContext"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""RecordTypeName"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""TagPairs"")).andReturn("""");
    EasyMock.expect(resultSet.getString(""MetricName"")).andReturn(""RpcSlowResponse_num_ops"");
    EasyMock.expect(resultSet.getString(""ServiceName"")).andReturn(""datanode"");
    EasyMock.expect(resultSet.getString(""NodeName"")).andReturn(""host1"");
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999992L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""2"");
    EasyMock.expect(resultSet.next()).andReturn(true);
    EasyMock.expect(resultSet.getString(""RecordTypeContext"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""RecordTypeName"")).andReturn(""rpc"");
    EasyMock.expect(resultSet.getString(""TagPairs"")).andReturn("""");
    EasyMock.expect(resultSet.getString(""MetricName"")).andReturn(""RpcSlowResponse_num_ops"");
    EasyMock.expect(resultSet.getString(""ServiceName"")).andReturn(""datanode"");
    EasyMock.expect(resultSet.getString(""NodeName"")).andReturn(""host1"");
    EasyMock.expect(resultSet.getLong(""RecordTimeStamp"")).andReturn(999993L);
    EasyMock.expect(resultSet.getNString(""MetricValue"")).andReturn(""3"");
    EasyMock.expect(resultSet.next()).andReturn(false);
    EasyMock.replay(connectionFactory, connection, statement, resultSet);
    org.apache.ambari.scom.SQLPropertyProvider provider = new org.apache.ambari.scom.SQLPropertyProvider(org.apache.ambari.server.controller.utilities.PropertyHelper.getGangliaPropertyIds(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent), new org.apache.ambari.scom.TestHostInfoProvider(), org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, connectionFactory);
    org.apache.ambari.server.controller.spi.Resource resource = new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent);
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.CLUSTER_NAME_PROPERTY_ID, ""c1"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.HOST_NAME_PROPERTY_ID, ""domU-12-31-39-0E-34-E1.compute-1.internal"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.COMPONENT_NAME_PROPERTY_ID, ""DATANODE"");
    resource.setProperty(org.apache.ambari.scom.SQLPropertyProviderTest.SERVICE_NAME_PROPERTY_ID, ""HDFS"");
    java.util.Map<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo> temporalInfoMap = new java.util.HashMap<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo>();
    temporalInfoMap.put(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1, new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10L, 20L, 1L));
    java.util.Set<java.lang.String> propertyIds = new java.util.LinkedHashSet<java.lang.String>();
    propertyIds.add(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1);
    propertyIds.add(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2);
    org.apache.ambari.server.controller.spi.Request request = org.apache.ambari.server.controller.utilities.PropertyHelper.getReadRequest(propertyIds, temporalInfoMap);
    org.junit.Assert.assertEquals(1, provider.populateResources(java.util.Collections.singleton(resource), request, null).size());
    org.junit.Assert.assertTrue(resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1) instanceof java.lang.Number[][]);
    java.lang.Number[][] datapoints = ((java.lang.Number[][]) (resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_1)));
    for (int i = 0; i < datapoints.length; ++i) {
        org.junit.Assert.assertEquals(((long) (i)), datapoints[i][0]);
        org.junit.Assert.assertEquals((999990L + i) / 1000, datapoints[i][1]);
    }
    org.junit.Assert.assertEquals(3L, resource.getPropertyValue(org.apache.ambari.scom.SQLPropertyProviderTest.PROPERTY_ID_2));
    EasyMock.verify(connectionFactory, connection, statement, resultSet);
}","testPopulateResources_multi()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/SQLPropertyProviderTest.java","848e78742452f5f66c97435035210470ebdf288a
a3403e5d625657fd4494edc66c5cd64f45da5c55
b84b0732aa09092721a27e9bc701e5926e21a227
873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testCreatePropertyProviders","TRUE","5","assertTrue","{
    org.apache.ambari.scom.SQLProviderModule providerModule = new org.apache.ambari.scom.SQLProviderModule();
    providerModule.createPropertyProviders(org.apache.ambari.server.controller.spi.Resource.Type.Component);
    java.util.List<org.apache.ambari.server.controller.spi.PropertyProvider> providers = providerModule.getPropertyProviders(org.apache.ambari.server.controller.spi.Resource.Type.Component);
    org.junit.Assert.assertTrue(providers.get(0) instanceof org.apache.ambari.server.controller.jmx.JMXPropertyProvider);
    org.junit.Assert.assertTrue(providers.get(1) instanceof org.apache.ambari.scom.SQLPropertyProvider);
    providerModule.createPropertyProviders(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent);
    providers = providerModule.getPropertyProviders(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent);
    org.junit.Assert.assertTrue(providers.get(0) instanceof org.apache.ambari.server.controller.jmx.JMXPropertyProvider);
    org.junit.Assert.assertTrue(providers.get(1) instanceof org.apache.ambari.scom.SQLPropertyProvider);
}","testCreatePropertyProviders()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/SQLProviderModuleTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetDatabaseUrl","TRUE","2","assertEquals","{
    org.apache.ambari.scom.SinkConnectionFactory factory = org.apache.ambari.scom.SinkConnectionFactoryTest.getFactory(""myURL"", ""myDriver"");
    org.junit.Assert.assertEquals(""myURL"", factory.getDatabaseUrl());
}","testGetDatabaseUrl()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/SinkConnectionFactoryTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetDatabaseDriver","TRUE","2","assertEquals","{
    org.apache.ambari.scom.SinkConnectionFactory factory = org.apache.ambari.scom.SinkConnectionFactoryTest.getFactory(""myURL"", ""myDriver"");
    org.junit.Assert.assertEquals(""myDriver"", factory.getDatabaseDriver());
}","testGetDatabaseDriver()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/SinkConnectionFactoryTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testLog","FALSE","0","None","{
    org.slf4j.Logger logger = EasyMock.createNiceMock(org.slf4j.Logger.class);
    org.eclipse.persistence.logging.SessionLogEntry severeEntry = EasyMock.createNiceMock(org.eclipse.persistence.logging.SessionLogEntry.class);
    org.eclipse.persistence.logging.SessionLogEntry configEntry = EasyMock.createNiceMock(org.eclipse.persistence.logging.SessionLogEntry.class);
    org.eclipse.persistence.logging.SessionLogEntry finestEntry = EasyMock.createNiceMock(org.eclipse.persistence.logging.SessionLogEntry.class);
    java.util.logging.Formatter formatter = EasyMock.createNiceMock(java.util.logging.Formatter.class);
    org.apache.ambari.scom.logging.JpaLogger jpaLogger = new org.apache.ambari.scom.logging.JpaLoggerTest.TestJpaLogger(logger, formatter);
    EasyMock.expect(severeEntry.getLevel()).andReturn(SessionLog.SEVERE);
    EasyMock.expect(formatter.format(((java.util.logging.LogRecord) (EasyMock.anyObject())))).andReturn(""severe log message"");
    logger.error(""severe log message"");
    EasyMock.expect(configEntry.getLevel()).andReturn(SessionLog.CONFIG);
    EasyMock.expect(formatter.format(((java.util.logging.LogRecord) (EasyMock.anyObject())))).andReturn(""config log message"");
    logger.info(""config log message"");
    EasyMock.expect(finestEntry.getLevel()).andReturn(SessionLog.FINEST);
    EasyMock.expect(formatter.format(((java.util.logging.LogRecord) (EasyMock.anyObject())))).andReturn(""finest log message"");
    logger.debug(""finest log message"");
    EasyMock.replay(logger, severeEntry, configEntry, finestEntry, formatter);
    jpaLogger.log(severeEntry);
    jpaLogger.log(configEntry);
    jpaLogger.log(finestEntry);
    EasyMock.verify(logger, severeEntry, configEntry, finestEntry, formatter);
}","testLog()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/logging/JpaLoggerTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testThrowing","FALSE","0","None","{
    org.slf4j.Logger logger = EasyMock.createNiceMock(org.slf4j.Logger.class);
    java.util.logging.Formatter formatter = EasyMock.createNiceMock(java.util.logging.Formatter.class);
    java.lang.Exception exception = new java.lang.IllegalStateException(""Something went wrong!"");
    org.apache.ambari.scom.logging.JpaLogger jpaLogger = new org.apache.ambari.scom.logging.JpaLoggerTest.TestJpaLogger(logger, formatter);
    logger.error(null, exception);
    EasyMock.replay(logger, formatter);
    jpaLogger.throwing(exception);
    EasyMock.verify(logger, formatter);
}","testThrowing()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/logging/JpaLoggerTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testShouldLog","TRUE","16","assertTrue
assertFalse","{
    org.apache.ambari.scom.logging.JpaLogger logger = new org.apache.ambari.scom.logging.JpaLogger();
    org.junit.Assert.assertTrue(logger.shouldLog(SessionLog.SEVERE, """"));
    org.junit.Assert.assertTrue(logger.shouldLog(SessionLog.WARNING, """"));
    org.junit.Assert.assertFalse(logger.shouldLog(SessionLog.CONFIG, """"));
    org.junit.Assert.assertFalse(logger.shouldLog(SessionLog.FINER, """"));
    org.junit.Assert.assertFalse(logger.shouldLog(SessionLog.ALL, """"));
    logger.setLogLevel(java.util.logging.Level.FINER);
    org.junit.Assert.assertTrue(logger.shouldLog(SessionLog.SEVERE, """"));
    org.junit.Assert.assertTrue(logger.shouldLog(SessionLog.WARNING, """"));
    org.junit.Assert.assertTrue(logger.shouldLog(SessionLog.CONFIG, """"));
    org.junit.Assert.assertTrue(logger.shouldLog(SessionLog.FINER, """"));
    org.junit.Assert.assertFalse(logger.shouldLog(SessionLog.ALL, """"));
    logger.setLogLevel(java.util.logging.Level.SEVERE);
    org.junit.Assert.assertTrue(logger.shouldLog(SessionLog.SEVERE, """"));
    org.junit.Assert.assertFalse(logger.shouldLog(SessionLog.WARNING, """"));
    org.junit.Assert.assertFalse(logger.shouldLog(SessionLog.CONFIG, """"));
    org.junit.Assert.assertFalse(logger.shouldLog(SessionLog.FINER, """"));
    org.junit.Assert.assertFalse(logger.shouldLog(SessionLog.ALL, """"));
}","testShouldLog()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/logging/JpaLoggerTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testGetSetLogLevel","TRUE","5","assertEquals","{
    org.apache.ambari.scom.logging.JpaLogger logger = new org.apache.ambari.scom.logging.JpaLogger();
    org.junit.Assert.assertEquals(java.util.logging.Level.WARNING, logger.getLogLevel());
    logger.setLogLevel(java.util.logging.Level.ALL);
    org.junit.Assert.assertEquals(java.util.logging.Level.ALL, logger.getLogLevel());
    logger.setLogLevel(java.util.logging.Level.FINER);
    org.junit.Assert.assertEquals(java.util.logging.Level.FINER, logger.getLogLevel());
    logger.setLogLevel(java.util.logging.Level.OFF);
    org.junit.Assert.assertEquals(java.util.logging.Level.OFF, logger.getLogLevel());
}","testGetSetLogLevel()","Test","ambari/contrib/ambari-scom/ambari-scom-server/src/test/java/org/apache/ambari/scom/logging/JpaLoggerTest.java","873b3502bec3344ff8b03a7a1ffd2240f9de13b4"
"testCheckHostAndClusterVersions","TRUE","16","assertFalse
assertEquals","{
    org.apache.ambari.server.StateRecoveryManager stateRecoveryManager = injector.getInstance(org.apache.ambari.server.StateRecoveryManager.class);
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> installFailedHostVersionCapture = org.easymock.EasyMock.newCapture();
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> installingHostVersionCapture = org.easymock.EasyMock.newCapture();
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> installedHostVersionCapture = org.easymock.EasyMock.newCapture();
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> outOfSyncHostVersionCapture = org.easymock.EasyMock.newCapture();
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> upgradeFailedHostVersionCapture = org.easymock.EasyMock.newCapture();
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> upgradingHostVersionCapture = org.easymock.EasyMock.newCapture();
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> upgradedHostVersionCapture = org.easymock.EasyMock.newCapture();
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> currentHostVersionCapture = org.easymock.EasyMock.newCapture();
    EasyMock.expect(hostVersionDAOMock.findAll()).andReturn(com.google.common.collect.Lists.newArrayList(getHostVersionMock(""install_failed_version"", org.apache.ambari.server.state.RepositoryVersionState.INSTALL_FAILED, installFailedHostVersionCapture), getHostVersionMock(""installing_version"", org.apache.ambari.server.state.RepositoryVersionState.INSTALLING, installingHostVersionCapture), getHostVersionMock(""installed_version"", org.apache.ambari.server.state.RepositoryVersionState.INSTALLED, installedHostVersionCapture), getHostVersionMock(""out_of_sync_version"", org.apache.ambari.server.state.RepositoryVersionState.OUT_OF_SYNC, outOfSyncHostVersionCapture)));
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> installFailedClusterVersionCapture = org.easymock.EasyMock.newCapture();
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> installingClusterVersionCapture = org.easymock.EasyMock.newCapture();
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> installedClusterVersionCapture = org.easymock.EasyMock.newCapture();
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> outOfSyncClusterVersionCapture = org.easymock.EasyMock.newCapture();
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> upgradeFailedClusterVersionCapture = org.easymock.EasyMock.newCapture();
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> upgradingClusterVersionCapture = org.easymock.EasyMock.newCapture();
    final org.easymock.Capture<org.apache.ambari.server.state.RepositoryVersionState> upgradedClusterVersionCapture = org.easymock.EasyMock.newCapture();
    EasyMock.expect(serviceComponentDesiredStateDAOMock.findAll()).andReturn(com.google.common.collect.Lists.newArrayList(getDesiredStateEntityMock(""install_failed_version"", org.apache.ambari.server.state.RepositoryVersionState.INSTALL_FAILED, installFailedClusterVersionCapture), getDesiredStateEntityMock(""installing_version"", org.apache.ambari.server.state.RepositoryVersionState.INSTALLING, installingClusterVersionCapture), getDesiredStateEntityMock(""installed_version"", org.apache.ambari.server.state.RepositoryVersionState.INSTALLED, installedClusterVersionCapture), getDesiredStateEntityMock(""out_of_sync_version"", org.apache.ambari.server.state.RepositoryVersionState.OUT_OF_SYNC, outOfSyncClusterVersionCapture)));
    EasyMock.replay(hostVersionDAOMock, serviceComponentDesiredStateDAOMock);
    stateRecoveryManager.checkHostAndClusterVersions();
    org.junit.Assert.assertFalse(installFailedHostVersionCapture.hasCaptured());
    org.junit.Assert.assertEquals(installingHostVersionCapture.getValue(), org.apache.ambari.server.state.RepositoryVersionState.INSTALL_FAILED);
    org.junit.Assert.assertFalse(installedHostVersionCapture.hasCaptured());
    org.junit.Assert.assertFalse(outOfSyncHostVersionCapture.hasCaptured());
    org.junit.Assert.assertFalse(upgradeFailedHostVersionCapture.hasCaptured());
    org.junit.Assert.assertFalse(upgradingHostVersionCapture.hasCaptured());
    org.junit.Assert.assertFalse(upgradedHostVersionCapture.hasCaptured());
    org.junit.Assert.assertFalse(currentHostVersionCapture.hasCaptured());
    org.junit.Assert.assertFalse(installFailedClusterVersionCapture.hasCaptured());
    org.junit.Assert.assertEquals(installingClusterVersionCapture.getValue(), org.apache.ambari.server.state.RepositoryVersionState.INSTALL_FAILED);
    org.junit.Assert.assertFalse(installedClusterVersionCapture.hasCaptured());
    org.junit.Assert.assertFalse(outOfSyncClusterVersionCapture.hasCaptured());
    org.junit.Assert.assertFalse(upgradeFailedClusterVersionCapture.hasCaptured());
    org.junit.Assert.assertFalse(upgradingClusterVersionCapture.hasCaptured());
    org.junit.Assert.assertFalse(upgradedClusterVersionCapture.hasCaptured());
}","testCheckHostAndClusterVersions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/StateRecoveryManagerTest.java","330a61cdbe34f97559359c67c5039623d9fc6e69
c2409e740f84d6f051659b3b36d853902e698a60
aaa821cc2455a29b1e83caf5eab98272053d5aa5
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
cbef0c14682ae24f2754063c48ce521c58cdca27
0212c06e4e973709727144e70c4ddec9856deb35"
"testGetExecutionCommand","TRUE","2","assertNotNull","{
    org.apache.ambari.server.agent.ExecutionCommand executionCommand = new org.apache.ambari.server.agent.ExecutionCommand();
    executionCommand.setClusterName(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.CLUSTER1);
    executionCommand.setTaskId(1);
    executionCommand.setRequestAndStage(1, 1);
    executionCommand.setHostname(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.HOST1);
    executionCommand.setRole(""NAMENODE"");
    executionCommand.setRoleParams(java.util.Collections.emptyMap());
    executionCommand.setRoleCommand(org.apache.ambari.server.RoleCommand.START);
    executionCommand.setServiceName(""HDFS"");
    executionCommand.setCommandType(org.apache.ambari.server.agent.AgentCommand.AgentCommandType.EXECUTION_COMMAND);
    executionCommand.setCommandParams(java.util.Collections.emptyMap());
    java.lang.String json = org.apache.ambari.server.utils.StageUtils.getGson().toJson(executionCommand, org.apache.ambari.server.agent.ExecutionCommand.class);
    org.apache.ambari.server.actionmanager.ExecutionCommandWrapper execCommWrap = new org.apache.ambari.server.actionmanager.ExecutionCommandWrapper(json);
    org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.injector.injectMembers(execCommWrap);
    org.apache.ambari.server.agent.ExecutionCommand processedExecutionCommand = execCommWrap.getExecutionCommand();
    org.junit.Assert.assertNotNull(processedExecutionCommand.getRepositoryFile());
}","testGetExecutionCommand()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapperTest.java","fd346f5fc28c1dfe605c3e53cb039c657ac2a2ab
e175b935e481ba8d14c46da4d65838738d3b8fd3
f3fcffbf47749d20b9071fddc37faff5d1281e83
c086dd1dcf3d7dd30de07e09277e78f48307d160
15d8d1a1485ec5e5441c31566ef8a16632d6046f
a928a9cd8f0c995e0aa5b9bc52c6b975d7f87edb
19e6518d42170a33ca2e0161ec2d3abb5190f976
249bb97a864c0f18278d37d87c2c3117809e5ca4
330a61cdbe34f97559359c67c5039623d9fc6e69
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f134cee07e9685a5a86fe73162b9a00bf60a9fef
0a9f6fa943e07164be0166981d0d65814068d34e
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
a6639a7c72043ff7bda03e6ba305913c7503193a
38700445bd793d27a8747d4c1d06b70f531ab677
fdd07bd8159efed093a5bea5b92fe6ec677f251e
2b539ef17d21c42690a3c98bf9e3198d31354b50
8def5a407399c56c51ad4edca1a59377dc3c3ba6
ad2f5442b3706235969c8982d3fa92fea808dc29
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
9faeaf5a525bfee0932c1a654b28651c0b1705dd
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
ce4020028973fadaa79f1bacea649de0b61dbe0c
96bad666fac95e6060253fb55941da12bf8216a1
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
c86976551f4dd1a437bed6e728ae39bbc2040736
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
6292620075cbb27760a06c3b6e733f905da36dd4
e0d72ad9314ec22e98e17a2fa723de6d0a518a00"
"testGetMergedConfig","TRUE","8","assertEquals","{
    java.util.Map<java.lang.String, java.lang.String> baseConfig = new java.util.HashMap<>();
    baseConfig.put(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_NAME1, org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_VAL1);
    baseConfig.put(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_NAME2, org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_VAL2);
    baseConfig.put(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_NAME3, org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_VAL3);
    baseConfig.put(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_NAME4, org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_VAL4);
    baseConfig.put(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_NAME5, org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_VAL5);
    java.util.Map<java.lang.String, java.lang.String> overrideConfig = new java.util.HashMap<>();
    overrideConfig.put(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_NAME2, org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_VAL2_H);
    overrideConfig.put(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_NAME6, org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_VAL6_H);
    java.util.Map<java.lang.String, java.lang.String> mergedConfig = org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.configHelper.getMergedConfig(baseConfig, overrideConfig);
    java.util.Set<java.lang.String> configsKeys = new java.util.HashSet<>();
    configsKeys.addAll(baseConfig.keySet());
    configsKeys.addAll(overrideConfig.keySet());
    org.junit.Assert.assertEquals(configsKeys.size(), mergedConfig.size());
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_VAL1, mergedConfig.get(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_NAME1));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_VAL2_H, mergedConfig.get(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_NAME2));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_VAL3, mergedConfig.get(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_NAME3));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_VAL4, mergedConfig.get(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_NAME4));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_VAL5, mergedConfig.get(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_NAME5));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_VAL6_H, mergedConfig.get(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.SERVICE_SITE_NAME6));
}","testGetMergedConfig()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapperTest.java","fd346f5fc28c1dfe605c3e53cb039c657ac2a2ab
e175b935e481ba8d14c46da4d65838738d3b8fd3
f3fcffbf47749d20b9071fddc37faff5d1281e83
c086dd1dcf3d7dd30de07e09277e78f48307d160
15d8d1a1485ec5e5441c31566ef8a16632d6046f
a928a9cd8f0c995e0aa5b9bc52c6b975d7f87edb
19e6518d42170a33ca2e0161ec2d3abb5190f976
249bb97a864c0f18278d37d87c2c3117809e5ca4
330a61cdbe34f97559359c67c5039623d9fc6e69
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f134cee07e9685a5a86fe73162b9a00bf60a9fef
0a9f6fa943e07164be0166981d0d65814068d34e
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
a6639a7c72043ff7bda03e6ba305913c7503193a
38700445bd793d27a8747d4c1d06b70f531ab677
fdd07bd8159efed093a5bea5b92fe6ec677f251e
2b539ef17d21c42690a3c98bf9e3198d31354b50
8def5a407399c56c51ad4edca1a59377dc3c3ba6
ad2f5442b3706235969c8982d3fa92fea808dc29
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
9faeaf5a525bfee0932c1a654b28651c0b1705dd
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
ce4020028973fadaa79f1bacea649de0b61dbe0c
96bad666fac95e6060253fb55941da12bf8216a1
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
c86976551f4dd1a437bed6e728ae39bbc2040736
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
6292620075cbb27760a06c3b6e733f905da36dd4
e0d72ad9314ec22e98e17a2fa723de6d0a518a00"
"testExecutionCommandHasVersionInfoWithoutCurrentClusterVersion","TRUE","4","assertFalse
assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.clusters.getCluster(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.CLUSTER1);
    org.apache.ambari.server.state.StackId stackId = cluster.getDesiredStackVersion();
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion = org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.ormTestHelper.getOrCreateRepositoryVersion(stackId, ""0.1-0000"");
    repositoryVersion.setResolved(false);
    org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.ormTestHelper.repositoryVersionDAO.merge(repositoryVersion);
    org.apache.ambari.server.state.Service service = cluster.getService(""HDFS"");
    service.setDesiredRepositoryVersion(repositoryVersion);
    org.apache.ambari.server.agent.ExecutionCommand executionCommand = new org.apache.ambari.server.agent.ExecutionCommand();
    java.util.Map<java.lang.String, java.lang.String> commandParams = new java.util.HashMap<>();
    executionCommand.setClusterName(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.CLUSTER1);
    executionCommand.setTaskId(1);
    executionCommand.setRequestAndStage(1, 1);
    executionCommand.setHostname(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.HOST1);
    executionCommand.setRole(""NAMENODE"");
    executionCommand.setRoleParams(java.util.Collections.<java.lang.String, java.lang.String>emptyMap());
    executionCommand.setRoleCommand(org.apache.ambari.server.RoleCommand.INSTALL);
    executionCommand.setServiceName(""HDFS"");
    executionCommand.setCommandType(org.apache.ambari.server.agent.AgentCommand.AgentCommandType.EXECUTION_COMMAND);
    executionCommand.setCommandParams(commandParams);
    java.lang.String json = org.apache.ambari.server.utils.StageUtils.getGson().toJson(executionCommand, org.apache.ambari.server.agent.ExecutionCommand.class);
    org.apache.ambari.server.actionmanager.ExecutionCommandWrapper execCommWrap = new org.apache.ambari.server.actionmanager.ExecutionCommandWrapper(json);
    org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.injector.injectMembers(execCommWrap);
    org.apache.ambari.server.agent.ExecutionCommand processedExecutionCommand = execCommWrap.getExecutionCommand();
    commandParams = processedExecutionCommand.getCommandParams();
    org.junit.Assert.assertFalse(commandParams.containsKey(org.apache.ambari.server.agent.ExecutionCommand.KeyNames.VERSION));
    executionCommand = new org.apache.ambari.server.agent.ExecutionCommand();
    commandParams = new java.util.HashMap<>();
    executionCommand.setClusterName(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.CLUSTER1);
    executionCommand.setTaskId(1);
    executionCommand.setRequestAndStage(1, 1);
    executionCommand.setHostname(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.HOST1);
    executionCommand.setRole(""NAMENODE"");
    executionCommand.setRoleParams(java.util.Collections.<java.lang.String, java.lang.String>emptyMap());
    executionCommand.setRoleCommand(org.apache.ambari.server.RoleCommand.START);
    executionCommand.setServiceName(""HDFS"");
    executionCommand.setCommandType(org.apache.ambari.server.agent.AgentCommand.AgentCommandType.EXECUTION_COMMAND);
    executionCommand.setCommandParams(commandParams);
    json = org.apache.ambari.server.utils.StageUtils.getGson().toJson(executionCommand, org.apache.ambari.server.agent.ExecutionCommand.class);
    execCommWrap = new org.apache.ambari.server.actionmanager.ExecutionCommandWrapper(json);
    org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.injector.injectMembers(execCommWrap);
    processedExecutionCommand = execCommWrap.getExecutionCommand();
    commandParams = processedExecutionCommand.getCommandParams();
    org.junit.Assert.assertFalse(commandParams.containsKey(org.apache.ambari.server.agent.ExecutionCommand.KeyNames.VERSION));
    repositoryVersion.setResolved(true);
    org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.ormTestHelper.repositoryVersionDAO.merge(repositoryVersion);
    execCommWrap = new org.apache.ambari.server.actionmanager.ExecutionCommandWrapper(json);
    org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.injector.injectMembers(execCommWrap);
    processedExecutionCommand = execCommWrap.getExecutionCommand();
    commandParams = processedExecutionCommand.getCommandParams();
    org.junit.Assert.assertEquals(""0.1-0000"", commandParams.get(org.apache.ambari.server.agent.ExecutionCommand.KeyNames.VERSION));
}","testExecutionCommandHasVersionInfoWithoutCurrentClusterVersion()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapperTest.java","fd346f5fc28c1dfe605c3e53cb039c657ac2a2ab
e175b935e481ba8d14c46da4d65838738d3b8fd3
f3fcffbf47749d20b9071fddc37faff5d1281e83
c086dd1dcf3d7dd30de07e09277e78f48307d160
15d8d1a1485ec5e5441c31566ef8a16632d6046f
a928a9cd8f0c995e0aa5b9bc52c6b975d7f87edb
19e6518d42170a33ca2e0161ec2d3abb5190f976
249bb97a864c0f18278d37d87c2c3117809e5ca4
330a61cdbe34f97559359c67c5039623d9fc6e69
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f134cee07e9685a5a86fe73162b9a00bf60a9fef
0a9f6fa943e07164be0166981d0d65814068d34e
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
a6639a7c72043ff7bda03e6ba305913c7503193a
38700445bd793d27a8747d4c1d06b70f531ab677
fdd07bd8159efed093a5bea5b92fe6ec677f251e
2b539ef17d21c42690a3c98bf9e3198d31354b50
8def5a407399c56c51ad4edca1a59377dc3c3ba6
ad2f5442b3706235969c8982d3fa92fea808dc29
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
9faeaf5a525bfee0932c1a654b28651c0b1705dd
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
ce4020028973fadaa79f1bacea649de0b61dbe0c
96bad666fac95e6060253fb55941da12bf8216a1
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
c86976551f4dd1a437bed6e728ae39bbc2040736
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
6292620075cbb27760a06c3b6e733f905da36dd4
e0d72ad9314ec22e98e17a2fa723de6d0a518a00"
"testExecutionCommandNoRepositoryFile","TRUE","3","assertFalse
assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.clusters.getCluster(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.CLUSTER1);
    org.apache.ambari.server.state.StackId stackId = cluster.getDesiredStackVersion();
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion = org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.ormTestHelper.getOrCreateRepositoryVersion(new org.apache.ambari.server.state.StackId(""HDP"", ""0.2""), ""0.2-0000"");
    repositoryVersion.setResolved(true);
    org.apache.ambari.server.state.Service service = cluster.addService(""HIVE"", repositoryVersion);
    service.setDesiredRepositoryVersion(repositoryVersion);
    repositoryVersion.addRepoOsEntities(new java.util.ArrayList<>());
    org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.ormTestHelper.repositoryVersionDAO.merge(repositoryVersion);
    org.apache.ambari.server.agent.ExecutionCommand executionCommand = new org.apache.ambari.server.agent.ExecutionCommand();
    java.util.Map<java.lang.String, java.lang.String> commandParams = new java.util.HashMap<>();
    executionCommand.setClusterName(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.CLUSTER1);
    executionCommand.setTaskId(1);
    executionCommand.setRequestAndStage(1, 1);
    executionCommand.setHostname(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.HOST1);
    executionCommand.setRole(""HIVE_SERVER"");
    executionCommand.setRoleParams(java.util.Collections.<java.lang.String, java.lang.String>emptyMap());
    executionCommand.setRoleCommand(org.apache.ambari.server.RoleCommand.INSTALL);
    executionCommand.setServiceName(""HIVE"");
    executionCommand.setCommandType(org.apache.ambari.server.agent.AgentCommand.AgentCommandType.EXECUTION_COMMAND);
    executionCommand.setCommandParams(commandParams);
    java.lang.String json = org.apache.ambari.server.utils.StageUtils.getGson().toJson(executionCommand, org.apache.ambari.server.agent.ExecutionCommand.class);
    org.apache.ambari.server.actionmanager.ExecutionCommandWrapper execCommWrap = new org.apache.ambari.server.actionmanager.ExecutionCommandWrapper(json);
    org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.injector.injectMembers(execCommWrap);
    org.apache.ambari.server.agent.ExecutionCommand processedExecutionCommand = execCommWrap.getExecutionCommand();
    commandParams = processedExecutionCommand.getCommandParams();
    org.junit.Assert.assertFalse(commandParams.containsKey(org.apache.ambari.server.agent.ExecutionCommand.KeyNames.VERSION));
    executionCommand = new org.apache.ambari.server.agent.ExecutionCommand();
    commandParams = new java.util.HashMap<>();
    executionCommand.setClusterName(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.CLUSTER1);
    executionCommand.setTaskId(1);
    executionCommand.setRequestAndStage(1, 1);
    executionCommand.setHostname(org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.HOST1);
    executionCommand.setRole(""HIVE_SERVER"");
    executionCommand.setRoleParams(java.util.Collections.<java.lang.String, java.lang.String>emptyMap());
    executionCommand.setRoleCommand(org.apache.ambari.server.RoleCommand.START);
    executionCommand.setServiceName(""HIVE"");
    executionCommand.setCommandType(org.apache.ambari.server.agent.AgentCommand.AgentCommandType.EXECUTION_COMMAND);
    executionCommand.setCommandParams(commandParams);
    json = org.apache.ambari.server.utils.StageUtils.getGson().toJson(executionCommand, org.apache.ambari.server.agent.ExecutionCommand.class);
    execCommWrap = new org.apache.ambari.server.actionmanager.ExecutionCommandWrapper(json);
    org.apache.ambari.server.actionmanager.ExecutionCommandWrapperTest.injector.injectMembers(execCommWrap);
    processedExecutionCommand = execCommWrap.getExecutionCommand();
    commandParams = processedExecutionCommand.getCommandParams();
    org.junit.Assert.assertEquals(""0.2-0000"", commandParams.get(org.apache.ambari.server.agent.ExecutionCommand.KeyNames.VERSION));
}","testExecutionCommandNoRepositoryFile()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapperTest.java","fd346f5fc28c1dfe605c3e53cb039c657ac2a2ab
e175b935e481ba8d14c46da4d65838738d3b8fd3
f3fcffbf47749d20b9071fddc37faff5d1281e83
c086dd1dcf3d7dd30de07e09277e78f48307d160
15d8d1a1485ec5e5441c31566ef8a16632d6046f
a928a9cd8f0c995e0aa5b9bc52c6b975d7f87edb
19e6518d42170a33ca2e0161ec2d3abb5190f976
249bb97a864c0f18278d37d87c2c3117809e5ca4
330a61cdbe34f97559359c67c5039623d9fc6e69
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f134cee07e9685a5a86fe73162b9a00bf60a9fef
0a9f6fa943e07164be0166981d0d65814068d34e
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
a6639a7c72043ff7bda03e6ba305913c7503193a
38700445bd793d27a8747d4c1d06b70f531ab677
fdd07bd8159efed093a5bea5b92fe6ec677f251e
2b539ef17d21c42690a3c98bf9e3198d31354b50
8def5a407399c56c51ad4edca1a59377dc3c3ba6
ad2f5442b3706235969c8982d3fa92fea808dc29
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
9faeaf5a525bfee0932c1a654b28651c0b1705dd
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
ce4020028973fadaa79f1bacea649de0b61dbe0c
96bad666fac95e6060253fb55941da12bf8216a1
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
c86976551f4dd1a437bed6e728ae39bbc2040736
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
6292620075cbb27760a06c3b6e733f905da36dd4
e0d72ad9314ec22e98e17a2fa723de6d0a518a00"
"testIsFailedState","TRUE","11","assertTrue
assertFalse","{
    org.junit.Assert.assertTrue(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED.isFailedState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED.isFailedState());
    org.junit.Assert.assertTrue(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED.isFailedState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS.isFailedState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING.isFailedState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED.isFailedState());
    org.junit.Assert.assertTrue(org.apache.ambari.server.actionmanager.HostRoleStatus.TIMEDOUT.isFailedState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.HOLDING.isFailedState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.HOLDING_FAILED.isFailedState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.HOLDING_TIMEDOUT.isFailedState());
}","testIsFailedState()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/HostRoleStatusTest.java","c2409e740f84d6f051659b3b36d853902e698a60
6247e8bdeb82074dbeeab0d63a5020cd49f67109
f4e0f6ca4050a36e3007928c0049672dc5263ac9
a67fb7cb3b0afafb4f07ef3db919c6bdac200a70"
"testIsCompletedState","TRUE","11","assertTrue
assertFalse","{
    org.junit.Assert.assertTrue(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED.isCompletedState());
    org.junit.Assert.assertTrue(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED.isCompletedState());
    org.junit.Assert.assertTrue(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED.isCompletedState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS.isCompletedState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING.isCompletedState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED.isCompletedState());
    org.junit.Assert.assertTrue(org.apache.ambari.server.actionmanager.HostRoleStatus.TIMEDOUT.isCompletedState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.HOLDING.isCompletedState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.HOLDING_FAILED.isCompletedState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.HOLDING_TIMEDOUT.isCompletedState());
}","testIsCompletedState()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/HostRoleStatusTest.java","c2409e740f84d6f051659b3b36d853902e698a60
6247e8bdeb82074dbeeab0d63a5020cd49f67109
f4e0f6ca4050a36e3007928c0049672dc5263ac9
a67fb7cb3b0afafb4f07ef3db919c6bdac200a70"
"testIsHoldingState","TRUE","11","assertFalse
assertTrue","{
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED.isHoldingState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED.isHoldingState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED.isHoldingState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS.isHoldingState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING.isHoldingState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED.isHoldingState());
    org.junit.Assert.assertFalse(org.apache.ambari.server.actionmanager.HostRoleStatus.TIMEDOUT.isHoldingState());
    org.junit.Assert.assertTrue(org.apache.ambari.server.actionmanager.HostRoleStatus.HOLDING.isHoldingState());
    org.junit.Assert.assertTrue(org.apache.ambari.server.actionmanager.HostRoleStatus.HOLDING_FAILED.isHoldingState());
    org.junit.Assert.assertTrue(org.apache.ambari.server.actionmanager.HostRoleStatus.HOLDING_TIMEDOUT.isHoldingState());
}","testIsHoldingState()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/HostRoleStatusTest.java","c2409e740f84d6f051659b3b36d853902e698a60
6247e8bdeb82074dbeeab0d63a5020cd49f67109
f4e0f6ca4050a36e3007928c0049672dc5263ac9
a67fb7cb3b0afafb4f07ef3db919c6bdac200a70"
"testAddServerActionCommand_userName","TRUE","3","assertEquals","{
    final org.apache.ambari.server.actionmanager.Stage stage = stageFactory.createNew(1, ""/tmp"", ""cluster1"", 978, ""context"", ""{\""host_param\"":\""param_value\""}"", ""{\""stage_param\"":\""param_value\""}"");
    stage.addServerActionCommand(org.apache.ambari.server.serveraction.upgrades.ConfigureAction.class.getName(), ""user1"", org.apache.ambari.server.Role.AMBARI_SERVER_ACTION, org.apache.ambari.server.RoleCommand.EXECUTE, ""cluster1"", new org.apache.ambari.server.state.svccomphost.ServiceComponentHostServerActionEvent(org.apache.ambari.server.utils.StageUtils.getHostName(), java.lang.System.currentTimeMillis()), java.util.Collections.emptyMap(), null, null, 1200, false, false);
    java.util.List<org.apache.ambari.server.actionmanager.ExecutionCommandWrapper> executionCommands = stage.getExecutionCommands(null);
    org.junit.Assert.assertEquals(1, executionCommands.size());
    java.lang.String actionUserName = executionCommands.get(0).getExecutionCommand().getRoleParams().get(org.apache.ambari.server.serveraction.ServerAction.ACTION_USER_NAME);
    org.junit.Assert.assertEquals(""user1"", actionUserName);
}","testAddServerActionCommand_userName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/StageTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
3a7906c84737511475e718a0da50397b31ef7b52
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
ee79dd21cca51646e3344c161ea61bc2e68f21fb
43f916b9056c8cea813cc6b5d514344da194d11a"
"testActionResponse","TRUE","5","assertEquals","{
    java.lang.String hostname = ""host1"";
    populateActionDB(db, hostname, requestId, stageId, false);
    org.apache.ambari.server.actionmanager.Stage stage = db.getAllStages(requestId).get(0);
    org.junit.Assert.assertEquals(stageId, stage.getStageId());
    stage.setHostRoleStatus(hostname, ""HBASE_MASTER"", org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED);
    db.hostRoleScheduled(stage, hostname, ""HBASE_MASTER"");
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setTaskId(1);
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr.setRole(""HBASE_MASTER"");
    cr.setStatus(""COMPLETED"");
    cr.setStdErr("""");
    cr.setStdOut("""");
    cr.setExitCode(215);
    reports.add(cr);
    am.processTaskResponse(hostname, reports, org.apache.ambari.server.utils.CommandUtils.convertToTaskIdCommandMap(stage.getOrderedHostRoleCommands()));
    am.processTaskResponse(hostname, reports, org.apache.ambari.server.utils.CommandUtils.convertToTaskIdCommandMap(stage.getOrderedHostRoleCommands()));
    org.junit.Assert.assertEquals(215, am.getAction(requestId, stageId).getExitCode(hostname, ""HBASE_MASTER""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED, am.getAction(requestId, stageId).getHostRoleStatus(hostname, ""HBASE_MASTER""));
    org.apache.ambari.server.actionmanager.Stage s = db.getAllStages(requestId).get(0);
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED, s.getHostRoleStatus(hostname, ""HBASE_MASTER""));
}","testActionResponse()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testCancelCommandReport","TRUE","5","assertEquals","{
    java.lang.String hostname = ""host1"";
    populateActionDB(db, hostname, requestId, stageId, false);
    org.apache.ambari.server.actionmanager.Stage stage = db.getAllStages(requestId).get(0);
    org.junit.Assert.assertEquals(stageId, stage.getStageId());
    stage.setHostRoleStatus(hostname, ""HBASE_MASTER"", org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED);
    db.hostRoleScheduled(stage, hostname, ""HBASE_MASTER"");
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setTaskId(1);
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr.setRole(""HBASE_MASTER"");
    cr.setStatus(""COMPLETED"");
    cr.setStdErr("""");
    cr.setStdOut("""");
    cr.setExitCode(0);
    reports.add(cr);
    am.processTaskResponse(hostname, reports, org.apache.ambari.server.utils.CommandUtils.convertToTaskIdCommandMap(stage.getOrderedHostRoleCommands()));
    org.junit.Assert.assertEquals(0, am.getAction(requestId, stageId).getExitCode(hostname, ""HBASE_MASTER""));
    org.junit.Assert.assertEquals(""HostRoleStatus should remain ABORTED "" + ""(command report status should be ignored)"", org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, am.getAction(requestId, stageId).getHostRoleStatus(hostname, ""HBASE_MASTER""));
    org.apache.ambari.server.actionmanager.Stage s = db.getAllStages(requestId).get(0);
    org.junit.Assert.assertEquals(""HostRoleStatus should remain ABORTED "" + ""(command report status should be ignored)"", org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, s.getHostRoleStatus(hostname, ""HBASE_MASTER""));
}","testCancelCommandReport()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testGetStagesInProgress","TRUE","2","assertEquals","{
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = new java.util.ArrayList<>();
    stages.add(createStubStage(hostName, requestId, stageId, false));
    stages.add(createStubStage(hostName, requestId, stageId + 1, false));
    org.apache.ambari.server.actionmanager.Request request = new org.apache.ambari.server.actionmanager.Request(stages, """", clusters);
    db.persistActions(request);
    org.junit.Assert.assertEquals(2, stages.size());
}","testGetStagesInProgress()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testGetStagesInProgressWithFailures","TRUE","4","assertEquals","{
    populateActionDB(db, hostName, requestId, stageId, false);
    populateActionDB(db, hostName, requestId + 1, stageId, false);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = db.getFirstStageInProgressPerRequest();
    org.junit.Assert.assertEquals(2, stages.size());
    db.abortOperation(requestId);
    stages = db.getFirstStageInProgressPerRequest();
    org.junit.Assert.assertEquals(1, stages.size());
    org.junit.Assert.assertEquals(requestId + 1, stages.get(0).getRequestId());
}","testGetStagesInProgressWithFailures()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testGetStagesInProgressWithManyStages","TRUE","10","assertEquals
assertTrue","{
    populateActionDBMultipleStages(3, db, hostName, requestId, stageId);
    populateActionDBMultipleStages(3, db, hostName, requestId + 1, stageId + 3);
    populateActionDBMultipleStages(3, db, hostName, requestId + 2, stageId + 3);
    int commandsInProgressCount = db.getCommandsInProgressCount();
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = db.getFirstStageInProgressPerRequest();
    org.junit.Assert.assertEquals(18, commandsInProgressCount);
    org.junit.Assert.assertEquals(3, stages.size());
    long lastRequestId = java.lang.Integer.MIN_VALUE;
    for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
        org.junit.Assert.assertTrue(stage.getRequestId() >= lastRequestId);
        lastRequestId = stage.getRequestId();
    }
    db.abortOperation(requestId);
    commandsInProgressCount = db.getCommandsInProgressCount();
    stages = db.getFirstStageInProgressPerRequest();
    org.junit.Assert.assertEquals(12, commandsInProgressCount);
    org.junit.Assert.assertEquals(2, stages.size());
    stages.get(0).setHostRoleStatus(hostName, org.apache.ambari.server.Role.HBASE_MASTER.toString(), org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED);
    db.hostRoleScheduled(stages.get(0), hostName, org.apache.ambari.server.Role.HBASE_MASTER.toString());
    commandsInProgressCount = db.getCommandsInProgressCount();
    stages = db.getFirstStageInProgressPerRequest();
    org.junit.Assert.assertEquals(11, commandsInProgressCount);
    org.junit.Assert.assertEquals(2, stages.size());
    stages.get(0).setHostRoleStatus(hostName, org.apache.ambari.server.Role.HBASE_REGIONSERVER.toString(), org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED);
    db.hostRoleScheduled(stages.get(0), hostName, org.apache.ambari.server.Role.HBASE_REGIONSERVER.toString());
    commandsInProgressCount = db.getCommandsInProgressCount();
    stages = db.getFirstStageInProgressPerRequest();
    org.junit.Assert.assertEquals(10, commandsInProgressCount);
    org.junit.Assert.assertEquals(2, stages.size());
}","testGetStagesInProgressWithManyStages()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testGetStagesInProgressWithManyCommands","TRUE","3","assertEquals","{
    for (int i = 0; i < 1000; i++) {
        java.lang.String hostName = ""c64-"" + i;
        clusters.addHost(hostName);
    }
    int requestCount = 1000;
    for (int i = 0; i < requestCount; i++) {
        java.lang.String hostName = ""c64-"" + i;
        populateActionDBMultipleStages(3, db, hostName, requestId + i, stageId);
    }
    int commandsInProgressCount = db.getCommandsInProgressCount();
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = db.getFirstStageInProgressPerRequest();
    org.junit.Assert.assertEquals(6000, commandsInProgressCount);
    org.junit.Assert.assertEquals(requestCount, stages.size());
}","testGetStagesInProgressWithManyCommands()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testPersistActions","TRUE","3","assertTrue","{
    populateActionDB(db, hostName, requestId, stageId, false);
    for (org.apache.ambari.server.actionmanager.Stage stage : db.getAllStages(requestId)) {
        org.apache.ambari.server.actionmanager.TestActionDBAccessorImpl.log.info(""taskId={}"" + stage.getExecutionCommands(hostName).get(0).getExecutionCommand().getTaskId());
        org.junit.Assert.assertTrue(stage.getExecutionCommands(hostName).get(0).getExecutionCommand().getTaskId() > 0);
        org.junit.Assert.assertTrue(executionCommandDAO.findByPK(stage.getExecutionCommands(hostName).get(0).getExecutionCommand().getTaskId()) != null);
    }
}","testPersistActions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testHostRoleScheduled","TRUE","7","assertEquals","{
    populateActionDB(db, hostName, requestId, stageId, false);
    org.apache.ambari.server.actionmanager.Stage stage = db.getStage(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, stage.getHostRoleStatus(hostName, org.apache.ambari.server.Role.HBASE_MASTER.toString()));
    java.util.List<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> entities = hostRoleCommandDAO.findByHostRole(hostName, requestId, stageId, org.apache.ambari.server.Role.HBASE_MASTER.toString());
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, entities.get(0).getStatus());
    stage.setHostRoleStatus(hostName, org.apache.ambari.server.Role.HBASE_MASTER.toString(), org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED);
    entities = hostRoleCommandDAO.findByHostRole(hostName, requestId, stageId, org.apache.ambari.server.Role.HBASE_MASTER.toString());
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, stage.getHostRoleStatus(hostName, org.apache.ambari.server.Role.HBASE_MASTER.toString()));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, entities.get(0).getStatus());
    db.hostRoleScheduled(stage, hostName, org.apache.ambari.server.Role.HBASE_MASTER.toString());
    entities = hostRoleCommandDAO.findByHostRole(hostName, requestId, stageId, org.apache.ambari.server.Role.HBASE_MASTER.toString());
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, entities.get(0).getStatus());
    java.lang.Thread thread = new java.lang.Thread() {
        @java.lang.Override
        public void run() {
            org.apache.ambari.server.actionmanager.Stage stage1 = db.getStage(""23-31"");
            stage1.setHostRoleStatus(hostName, org.apache.ambari.server.Role.HBASE_MASTER.toString(), org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED);
            db.hostRoleScheduled(stage1, hostName, org.apache.ambari.server.Role.HBASE_MASTER.toString());
            injector.getInstance(javax.persistence.EntityManager.class).clear();
        }
    };
    thread.start();
    thread.join();
    injector.getInstance(javax.persistence.EntityManager.class).clear();
    entities = hostRoleCommandDAO.findByHostRole(hostName, requestId, stageId, org.apache.ambari.server.Role.HBASE_MASTER.toString());
    org.junit.Assert.assertEquals(""Concurrent update failed"", org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED, entities.get(0).getStatus());
}","testHostRoleScheduled()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testCustomActionScheduled","TRUE","7","assertEquals","{
    populateActionDBWithCustomAction(db, hostName, requestId, stageId);
    org.apache.ambari.server.actionmanager.Stage stage = db.getStage(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, stage.getHostRoleStatus(hostName, actionName));
    java.util.List<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> entities = hostRoleCommandDAO.findByHostRole(hostName, requestId, stageId, actionName);
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, entities.get(0).getStatus());
    stage.setHostRoleStatus(hostName, actionName, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED);
    entities = hostRoleCommandDAO.findByHostRole(hostName, requestId, stageId, actionName);
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, stage.getHostRoleStatus(hostName, actionName));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, entities.get(0).getStatus());
    db.hostRoleScheduled(stage, hostName, actionName);
    entities = hostRoleCommandDAO.findByHostRole(hostName, requestId, stageId, actionName);
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, entities.get(0).getStatus());
    java.lang.Thread thread = new java.lang.Thread() {
        @java.lang.Override
        public void run() {
            org.apache.ambari.server.actionmanager.Stage stage1 = db.getStage(""23-31"");
            stage1.setHostRoleStatus(hostName, actionName, org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED);
            db.hostRoleScheduled(stage1, hostName, actionName);
            injector.getInstance(javax.persistence.EntityManager.class).clear();
        }
    };
    thread.start();
    thread.join();
    injector.getInstance(javax.persistence.EntityManager.class).clear();
    entities = hostRoleCommandDAO.findByHostRole(hostName, requestId, stageId, actionName);
    org.junit.Assert.assertEquals(""Concurrent update failed"", org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED, entities.get(0).getStatus());
}","testCustomActionScheduled()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testServerActionScheduled","TRUE","7","assertEquals","{
    populateActionDBWithServerAction(db, null, requestId, stageId);
    final java.lang.String roleName = org.apache.ambari.server.Role.AMBARI_SERVER_ACTION.toString();
    org.apache.ambari.server.actionmanager.Stage stage = db.getStage(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, stage.getHostRoleStatus(null, roleName));
    java.util.List<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> entities = hostRoleCommandDAO.findByHostRole(null, requestId, stageId, roleName);
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, entities.get(0).getStatus());
    stage.setHostRoleStatus(null, roleName, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED);
    entities = hostRoleCommandDAO.findByHostRole(null, requestId, stageId, roleName);
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, stage.getHostRoleStatus(null, roleName));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, entities.get(0).getStatus());
    db.hostRoleScheduled(stage, null, roleName);
    entities = hostRoleCommandDAO.findByHostRole(null, requestId, stageId, roleName);
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, entities.get(0).getStatus());
    java.lang.Thread thread = new java.lang.Thread() {
        @java.lang.Override
        public void run() {
            org.apache.ambari.server.actionmanager.Stage stage1 = db.getStage(""23-31"");
            stage1.setHostRoleStatus(null, roleName, org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED);
            db.hostRoleScheduled(stage1, null, roleName);
            injector.getInstance(javax.persistence.EntityManager.class).clear();
        }
    };
    thread.start();
    thread.join();
    injector.getInstance(javax.persistence.EntityManager.class).clear();
    entities = hostRoleCommandDAO.findByHostRole(null, requestId, stageId, roleName);
    org.junit.Assert.assertEquals(""Concurrent update failed"", org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED, entities.get(0).getStatus());
}","testServerActionScheduled()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testUpdateHostRole","TRUE","6","assertEquals
assertNotNull
assertTrue","{
    populateActionDB(db, hostName, requestId, stageId, false);
    java.lang.StringBuilder sb = new java.lang.StringBuilder();
    for (int i = 0; i < 50000; i++) {
        sb.append(""1234567890"");
    }
    java.lang.String largeString = sb.toString();
    org.apache.ambari.server.agent.CommandReport commandReport = new org.apache.ambari.server.agent.CommandReport();
    commandReport.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED.toString());
    commandReport.setStdOut(largeString);
    commandReport.setStdErr(largeString);
    commandReport.setStructuredOut(largeString);
    commandReport.setExitCode(123);
    db.updateHostRoleState(hostName, requestId, stageId, org.apache.ambari.server.Role.HBASE_MASTER.toString(), commandReport);
    java.util.List<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> commandEntities = hostRoleCommandDAO.findByHostRole(hostName, requestId, stageId, org.apache.ambari.server.Role.HBASE_MASTER.toString());
    org.junit.Assert.assertEquals(1, commandEntities.size());
    org.apache.ambari.server.orm.entities.HostRoleCommandEntity commandEntity = commandEntities.get(0);
    org.apache.ambari.server.actionmanager.HostRoleCommand command = db.getTask(commandEntity.getTaskId());
    org.junit.Assert.assertNotNull(command);
    org.junit.Assert.assertEquals(largeString, command.getStdout());
    org.junit.Assert.assertEquals(largeString, command.getStructuredOut());
    org.junit.Assert.assertTrue(command.getEndTime() != (-1));
}","testUpdateHostRole()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testUpdateHostRoleTimeoutRetry","TRUE","3","assertNotNull
assertEquals","{
    populateActionDB(db, hostName, requestId, stageId, true);
    org.apache.ambari.server.agent.CommandReport commandReport = new org.apache.ambari.server.agent.CommandReport();
    commandReport.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.TIMEDOUT.toString());
    commandReport.setStdOut("""");
    commandReport.setStdErr("""");
    commandReport.setStructuredOut("""");
    commandReport.setExitCode(123);
    db.updateHostRoleState(hostName, requestId, stageId, org.apache.ambari.server.Role.HBASE_MASTER.toString(), commandReport);
    java.util.List<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> commandEntities = hostRoleCommandDAO.findByHostRole(hostName, requestId, stageId, org.apache.ambari.server.Role.HBASE_MASTER.toString());
    org.apache.ambari.server.orm.entities.HostRoleCommandEntity commandEntity = commandEntities.get(0);
    org.apache.ambari.server.actionmanager.HostRoleCommand command = db.getTask(commandEntity.getTaskId());
    org.junit.Assert.assertNotNull(command);
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.HOLDING_TIMEDOUT, command.getStatus());
}","testUpdateHostRoleTimeoutRetry()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testGetRequestsByStatus","TRUE","3","assertNotNull
assertEquals","{
    java.util.List<java.lang.Long> requestIds = new java.util.ArrayList<>();
    requestIds.add(requestId + 1);
    requestIds.add(requestId);
    populateActionDB(db, hostName, requestId, stageId, false);
    clusters.addHost(""host2"");
    populateActionDB(db, hostName, requestId + 1, stageId, false);
    java.util.List<java.lang.Long> requestIdsResult = db.getRequestsByStatus(null, org.apache.ambari.server.api.services.BaseRequest.DEFAULT_PAGE_SIZE, false);
    org.junit.Assert.assertNotNull(""List of request IDs is null"", requestIdsResult);
    org.junit.Assert.assertEquals(""Request IDs not matches"", requestIds, requestIdsResult);
}","testGetRequestsByStatus()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testGetCompletedRequests","TRUE","5","assertEquals
assertTrue","{
    java.util.List<java.lang.Long> requestIds = new java.util.ArrayList<>();
    requestIds.add(requestId);
    requestIds.add(requestId + 1);
    populateActionDBWithCompletedRequest(db, hostName, requestId, stageId);
    java.util.List<java.lang.Long> requestIdsResult = db.getRequestsByStatus(org.apache.ambari.server.actionmanager.RequestStatus.COMPLETED, org.apache.ambari.server.api.services.BaseRequest.DEFAULT_PAGE_SIZE, false);
    org.junit.Assert.assertEquals(1, requestIdsResult.size());
    org.junit.Assert.assertTrue(requestIdsResult.contains(requestId));
    populateActionDBWithPartiallyCompletedRequest(db, hostName, requestId + 1, stageId);
    requestIdsResult = db.getRequestsByStatus(org.apache.ambari.server.actionmanager.RequestStatus.COMPLETED, org.apache.ambari.server.api.services.BaseRequest.DEFAULT_PAGE_SIZE, false);
    org.junit.Assert.assertEquals(1, requestIdsResult.size());
    org.junit.Assert.assertTrue(requestIdsResult.contains(requestId));
}","testGetCompletedRequests()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testGetRequestsByStatusWithParams","TRUE","4","assertEquals","{
    java.util.List<java.lang.Long> ids = new java.util.ArrayList<>();
    for (long l = 1; l <= 10; l++) {
        ids.add(l);
    }
    for (java.lang.Long id : ids) {
        populateActionDB(db, hostName, id, stageId, false);
    }
    java.util.List<java.lang.Long> expected = null;
    java.util.List<java.lang.Long> actual = null;
    actual = db.getRequestsByStatus(null, org.apache.ambari.server.api.services.BaseRequest.DEFAULT_PAGE_SIZE, false);
    expected = reverse(new java.util.ArrayList<>(ids));
    org.junit.Assert.assertEquals(""Request IDs not matches"", expected, actual);
    actual = db.getRequestsByStatus(null, 4, false);
    expected = reverse(new java.util.ArrayList<>(ids.subList(ids.size() - 4, ids.size())));
    org.junit.Assert.assertEquals(""Request IDs not matches"", expected, actual);
    actual = db.getRequestsByStatus(null, 7, true);
    expected = new java.util.ArrayList<>(ids.subList(0, 7));
    org.junit.Assert.assertEquals(""Request IDs not matches"", expected, actual);
}","testGetRequestsByStatusWithParams()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testAbortRequest","TRUE","5","assertEquals","{
    org.apache.ambari.server.actionmanager.Stage s = stageFactory.createNew(requestId, ""/a/b"", ""cluster1"", 1L, ""action db accessor test"", ""commandParamsStage"", ""hostParamsStage"");
    s.setStageId(stageId);
    clusters.addHost(""host2"");
    clusters.addHost(""host3"");
    clusters.addHost(""host4"");
    s.addHostRoleExecutionCommand(""host1"", org.apache.ambari.server.Role.HBASE_MASTER, org.apache.ambari.server.RoleCommand.START, new org.apache.ambari.server.state.svccomphost.ServiceComponentHostStartEvent(org.apache.ambari.server.Role.HBASE_MASTER.toString(), ""host1"", java.lang.System.currentTimeMillis()), ""cluster1"", ""HBASE"", false, false);
    s.addHostRoleExecutionCommand(""host2"", org.apache.ambari.server.Role.HBASE_MASTER, org.apache.ambari.server.RoleCommand.START, new org.apache.ambari.server.state.svccomphost.ServiceComponentHostStartEvent(org.apache.ambari.server.Role.HBASE_MASTER.toString(), ""host2"", java.lang.System.currentTimeMillis()), ""cluster1"", ""HBASE"", false, false);
    s.addHostRoleExecutionCommand(""host3"", org.apache.ambari.server.Role.HBASE_REGIONSERVER, org.apache.ambari.server.RoleCommand.START, new org.apache.ambari.server.state.svccomphost.ServiceComponentHostStartEvent(org.apache.ambari.server.Role.HBASE_REGIONSERVER.toString(), ""host3"", java.lang.System.currentTimeMillis()), ""cluster1"", ""HBASE"", false, false);
    s.addHostRoleExecutionCommand(""host4"", org.apache.ambari.server.Role.HBASE_REGIONSERVER, org.apache.ambari.server.RoleCommand.START, new org.apache.ambari.server.state.svccomphost.ServiceComponentHostStartEvent(org.apache.ambari.server.Role.HBASE_REGIONSERVER.toString(), ""host4"", java.lang.System.currentTimeMillis()), ""cluster1"", ""HBASE"", false, false);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = new java.util.ArrayList<>();
    stages.add(s);
    s.getOrderedHostRoleCommands().get(0).setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING);
    s.getOrderedHostRoleCommands().get(1).setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS);
    s.getOrderedHostRoleCommands().get(2).setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED);
    org.apache.ambari.server.actionmanager.HostRoleCommand cmd = s.getOrderedHostRoleCommands().get(3);
    java.lang.String hostName = cmd.getHostName();
    cmd.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED);
    org.apache.ambari.server.actionmanager.Request request = new org.apache.ambari.server.actionmanager.Request(stages, """", clusters);
    request.setClusterHostInfo(""clusterHostInfo"");
    db.persistActions(request);
    db.abortOperation(requestId);
    java.util.List<java.lang.Long> aborted = new java.util.ArrayList<>();
    java.util.List<org.apache.ambari.server.actionmanager.HostRoleCommand> commands = db.getRequestTasks(requestId);
    for (org.apache.ambari.server.actionmanager.HostRoleCommand command : commands) {
        if (command.getHostName().equals(hostName)) {
            org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED, command.getStatus());
        } else {
            org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, command.getStatus());
            aborted.add(command.getTaskId());
        }
    }
    db.resubmitTasks(aborted);
    commands = db.getRequestTasks(requestId);
    for (org.apache.ambari.server.actionmanager.HostRoleCommand command : commands) {
        if (command.getHostName().equals(hostName)) {
            org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED, command.getStatus());
        } else {
            org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, command.getStatus());
        }
    }
}","testAbortRequest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testEntitiesCreatedWithIDs","TRUE","4","assertEquals","{
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = new java.util.ArrayList<>();
    org.apache.ambari.server.actionmanager.Stage stage = createStubStage(hostName, requestId, stageId, false);
    stages.add(stage);
    org.apache.ambari.server.actionmanager.Request request = new org.apache.ambari.server.actionmanager.Request(stages, """", clusters);
    db.persistActions(request);
    java.util.List<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> commandEntities = hostRoleCommandDAO.findByRequest(requestId);
    org.junit.Assert.assertEquals(2, commandEntities.size());
    for (org.apache.ambari.server.orm.entities.HostRoleCommandEntity entity : commandEntities) {
        org.junit.Assert.assertEquals(java.lang.Long.valueOf(requestId), entity.getRequestId());
        org.junit.Assert.assertEquals(java.lang.Long.valueOf(stageId), entity.getStageId());
    }
}","testEntitiesCreatedWithIDs()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testGet1000TasksFromOracleDB","TRUE","4","assertEquals","{
    org.apache.ambari.server.actionmanager.Stage s = stageFactory.createNew(requestId, ""/a/b"", ""cluster1"", 1L, ""action db accessor test"", ""commandParamsStage"", ""hostParamsStage"");
    s.setStageId(stageId);
    for (int i = 1000; i < 2002; i++) {
        java.lang.String host = ""host"" + i;
        clusters.addHost(host);
        s.addHostRoleExecutionCommand(""host"" + i, org.apache.ambari.server.Role.HBASE_MASTER, org.apache.ambari.server.RoleCommand.START, null, ""cluster1"", ""HBASE"", false, false);
    }
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = new java.util.ArrayList<>();
    stages.add(s);
    org.apache.ambari.server.actionmanager.Request request = new org.apache.ambari.server.actionmanager.Request(stages, """", clusters);
    request.setClusterHostInfo(""clusterHostInfo"");
    db.persistActions(request);
    java.util.List<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> entities = hostRoleCommandDAO.findByRequest(request.getRequestId());
    org.junit.Assert.assertEquals(1002, entities.size());
    java.util.List<java.lang.Long> taskIds = new java.util.ArrayList<>();
    for (org.apache.ambari.server.orm.entities.HostRoleCommandEntity entity : entities) {
        taskIds.add(entity.getTaskId());
    }
    org.apache.ambari.server.actionmanager.TestActionDBAccessorImpl.TestDBAccessorImpl testDBAccessorImpl = ((org.apache.ambari.server.actionmanager.TestActionDBAccessorImpl.TestDBAccessorImpl) (injector.getInstance(org.apache.ambari.server.orm.DBAccessor.class)));
    testDBAccessorImpl.setDbTypeOverride(org.apache.ambari.server.orm.DBAccessor.DbType.ORACLE);
    org.junit.Assert.assertEquals(org.apache.ambari.server.orm.DBAccessor.DbType.ORACLE, injector.getInstance(org.apache.ambari.server.orm.DBAccessor.class).getDbType());
    entities = hostRoleCommandDAO.findByPKs(taskIds);
    org.junit.Assert.assertEquals(""Tasks returned from DB match the ones created"", taskIds.size(), entities.size());
}","testGet1000TasksFromOracleDB()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionDBAccessorImpl.java","5ae98dbeb1ad7752d02235a61d2869be2e284f55
2170ce0321b8ea2c772c5dcdce38c4d94bea8175
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
da5605706555d3aecca7a67fb399d9c501972ad4
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
65e50eee97fb6e739556d8b93c691273b52fce36
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
4a5076d7628acc1fdccfe3bfb90b6b687a597fe0
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
f73936a281896b82e89a64399f712d0e17142637
3beda060b31d1b5a359ff52567e12a00eb70147d
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
31d8208b8ba2bf87bb089532a8fe093ef606385f
45c2a9d9eb1739f39a250a7633e7808cfe30bbbe
6b8ecd54c5a25e65fb43df8cca15dc69bd32ee5e
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
5dff4516ae9ab962aaefcdf535e0d41df698e948
cb6765fae3d149b4918d60b166dade4f1f1bd178
41046349c5f3814f3812112fa4b6077904d040f2
668d4c26d2af899c4a84873794ee5d4241a0a975
c6987eeef05bce7404635a9a88a4f30b94c134e0
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
36e179e4e6cc114621e6177de1d5faa860805d43
9948a0ac5385e2cbf484f8675e67185be24b6cb9
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
66236896786a64eb7bb47859317a9107f98ed4e8
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testActionResponse","TRUE","9","assertEquals
assertNotNull
assertFalse","{
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = injector.getInstance(org.apache.ambari.server.actionmanager.ActionDBAccessorImpl.class);
    org.apache.ambari.server.actionmanager.ActionManager am = injector.getInstance(org.apache.ambari.server.actionmanager.ActionManager.class);
    populateActionDB(db, hostname);
    org.apache.ambari.server.actionmanager.Stage stage = db.getAllStages(requestId).get(0);
    junit.framework.Assert.assertEquals(stageId, stage.getStageId());
    stage.setHostRoleStatus(hostname, ""HBASE_MASTER"", org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED);
    db.hostRoleScheduled(stage, hostname, ""HBASE_MASTER"");
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setTaskId(1);
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr.setRole(""HBASE_MASTER"");
    cr.setStatus(""COMPLETED"");
    cr.setStdErr(""ERROR"");
    cr.setStdOut(""OUTPUT"");
    cr.setStructuredOut(""STRUCTURED_OUTPUT"");
    cr.setExitCode(215);
    reports.add(cr);
    am.processTaskResponse(hostname, reports, org.apache.ambari.server.utils.CommandUtils.convertToTaskIdCommandMap(stage.getOrderedHostRoleCommands()));
    org.junit.Assert.assertEquals(215, am.getAction(requestId, stageId).getExitCode(hostname, ""HBASE_MASTER""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED, am.getAction(requestId, stageId).getHostRoleStatus(hostname, ""HBASE_MASTER""));
    org.junit.Assert.assertEquals(""ERROR"", am.getAction(requestId, stageId).getHostRoleCommand(hostname, ""HBASE_MASTER"").getStderr());
    org.junit.Assert.assertEquals(""OUTPUT"", am.getAction(requestId, stageId).getHostRoleCommand(hostname, ""HBASE_MASTER"").getStdout());
    org.junit.Assert.assertEquals(""STRUCTURED_OUTPUT"", am.getAction(requestId, stageId).getHostRoleCommand(hostname, ""HBASE_MASTER"").getStructuredOut());
    org.junit.Assert.assertNotNull(db.getRequest(requestId));
    org.junit.Assert.assertFalse(db.getRequest(requestId).getEndTime() == (-1));
}","testActionResponse()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionManager.java","30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
4b672348dacb96466275b8bfa2c41b62885f993c
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
6df4da1683c56b0f8facc6fb5d33529fd9781fdb
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
9faeaf5a525bfee0932c1a654b28651c0b1705dd
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
cb6765fae3d149b4918d60b166dade4f1f1bd178
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
34b7929db75bd2ceabf2d6a8438e60a25190cf1d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
8abee8ac5cd22fb4eeae7da09765b287b55bdaf5
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
76849482eef70ae3180deee2707d6cdfd1789414
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testActionResponsesUnsorted","TRUE","4","assertEquals","{
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = injector.getInstance(org.apache.ambari.server.actionmanager.ActionDBAccessorImpl.class);
    org.apache.ambari.server.actionmanager.ActionManager am = injector.getInstance(org.apache.ambari.server.actionmanager.ActionManager.class);
    populateActionDBWithTwoCommands(db, hostname);
    org.apache.ambari.server.actionmanager.Stage stage = db.getAllStages(requestId).get(0);
    junit.framework.Assert.assertEquals(stageId, stage.getStageId());
    stage.setHostRoleStatus(hostname, ""HBASE_MASTER"", org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED);
    db.hostRoleScheduled(stage, hostname, ""HBASE_MASTER"");
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setTaskId(2);
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr.setRole(""HBASE_REGIONSERVER"");
    cr.setStatus(""COMPLETED"");
    cr.setStdErr(""ERROR"");
    cr.setStdOut(""OUTPUT"");
    cr.setStructuredOut(""STRUCTURED_OUTPUT"");
    cr.setExitCode(215);
    reports.add(cr);
    org.apache.ambari.server.agent.CommandReport cr2 = new org.apache.ambari.server.agent.CommandReport();
    cr2.setTaskId(1);
    cr2.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr2.setRole(""HBASE_MASTER"");
    cr2.setStatus(""IN_PROGRESS"");
    cr2.setStdErr(""ERROR"");
    cr2.setStdOut(""OUTPUT"");
    cr2.setStructuredOut(""STRUCTURED_OUTPUT"");
    cr2.setExitCode(215);
    reports.add(cr2);
    am.processTaskResponse(hostname, reports, org.apache.ambari.server.utils.CommandUtils.convertToTaskIdCommandMap(am.getTasks(java.util.Arrays.asList(new java.lang.Long[]{ 1L, 2L }))));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS, am.getAction(requestId, stageId).getHostRoleStatus(hostname, ""HBASE_MASTER""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, am.getAction(requestId, stageId).getHostRoleStatus(hostname, ""HBASE_REGIONSERVER""));
}","testActionResponsesUnsorted()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionManager.java","30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
4b672348dacb96466275b8bfa2c41b62885f993c
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
6df4da1683c56b0f8facc6fb5d33529fd9781fdb
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
9faeaf5a525bfee0932c1a654b28651c0b1705dd
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
cb6765fae3d149b4918d60b166dade4f1f1bd178
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
34b7929db75bd2ceabf2d6a8438e60a25190cf1d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
8abee8ac5cd22fb4eeae7da09765b287b55bdaf5
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
76849482eef70ae3180deee2707d6cdfd1789414
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testLargeLogs","TRUE","7","assertEquals","{
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = injector.getInstance(org.apache.ambari.server.actionmanager.ActionDBAccessorImpl.class);
    org.apache.ambari.server.actionmanager.ActionManager am = injector.getInstance(org.apache.ambari.server.actionmanager.ActionManager.class);
    populateActionDB(db, hostname);
    org.apache.ambari.server.actionmanager.Stage stage = db.getAllStages(requestId).get(0);
    junit.framework.Assert.assertEquals(stageId, stage.getStageId());
    stage.setHostRoleStatus(hostname, ""HBASE_MASTER"", org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED);
    db.hostRoleScheduled(stage, hostname, ""HBASE_MASTER"");
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setTaskId(1);
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr.setRole(""HBASE_MASTER"");
    cr.setStatus(""COMPLETED"");
    java.lang.String errLog = java.util.Arrays.toString(new byte[100000]);
    java.lang.String outLog = java.util.Arrays.toString(new byte[110000]);
    cr.setStdErr(errLog);
    cr.setStdOut(outLog);
    cr.setStructuredOut(outLog);
    cr.setExitCode(215);
    reports.add(cr);
    am.processTaskResponse(hostname, reports, org.apache.ambari.server.utils.CommandUtils.convertToTaskIdCommandMap(stage.getOrderedHostRoleCommands()));
    org.junit.Assert.assertEquals(215, am.getAction(requestId, stageId).getExitCode(hostname, ""HBASE_MASTER""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED, am.getAction(requestId, stageId).getHostRoleStatus(hostname, ""HBASE_MASTER""));
    org.junit.Assert.assertEquals(errLog.length(), am.getAction(requestId, stageId).getHostRoleCommand(hostname, ""HBASE_MASTER"").getStderr().length());
    org.junit.Assert.assertEquals(outLog.length(), am.getAction(requestId, stageId).getHostRoleCommand(hostname, ""HBASE_MASTER"").getStdout().length());
    org.junit.Assert.assertEquals(outLog.length(), am.getAction(requestId, stageId).getHostRoleCommand(hostname, ""HBASE_MASTER"").getStructuredOut().length());
}","testLargeLogs()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionManager.java","30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
4b672348dacb96466275b8bfa2c41b62885f993c
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
6df4da1683c56b0f8facc6fb5d33529fd9781fdb
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
9faeaf5a525bfee0932c1a654b28651c0b1705dd
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
cb6765fae3d149b4918d60b166dade4f1f1bd178
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
34b7929db75bd2ceabf2d6a8438e60a25190cf1d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
8abee8ac5cd22fb4eeae7da09765b287b55bdaf5
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
76849482eef70ae3180deee2707d6cdfd1789414
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testCascadeDeleteStages","TRUE","3","assertEquals","{
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = injector.getInstance(org.apache.ambari.server.actionmanager.ActionDBAccessorImpl.class);
    org.apache.ambari.server.actionmanager.ActionManager am = injector.getInstance(org.apache.ambari.server.actionmanager.ActionManager.class);
    populateActionDB(db, hostname);
    org.junit.Assert.assertEquals(1, clusters.getClusters().size());
    clusters.getCluster(clusterName);
    clusters.deleteCluster(clusterName);
    org.junit.Assert.assertEquals(0, clusters.getClusters().size());
}","testCascadeDeleteStages()","Ignore
Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionManager.java","30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
4b672348dacb96466275b8bfa2c41b62885f993c
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
6df4da1683c56b0f8facc6fb5d33529fd9781fdb
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
9faeaf5a525bfee0932c1a654b28651c0b1705dd
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
cb6765fae3d149b4918d60b166dade4f1f1bd178
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
34b7929db75bd2ceabf2d6a8438e60a25190cf1d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
8abee8ac5cd22fb4eeae7da09765b287b55bdaf5
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
76849482eef70ae3180deee2707d6cdfd1789414
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testGetActions","TRUE","2","assertSame","{
    int requestId = 500;
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = EasyMock.createStrictMock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.state.Clusters clusters = EasyMock.createNiceMock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.actionmanager.Stage stage1 = EasyMock.createNiceMock(org.apache.ambari.server.actionmanager.Stage.class);
    org.apache.ambari.server.actionmanager.Stage stage2 = EasyMock.createNiceMock(org.apache.ambari.server.actionmanager.Stage.class);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> listStages = new java.util.ArrayList<>();
    listStages.add(stage1);
    listStages.add(stage2);
    EasyMock.expect(db.getLastPersistedRequestIdWhenInitialized()).andReturn(java.lang.Long.valueOf(1000));
    EasyMock.expect(db.getAllStages(requestId)).andReturn(listStages);
    EasyMock.replay(db, clusters);
    org.apache.ambari.server.actionmanager.ActionScheduler actionScheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(0, 0, db, EasyMock.createNiceMock(org.apache.ambari.server.events.publishers.JPAEventPublisher.class));
    org.apache.ambari.server.actionmanager.ActionManager manager = new org.apache.ambari.server.actionmanager.ActionManager(db, injector.getInstance(org.apache.ambari.server.actionmanager.RequestFactory.class), actionScheduler);
    org.junit.Assert.assertSame(listStages, manager.getActions(requestId));
    EasyMock.verify(db, clusters);
}","testGetActions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionManager.java","30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
4b672348dacb96466275b8bfa2c41b62885f993c
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
6df4da1683c56b0f8facc6fb5d33529fd9781fdb
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
9faeaf5a525bfee0932c1a654b28651c0b1705dd
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
cb6765fae3d149b4918d60b166dade4f1f1bd178
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
34b7929db75bd2ceabf2d6a8438e60a25190cf1d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
8abee8ac5cd22fb4eeae7da09765b287b55bdaf5
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
76849482eef70ae3180deee2707d6cdfd1789414
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testPersistCommandsWithStages","TRUE","4","assertEquals
assertNotNull
assertTrue","{
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = injector.getInstance(org.apache.ambari.server.actionmanager.ActionDBAccessorImpl.class);
    populateActionDBWithTwoCommands(db, hostname);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = db.getAllStages(requestId);
    org.junit.Assert.assertEquals(1, stages.size());
    org.apache.ambari.server.actionmanager.Stage stage = stages.get(0);
    org.apache.ambari.server.orm.entities.StageEntityPK pk = new org.apache.ambari.server.orm.entities.StageEntityPK();
    pk.setRequestId(stage.getRequestId());
    pk.setStageId(stage.getStageId());
    org.apache.ambari.server.orm.dao.StageDAO dao = injector.getInstance(org.apache.ambari.server.orm.dao.StageDAO.class);
    org.apache.ambari.server.orm.entities.StageEntity stageEntity = dao.findByPK(pk);
    org.junit.Assert.assertNotNull(stageEntity);
    java.util.Collection<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> commandEntities = stageEntity.getHostRoleCommands();
    org.junit.Assert.assertTrue(org.apache.commons.collections.CollectionUtils.isNotEmpty(commandEntities));
}","testPersistCommandsWithStages()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionManager.java","30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
4b672348dacb96466275b8bfa2c41b62885f993c
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
38700445bd793d27a8747d4c1d06b70f531ab677
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
8def5a407399c56c51ad4edca1a59377dc3c3ba6
6df4da1683c56b0f8facc6fb5d33529fd9781fdb
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3d397dc04aab8d81c00aae2a8e5afa099fc57567
9faeaf5a525bfee0932c1a654b28651c0b1705dd
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
cb6765fae3d149b4918d60b166dade4f1f1bd178
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
4059a69ed5ede2aab6fdb27b90df3496497852c0
22f5fdfb70916fb5ffe486c6bcb50f36bc0de1b4
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
34b7929db75bd2ceabf2d6a8438e60a25190cf1d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
b2fae8cb54d2e4929437d941e831dcb584c5f645
8abee8ac5cd22fb4eeae7da09765b287b55bdaf5
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
1ed554e97229d5ac7745fd3843764619bb8e7130
76849482eef70ae3180deee2707d6cdfd1789414
1e4001f4739302f429442f6d8ca5662c581fff16
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
a992578aafee3d83bf107824ba9f5bce7fb63f0d"
"testActionSchedule","TRUE","9","assertTrue
assertEquals","{
    java.lang.reflect.Type type = new com.google.common.reflect.TypeToken<java.util.Map<java.lang.String, java.util.Set<java.lang.String>>>() {}.getType();
    java.util.Map<java.lang.String, java.util.Set<java.lang.String>> clusterHostInfo = org.apache.ambari.server.utils.StageUtils.getGson().fromJson(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO, type);
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(fsm.getClusterById(Matchers.anyLong())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(oneClusterMock.getClusterId()).thenReturn(java.lang.Long.valueOf(1L));
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    org.apache.ambari.server.state.Host host = Mockito.mock(org.apache.ambari.server.state.Host.class);
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(hostname, sch);
    org.apache.ambari.server.orm.entities.HostEntity hostEntity = new org.apache.ambari.server.orm.entities.HostEntity();
    hostEntity.setHostName(hostname);
    hostEntity.setHostId(hostId);
    hostDAO.merge(hostEntity);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    Mockito.when(fsm.getHost(Matchers.anyString())).thenReturn(host);
    Mockito.when(host.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host.getHostName()).thenReturn(hostname);
    Mockito.when(host.getHostId()).thenReturn(hostId);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessorImpl.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    org.apache.ambari.server.actionmanager.Stage s = org.apache.ambari.server.utils.StageUtils.getATestStage(1, 977, hostname, ""{\""host_param\"":\""param_value\""}"", ""{\""stage_param\"":\""param_value\""}"");
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = java.util.Collections.singletonList(s);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stages);
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 5, db, fsm, 10000, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, null, agentCommandsPublisher);
    scheduler.setTaskTimeoutAdjustment(false);
    java.util.List<org.apache.ambari.server.agent.AgentCommand> commands = waitForQueueSize(hostId, agentCommandsPublisher, 1, scheduler);
    org.junit.Assert.assertTrue((commands != null) && (commands.size() == 1));
    org.apache.ambari.server.agent.AgentCommand scheduledCommand = commands.get(0);
    org.junit.Assert.assertTrue(scheduledCommand instanceof org.apache.ambari.server.agent.ExecutionCommand);
    org.junit.Assert.assertEquals(""1-977"", ((org.apache.ambari.server.agent.ExecutionCommand) (scheduledCommand)).getCommandId());
    org.junit.Assert.assertEquals(clusterHostInfo, ((org.apache.ambari.server.agent.ExecutionCommand) (scheduledCommand)).getClusterHostInfo());
    commands = waitForQueueSize(hostId, agentCommandsPublisher, 2, scheduler);
    org.junit.Assert.assertTrue((commands != null) && (commands.size() == 2));
    scheduledCommand = commands.get(1);
    org.junit.Assert.assertTrue(scheduledCommand instanceof org.apache.ambari.server.agent.ExecutionCommand);
    org.junit.Assert.assertEquals(""1-977"", ((org.apache.ambari.server.agent.ExecutionCommand) (scheduledCommand)).getCommandId());
    org.junit.Assert.assertEquals(clusterHostInfo, ((org.apache.ambari.server.agent.ExecutionCommand) (scheduledCommand)).getClusterHostInfo());
    s.setHostRoleStatus(hostname, ""NAMENODE"", org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED);
    scheduler.doWork();
    org.easymock.EasyMock.verify(entityManagerProviderMock);
}","testActionSchedule()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testActionScheduleWithDependencyOrderedCommandExecution","TRUE","9","assertTrue
assertEquals","{
    java.lang.reflect.Type type = new com.google.common.reflect.TypeToken<java.util.Map<java.lang.String, java.util.Set<java.lang.String>>>() {}.getType();
    java.util.Map<java.lang.String, java.util.List<java.lang.String>> clusterHostInfo = org.apache.ambari.server.utils.StageUtils.getGson().fromJson(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO, type);
    java.util.Properties properties = new java.util.Properties();
    properties.setProperty(""server.stage.command.execution_type"", ""DEPENDENCY_ORDERED"");
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    org.apache.ambari.server.metadata.RoleCommandOrderProvider rcoProvider = Mockito.mock(org.apache.ambari.server.metadata.RoleCommandOrderProvider.class);
    org.apache.ambari.server.metadata.RoleCommandOrder rco = Mockito.mock(org.apache.ambari.server.metadata.RoleCommandOrder.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(fsm.getClusterById(Matchers.anyLong())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(oneClusterMock.getClusterId()).thenReturn(java.lang.Long.valueOf(1L));
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    Mockito.when(rcoProvider.getRoleCommandOrder(1L)).thenReturn(rco);
    java.util.Map<org.apache.ambari.server.metadata.RoleCommandPair, java.util.Set<org.apache.ambari.server.metadata.RoleCommandPair>> roleCommandDependencies = new java.util.HashMap();
    org.apache.ambari.server.metadata.RoleCommandPair roleCommand = new org.apache.ambari.server.metadata.RoleCommandPair(org.apache.ambari.server.Role.valueOf(""NAMENODE""), org.apache.ambari.server.RoleCommand.INSTALL);
    java.util.Set<org.apache.ambari.server.metadata.RoleCommandPair> namenodeInstallDependencies = new java.util.HashSet<>();
    namenodeInstallDependencies.add(roleCommand);
    roleCommandDependencies.put(roleCommand, namenodeInstallDependencies);
    Mockito.when(rco.getDependencies()).thenReturn(roleCommandDependencies);
    org.apache.ambari.server.state.Host host = Mockito.mock(org.apache.ambari.server.state.Host.class);
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(hostname, sch);
    org.apache.ambari.server.orm.entities.HostEntity hostEntity = new org.apache.ambari.server.orm.entities.HostEntity();
    hostEntity.setHostName(hostname);
    hostEntity.setHostId(hostId);
    hostDAO.merge(hostEntity);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    Mockito.when(fsm.getHost(Matchers.anyString())).thenReturn(host);
    Mockito.when(host.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host.getHostName()).thenReturn(hostname);
    Mockito.when(host.getHostId()).thenReturn(hostId);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessorImpl.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    org.apache.ambari.server.actionmanager.Stage s = org.apache.ambari.server.utils.StageUtils.getATestStage(1, 977, hostname, ""{\""host_param\"":\""param_value\""}"", ""{\""stage_param\"":\""param_value\""}"");
    s.setCommandExecutionType(org.apache.ambari.server.actionmanager.CommandExecutionType.DEPENDENCY_ORDERED);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = java.util.Collections.singletonList(s);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stages);
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 5, db, fsm, 10000, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, null, rcoProvider, agentCommandsPublisher);
    scheduler.setTaskTimeoutAdjustment(false);
    java.util.List<org.apache.ambari.server.agent.AgentCommand> commands = waitForQueueSize(hostId, agentCommandsPublisher, 1, scheduler);
    org.junit.Assert.assertTrue((commands != null) && (commands.size() == 1));
    org.apache.ambari.server.agent.AgentCommand scheduledCommand = commands.get(0);
    org.junit.Assert.assertTrue(scheduledCommand instanceof org.apache.ambari.server.agent.ExecutionCommand);
    org.junit.Assert.assertEquals(""1-977"", ((org.apache.ambari.server.agent.ExecutionCommand) (scheduledCommand)).getCommandId());
    org.junit.Assert.assertEquals(clusterHostInfo, ((org.apache.ambari.server.agent.ExecutionCommand) (scheduledCommand)).getClusterHostInfo());
    commands = waitForQueueSize(hostId, agentCommandsPublisher, 2, scheduler);
    org.junit.Assert.assertTrue((commands != null) && (commands.size() == 2));
    scheduledCommand = commands.get(1);
    org.junit.Assert.assertTrue(scheduledCommand instanceof org.apache.ambari.server.agent.ExecutionCommand);
    org.junit.Assert.assertEquals(""1-977"", ((org.apache.ambari.server.agent.ExecutionCommand) (scheduledCommand)).getCommandId());
    org.junit.Assert.assertEquals(clusterHostInfo, ((org.apache.ambari.server.agent.ExecutionCommand) (scheduledCommand)).getClusterHostInfo());
    s.setHostRoleStatus(hostname, ""NAMENODE"", org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED);
    scheduler.doWork();
    org.easymock.EasyMock.verify(entityManagerProviderMock);
}","testActionScheduleWithDependencyOrderedCommandExecution()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testActionTimeout","TRUE","7","assertEquals
assertTrue","{
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    org.apache.ambari.server.state.Host host = Mockito.mock(org.apache.ambari.server.state.Host.class);
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(hostname, sch);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    Mockito.when(fsm.getHost(Matchers.anyString())).thenReturn(host);
    Mockito.when(host.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host.getHostName()).thenReturn(hostname);
    Mockito.when(host.getHostId()).thenReturn(hostId);
    org.apache.ambari.server.orm.entities.HostEntity hostEntity = new org.apache.ambari.server.orm.entities.HostEntity();
    hostEntity.setHostName(hostname);
    hostEntity.setHostId(hostId);
    hostDAO.create(hostEntity);
    final org.apache.ambari.server.actionmanager.Stage s = org.apache.ambari.server.utils.StageUtils.getATestStage(1, 977, hostname, ""{\""host_param\"":\""param_value\""}"", ""{\""stage_param\"":\""param_value\""}"");
    s.addHostRoleExecutionCommand(hostname, org.apache.ambari.server.Role.SECONDARY_NAMENODE, org.apache.ambari.server.RoleCommand.INSTALL, new org.apache.ambari.server.state.svccomphost.ServiceComponentHostInstallEvent(""SECONDARY_NAMENODE"", hostname, java.lang.System.currentTimeMillis(), ""HDP-1.2.0""), ""cluster1"", ""HDFS"", false, false);
    s.setHostRoleStatus(hostname, ""SECONDARY_NAMENODE"", org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = java.util.Collections.singletonList(s);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stages);
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.String host = ((java.lang.String) (invocation.getArguments()[0]));
            java.lang.String role = ((java.lang.String) (invocation.getArguments()[3]));
            org.apache.ambari.server.actionmanager.HostRoleCommand command = s.getHostRoleCommand(host, role);
            command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.TIMEDOUT);
            return null;
        }
    }).when(db).timeoutHostRole(Matchers.anyString(), Matchers.anyLong(), Matchers.anyLong(), Matchers.anyString(), Matchers.anyBoolean(), Matchers.eq(false));
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 0, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, null, agentCommandsPublisher);
    scheduler.setTaskTimeoutAdjustment(false);
    int cycleCount = 0;
    scheduler.doWork();
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, stages.get(0).getHostRoleStatus(hostname, ""SECONDARY_NAMENODE""));
    java.util.List<org.apache.ambari.server.agent.AgentCommand> commands = waitForQueueSize(hostId, agentCommandsPublisher, 1, scheduler);
    org.junit.Assert.assertTrue((commands != null) && (commands.size() >= 1));
    org.apache.ambari.server.agent.AgentCommand scheduledCommand = commands.get(0);
    org.junit.Assert.assertTrue(scheduledCommand instanceof org.apache.ambari.server.agent.CancelCommand);
    stages.get(0).setHostRoleStatus(hostname, ""SECONDARY_NAMENODE"", org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS);
    scheduler.doWork();
    org.junit.Assert.assertEquals(2, stages.get(0).getAttemptCount(hostname, ""NAMENODE""));
    org.junit.Assert.assertEquals(3, stages.get(0).getAttemptCount(hostname, ""SECONDARY_NAMENODE""));
    while ((!stages.get(0).getHostRoleStatus(hostname, ""SECONDARY_NAMENODE"").equals(org.apache.ambari.server.actionmanager.HostRoleStatus.TIMEDOUT)) && ((cycleCount++) <= MAX_CYCLE_ITERATIONS)) {
        scheduler.doWork();
    } 
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.TIMEDOUT, stages.get(0).getHostRoleStatus(hostname, ""SECONDARY_NAMENODE""));
    Mockito.verify(db, Mockito.times(1)).startRequest(Matchers.eq(1L));
    Mockito.verify(db, Mockito.times(1)).abortOperation(1L);
    org.easymock.EasyMock.verify(entityManagerProviderMock);
}","testActionTimeout()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testActionTimeoutForLostHost","TRUE","2","assertEquals","{
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    org.apache.ambari.server.state.Host host = Mockito.mock(org.apache.ambari.server.state.Host.class);
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(hostname, sch);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    Mockito.when(fsm.getHost(Matchers.anyString())).thenReturn(host);
    Mockito.when(host.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEARTBEAT_LOST);
    Mockito.when(host.getHostName()).thenReturn(hostname);
    final org.apache.ambari.server.actionmanager.Stage s = org.apache.ambari.server.utils.StageUtils.getATestStage(1, 977, hostname, ""{\""host_param\"":\""param_value\""}"", ""{\""stage_param\"":\""param_value\""}"");
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = java.util.Collections.singletonList(s);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stages);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.String host = ((java.lang.String) (invocation.getArguments()[0]));
            java.lang.String role = ((java.lang.String) (invocation.getArguments()[3]));
            org.apache.ambari.server.actionmanager.HostRoleCommand command = s.getHostRoleCommand(host, role);
            command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED);
            return null;
        }
    }).when(db).timeoutHostRole(Matchers.anyString(), Matchers.anyLong(), Matchers.anyLong(), Matchers.anyString(), Matchers.anyBoolean(), Matchers.eq(true));
    org.apache.ambari.server.events.publishers.AmbariEventPublisher aep = org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 0, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, null, agentCommandsPublisher);
    scheduler.setTaskTimeoutAdjustment(false);
    int cycleCount = 0;
    while ((!stages.get(0).getHostRoleStatus(hostname, ""NAMENODE"").equals(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED)) && ((cycleCount++) <= MAX_CYCLE_ITERATIONS)) {
        scheduler.doWork();
    } 
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, stages.get(0).getHostRoleStatus(hostname, ""NAMENODE""));
    org.easymock.EasyMock.verify(entityManagerProviderMock);
}","testActionTimeoutForLostHost()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testOpFailedEventRaisedForAbortedHostRole","TRUE","6","assertEquals
assertNotNull","{
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch1 = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    org.apache.ambari.server.state.ServiceComponentHost sch2 = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    java.lang.String hostname1 = ""host1"";
    java.lang.String hostname2 = ""host2"";
    org.apache.ambari.server.state.Host host1 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    org.apache.ambari.server.state.Host host2 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    org.apache.ambari.server.orm.entities.HostEntity hostEntity1 = new org.apache.ambari.server.orm.entities.HostEntity();
    hostEntity1.setHostName(hostname1);
    org.apache.ambari.server.orm.entities.HostEntity hostEntity2 = new org.apache.ambari.server.orm.entities.HostEntity();
    hostEntity2.setHostName(hostname2);
    hostDAO.merge(hostEntity1);
    hostDAO.merge(hostEntity2);
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(hostname1, sch1);
    hosts.put(hostname2, sch2);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    Mockito.when(fsm.getHost(hostname1)).thenReturn(host1);
    Mockito.when(fsm.getHost(hostname2)).thenReturn(host2);
    Mockito.when(host1.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEARTBEAT_LOST);
    Mockito.when(host2.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host1.getHostName()).thenReturn(hostname1);
    Mockito.when(host2.getHostName()).thenReturn(hostname2);
    Mockito.when(scomp.getServiceComponentHost(hostname1)).thenReturn(sch1);
    Mockito.when(scomp.getServiceComponentHost(hostname2)).thenReturn(sch2);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    final org.apache.ambari.server.actionmanager.Stage stage = stageFactory.createNew(1, ""/tmp"", ""cluster1"", 1L, ""stageWith2Tasks"", ""{\""command_param\"":\""param_value\""}"", ""{\""host_param\"":\""param_value\""}"");
    addInstallTaskToStage(stage, hostname1, ""cluster1"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.INSTALL, org.apache.ambari.server.state.Service.Type.HDFS, 1);
    addInstallTaskToStage(stage, hostname2, ""cluster1"", org.apache.ambari.server.Role.NAMENODE, org.apache.ambari.server.RoleCommand.INSTALL, org.apache.ambari.server.state.Service.Type.HDFS, 2);
    final java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = java.util.Collections.singletonList(stage);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stages);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.String host = ((java.lang.String) (invocation.getArguments()[0]));
            java.lang.String role = ((java.lang.String) (invocation.getArguments()[3]));
            org.apache.ambari.server.actionmanager.HostRoleCommand command = stage.getHostRoleCommand(host, role);
            command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED);
            return null;
        }
    }).when(db).timeoutHostRole(Matchers.anyString(), Matchers.anyLong(), Matchers.anyLong(), Matchers.anyString(), Matchers.anyBoolean(), Matchers.eq(true));
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.util.Collection<org.apache.ambari.server.orm.entities.HostRoleCommandEntity>>() {
        @java.lang.Override
        public java.util.Collection<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.Long requestId = ((java.lang.Long) (invocation.getArguments()[0]));
            java.util.List<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> abortedCommands = com.google.common.collect.Lists.newArrayList();
            for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
                if (requestId.equals(stage.getRequestId())) {
                    for (org.apache.ambari.server.actionmanager.HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
                        if (((command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED) || (command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS)) || (command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING)) {
                            command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED);
                            org.apache.ambari.server.orm.entities.HostRoleCommandEntity hostRoleCommandEntity = command.constructNewPersistenceEntity();
                            hostRoleCommandEntity.setStage(stage.constructNewPersistenceEntity());
                            abortedCommands.add(hostRoleCommandEntity);
                        }
                    }
                }
            }
            return abortedCommands;
        }
    }).when(db).abortOperation(Matchers.anyLong());
    org.mockito.ArgumentCaptor<org.apache.ambari.server.state.ServiceComponentHostEvent> eventsCapture1 = org.mockito.ArgumentCaptor.forClass(org.apache.ambari.server.state.ServiceComponentHostEvent.class);
    org.mockito.ArgumentCaptor<org.apache.ambari.server.state.ServiceComponentHostEvent> eventsCapture2 = org.mockito.ArgumentCaptor.forClass(org.apache.ambari.server.state.ServiceComponentHostEvent.class);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50000, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), agentCommandsPublisher);
    scheduler.setTaskTimeoutAdjustment(false);
    int cycleCount = 0;
    while ((!(stages.get(0).getHostRoleStatus(hostname1, ""DATANODE"").equals(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED) && stages.get(0).getHostRoleStatus(hostname2, ""NAMENODE"").equals(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED))) && ((cycleCount++) <= MAX_CYCLE_ITERATIONS)) {
        scheduler.doWork();
    } 
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, stages.get(0).getHostRoleStatus(hostname1, ""DATANODE""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, stages.get(0).getHostRoleStatus(hostname2, ""NAMENODE""));
    Mockito.verify(sch1, Mockito.atLeastOnce()).handleEvent(eventsCapture1.capture());
    Mockito.verify(sch2, Mockito.atLeastOnce()).handleEvent(eventsCapture2.capture());
    java.util.List<org.apache.ambari.server.state.ServiceComponentHostEvent> eventTypes = eventsCapture1.getAllValues();
    eventTypes.addAll(eventsCapture2.getAllValues());
    org.junit.Assert.assertNotNull(eventTypes);
    org.apache.ambari.server.state.svccomphost.ServiceComponentHostOpFailedEvent datanodeFailedEvent = null;
    org.apache.ambari.server.state.svccomphost.ServiceComponentHostOpFailedEvent namenodeFailedEvent = null;
    for (org.apache.ambari.server.state.ServiceComponentHostEvent eventType : eventTypes) {
        if (eventType instanceof org.apache.ambari.server.state.svccomphost.ServiceComponentHostOpFailedEvent) {
            org.apache.ambari.server.state.svccomphost.ServiceComponentHostOpFailedEvent event = ((org.apache.ambari.server.state.svccomphost.ServiceComponentHostOpFailedEvent) (eventType));
            if (event.getServiceComponentName().equals(""DATANODE"")) {
                datanodeFailedEvent = event;
            } else if (event.getServiceComponentName().equals(""NAMENODE"")) {
                namenodeFailedEvent = event;
            }
        }
    }
    org.junit.Assert.assertNotNull(""Datanode should be in Install failed state."", datanodeFailedEvent);
    org.junit.Assert.assertNotNull(""Namenode should be in Install failed state."", namenodeFailedEvent);
}","testOpFailedEventRaisedForAbortedHostRole()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testServerAction","TRUE","2","assertEquals","{
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    java.util.Map<java.lang.String, java.lang.String> payload = new java.util.HashMap<>();
    final org.apache.ambari.server.actionmanager.Stage s = getStageWithServerAction(1, 977, payload, ""test"", 1200, false, false);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = java.util.Collections.singletonList(s);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stages);
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.String host = ((java.lang.String) (invocation.getArguments()[0]));
            java.lang.String role = ((java.lang.String) (invocation.getArguments()[3]));
            org.apache.ambari.server.agent.CommandReport commandReport = ((org.apache.ambari.server.agent.CommandReport) (invocation.getArguments()[4]));
            org.apache.ambari.server.actionmanager.HostRoleCommand command = null;
            if (null == host) {
                command = s.getHostRoleCommand(null, role);
            } else {
                command = s.getHostRoleCommand(host, role);
            }
            command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.valueOf(commandReport.getStatus()));
            return null;
        }
    }).when(db).updateHostRoleState(Matchers.anyString(), Matchers.anyLong(), Matchers.anyLong(), Matchers.anyString(), Matchers.any(org.apache.ambari.server.agent.CommandReport.class));
    Mockito.doAnswer(new org.mockito.stubbing.Answer<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        @java.lang.Override
        public org.apache.ambari.server.actionmanager.HostRoleCommand answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            return s.getHostRoleCommand(null, ""AMBARI_SERVER_ACTION"");
        }
    }).when(db).getTask(Matchers.anyLong());
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.util.List<org.apache.ambari.server.actionmanager.HostRoleCommand>>() {
        @java.lang.Override
        public java.util.List<org.apache.ambari.server.actionmanager.HostRoleCommand> answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.String role = ((java.lang.String) (invocation.getArguments()[0]));
            org.apache.ambari.server.actionmanager.HostRoleStatus status = ((org.apache.ambari.server.actionmanager.HostRoleStatus) (invocation.getArguments()[1]));
            org.apache.ambari.server.actionmanager.HostRoleCommand task = s.getHostRoleCommand(null, role);
            if (task.getStatus() == status) {
                return java.util.Arrays.asList(task);
            } else {
                return java.util.Collections.emptyList();
            }
        }
    }).when(db).getTasksByRoleAndStatus(Matchers.anyString(), Matchers.any(org.apache.ambari.server.actionmanager.HostRoleStatus.class));
    org.apache.ambari.server.serveraction.ServerActionExecutor.init(injector);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), agentCommandsPublisher);
    int cycleCount = 0;
    while ((!stages.get(0).getHostRoleStatus(null, ""AMBARI_SERVER_ACTION"").equals(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED)) && ((cycleCount++) <= MAX_CYCLE_ITERATIONS)) {
        scheduler.doWork();
        scheduler.getServerActionExecutor().doWork();
    } 
    org.junit.Assert.assertEquals(stages.get(0).getHostRoleStatus(null, ""AMBARI_SERVER_ACTION""), org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED);
}","testServerAction()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testServerActionInMultipleRequests","TRUE","5","assertEquals","{
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    java.lang.String clusterName = ""cluster1"";
    java.lang.String hostname1 = ""ahost.ambari.apache.org"";
    java.lang.String hostname2 = ""bhost.ambari.apache.org"";
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(hostname1, sch);
    hosts.put(hostname2, sch);
    hosts.put(org.apache.ambari.server.actionmanager.Stage.INTERNAL_HOSTNAME, sch);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = new java.util.ArrayList<>();
    org.apache.ambari.server.actionmanager.Stage stage01 = createStage(clusterName, 0, 1);
    addTask(stage01, org.apache.ambari.server.actionmanager.Stage.INTERNAL_HOSTNAME, clusterName, org.apache.ambari.server.Role.AMBARI_SERVER_ACTION, org.apache.ambari.server.RoleCommand.ACTIONEXECUTE, ""AMBARI"", 1);
    org.apache.ambari.server.actionmanager.Stage stage11 = createStage(""cluster1"", 1, 1);
    addTask(stage11, hostname1, clusterName, org.apache.ambari.server.Role.KERBEROS_CLIENT, org.apache.ambari.server.RoleCommand.CUSTOM_COMMAND, ""KERBEROS"", 2);
    org.apache.ambari.server.actionmanager.Stage stage02 = createStage(""cluster1"", 0, 2);
    addTask(stage02, org.apache.ambari.server.actionmanager.Stage.INTERNAL_HOSTNAME, clusterName, org.apache.ambari.server.Role.AMBARI_SERVER_ACTION, org.apache.ambari.server.RoleCommand.ACTIONEXECUTE, ""AMBARI"", 3);
    org.apache.ambari.server.actionmanager.Stage stage12 = createStage(""cluster1"", 1, 2);
    addTask(stage12, hostname2, clusterName, org.apache.ambari.server.Role.KERBEROS_CLIENT, org.apache.ambari.server.RoleCommand.CUSTOM_COMMAND, ""KERBEROS"", 4);
    stages.add(stage01);
    stages.add(stage11);
    stages.add(stage02);
    stages.add(stage12);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stages);
    java.util.Properties properties = new java.util.Properties();
    properties.put(org.apache.ambari.server.configuration.Configuration.PARALLEL_STAGE_EXECUTION.getKey(), ""true"");
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class), conf, entityManagerProviderMock, hostRoleCommandDAOMock, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), agentCommandsPublisher);
    scheduler.doWork();
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, stages.get(0).getHostRoleStatus(org.apache.ambari.server.actionmanager.Stage.INTERNAL_HOSTNAME, org.apache.ambari.server.Role.AMBARI_SERVER_ACTION.name()));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, stages.get(1).getHostRoleStatus(hostname1, org.apache.ambari.server.Role.KERBEROS_CLIENT.name()));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, stages.get(2).getHostRoleStatus(org.apache.ambari.server.actionmanager.Stage.INTERNAL_HOSTNAME, org.apache.ambari.server.Role.AMBARI_SERVER_ACTION.name()));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, stages.get(3).getHostRoleStatus(hostname2, org.apache.ambari.server.Role.KERBEROS_CLIENT.name()));
}","testServerActionInMultipleRequests()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testServerActionTimeOut","TRUE","2","assertEquals","{
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    java.util.Map<java.lang.String, java.lang.String> payload = new java.util.HashMap<>();
    payload.put(org.apache.ambari.server.serveraction.MockServerAction.PAYLOAD_FORCE_FAIL, ""timeout"");
    final org.apache.ambari.server.actionmanager.Stage s = getStageWithServerAction(1, 977, payload, ""test"", 2, false, false);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = java.util.Collections.singletonList(s);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stages);
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.String host = ((java.lang.String) (invocation.getArguments()[0]));
            java.lang.String role = ((java.lang.String) (invocation.getArguments()[3]));
            org.apache.ambari.server.agent.CommandReport commandReport = ((org.apache.ambari.server.agent.CommandReport) (invocation.getArguments()[4]));
            org.apache.ambari.server.actionmanager.HostRoleCommand command = null;
            if (null == host) {
                command = s.getHostRoleCommand(null, role);
            } else {
                command = s.getHostRoleCommand(host, role);
            }
            command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.valueOf(commandReport.getStatus()));
            return null;
        }
    }).when(db).updateHostRoleState(Matchers.anyString(), Matchers.anyLong(), Matchers.anyLong(), Matchers.anyString(), Matchers.any(org.apache.ambari.server.agent.CommandReport.class));
    Mockito.doAnswer(new org.mockito.stubbing.Answer<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        @java.lang.Override
        public org.apache.ambari.server.actionmanager.HostRoleCommand answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            return s.getHostRoleCommand(null, ""AMBARI_SERVER_ACTION"");
        }
    }).when(db).getTask(Matchers.anyLong());
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.util.List<org.apache.ambari.server.actionmanager.HostRoleCommand>>() {
        @java.lang.Override
        public java.util.List<org.apache.ambari.server.actionmanager.HostRoleCommand> answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.String role = ((java.lang.String) (invocation.getArguments()[0]));
            org.apache.ambari.server.actionmanager.HostRoleStatus status = ((org.apache.ambari.server.actionmanager.HostRoleStatus) (invocation.getArguments()[1]));
            org.apache.ambari.server.actionmanager.HostRoleCommand task = s.getHostRoleCommand(null, role);
            if (task.getStatus() == status) {
                return java.util.Arrays.asList(task);
            } else {
                return java.util.Collections.emptyList();
            }
        }
    }).when(db).getTasksByRoleAndStatus(Matchers.anyString(), Matchers.any(org.apache.ambari.server.actionmanager.HostRoleStatus.class));
    org.apache.ambari.server.serveraction.ServerActionExecutor.init(injector);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), agentCommandsPublisher);
    int cycleCount = 0;
    while ((!stages.get(0).getHostRoleStatus(null, ""AMBARI_SERVER_ACTION"").isCompletedState()) && ((cycleCount++) <= MAX_CYCLE_ITERATIONS)) {
        scheduler.doWork();
        scheduler.getServerActionExecutor().doWork();
    } 
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.TIMEDOUT, stages.get(0).getHostRoleStatus(null, ""AMBARI_SERVER_ACTION""));
}","testServerActionTimeOut()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testTimeOutWithHostNull","TRUE","2","assertEquals","{
    org.apache.ambari.server.actionmanager.Stage s = getStageWithServerAction(1, 977, null, ""test"", 2, false, false);
    s.setHostRoleStatus(null, org.apache.ambari.server.Role.AMBARI_SERVER_ACTION.toString(), org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = org.easymock.EasyMock.createMockBuilder(org.apache.ambari.server.actionmanager.ActionScheduler.class).withConstructor(long.class, long.class, org.apache.ambari.server.actionmanager.ActionDBAccessor.class, org.apache.ambari.server.state.Clusters.class, int.class, org.apache.ambari.server.controller.HostsMap.class, com.google.inject.persist.UnitOfWork.class, org.apache.ambari.server.events.publishers.AmbariEventPublisher.class, org.apache.ambari.server.configuration.Configuration.class, com.google.inject.Provider.class, org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class, org.apache.ambari.server.actionmanager.HostRoleCommandFactory.class, org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class).withArgs(100L, 50L, null, null, -1, null, null, null, null, entityManagerProviderMock, Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class), Mockito.mock(org.apache.ambari.server.actionmanager.HostRoleCommandFactory.class), Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class)).createNiceMock();
    org.easymock.EasyMock.replay(scheduler);
    org.junit.Assert.assertEquals(false, scheduler.timeOutActionNeeded(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS, s, null, org.apache.ambari.server.Role.AMBARI_SERVER_ACTION.toString(), -1L, 1L));
    org.easymock.EasyMock.verify(scheduler);
}","testTimeOutWithHostNull()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testTimeoutRequestDueAgentRestartExecuteCommand","FALSE","0","None","{
    testTimeoutRequest(org.apache.ambari.server.RoleCommand.EXECUTE, false, false);
}","testTimeoutRequestDueAgentRestartExecuteCommand()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testTimeoutRequestDueAgentRestartCustomCommand","FALSE","0","None","{
    testTimeoutRequest(org.apache.ambari.server.RoleCommand.CUSTOM_COMMAND, false, false);
}","testTimeoutRequestDueAgentRestartCustomCommand()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testTimeoutRequestDueAgentRestartActionExecute","FALSE","0","None","{
    testTimeoutRequest(org.apache.ambari.server.RoleCommand.ACTIONEXECUTE, false, false);
}","testTimeoutRequestDueAgentRestartActionExecute()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testTimeoutRequestDueAgentRestartServiceCheck","FALSE","0","None","{
    testTimeoutRequest(org.apache.ambari.server.RoleCommand.SERVICE_CHECK, false, false);
}","testTimeoutRequestDueAgentRestartServiceCheck()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testTimeoutWithSkippableStageButNotCommand","FALSE","0","None","{
    testTimeoutRequest(org.apache.ambari.server.RoleCommand.EXECUTE, true, false);
}","testTimeoutWithSkippableStageButNotCommand()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testTimeoutWithSkippableCommand","FALSE","0","None","{
    testTimeoutRequest(org.apache.ambari.server.RoleCommand.EXECUTE, true, true);
}","testTimeoutWithSkippableCommand()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testServerActionFailed","TRUE","3","assertEquals","{
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    java.util.Map<java.lang.String, java.lang.String> payload = new java.util.HashMap<>();
    payload.put(org.apache.ambari.server.serveraction.MockServerAction.PAYLOAD_FORCE_FAIL, ""exception"");
    final org.apache.ambari.server.actionmanager.Stage s = getStageWithServerAction(1, 977, payload, ""test"", 300, false, false);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = java.util.Collections.singletonList(s);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stages);
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.String host = ((java.lang.String) (invocation.getArguments()[0]));
            java.lang.String role = ((java.lang.String) (invocation.getArguments()[3]));
            org.apache.ambari.server.agent.CommandReport commandReport = ((org.apache.ambari.server.agent.CommandReport) (invocation.getArguments()[4]));
            org.apache.ambari.server.actionmanager.HostRoleCommand command = null;
            if (null == host) {
                command = s.getHostRoleCommand(null, role);
            } else {
                command = s.getHostRoleCommand(host, role);
            }
            command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.valueOf(commandReport.getStatus()));
            return null;
        }
    }).when(db).updateHostRoleState(Matchers.anyString(), Matchers.anyLong(), Matchers.anyLong(), Matchers.anyString(), Matchers.any(org.apache.ambari.server.agent.CommandReport.class));
    Mockito.doAnswer(new org.mockito.stubbing.Answer<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        @java.lang.Override
        public org.apache.ambari.server.actionmanager.HostRoleCommand answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            return s.getHostRoleCommand(null, ""AMBARI_SERVER_ACTION"");
        }
    }).when(db).getTask(Matchers.anyLong());
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.util.List<org.apache.ambari.server.actionmanager.HostRoleCommand>>() {
        @java.lang.Override
        public java.util.List<org.apache.ambari.server.actionmanager.HostRoleCommand> answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.String role = ((java.lang.String) (invocation.getArguments()[0]));
            org.apache.ambari.server.actionmanager.HostRoleStatus status = ((org.apache.ambari.server.actionmanager.HostRoleStatus) (invocation.getArguments()[1]));
            org.apache.ambari.server.actionmanager.HostRoleCommand task = s.getHostRoleCommand(null, role);
            if (task.getStatus() == status) {
                return java.util.Arrays.asList(task);
            } else {
                return java.util.Collections.emptyList();
            }
        }
    }).when(db).getTasksByRoleAndStatus(Matchers.anyString(), Matchers.any(org.apache.ambari.server.actionmanager.HostRoleStatus.class));
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), agentCommandsPublisher);
    int cycleCount = 0;
    while ((!stages.get(0).getHostRoleStatus(null, ""AMBARI_SERVER_ACTION"").equals(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED)) && ((cycleCount++) <= MAX_CYCLE_ITERATIONS)) {
        scheduler.doWork();
        scheduler.getServerActionExecutor().doWork();
    } 
    org.junit.Assert.assertEquals(stages.get(0).getHostRoleStatus(null, ""AMBARI_SERVER_ACTION""), org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED);
    org.junit.Assert.assertEquals(""test"", stages.get(0).getRequestContext());
}","testServerActionFailed()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testIndependentStagesExecution","TRUE","5","assertEquals","{
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    java.lang.String hostname1 = ""ahost.ambari.apache.org"";
    java.lang.String hostname2 = ""bhost.ambari.apache.org"";
    java.lang.String hostname3 = ""chost.ambari.apache.org"";
    java.lang.String hostname4 = ""chost.ambari.apache.org"";
    java.lang.Long hostId1 = 1L;
    java.lang.Long hostId2 = 2L;
    java.lang.Long hostId3 = 3L;
    java.lang.Long hostId4 = 4L;
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(hostname1, sch);
    hosts.put(hostname2, sch);
    hosts.put(hostname3, sch);
    hosts.put(hostname4, sch);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    org.apache.ambari.server.state.Host host1 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(hostname1)).thenReturn(host1);
    Mockito.when(host1.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host1.getHostName()).thenReturn(hostname1);
    Mockito.when(host1.getHostId()).thenReturn(hostId1);
    org.apache.ambari.server.state.Host host2 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(hostname2)).thenReturn(host2);
    Mockito.when(host2.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host2.getHostName()).thenReturn(hostname2);
    Mockito.when(host2.getHostId()).thenReturn(hostId2);
    org.apache.ambari.server.state.Host host3 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(hostname3)).thenReturn(host3);
    Mockito.when(host3.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host3.getHostName()).thenReturn(hostname3);
    Mockito.when(host3.getHostId()).thenReturn(hostId3);
    org.apache.ambari.server.state.Host host4 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(hostname4)).thenReturn(host4);
    Mockito.when(host4.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host4.getHostName()).thenReturn(hostname4);
    Mockito.when(host4.getHostId()).thenReturn(hostId4);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> firstStageInProgressPerRequest = new java.util.ArrayList<>();
    firstStageInProgressPerRequest.add(getStageWithSingleTask(hostname1, ""cluster1"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.HDFS, 1, 1, 1));
    firstStageInProgressPerRequest.add(getStageWithSingleTask(hostname1, ""cluster1"", org.apache.ambari.server.Role.GANGLIA_MONITOR, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.GANGLIA, 2, 2, 2));
    firstStageInProgressPerRequest.add(getStageWithSingleTask(hostname2, ""cluster1"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.HDFS, 3, 3, 3));
    firstStageInProgressPerRequest.add(getStageWithSingleTask(hostname3, ""cluster1"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.HDFS, 4, 4, 4));
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    java.util.List<java.lang.String> blockingHostsRequest1 = new java.util.ArrayList<>();
    Mockito.when(hostRoleCommandDAOMock.getBlockingHostsForRequest(1, 1)).thenReturn(blockingHostsRequest1);
    java.util.List<java.lang.String> blockingHostsRequest2 = com.google.common.collect.Lists.newArrayList(hostname1);
    Mockito.when(hostRoleCommandDAOMock.getBlockingHostsForRequest(1, 2)).thenReturn(blockingHostsRequest2);
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(firstStageInProgressPerRequest.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(firstStageInProgressPerRequest);
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = Mockito.spy(new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), agentCommandsPublisher));
    Mockito.doReturn(false).when(scheduler).wasAgentRestartedDuringOperation(Matchers.any(org.apache.ambari.server.state.Host.class), Matchers.any(org.apache.ambari.server.actionmanager.Stage.class), Matchers.anyString());
    scheduler.doWork();
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, firstStageInProgressPerRequest.get(0).getHostRoleStatus(hostname1, ""DATANODE""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, firstStageInProgressPerRequest.get(1).getHostRoleStatus(hostname1, ""GANGLIA_MONITOR""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, firstStageInProgressPerRequest.get(2).getHostRoleStatus(hostname2, ""DATANODE""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, firstStageInProgressPerRequest.get(3).getHostRoleStatus(hostname3, ""DATANODE""));
}","testIndependentStagesExecution()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testIndependentStagesExecutionDisabled","TRUE","7","assertEquals
assertFalse","{
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    java.lang.String hostname1 = ""ahost.ambari.apache.org"";
    java.lang.String hostname2 = ""bhost.ambari.apache.org"";
    java.lang.String hostname3 = ""chost.ambari.apache.org"";
    java.lang.String hostname4 = ""chost.ambari.apache.org"";
    java.lang.Long hostId1 = 1L;
    java.lang.Long hostId2 = 2L;
    java.lang.Long hostId3 = 3L;
    java.lang.Long hostId4 = 4L;
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(hostname1, sch);
    hosts.put(hostname2, sch);
    hosts.put(hostname3, sch);
    hosts.put(hostname4, sch);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    org.apache.ambari.server.state.Host host1 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(hostname1)).thenReturn(host1);
    Mockito.when(host1.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host1.getHostName()).thenReturn(hostname1);
    Mockito.when(host1.getHostId()).thenReturn(hostId1);
    org.apache.ambari.server.state.Host host2 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(hostname2)).thenReturn(host2);
    Mockito.when(host2.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host2.getHostName()).thenReturn(hostname2);
    Mockito.when(host2.getHostId()).thenReturn(hostId2);
    org.apache.ambari.server.state.Host host3 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(hostname3)).thenReturn(host3);
    Mockito.when(host3.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host3.getHostName()).thenReturn(hostname3);
    Mockito.when(host3.getHostId()).thenReturn(hostId3);
    org.apache.ambari.server.state.Host host4 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(hostname4)).thenReturn(host4);
    Mockito.when(host4.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host4.getHostName()).thenReturn(hostname4);
    Mockito.when(host4.getHostId()).thenReturn(hostId4);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = new java.util.ArrayList<>();
    org.apache.ambari.server.actionmanager.Stage stage = getStageWithSingleTask(hostname1, ""cluster1"", org.apache.ambari.server.Role.HIVE_CLIENT, org.apache.ambari.server.RoleCommand.INSTALL, org.apache.ambari.server.state.Service.Type.HIVE, 1, 1, 1);
    java.util.Map<java.lang.String, java.lang.String> hiveSite = new java.util.TreeMap<>();
    hiveSite.put(""javax.jdo.option.ConnectionPassword"", ""password"");
    hiveSite.put(""hive.server2.thrift.port"", ""10000"");
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> configurations = new java.util.TreeMap<>();
    configurations.put(""hive-site"", hiveSite);
    stage.getExecutionCommands(hostname1).get(0).getExecutionCommand().setConfigurations(configurations);
    stages.add(stage);
    stages.add(getStageWithSingleTask(hostname1, ""cluster1"", org.apache.ambari.server.Role.GANGLIA_MONITOR, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.GANGLIA, 2, 2, 2));
    stages.add(getStageWithSingleTask(hostname2, ""cluster1"", org.apache.ambari.server.Role.HIVE_CLIENT, org.apache.ambari.server.RoleCommand.INSTALL, org.apache.ambari.server.state.Service.Type.HIVE, 3, 3, 3));
    stages.add(getStageWithSingleTask(hostname3, ""cluster1"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.HDFS, 4, 4, 4));
    stages.add(getStageWithSingleTask(hostname4, ""cluster1"", org.apache.ambari.server.Role.GANGLIA_MONITOR, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.GANGLIA, 5, 5, 4));
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stages);
    java.util.Properties properties = new java.util.Properties();
    properties.put(org.apache.ambari.server.configuration.Configuration.PARALLEL_STAGE_EXECUTION.getKey(), ""false"");
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = Mockito.spy(new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), agentCommandsPublisher));
    Mockito.doReturn(false).when(scheduler).wasAgentRestartedDuringOperation(Matchers.any(org.apache.ambari.server.state.Host.class), Matchers.any(org.apache.ambari.server.actionmanager.Stage.class), Matchers.anyString());
    scheduler.doWork();
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, stages.get(0).getHostRoleStatus(hostname1, ""HIVE_CLIENT""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, stages.get(1).getHostRoleStatus(hostname1, ""GANGLIA_MONITOR""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, stages.get(2).getHostRoleStatus(hostname2, ""HIVE_CLIENT""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, stages.get(3).getHostRoleStatus(hostname3, ""DATANODE""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, stages.get(4).getHostRoleStatus(hostname4, ""GANGLIA_MONITOR""));
    org.junit.Assert.assertFalse(stages.get(0).getExecutionCommands(hostname1).get(0).getExecutionCommand().getConfigurations().containsKey(""javax.jdo.option.ConnectionPassword""));
}","testIndependentStagesExecutionDisabled()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testBackgroundStagesExecutionEnable","TRUE","5","assertEquals","{
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    java.lang.String hostname1 = ""ahost.ambari.apache.org"";
    java.lang.String hostname2 = ""bhost.ambari.apache.org"";
    java.lang.Long hostId1 = 1L;
    java.lang.Long hostId2 = 2L;
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(hostname1, sch);
    hosts.put(hostname2, sch);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    org.apache.ambari.server.state.Host host1 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(hostname1)).thenReturn(host1);
    Mockito.when(host1.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host1.getHostName()).thenReturn(hostname1);
    Mockito.when(host1.getHostId()).thenReturn(hostId1);
    org.apache.ambari.server.state.Host host2 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(hostname2)).thenReturn(host2);
    Mockito.when(host2.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host2.getHostName()).thenReturn(hostname2);
    Mockito.when(host2.getHostId()).thenReturn(hostId2);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = new java.util.ArrayList<>();
    org.apache.ambari.server.actionmanager.Stage backgroundStage = null;
    stages.add(backgroundStage = getStageWithSingleTask(hostname1, ""cluster1"", org.apache.ambari.server.Role.NAMENODE, org.apache.ambari.server.RoleCommand.CUSTOM_COMMAND, ""REBALANCEHDFS"", org.apache.ambari.server.state.Service.Type.HDFS, 1, 1, 1));
    org.junit.Assert.assertEquals(org.apache.ambari.server.agent.AgentCommand.AgentCommandType.BACKGROUND_EXECUTION_COMMAND, backgroundStage.getExecutionCommands(hostname1).get(0).getExecutionCommand().getCommandType());
    stages.add(getStageWithSingleTask(hostname1, ""cluster1"", org.apache.ambari.server.Role.GANGLIA_MONITOR, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.GANGLIA, 2, 2, 2));
    stages.add(getStageWithSingleTask(hostname2, ""cluster1"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.HDFS, 3, 3, 3));
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stages);
    java.util.Properties properties = new java.util.Properties();
    properties.put(org.apache.ambari.server.configuration.Configuration.PARALLEL_STAGE_EXECUTION.getKey(), ""true"");
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = Mockito.spy(new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), agentCommandsPublisher));
    Mockito.doReturn(false).when(scheduler).wasAgentRestartedDuringOperation(Matchers.any(org.apache.ambari.server.state.Host.class), Matchers.any(org.apache.ambari.server.actionmanager.Stage.class), Matchers.anyString());
    scheduler.doWork();
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, stages.get(0).getHostRoleStatus(hostname1, ""NAMENODE""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, stages.get(2).getHostRoleStatus(hostname2, ""DATANODE""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, stages.get(1).getHostRoleStatus(hostname1, ""GANGLIA_MONITOR""));
}","testBackgroundStagesExecutionEnable()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testRequestFailureOnStageFailure","TRUE","4","assertEquals","{
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AmbariEventPublisher ambariEventPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class);
    org.apache.ambari.server.actionmanager.RequestFactory requestFactory = Mockito.mock(org.apache.ambari.server.actionmanager.RequestFactory.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(hostname, sch);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    final java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = new java.util.ArrayList<>();
    stages.add(getStageWithSingleTask(hostname, ""cluster1"", org.apache.ambari.server.Role.NAMENODE, org.apache.ambari.server.RoleCommand.UPGRADE, org.apache.ambari.server.state.Service.Type.HDFS, 1, 1, 1));
    java.util.List<org.apache.ambari.server.actionmanager.Stage> firstStageInProgress = java.util.Collections.singletonList(stages.get(0));
    stages.add(getStageWithSingleTask(hostname, ""cluster1"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.UPGRADE, org.apache.ambari.server.state.Service.Type.HDFS, 2, 2, 1));
    org.apache.ambari.server.state.Host host = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(Matchers.anyString())).thenReturn(host);
    Mockito.when(host.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host.getHostName()).thenReturn(hostname);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(firstStageInProgress);
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.util.List<org.apache.ambari.server.agent.CommandReport> reports = ((java.util.List<org.apache.ambari.server.agent.CommandReport>) (invocation.getArguments()[0]));
            for (org.apache.ambari.server.agent.CommandReport report : reports) {
                java.lang.String actionId = report.getActionId();
                long[] requestStageIds = org.apache.ambari.server.utils.StageUtils.getRequestStage(actionId);
                java.lang.Long requestId = requestStageIds[0];
                java.lang.Long stageId = requestStageIds[1];
                java.lang.Long id = report.getTaskId();
                for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
                    if (requestId.equals(stage.getRequestId()) && stageId.equals(stage.getStageId())) {
                        for (org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand : stage.getOrderedHostRoleCommands()) {
                            if (hostRoleCommand.getTaskId() == id) {
                                hostRoleCommand.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.valueOf(report.getStatus()));
                            }
                        }
                    }
                }
            }
            return null;
        }
    }).when(db).updateHostRoleStates(Matchers.anyCollectionOf(org.apache.ambari.server.agent.CommandReport.class));
    Mockito.when(db.getTask(Matchers.anyLong())).thenAnswer(new org.mockito.stubbing.Answer<java.lang.Object>() {
        @java.lang.Override
        public java.lang.Object answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.Long taskId = ((java.lang.Long) (invocation.getArguments()[0]));
            for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
                for (org.apache.ambari.server.actionmanager.HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
                    if (taskId.equals(command.getTaskId())) {
                        return command;
                    }
                }
            }
            return null;
        }
    });
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.util.Collection<org.apache.ambari.server.orm.entities.HostRoleCommandEntity>>() {
        @java.lang.Override
        public java.util.Collection<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.Long requestId = ((java.lang.Long) (invocation.getArguments()[0]));
            java.util.List<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> abortedCommands = com.google.common.collect.Lists.newArrayList();
            for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
                if (requestId.equals(stage.getRequestId())) {
                    for (org.apache.ambari.server.actionmanager.HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
                        if (((command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED) || (command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS)) || (command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING)) {
                            command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED);
                            org.apache.ambari.server.orm.entities.HostRoleCommandEntity hostRoleCommandEntity = command.constructNewPersistenceEntity();
                            hostRoleCommandEntity.setStage(stage.constructNewPersistenceEntity());
                            abortedCommands.add(hostRoleCommandEntity);
                        }
                    }
                }
            }
            return abortedCommands;
        }
    }).when(db).abortOperation(Matchers.anyLong());
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.easymock.Capture<java.util.Collection<org.apache.ambari.server.actionmanager.HostRoleCommand>> cancelCommandList = org.easymock.EasyMock.newCapture();
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = org.easymock.EasyMock.createMockBuilder(org.apache.ambari.server.actionmanager.ActionScheduler.class).withConstructor(((long) (100)), ((long) (50)), db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class), conf, entityManagerProviderMock, Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class), Mockito.mock(org.apache.ambari.server.actionmanager.HostRoleCommandFactory.class), Mockito.mock(org.apache.ambari.server.metadata.RoleCommandOrderProvider.class), Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class)).addMockedMethod(""cancelHostRoleCommands"").createMock();
    scheduler.cancelHostRoleCommands(org.easymock.EasyMock.capture(cancelCommandList), org.easymock.EasyMock.eq(org.apache.ambari.server.actionmanager.ActionScheduler.FAILED_TASK_ABORT_REASONING));
    org.easymock.EasyMock.expectLastCall().once();
    org.easymock.EasyMock.replay(scheduler);
    org.apache.ambari.server.actionmanager.ActionManager am = new org.apache.ambari.server.actionmanager.ActionManager(db, requestFactory, scheduler);
    scheduler.doWork();
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    reports.add(getCommandReport(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.Role.NAMENODE, org.apache.ambari.server.state.Service.Type.HDFS, ""1-1"", 1));
    am.processTaskResponse(hostname, reports, org.apache.ambari.server.utils.CommandUtils.convertToTaskIdCommandMap(stages.get(0).getOrderedHostRoleCommands()));
    scheduler.doWork();
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, stages.get(0).getHostRoleStatus(hostname, ""NAMENODE""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, stages.get(1).getHostRoleStatus(hostname, ""DATANODE""));
    org.junit.Assert.assertEquals(cancelCommandList.getValue().size(), 1);
    org.easymock.EasyMock.verify(scheduler, entityManagerProviderMock);
}","testRequestFailureOnStageFailure()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testRequestAbortsOnlyWhenNoQueuedTaskAndSuccessFactorUnmet","TRUE","4","assertEquals","{
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    java.lang.String host1 = ""host1"";
    java.lang.String host2 = ""host2"";
    org.apache.ambari.server.state.Host host = Mockito.mock(org.apache.ambari.server.state.Host.class);
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(host1, sch);
    hosts.put(host2, sch);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    Mockito.when(fsm.getHost(Matchers.anyString())).thenReturn(host);
    Mockito.when(host.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host.getHostName()).thenReturn(host1);
    org.apache.ambari.server.orm.entities.HostEntity hostEntity1 = new org.apache.ambari.server.orm.entities.HostEntity();
    org.apache.ambari.server.orm.entities.HostEntity hostEntity2 = new org.apache.ambari.server.orm.entities.HostEntity();
    hostEntity1.setHostName(host1);
    hostEntity2.setHostName(host2);
    hostDAO.create(hostEntity1);
    hostDAO.create(hostEntity2);
    long now = java.lang.System.currentTimeMillis();
    org.apache.ambari.server.actionmanager.Stage stage = stageFactory.createNew(1, ""/tmp"", ""cluster1"", 1L, ""testRequestFailureBasedOnSuccessFactor"", """", """");
    stage.setStageId(1);
    addHostRoleExecutionCommand(now, stage, org.apache.ambari.server.Role.SQOOP, org.apache.ambari.server.state.Service.Type.SQOOP, org.apache.ambari.server.RoleCommand.INSTALL, host1, ""cluster1"");
    addHostRoleExecutionCommand(now, stage, org.apache.ambari.server.Role.OOZIE_CLIENT, org.apache.ambari.server.state.Service.Type.OOZIE, org.apache.ambari.server.RoleCommand.INSTALL, host1, ""cluster1"");
    addHostRoleExecutionCommand(now, stage, org.apache.ambari.server.Role.MAPREDUCE_CLIENT, org.apache.ambari.server.state.Service.Type.MAPREDUCE, org.apache.ambari.server.RoleCommand.INSTALL, host1, ""cluster1"");
    addHostRoleExecutionCommand(now, stage, org.apache.ambari.server.Role.HBASE_CLIENT, org.apache.ambari.server.state.Service.Type.HBASE, org.apache.ambari.server.RoleCommand.INSTALL, host1, ""cluster1"");
    addHostRoleExecutionCommand(now, stage, org.apache.ambari.server.Role.GANGLIA_MONITOR, org.apache.ambari.server.state.Service.Type.GANGLIA, org.apache.ambari.server.RoleCommand.INSTALL, host1, ""cluster1"");
    addHostRoleExecutionCommand(now, stage, org.apache.ambari.server.Role.HBASE_CLIENT, org.apache.ambari.server.state.Service.Type.HBASE, org.apache.ambari.server.RoleCommand.INSTALL, host2, ""cluster1"");
    addHostRoleExecutionCommand(now, stage, org.apache.ambari.server.Role.GANGLIA_MONITOR, org.apache.ambari.server.state.Service.Type.GANGLIA, org.apache.ambari.server.RoleCommand.INSTALL, host2, ""cluster1"");
    final java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = java.util.Collections.singletonList(stage);
    org.apache.ambari.server.actionmanager.HostRoleStatus[] statusesAtIterOne = new org.apache.ambari.server.actionmanager.HostRoleStatus[]{ org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED };
    for (int index = 0; index < stage.getOrderedHostRoleCommands().size(); index++) {
        stage.getOrderedHostRoleCommands().get(index).setTaskId(index + 1);
        stage.getOrderedHostRoleCommands().get(index).setStatus(statusesAtIterOne[index]);
    }
    stage.setLastAttemptTime(host1, org.apache.ambari.server.Role.SQOOP.toString(), now);
    stage.setLastAttemptTime(host1, org.apache.ambari.server.Role.MAPREDUCE_CLIENT.toString(), now);
    stage.setLastAttemptTime(host1, org.apache.ambari.server.Role.OOZIE_CLIENT.toString(), now);
    stage.setLastAttemptTime(host1, org.apache.ambari.server.Role.GANGLIA_MONITOR.toString(), now);
    stage.setLastAttemptTime(host1, org.apache.ambari.server.Role.HBASE_CLIENT.toString(), now);
    stage.setLastAttemptTime(host2, org.apache.ambari.server.Role.GANGLIA_MONITOR.toString(), now);
    stage.setLastAttemptTime(host2, org.apache.ambari.server.Role.HBASE_CLIENT.toString(), now);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stages);
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.String host = ((java.lang.String) (invocation.getArguments()[0]));
            java.lang.Long requestId = ((java.lang.Long) (invocation.getArguments()[1]));
            java.lang.Long stageId = ((java.lang.Long) (invocation.getArguments()[2]));
            java.lang.String role = ((java.lang.String) (invocation.getArguments()[3]));
            org.apache.ambari.server.agent.CommandReport commandReport = ((org.apache.ambari.server.agent.CommandReport) (invocation.getArguments()[4]));
            for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
                if (requestId.equals(stage.getRequestId()) && stageId.equals(stage.getStageId())) {
                    org.apache.ambari.server.actionmanager.HostRoleCommand command = stage.getHostRoleCommand(host, role);
                    command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.valueOf(commandReport.getStatus()));
                }
            }
            return null;
        }
    }).when(db).updateHostRoleState(Matchers.anyString(), Matchers.anyLong(), Matchers.anyLong(), Matchers.anyString(), Matchers.any(org.apache.ambari.server.agent.CommandReport.class));
    Mockito.when(db.getTask(Matchers.anyLong())).thenAnswer(new org.mockito.stubbing.Answer<java.lang.Object>() {
        @java.lang.Override
        public java.lang.Object answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.Long taskId = ((java.lang.Long) (invocation.getArguments()[0]));
            for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
                for (org.apache.ambari.server.actionmanager.HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
                    if (taskId.equals(command.getTaskId())) {
                        return command;
                    }
                }
            }
            return null;
        }
    });
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.util.Collection<org.apache.ambari.server.orm.entities.HostRoleCommandEntity>>() {
        @java.lang.Override
        public java.util.Collection<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.Long requestId = ((java.lang.Long) (invocation.getArguments()[0]));
            java.util.List<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> abortedCommands = com.google.common.collect.Lists.newArrayList();
            for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
                if (requestId.equals(stage.getRequestId())) {
                    for (org.apache.ambari.server.actionmanager.HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
                        if (((command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED) || (command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS)) || (command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING)) {
                            command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED);
                            org.apache.ambari.server.orm.entities.HostRoleCommandEntity hostRoleCommandEntity = command.constructNewPersistenceEntity();
                            hostRoleCommandEntity.setStage(stage.constructNewPersistenceEntity());
                            abortedCommands.add(hostRoleCommandEntity);
                        }
                    }
                }
            }
            return abortedCommands;
        }
    }).when(db).abortOperation(Matchers.anyLong());
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 10000, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), agentCommandsPublisher);
    scheduler.doWork();
    org.apache.ambari.server.actionmanager.HostRoleStatus[] expectedStatusesAtIterOne = new org.apache.ambari.server.actionmanager.HostRoleStatus[]{ org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED };
    for (int index = 0; index < stage.getOrderedHostRoleCommands().size(); index++) {
        org.apache.ambari.server.actionmanager.TestActionScheduler.log.info(stage.getOrderedHostRoleCommands().get(index).toString());
        org.junit.Assert.assertEquals(expectedStatusesAtIterOne[index], stage.getOrderedHostRoleCommands().get(index).getStatus());
    }
    org.apache.ambari.server.actionmanager.HostRoleStatus[] statusesAtIterTwo = new org.apache.ambari.server.actionmanager.HostRoleStatus[]{ org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED };
    for (int index = 0; index < stage.getOrderedHostRoleCommands().size(); index++) {
        stage.getOrderedHostRoleCommands().get(index).setStatus(statusesAtIterTwo[index]);
    }
    scheduler.doWork();
    org.apache.ambari.server.actionmanager.HostRoleStatus[] expectedStatusesAtIterTwo = new org.apache.ambari.server.actionmanager.HostRoleStatus[]{ org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED };
    for (int index = 0; index < stage.getOrderedHostRoleCommands().size(); index++) {
        org.apache.ambari.server.actionmanager.TestActionScheduler.log.info(stage.getOrderedHostRoleCommands().get(index).toString());
        org.junit.Assert.assertEquals(expectedStatusesAtIterTwo[index], stage.getOrderedHostRoleCommands().get(index).getStatus());
    }
    org.apache.ambari.server.actionmanager.HostRoleStatus[] statusesAtIterThree = new org.apache.ambari.server.actionmanager.HostRoleStatus[]{ org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED };
    for (int index = 0; index < stage.getOrderedHostRoleCommands().size(); index++) {
        stage.getOrderedHostRoleCommands().get(index).setStatus(statusesAtIterThree[index]);
    }
    scheduler.doWork();
    org.apache.ambari.server.actionmanager.HostRoleStatus[] expectedStatusesAtIterThree = new org.apache.ambari.server.actionmanager.HostRoleStatus[]{ org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED };
    for (int index = 0; index < stage.getOrderedHostRoleCommands().size(); index++) {
        org.apache.ambari.server.actionmanager.TestActionScheduler.log.info(stage.getOrderedHostRoleCommands().get(index).toString());
        org.junit.Assert.assertEquals(expectedStatusesAtIterThree[index], stage.getOrderedHostRoleCommands().get(index).getStatus());
    }
}","testRequestAbortsOnlyWhenNoQueuedTaskAndSuccessFactorUnmet()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testRequestFailureBasedOnSuccessFactor","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    org.apache.ambari.server.actionmanager.RequestFactory requestFactory = Mockito.mock(org.apache.ambari.server.actionmanager.RequestFactory.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    final java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = new java.util.ArrayList<>();
    long now = java.lang.System.currentTimeMillis();
    org.apache.ambari.server.actionmanager.Stage stage = stageFactory.createNew(1, ""/tmp"", ""cluster1"", 1L, ""testRequestFailureBasedOnSuccessFactor"", """", """");
    stage.setStageId(1);
    stage.addHostRoleExecutionCommand(""host1"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.UPGRADE, new org.apache.ambari.server.state.svccomphost.ServiceComponentHostUpgradeEvent(org.apache.ambari.server.Role.DATANODE.toString(), ""host1"", now, ""HDP-0.2""), ""cluster1"", org.apache.ambari.server.state.Service.Type.HDFS.toString(), false, false);
    stage.getExecutionCommandWrapper(""host1"", org.apache.ambari.server.Role.DATANODE.toString()).getExecutionCommand();
    stage.addHostRoleExecutionCommand(""host2"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.UPGRADE, new org.apache.ambari.server.state.svccomphost.ServiceComponentHostUpgradeEvent(org.apache.ambari.server.Role.DATANODE.toString(), ""host2"", now, ""HDP-0.2""), ""cluster1"", org.apache.ambari.server.state.Service.Type.HDFS.toString(), false, false);
    stage.getExecutionCommandWrapper(""host2"", org.apache.ambari.server.Role.DATANODE.toString()).getExecutionCommand();
    stage.addHostRoleExecutionCommand(""host3"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.UPGRADE, new org.apache.ambari.server.state.svccomphost.ServiceComponentHostUpgradeEvent(org.apache.ambari.server.Role.DATANODE.toString(), ""host3"", now, ""HDP-0.2""), ""cluster1"", org.apache.ambari.server.state.Service.Type.HDFS.toString(), false, false);
    stage.getExecutionCommandWrapper(""host3"", org.apache.ambari.server.Role.DATANODE.toString()).getExecutionCommand();
    stages.add(stage);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stageInProgress = java.util.Collections.singletonList(stage);
    stage.getOrderedHostRoleCommands().get(0).setTaskId(1);
    stage.getOrderedHostRoleCommands().get(1).setTaskId(2);
    stage.getOrderedHostRoleCommands().get(2).setTaskId(3);
    stages.add(getStageWithSingleTask(""host1"", ""cluster1"", org.apache.ambari.server.Role.HDFS_CLIENT, org.apache.ambari.server.RoleCommand.UPGRADE, org.apache.ambari.server.state.Service.Type.HDFS, 4, 2, 1));
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stageInProgress.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stageInProgress);
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.util.List<org.apache.ambari.server.agent.CommandReport> reports = ((java.util.List<org.apache.ambari.server.agent.CommandReport>) (invocation.getArguments()[0]));
            for (org.apache.ambari.server.agent.CommandReport report : reports) {
                java.lang.String actionId = report.getActionId();
                long[] requestStageIds = org.apache.ambari.server.utils.StageUtils.getRequestStage(actionId);
                java.lang.Long requestId = requestStageIds[0];
                java.lang.Long stageId = requestStageIds[1];
                java.lang.Long id = report.getTaskId();
                for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
                    if (requestId.equals(stage.getRequestId()) && stageId.equals(stage.getStageId())) {
                        for (org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand : stage.getOrderedHostRoleCommands()) {
                            if (hostRoleCommand.getTaskId() == id) {
                                hostRoleCommand.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.valueOf(report.getStatus()));
                            }
                        }
                    }
                }
            }
            return null;
        }
    }).when(db).updateHostRoleStates(Matchers.anyCollectionOf(org.apache.ambari.server.agent.CommandReport.class));
    Mockito.when(db.getTask(Matchers.anyLong())).thenAnswer(new org.mockito.stubbing.Answer<java.lang.Object>() {
        @java.lang.Override
        public java.lang.Object answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.Long taskId = ((java.lang.Long) (invocation.getArguments()[0]));
            for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
                for (org.apache.ambari.server.actionmanager.HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
                    if (taskId.equals(command.getTaskId())) {
                        return command;
                    }
                }
            }
            return null;
        }
    });
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.util.Collection<org.apache.ambari.server.orm.entities.HostRoleCommandEntity>>() {
        @java.lang.Override
        public java.util.Collection<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.Long requestId = ((java.lang.Long) (invocation.getArguments()[0]));
            java.util.List<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> abortedCommands = com.google.common.collect.Lists.newArrayList();
            for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
                if (requestId.equals(stage.getRequestId())) {
                    for (org.apache.ambari.server.actionmanager.HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
                        if (((command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED) || (command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS)) || (command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING)) {
                            command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED);
                            org.apache.ambari.server.orm.entities.HostRoleCommandEntity hostRoleCommandEntity = command.constructNewPersistenceEntity();
                            hostRoleCommandEntity.setStage(stage.constructNewPersistenceEntity());
                            abortedCommands.add(hostRoleCommandEntity);
                        }
                    }
                }
            }
            return abortedCommands;
        }
    }).when(db).abortOperation(Matchers.anyLong());
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), agentCommandsPublisher);
    org.apache.ambari.server.actionmanager.ActionManager am = new org.apache.ambari.server.actionmanager.ActionManager(db, requestFactory, scheduler);
    scheduler.doWork();
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    reports.add(getCommandReport(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.state.Service.Type.HDFS, ""1-1"", 1));
    am.processTaskResponse(""host1"", reports, org.apache.ambari.server.utils.CommandUtils.convertToTaskIdCommandMap(stage.getOrderedHostRoleCommands()));
    reports.clear();
    reports.add(getCommandReport(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.state.Service.Type.HDFS, ""1-1"", 2));
    am.processTaskResponse(""host2"", reports, org.apache.ambari.server.utils.CommandUtils.convertToTaskIdCommandMap(stage.getOrderedHostRoleCommands()));
    reports.clear();
    reports.add(getCommandReport(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED, org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.state.Service.Type.HDFS, ""1-1"", 3));
    am.processTaskResponse(""host3"", reports, org.apache.ambari.server.utils.CommandUtils.convertToTaskIdCommandMap(stage.getOrderedHostRoleCommands()));
    scheduler.doWork();
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, stages.get(1).getHostRoleStatus(""host1"", ""HDFS_CLIENT""));
}","testRequestFailureBasedOnSuccessFactor()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testSuccessFactors","TRUE","7","assertEquals","{
    org.apache.ambari.server.actionmanager.Stage s = org.apache.ambari.server.utils.StageUtils.getATestStage(1, 1, org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO, ""{\""host_param\"":\""param_value\""}"", ""{\""stage_param\"":\""param_value\""}"");
    org.junit.Assert.assertEquals(new java.lang.Float(0.5), new java.lang.Float(s.getSuccessFactor(org.apache.ambari.server.Role.DATANODE)));
    org.junit.Assert.assertEquals(new java.lang.Float(0.5), new java.lang.Float(s.getSuccessFactor(org.apache.ambari.server.Role.TASKTRACKER)));
    org.junit.Assert.assertEquals(new java.lang.Float(0.5), new java.lang.Float(s.getSuccessFactor(org.apache.ambari.server.Role.GANGLIA_MONITOR)));
    org.junit.Assert.assertEquals(new java.lang.Float(0.5), new java.lang.Float(s.getSuccessFactor(org.apache.ambari.server.Role.HBASE_REGIONSERVER)));
    org.junit.Assert.assertEquals(new java.lang.Float(1.0), new java.lang.Float(s.getSuccessFactor(org.apache.ambari.server.Role.NAMENODE)));
    org.junit.Assert.assertEquals(new java.lang.Float(1.0), new java.lang.Float(s.getSuccessFactor(org.apache.ambari.server.Role.GANGLIA_SERVER)));
}","testSuccessFactors()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testSuccessCriteria","TRUE","7","assertTrue
assertFalse","{
    org.apache.ambari.server.actionmanager.ActionScheduler.RoleStats rs1 = new org.apache.ambari.server.actionmanager.ActionScheduler.RoleStats(1, ((float) (0.5)));
    rs1.numSucceeded = 1;
    org.junit.Assert.assertTrue(rs1.isSuccessFactorMet());
    rs1.numSucceeded = 0;
    org.junit.Assert.assertFalse(rs1.isSuccessFactorMet());
    org.apache.ambari.server.actionmanager.ActionScheduler.RoleStats rs2 = new org.apache.ambari.server.actionmanager.ActionScheduler.RoleStats(2, ((float) (0.5)));
    rs2.numSucceeded = 1;
    org.junit.Assert.assertTrue(rs2.isSuccessFactorMet());
    org.apache.ambari.server.actionmanager.ActionScheduler.RoleStats rs3 = new org.apache.ambari.server.actionmanager.ActionScheduler.RoleStats(3, ((float) (0.5)));
    rs3.numSucceeded = 2;
    org.junit.Assert.assertTrue(rs2.isSuccessFactorMet());
    rs3.numSucceeded = 1;
    org.junit.Assert.assertFalse(rs3.isSuccessFactorMet());
    org.apache.ambari.server.actionmanager.ActionScheduler.RoleStats rs4 = new org.apache.ambari.server.actionmanager.ActionScheduler.RoleStats(3, ((float) (1.0)));
    rs4.numSucceeded = 2;
    org.junit.Assert.assertFalse(rs3.isSuccessFactorMet());
}","testSuccessCriteria()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testClusterHostInfoCache","TRUE","9","assertTrue
assertEquals","{
    java.lang.reflect.Type type = new com.google.common.reflect.TypeToken<java.util.Map<java.lang.String, java.util.Set<java.lang.String>>>() {}.getType();
    java.util.Map<java.lang.String, java.util.Set<java.lang.String>> clusterHostInfo1 = org.apache.ambari.server.utils.StageUtils.getGson().fromJson(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO, type);
    int stageId = 1;
    int requestId1 = 1;
    int requestId2 = 2;
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    org.apache.ambari.server.state.Host host = Mockito.mock(org.apache.ambari.server.state.Host.class);
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(hostname, sch);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    Mockito.when(fsm.getHost(Matchers.anyString())).thenReturn(host);
    Mockito.when(host.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host.getHostName()).thenReturn(hostname);
    Mockito.when(host.getHostId()).thenReturn(hostId);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessorImpl.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    org.apache.ambari.server.actionmanager.Stage s1 = org.apache.ambari.server.utils.StageUtils.getATestStage(requestId1, stageId, hostname, ""{\""host_param\"":\""param_value\""}"", ""{\""stage_param\"":\""param_value\""}"");
    org.apache.ambari.server.actionmanager.Stage s2 = org.apache.ambari.server.utils.StageUtils.getATestStage(requestId2, stageId, hostname, ""{\""host_param\"":\""param_value\""}"", ""{\""stage_param\"":\""param_value\""}"");
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(1);
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(java.util.Collections.singletonList(s1));
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 100, db, fsm, 10000, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), agentCommandsPublisher);
    scheduler.setTaskTimeoutAdjustment(false);
    java.util.List<org.apache.ambari.server.agent.AgentCommand> commands = waitForQueueSize(hostId, agentCommandsPublisher, 1, scheduler);
    org.junit.Assert.assertTrue((commands != null) && (commands.size() == 1));
    org.apache.ambari.server.agent.AgentCommand scheduledCommand = commands.get(0);
    org.junit.Assert.assertTrue(scheduledCommand instanceof org.apache.ambari.server.agent.ExecutionCommand);
    org.junit.Assert.assertEquals((java.lang.String.valueOf(requestId1) + ""-"") + stageId, ((org.apache.ambari.server.agent.ExecutionCommand) (scheduledCommand)).getCommandId());
    org.junit.Assert.assertEquals(clusterHostInfo1, ((org.apache.ambari.server.agent.ExecutionCommand) (scheduledCommand)).getClusterHostInfo());
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(1);
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(java.util.Collections.singletonList(s2));
    commands = waitForQueueSize(hostId, agentCommandsPublisher, 1, scheduler);
    org.junit.Assert.assertTrue((commands != null) && (commands.size() == 1));
    scheduledCommand = commands.get(0);
    org.junit.Assert.assertTrue(scheduledCommand instanceof org.apache.ambari.server.agent.ExecutionCommand);
    org.junit.Assert.assertEquals((java.lang.String.valueOf(requestId2) + ""-"") + stageId, ((org.apache.ambari.server.agent.ExecutionCommand) (scheduledCommand)).getCommandId());
    org.junit.Assert.assertEquals(clusterHostInfo1, ((org.apache.ambari.server.agent.ExecutionCommand) (scheduledCommand)).getClusterHostInfo());
}","testClusterHostInfoCache()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testCommandAbortForDeletedComponent","TRUE","3","assertEquals","{
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponent scWithDeletedSCH = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch1 = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    java.lang.String hostname1 = ""host1"";
    org.apache.ambari.server.state.Host host1 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(hostname1)).thenReturn(host1);
    Mockito.when(host1.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host1.getHostName()).thenReturn(hostname1);
    Mockito.when(scomp.getServiceComponentHost(hostname1)).thenReturn(sch1);
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(hostname1, sch1);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAO = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.apache.ambari.server.orm.entities.HostEntity hostEntity = new org.apache.ambari.server.orm.entities.HostEntity();
    hostEntity.setHostName(hostname1);
    hostDAO.create(hostEntity);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(org.apache.ambari.server.Role.HBASE_MASTER.toString())).thenReturn(scWithDeletedSCH);
    Mockito.when(serviceObj.getServiceComponent(org.apache.ambari.server.Role.HBASE_REGIONSERVER.toString())).thenReturn(scomp);
    Mockito.when(scWithDeletedSCH.getServiceComponentHost(Matchers.anyString())).thenThrow(new org.apache.ambari.server.ServiceComponentHostNotFoundException(""dummyCluster"", ""dummyService"", ""dummyComponent"", ""dummyHostname""));
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    org.apache.ambari.server.actionmanager.Stage stage1 = stageFactory.createNew(1, ""/tmp"", ""cluster1"", 1L, ""stageWith2Tasks"", """", """");
    addInstallTaskToStage(stage1, hostname1, ""cluster1"", org.apache.ambari.server.Role.HBASE_MASTER, org.apache.ambari.server.RoleCommand.INSTALL, org.apache.ambari.server.state.Service.Type.HBASE, 1);
    addInstallTaskToStage(stage1, hostname1, ""cluster1"", org.apache.ambari.server.Role.HBASE_REGIONSERVER, org.apache.ambari.server.RoleCommand.INSTALL, org.apache.ambari.server.state.Service.Type.HBASE, 2);
    final java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = java.util.Collections.singletonList(stage1);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stages);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50000, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAO, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), null);
    final java.util.concurrent.CountDownLatch abortCalls = new java.util.concurrent.CountDownLatch(2);
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Object>() {
        @java.lang.Override
        public java.lang.Object answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.Long requestId = ((java.lang.Long) (invocation.getArguments()[0]));
            for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
                if (requestId.equals(stage.getRequestId())) {
                    for (org.apache.ambari.server.actionmanager.HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
                        if (((command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED) || (command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS)) || (command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING)) {
                            command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED);
                        }
                    }
                }
            }
            abortCalls.countDown();
            return null;
        }
    }).when(db).abortOperation(Matchers.anyLong());
    scheduler.setTaskTimeoutAdjustment(false);
    scheduler.start();
    long timeout = 60;
    abortCalls.await(timeout, java.util.concurrent.TimeUnit.SECONDS);
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, stages.get(0).getHostRoleStatus(hostname1, ""HBASE_MASTER""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, stages.get(0).getHostRoleStatus(hostname1, ""HBASE_REGIONSERVER""));
    Mockito.verify(db, Mockito.times(2)).abortOperation(Matchers.anyLong());
    scheduler.stop();
}","testCommandAbortForDeletedComponent()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testServerActionWOService","TRUE","2","assertEquals","{
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    java.util.Map<java.lang.String, java.lang.String> payload = new java.util.HashMap<>();
    final org.apache.ambari.server.actionmanager.Stage s = getStageWithServerAction(1, 977, payload, ""test"", 300, false, false);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = java.util.Collections.singletonList(s);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stages.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stages);
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.String host = ((java.lang.String) (invocation.getArguments()[0]));
            java.lang.String role = ((java.lang.String) (invocation.getArguments()[3]));
            org.apache.ambari.server.agent.CommandReport commandReport = ((org.apache.ambari.server.agent.CommandReport) (invocation.getArguments()[4]));
            org.apache.ambari.server.actionmanager.HostRoleCommand command = null;
            if (null == host) {
                command = s.getHostRoleCommand(null, role);
            } else {
                command = s.getHostRoleCommand(host, role);
            }
            command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.valueOf(commandReport.getStatus()));
            return null;
        }
    }).when(db).updateHostRoleState(Matchers.anyString(), Matchers.anyLong(), Matchers.anyLong(), Matchers.anyString(), Matchers.any(org.apache.ambari.server.agent.CommandReport.class));
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.util.List<org.apache.ambari.server.actionmanager.HostRoleCommand>>() {
        @java.lang.Override
        public java.util.List<org.apache.ambari.server.actionmanager.HostRoleCommand> answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.String role = ((java.lang.String) (invocation.getArguments()[0]));
            org.apache.ambari.server.actionmanager.HostRoleStatus status = ((org.apache.ambari.server.actionmanager.HostRoleStatus) (invocation.getArguments()[1]));
            org.apache.ambari.server.actionmanager.HostRoleCommand task = s.getHostRoleCommand(null, role);
            if (task.getStatus() == status) {
                return java.util.Arrays.asList(task);
            } else {
                return java.util.Collections.emptyList();
            }
        }
    }).when(db).getTasksByRoleAndStatus(Matchers.anyString(), Matchers.any(org.apache.ambari.server.actionmanager.HostRoleStatus.class));
    Mockito.doAnswer(new org.mockito.stubbing.Answer<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        @java.lang.Override
        public org.apache.ambari.server.actionmanager.HostRoleCommand answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            return s.getHostRoleCommand(null, ""AMBARI_SERVER_ACTION"");
        }
    }).when(db).getTask(Matchers.anyLong());
    org.apache.ambari.server.serveraction.ServerActionExecutor.init(injector);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), agentCommandsPublisher);
    int cycleCount = 0;
    while ((!stages.get(0).getHostRoleStatus(null, ""AMBARI_SERVER_ACTION"").equals(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED)) && ((cycleCount++) <= MAX_CYCLE_ITERATIONS)) {
        scheduler.doWork();
        scheduler.getServerActionExecutor().doWork();
    } 
    org.junit.Assert.assertEquals(stages.get(0).getHostRoleStatus(null, ""AMBARI_SERVER_ACTION""), org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED);
}","testServerActionWOService()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testCancelRequests","TRUE","7","assertEquals","{
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAO = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.apache.ambari.server.actionmanager.HostRoleCommandFactory hostRoleCommandFactory = Mockito.mock(org.apache.ambari.server.actionmanager.HostRoleCommandFactory.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    final java.lang.Long hostId = 1L;
    org.apache.ambari.server.orm.entities.HostEntity hostEntity = new org.apache.ambari.server.orm.entities.HostEntity();
    hostEntity.setHostName(hostname);
    hostEntity.setHostId(hostId);
    hostDAO.create(hostEntity);
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(hostname, sch);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    long requestId = 1;
    final java.util.List<org.apache.ambari.server.actionmanager.Stage> allStages = new java.util.ArrayList<>();
    final java.util.List<org.apache.ambari.server.actionmanager.Stage> stagesInProgress = new java.util.ArrayList<>();
    final java.util.List<org.apache.ambari.server.actionmanager.Stage> firstStageInProgress = new java.util.ArrayList<>();
    final java.util.List<org.apache.ambari.server.actionmanager.HostRoleCommand> tasksInProgress = new java.util.ArrayList<>();
    final java.util.List<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> hrcEntitiesInProgress = new java.util.ArrayList<>();
    int secondaryNamenodeCmdTaskId = 1;
    int namenodeCmdTaskId = 2;
    int datanodeCmdTaskId = 3;
    org.apache.ambari.server.actionmanager.Stage stageWithTask = getStageWithSingleTask(hostname, ""cluster1"", org.apache.ambari.server.Role.SECONDARY_NAMENODE, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.HDFS, secondaryNamenodeCmdTaskId, 1, ((int) (requestId)));
    stageWithTask.getOrderedHostRoleCommands().get(0).setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED);
    allStages.add(stageWithTask);
    stageWithTask = getStageWithSingleTask(hostname, ""cluster1"", org.apache.ambari.server.Role.NAMENODE, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.HDFS, namenodeCmdTaskId, 2, ((int) (requestId)));
    tasksInProgress.addAll(stageWithTask.getOrderedHostRoleCommands());
    firstStageInProgress.add(stageWithTask);
    stagesInProgress.add(stageWithTask);
    allStages.add(stageWithTask);
    stageWithTask = getStageWithSingleTask(hostname, ""cluster1"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.HDFS, datanodeCmdTaskId, 3, ((int) (requestId)));
    tasksInProgress.addAll(stageWithTask.getOrderedHostRoleCommands());
    stagesInProgress.add(stageWithTask);
    allStages.add(stageWithTask);
    for (org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand : tasksInProgress) {
        org.apache.ambari.server.orm.entities.HostRoleCommandEntity entity = Mockito.mock(org.apache.ambari.server.orm.entities.HostRoleCommandEntity.class);
        Mockito.when(entity.getTaskId()).thenReturn(hostRoleCommand.getTaskId());
        Mockito.when(entity.getStageId()).thenReturn(hostRoleCommand.getStageId());
        Mockito.when(entity.getRequestId()).thenReturn(hostRoleCommand.getRequestId());
        Mockito.when(entity.getHostId()).thenReturn(hostRoleCommand.getHostId());
        Mockito.when(entity.getHostName()).thenReturn(hostRoleCommand.getHostName());
        Mockito.when(entity.getRole()).thenReturn(hostRoleCommand.getRole());
        Mockito.when(entity.getStatus()).thenReturn(hostRoleCommand.getStatus());
        Mockito.when(entity.getRoleCommand()).thenReturn(hostRoleCommand.getRoleCommand());
        hrcEntitiesInProgress.add(entity);
        Mockito.when(hostRoleCommandFactory.createExisting(entity)).thenReturn(hostRoleCommand);
    }
    org.apache.ambari.server.state.Host host = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(Matchers.anyString())).thenReturn(host);
    Mockito.when(host.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host.getHostName()).thenReturn(hostname);
    Mockito.when(host.getHostId()).thenReturn(hostId);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stagesInProgress.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(stagesInProgress);
    Mockito.when(db.getStagesInProgressForRequest(requestId)).thenReturn(stagesInProgress);
    Mockito.when(db.getAllStages(Matchers.anyLong())).thenReturn(allStages);
    java.util.List<org.apache.ambari.server.actionmanager.HostRoleCommand> requestTasks = new java.util.ArrayList<>();
    for (org.apache.ambari.server.actionmanager.Stage stage : allStages) {
        requestTasks.addAll(stage.getOrderedHostRoleCommands());
    }
    Mockito.when(db.getRequestTasks(Matchers.anyLong())).thenReturn(requestTasks);
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.util.List<org.apache.ambari.server.agent.CommandReport> reports = ((java.util.List<org.apache.ambari.server.agent.CommandReport>) (invocation.getArguments()[0]));
            for (org.apache.ambari.server.agent.CommandReport report : reports) {
                java.lang.String actionId = report.getActionId();
                long[] requestStageIds = org.apache.ambari.server.utils.StageUtils.getRequestStage(actionId);
                java.lang.Long requestId = requestStageIds[0];
                java.lang.Long stageId = requestStageIds[1];
                java.lang.Long id = report.getTaskId();
                for (org.apache.ambari.server.actionmanager.Stage stage : stagesInProgress) {
                    if (requestId.equals(stage.getRequestId()) && stageId.equals(stage.getStageId())) {
                        for (org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand : stage.getOrderedHostRoleCommands()) {
                            if (hostRoleCommand.getTaskId() == id) {
                                hostRoleCommand.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.valueOf(report.getStatus()));
                            }
                        }
                    }
                }
            }
            return null;
        }
    }).when(db).updateHostRoleStates(Matchers.anyCollectionOf(org.apache.ambari.server.agent.CommandReport.class));
    Mockito.when(db.getTask(Matchers.anyLong())).thenAnswer(new org.mockito.stubbing.Answer<java.lang.Object>() {
        @java.lang.Override
        public java.lang.Object answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.Long taskId = ((java.lang.Long) (invocation.getArguments()[0]));
            for (org.apache.ambari.server.actionmanager.Stage stage : allStages) {
                for (org.apache.ambari.server.actionmanager.HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
                    if (taskId.equals(command.getTaskId())) {
                        return command;
                    }
                }
            }
            return null;
        }
    });
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.util.Collection<org.apache.ambari.server.orm.entities.HostRoleCommandEntity>>() {
        @java.lang.Override
        public java.util.Collection<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.Long requestId = ((java.lang.Long) (invocation.getArguments()[0]));
            java.util.List<org.apache.ambari.server.orm.entities.HostRoleCommandEntity> abortedCommands = com.google.common.collect.Lists.newArrayList();
            for (org.apache.ambari.server.actionmanager.Stage stage : stagesInProgress) {
                if (requestId.equals(stage.getRequestId())) {
                    for (org.apache.ambari.server.actionmanager.HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
                        if (((command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED) || (command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS)) || (command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING)) {
                            command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED);
                            org.apache.ambari.server.orm.entities.HostRoleCommandEntity hostRoleCommandEntity = command.constructNewPersistenceEntity();
                            hostRoleCommandEntity.setStage(stage.constructNewPersistenceEntity());
                            abortedCommands.add(hostRoleCommandEntity);
                        }
                    }
                }
            }
            return abortedCommands;
        }
    }).when(db).abortOperation(Matchers.anyLong());
    java.util.Map<java.lang.Long, java.util.List<org.apache.ambari.server.agent.AgentCommand>> commands = new java.util.HashMap<>();
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.Long hostId = ((java.lang.Long) (invocation.getArguments()[0]));
            if (!commands.containsKey(hostId)) {
                commands.put(hostId, new java.util.ArrayList<>());
            }
            commands.get(hostId).add(((org.apache.ambari.server.agent.AgentCommand) (invocation.getArguments()[1])));
            return null;
        }
    }).when(agentCommandsPublisher).sendAgentCommand(Matchers.anyLong(), Matchers.any(org.apache.ambari.server.agent.AgentCommand.class));
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    Mockito.when(hostRoleCommandDAO.findByRequestIdAndStatuses(requestId, org.apache.ambari.server.actionmanager.HostRoleStatus.NOT_COMPLETED_STATUSES)).thenReturn(hrcEntitiesInProgress);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAO, hostRoleCommandFactory, agentCommandsPublisher);
    scheduler.doWork();
    java.lang.String reason = ""Some reason"";
    scheduler.scheduleCancellingRequest(requestId, reason);
    scheduler.doWork();
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED, allStages.get(0).getHostRoleStatus(hostname, ""SECONDARY_NAMENODE""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, allStages.get(1).getHostRoleStatus(hostname, ""NAMENODE""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED, allStages.get(2).getHostRoleStatus(hostname, ""DATANODE""));
    org.junit.Assert.assertEquals(1, commands.get(hostId).size());
    org.apache.ambari.server.agent.CancelCommand cancelCommand = ((org.apache.ambari.server.agent.CancelCommand) (commands.get(hostId).get(0)));
    org.junit.Assert.assertEquals(cancelCommand.getTargetTaskId(), namenodeCmdTaskId);
    org.junit.Assert.assertEquals(cancelCommand.getReason(), reason);
}","testCancelRequests()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testExclusiveRequests","TRUE","13","assertTrue
assertFalse","{
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    java.lang.String hostname1 = ""hostname1"";
    java.lang.String hostname2 = ""hostname2"";
    java.lang.String hostname3 = ""hostname3"";
    hosts.put(hostname1, sch);
    hosts.put(hostname2, sch);
    hosts.put(hostname3, sch);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    long requestId1 = 1;
    long requestId2 = 2;
    long requestId3 = 3;
    final java.util.List<org.apache.ambari.server.actionmanager.Stage> firstStageInProgressByRequest = new java.util.ArrayList<>();
    final java.util.List<org.apache.ambari.server.actionmanager.Stage> stagesInProgress = new java.util.ArrayList<>();
    int namenodeCmdTaskId = 1;
    org.apache.ambari.server.actionmanager.Stage request1Stage1 = getStageWithSingleTask(hostname1, ""cluster1"", org.apache.ambari.server.Role.NAMENODE, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.HDFS, namenodeCmdTaskId, 1, ((int) (requestId1)));
    org.apache.ambari.server.actionmanager.Stage request1Stage2 = getStageWithSingleTask(hostname1, ""cluster1"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.HDFS, 2, 2, ((int) (requestId1)));
    org.apache.ambari.server.actionmanager.Stage request2Stage1 = getStageWithSingleTask(hostname2, ""cluster1"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.STOP, org.apache.ambari.server.state.Service.Type.HDFS, 3, 3, ((int) (requestId2)));
    org.apache.ambari.server.actionmanager.Stage request3Stage1 = getStageWithSingleTask(hostname3, ""cluster1"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.START, org.apache.ambari.server.state.Service.Type.HDFS, 4, 4, ((int) (requestId3)));
    firstStageInProgressByRequest.add(request1Stage1);
    firstStageInProgressByRequest.add(request2Stage1);
    firstStageInProgressByRequest.add(request3Stage1);
    stagesInProgress.add(request1Stage1);
    stagesInProgress.add(request1Stage2);
    stagesInProgress.add(request2Stage1);
    stagesInProgress.add(request3Stage1);
    org.apache.ambari.server.state.Host host1 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(Matchers.anyString())).thenReturn(host1);
    Mockito.when(host1.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host1.getHostName()).thenReturn(hostname);
    org.apache.ambari.server.state.Host host2 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(Matchers.anyString())).thenReturn(host2);
    Mockito.when(host2.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host2.getHostName()).thenReturn(hostname);
    org.apache.ambari.server.state.Host host3 = Mockito.mock(org.apache.ambari.server.state.Host.class);
    Mockito.when(fsm.getHost(Matchers.anyString())).thenReturn(host3);
    Mockito.when(host3.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(host3.getHostName()).thenReturn(hostname);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(stagesInProgress.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(firstStageInProgressByRequest);
    java.util.List<org.apache.ambari.server.actionmanager.HostRoleCommand> requestTasks = new java.util.ArrayList<>();
    for (org.apache.ambari.server.actionmanager.Stage stage : stagesInProgress) {
        requestTasks.addAll(stage.getOrderedHostRoleCommands());
    }
    Mockito.when(db.getRequestTasks(Matchers.anyLong())).thenReturn(requestTasks);
    Mockito.when(db.getAllStages(Matchers.anyLong())).thenReturn(stagesInProgress);
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.util.List<org.apache.ambari.server.agent.CommandReport> reports = ((java.util.List<org.apache.ambari.server.agent.CommandReport>) (invocation.getArguments()[0]));
            for (org.apache.ambari.server.agent.CommandReport report : reports) {
                java.lang.String actionId = report.getActionId();
                long[] requestStageIds = org.apache.ambari.server.utils.StageUtils.getRequestStage(actionId);
                java.lang.Long requestId = requestStageIds[0];
                java.lang.Long stageId = requestStageIds[1];
                java.lang.Long id = report.getTaskId();
                for (org.apache.ambari.server.actionmanager.Stage stage : stagesInProgress) {
                    if (requestId.equals(stage.getRequestId()) && stageId.equals(stage.getStageId())) {
                        for (org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand : stage.getOrderedHostRoleCommands()) {
                            if (hostRoleCommand.getTaskId() == id) {
                                hostRoleCommand.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.valueOf(report.getStatus()));
                            }
                        }
                    }
                }
            }
            return null;
        }
    }).when(db).updateHostRoleStates(Matchers.anyCollectionOf(org.apache.ambari.server.agent.CommandReport.class));
    Mockito.when(db.getTask(Matchers.anyLong())).thenAnswer(new org.mockito.stubbing.Answer<java.lang.Object>() {
        @java.lang.Override
        public java.lang.Object answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.Long taskId = ((java.lang.Long) (invocation.getArguments()[0]));
            for (org.apache.ambari.server.actionmanager.Stage stage : stagesInProgress) {
                for (org.apache.ambari.server.actionmanager.HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
                    if (taskId.equals(command.getTaskId())) {
                        return command;
                    }
                }
            }
            return null;
        }
    });
    final java.util.Map<java.lang.Long, java.lang.Boolean> startedRequests = new java.util.HashMap<>();
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            startedRequests.put(((java.lang.Long) (invocation.getArguments()[0])), true);
            return null;
        }
    }).when(db).startRequest(Matchers.anyLong());
    org.apache.ambari.server.orm.entities.RequestEntity request1 = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request1.isExclusive()).thenReturn(false);
    Mockito.when(request1.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    org.apache.ambari.server.orm.entities.RequestEntity request2 = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request2.isExclusive()).thenReturn(true);
    Mockito.when(request2.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    org.apache.ambari.server.orm.entities.RequestEntity request3 = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request3.isExclusive()).thenReturn(false);
    Mockito.when(request3.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(db.getRequestEntity(requestId1)).thenReturn(request1);
    Mockito.when(db.getRequestEntity(requestId2)).thenReturn(request2);
    Mockito.when(db.getRequestEntity(requestId3)).thenReturn(request3);
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = Mockito.spy(new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), agentCommandsPublisher));
    Mockito.doReturn(false).when(scheduler).wasAgentRestartedDuringOperation(Matchers.any(org.apache.ambari.server.state.Host.class), Matchers.any(org.apache.ambari.server.actionmanager.Stage.class), Matchers.anyString());
    scheduler.doWork();
    org.junit.Assert.assertTrue(startedRequests.containsKey(requestId1));
    org.junit.Assert.assertFalse(startedRequests.containsKey(requestId2));
    org.junit.Assert.assertFalse(startedRequests.containsKey(requestId3));
    stagesInProgress.remove(0);
    firstStageInProgressByRequest.clear();
    firstStageInProgressByRequest.add(request1Stage2);
    firstStageInProgressByRequest.add(request2Stage1);
    firstStageInProgressByRequest.add(request3Stage1);
    scheduler.doWork();
    org.junit.Assert.assertTrue(startedRequests.containsKey(requestId1));
    org.junit.Assert.assertFalse(startedRequests.containsKey(requestId2));
    org.junit.Assert.assertFalse(startedRequests.containsKey(requestId3));
    stagesInProgress.remove(0);
    firstStageInProgressByRequest.clear();
    firstStageInProgressByRequest.add(request2Stage1);
    firstStageInProgressByRequest.add(request3Stage1);
    scheduler.doWork();
    org.junit.Assert.assertTrue(startedRequests.containsKey(requestId1));
    org.junit.Assert.assertTrue(startedRequests.containsKey(requestId2));
    org.junit.Assert.assertFalse(startedRequests.containsKey(requestId3));
    stagesInProgress.remove(0);
    firstStageInProgressByRequest.clear();
    firstStageInProgressByRequest.add(request3Stage1);
    scheduler.doWork();
    org.junit.Assert.assertTrue(startedRequests.containsKey(requestId1));
    org.junit.Assert.assertTrue(startedRequests.containsKey(requestId2));
    org.junit.Assert.assertTrue(startedRequests.containsKey(requestId3));
}","testExclusiveRequests()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testAbortHolding","FALSE","0","None","{
    com.google.inject.persist.UnitOfWork unitOfWork = org.easymock.EasyMock.createMock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = org.easymock.EasyMock.createMock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.state.Clusters fsm = org.easymock.EasyMock.createMock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(new java.util.Properties());
    org.apache.ambari.server.orm.entities.HostEntity hostEntity1 = new org.apache.ambari.server.orm.entities.HostEntity();
    hostEntity1.setHostName(""h1"");
    hostDAO.merge(hostEntity1);
    db.abortHostRole(""h1"", -1L, -1L, ""AMBARI_SERVER_ACTION"");
    org.easymock.EasyMock.expectLastCall();
    org.easymock.EasyMock.replay(db);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, ((org.apache.ambari.server.orm.dao.HostRoleCommandDAO) (null)), ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), null);
    org.apache.ambari.server.actionmanager.HostRoleCommand hrc1 = hostRoleCommandFactory.create(""h1"", org.apache.ambari.server.Role.NAMENODE, null, org.apache.ambari.server.RoleCommand.EXECUTE);
    hrc1.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED);
    org.apache.ambari.server.actionmanager.HostRoleCommand hrc3 = hostRoleCommandFactory.create(""h1"", org.apache.ambari.server.Role.AMBARI_SERVER_ACTION, null, org.apache.ambari.server.RoleCommand.CUSTOM_COMMAND);
    hrc3.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.HOLDING);
    org.apache.ambari.server.actionmanager.HostRoleCommand hrc4 = hostRoleCommandFactory.create(""h1"", org.apache.ambari.server.Role.FLUME_HANDLER, null, org.apache.ambari.server.RoleCommand.EXECUTE);
    hrc4.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING);
    java.util.List<org.apache.ambari.server.actionmanager.HostRoleCommand> hostRoleCommands = java.util.Arrays.asList(hrc1, hrc3, hrc4);
    scheduler.cancelHostRoleCommands(hostRoleCommands, ""foo"");
    org.easymock.EasyMock.verify(db);
}","testAbortHolding()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testAbortAmbariServerAction","FALSE","0","None","{
    com.google.inject.persist.UnitOfWork unitOfWork = org.easymock.EasyMock.createMock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = org.easymock.EasyMock.createMock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.state.Clusters fsm = org.easymock.EasyMock.createMock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(new java.util.Properties());
    org.apache.ambari.server.orm.entities.HostEntity hostEntity1 = new org.apache.ambari.server.orm.entities.HostEntity();
    hostEntity1.setHostName(""h1"");
    hostDAO.merge(hostEntity1);
    org.easymock.EasyMock.replay(db);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, ((org.apache.ambari.server.orm.dao.HostRoleCommandDAO) (null)), ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), null);
    org.apache.ambari.server.actionmanager.HostRoleCommand hrc1 = hostRoleCommandFactory.create(""h1"", org.apache.ambari.server.Role.NAMENODE, null, org.apache.ambari.server.RoleCommand.EXECUTE);
    hrc1.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED);
    org.apache.ambari.server.actionmanager.HostRoleCommand hrc3 = hostRoleCommandFactory.create(null, org.apache.ambari.server.Role.AMBARI_SERVER_ACTION, null, org.apache.ambari.server.RoleCommand.CUSTOM_COMMAND);
    hrc3.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS);
    org.apache.ambari.server.actionmanager.HostRoleCommand hrc4 = hostRoleCommandFactory.create(""h1"", org.apache.ambari.server.Role.FLUME_HANDLER, null, org.apache.ambari.server.RoleCommand.EXECUTE);
    hrc4.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING);
    java.util.List<org.apache.ambari.server.actionmanager.HostRoleCommand> hostRoleCommands = java.util.Arrays.asList(hrc1, hrc3, hrc4);
    scheduler.cancelHostRoleCommands(hostRoleCommands, ""foo"");
    org.easymock.EasyMock.verify(db);
}","testAbortAmbariServerAction()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testSkippableCommandFailureDoesNotAbortRequest","TRUE","4","assertEquals","{
    java.util.Properties properties = new java.util.Properties();
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.state.Clusters fsm = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster oneClusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.apache.ambari.server.state.Host host = Mockito.mock(org.apache.ambari.server.state.Host.class);
    org.apache.ambari.server.state.Service serviceObj = Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.ServiceComponent scomp = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.apache.ambari.server.state.ServiceComponentHost sch = Mockito.mock(org.apache.ambari.server.state.ServiceComponentHost.class);
    com.google.inject.persist.UnitOfWork unitOfWork = Mockito.mock(com.google.inject.persist.UnitOfWork.class);
    org.apache.ambari.server.events.publishers.AgentCommandsPublisher agentCommandsPublisher = Mockito.mock(org.apache.ambari.server.events.publishers.AgentCommandsPublisher.class);
    Mockito.when(fsm.getCluster(Matchers.anyString())).thenReturn(oneClusterMock);
    Mockito.when(fsm.getHost(Matchers.anyString())).thenReturn(host);
    Mockito.when(host.getHostId()).thenReturn(1L);
    Mockito.when(host.getState()).thenReturn(org.apache.ambari.server.state.HostState.HEALTHY);
    Mockito.when(oneClusterMock.getService(Matchers.anyString())).thenReturn(serviceObj);
    Mockito.when(serviceObj.getServiceComponent(Matchers.anyString())).thenReturn(scomp);
    Mockito.when(scomp.getServiceComponentHost(Matchers.anyString())).thenReturn(sch);
    Mockito.when(serviceObj.getCluster()).thenReturn(oneClusterMock);
    java.lang.String hostname1 = ""ahost.ambari.apache.org"";
    java.util.HashMap<java.lang.String, org.apache.ambari.server.state.ServiceComponentHost> hosts = new java.util.HashMap<>();
    hosts.put(hostname1, sch);
    Mockito.when(scomp.getServiceComponentHosts()).thenReturn(hosts);
    org.apache.ambari.server.actionmanager.Stage stage = null;
    org.apache.ambari.server.actionmanager.Stage stage2 = null;
    final java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = new java.util.ArrayList<>();
    final java.util.List<org.apache.ambari.server.actionmanager.Stage> firstStageInProgress = new java.util.ArrayList<>();
    stages.add(stage = getStageWithSingleTask(hostname1, ""cluster1"", org.apache.ambari.server.Role.NAMENODE, org.apache.ambari.server.RoleCommand.STOP, org.apache.ambari.server.state.Service.Type.HDFS, 1, 1, 1));
    addInstallTaskToStage(stage, hostname1, ""cluster1"", org.apache.ambari.server.Role.HBASE_MASTER, org.apache.ambari.server.RoleCommand.INSTALL, org.apache.ambari.server.state.Service.Type.HBASE, 1);
    stages.add(stage2 = getStageWithSingleTask(hostname1, ""cluster1"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.STOP, org.apache.ambari.server.state.Service.Type.HDFS, 1, 1, 1));
    for (org.apache.ambari.server.actionmanager.Stage stageToMakeSkippable : stages) {
        stageToMakeSkippable.setSkippable(true);
    }
    org.apache.ambari.server.actionmanager.HostRoleCommand command = stage.getOrderedHostRoleCommands().iterator().next();
    command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED);
    firstStageInProgress.add(stage);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = Mockito.mock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.mockito.Mockito.doNothing().when(hostRoleCommandDAOMock).publishTaskCreateEvent(Matchers.anyListOf(org.apache.ambari.server.actionmanager.HostRoleCommand.class));
    org.apache.ambari.server.orm.entities.RequestEntity request = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(request.getClusterHostInfo()).thenReturn(org.apache.ambari.server.actionmanager.TestActionScheduler.CLUSTER_HOST_INFO);
    Mockito.when(request.isExclusive()).thenReturn(false);
    Mockito.when(db.getRequestEntity(Matchers.anyLong())).thenReturn(request);
    Mockito.when(db.getCommandsInProgressCount()).thenReturn(firstStageInProgress.size());
    Mockito.when(db.getFirstStageInProgressPerRequest()).thenReturn(firstStageInProgress);
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.util.List<org.apache.ambari.server.agent.CommandReport> reports = ((java.util.List<org.apache.ambari.server.agent.CommandReport>) (invocation.getArguments()[0]));
            for (org.apache.ambari.server.agent.CommandReport report : reports) {
                java.lang.String actionId = report.getActionId();
                long[] requestStageIds = org.apache.ambari.server.utils.StageUtils.getRequestStage(actionId);
                java.lang.Long requestId = requestStageIds[0];
                java.lang.Long stageId = requestStageIds[1];
                java.lang.Long id = report.getTaskId();
                for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
                    if (requestId.equals(stage.getRequestId()) && stageId.equals(stage.getStageId())) {
                        for (org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand : stage.getOrderedHostRoleCommands()) {
                            if (hostRoleCommand.getTaskId() == id) {
                                hostRoleCommand.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.valueOf(report.getStatus()));
                            }
                        }
                    }
                }
            }
            return null;
        }
    }).when(db).updateHostRoleStates(Matchers.anyCollectionOf(org.apache.ambari.server.agent.CommandReport.class));
    Mockito.when(db.getTask(Matchers.anyLong())).thenAnswer(new org.mockito.stubbing.Answer<java.lang.Object>() {
        @java.lang.Override
        public java.lang.Object answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.Long taskId = ((java.lang.Long) (invocation.getArguments()[0]));
            for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
                for (org.apache.ambari.server.actionmanager.HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
                    if (taskId.equals(command.getTaskId())) {
                        return command;
                    }
                }
            }
            return null;
        }
    });
    Mockito.doAnswer(new org.mockito.stubbing.Answer<java.lang.Void>() {
        @java.lang.Override
        public java.lang.Void answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            java.lang.Long requestId = ((java.lang.Long) (invocation.getArguments()[0]));
            for (org.apache.ambari.server.actionmanager.Stage stage : stages) {
                if (requestId.equals(stage.getRequestId())) {
                    for (org.apache.ambari.server.actionmanager.HostRoleCommand command : stage.getOrderedHostRoleCommands()) {
                        if (((command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED) || (command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS)) || (command.getStatus() == org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING)) {
                            command.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.ABORTED);
                        }
                    }
                }
            }
            return null;
        }
    }).when(db).abortOperation(Matchers.anyLong());
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = Mockito.spy(new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, db, fsm, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), unitOfWork, null, conf, entityManagerProviderMock, hostRoleCommandDAOMock, ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), agentCommandsPublisher));
    Mockito.doReturn(false).when(scheduler).wasAgentRestartedDuringOperation(Matchers.any(org.apache.ambari.server.state.Host.class), Matchers.any(org.apache.ambari.server.actionmanager.Stage.class), Matchers.anyString());
    scheduler.doWork();
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED, stages.get(0).getHostRoleStatus(hostname1, ""NAMENODE""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED, stages.get(0).getHostRoleStatus(hostname1, ""HBASE_MASTER""));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING, stages.get(1).getHostRoleStatus(hostname1, ""DATANODE""));
    org.easymock.EasyMock.verify(entityManagerProviderMock);
}","testSkippableCommandFailureDoesNotAbortRequest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testSkippableCommandFailureDoesNotAbortNextStage","TRUE","2","assertFalse","{
    org.apache.ambari.server.actionmanager.Stage previousStage = EasyMock.createMock(org.apache.ambari.server.actionmanager.Stage.class);
    org.apache.ambari.server.actionmanager.Stage nextStage = EasyMock.createMock(org.apache.ambari.server.actionmanager.Stage.class);
    org.apache.ambari.server.actionmanager.ActionDBAccessor actionDBAccessor = EasyMock.createMock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    EasyMock.expect(previousStage.isSkippable()).andReturn(false);
    EasyMock.expect(nextStage.getStageId()).andReturn(5L);
    EasyMock.expect(nextStage.getRequestId()).andReturn(1L);
    EasyMock.expect(actionDBAccessor.getStage(""1-4"")).andReturn(previousStage);
    java.util.Map<java.lang.String, org.apache.ambari.server.actionmanager.HostRoleCommand> roleCommandMap = new java.util.HashMap<>();
    org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand = EasyMock.createMock(org.apache.ambari.server.actionmanager.HostRoleCommand.class);
    EasyMock.expect(hostRoleCommand.getRole()).andReturn(org.apache.ambari.server.Role.DATANODE).anyTimes();
    EasyMock.expect(hostRoleCommand.getStatus()).andReturn(org.apache.ambari.server.actionmanager.HostRoleStatus.SKIPPED_FAILED);
    roleCommandMap.put(org.apache.ambari.server.Role.DATANODE.toString(), hostRoleCommand);
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.apache.ambari.server.actionmanager.HostRoleCommand>> hostRoleCommands = new java.util.HashMap<>();
    hostRoleCommands.put(""host"", roleCommandMap);
    EasyMock.expect(previousStage.getHostRoleCommands()).andReturn(hostRoleCommands).anyTimes();
    EasyMock.expect(previousStage.getSuccessFactor(org.apache.ambari.server.Role.DATANODE)).andReturn(0.5F);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, actionDBAccessor, null, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), null, null, null, entityManagerProviderMock, ((org.apache.ambari.server.orm.dao.HostRoleCommandDAO) (null)), ((org.apache.ambari.server.actionmanager.HostRoleCommandFactory) (null)), null, null);
    EasyMock.replay(previousStage, nextStage, actionDBAccessor, hostRoleCommand);
    java.lang.reflect.Method method = scheduler.getClass().getDeclaredMethod(""hasPreviousStageFailed"", org.apache.ambari.server.actionmanager.Stage.class);
    method.setAccessible(true);
    java.lang.Object result = method.invoke(scheduler, nextStage);
    org.junit.Assert.assertFalse(((java.lang.Boolean) (result)));
    org.easymock.EasyMock.verify(previousStage, nextStage, actionDBAccessor, hostRoleCommand);
}","testSkippableCommandFailureDoesNotAbortNextStage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testPreviousStageToFailForFirstStage","TRUE","2","assertFalse","{
    org.apache.ambari.server.actionmanager.Stage nextStage = EasyMock.createNiceMock(org.apache.ambari.server.actionmanager.Stage.class);
    EasyMock.expect(nextStage.getStageId()).andReturn(0L);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, null, null, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), null, null, null, entityManagerProviderMock, null, null, null);
    EasyMock.replay(nextStage);
    java.lang.reflect.Method method = scheduler.getClass().getDeclaredMethod(""hasPreviousStageFailed"", org.apache.ambari.server.actionmanager.Stage.class);
    method.setAccessible(true);
    java.lang.Object result = method.invoke(scheduler, nextStage);
    org.junit.Assert.assertFalse(((java.lang.Boolean) (result)));
    org.easymock.EasyMock.verify(nextStage);
}","testPreviousStageToFailForFirstStage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testPreviousStageToFailForSecondStage","TRUE","2","assertTrue","{
    org.apache.ambari.server.actionmanager.Stage previousStage = EasyMock.createMock(org.apache.ambari.server.actionmanager.Stage.class);
    org.apache.ambari.server.actionmanager.Stage nextStage = EasyMock.createMock(org.apache.ambari.server.actionmanager.Stage.class);
    org.apache.ambari.server.actionmanager.ActionDBAccessor actionDBAccessor = EasyMock.createMock(org.apache.ambari.server.actionmanager.ActionDBAccessor.class);
    EasyMock.expect(previousStage.isSkippable()).andReturn(false);
    EasyMock.expect(nextStage.getStageId()).andReturn(1L);
    EasyMock.expect(nextStage.getRequestId()).andReturn(1L);
    EasyMock.expect(actionDBAccessor.getStage(""1-0"")).andReturn(previousStage);
    java.util.Map<java.lang.String, org.apache.ambari.server.actionmanager.HostRoleCommand> roleCommandMap = new java.util.HashMap<>();
    org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand = EasyMock.createMock(org.apache.ambari.server.actionmanager.HostRoleCommand.class);
    EasyMock.expect(hostRoleCommand.getRole()).andReturn(org.apache.ambari.server.Role.DATANODE).anyTimes();
    EasyMock.expect(hostRoleCommand.getStatus()).andReturn(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED);
    roleCommandMap.put(org.apache.ambari.server.Role.DATANODE.toString(), hostRoleCommand);
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.apache.ambari.server.actionmanager.HostRoleCommand>> hostRoleCommands = new java.util.HashMap<>();
    hostRoleCommands.put(""host"", roleCommandMap);
    EasyMock.expect(previousStage.getHostRoleCommands()).andReturn(hostRoleCommands).anyTimes();
    EasyMock.expect(previousStage.getSuccessFactor(org.apache.ambari.server.Role.DATANODE)).andReturn(0.5F);
    org.apache.ambari.server.actionmanager.ActionScheduler scheduler = new org.apache.ambari.server.actionmanager.ActionScheduler(100, 50, actionDBAccessor, null, 3, new org.apache.ambari.server.controller.HostsMap(((java.lang.String) (null))), null, null, null, entityManagerProviderMock, null, null, null);
    EasyMock.replay(previousStage, nextStage, actionDBAccessor, hostRoleCommand);
    java.lang.reflect.Method method = scheduler.getClass().getDeclaredMethod(""hasPreviousStageFailed"", org.apache.ambari.server.actionmanager.Stage.class);
    method.setAccessible(true);
    java.lang.Object result = method.invoke(scheduler, nextStage);
    org.junit.Assert.assertTrue(((java.lang.Boolean) (result)));
    org.easymock.EasyMock.verify(previousStage, nextStage, actionDBAccessor, hostRoleCommand);
}","testPreviousStageToFailForSecondStage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionScheduler.java","30b6f5b61400efda3bff9a64b06ba57938433df3
6ecac18cb5668ec3b74fe69751dc54d65f33f698
d04ce2e87442534bb27aff4ff0f5647b36945a72
c774475b9281b4b04a1135e46e576896c3992e46
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
6b9a59753a924c6e07a68a0de61f0fb2792df102
28eff65eea321cc8f7fe6c783460f0d710708bf8
aba473e84a5a24d12b29a2bf9e858019c023f6fd
1a08c4980295ebda1b71db17eb6389fb71f928fd
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0e4819ae7b45fc659067b83d1cba0f97435528bd
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
33caec24a8742666a7190f38f5ebd71c54b2a405
c9bea4ab8f8a042e60103e8bb8880fc718fa3cf3
3a7906c84737511475e718a0da50397b31ef7b52
3283d9f20c35686d41edf7f9bb0430c8dd77eb24
edce0b1173b6629e50b053be140490fa288ec361
2131466610b41af761fd1a105312c6553685c5ac
d237c9ad36815756685b1384a43bbb90e3aa2117
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d0d6f885c62fcaa93c4ab3766d552384ee5af8ba
ecc19031952bf37829f07752f0563acb0eab52df
8b041be4a1f38069b72bcd8269cec9b8e9cd6e3e
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
bf5ca2f5e6714c8e0536504de9d54c8d6afc1425
0288d909475ee383396ad07844c3e9100a897f5a
7d317cc29dd4189dd19fdba3cbf44b70232d538e
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
be25c9e77197be8e056c1bb9aa3651c16dd6fd62
1fed70cab776015408ffae7897d7ddf307d1276f
3f2d5bea20ce647d6fff64a9b2d7a488b005f0c9
79ab063711390b4990c04c477267136939ba9d71
fa2fe9d8efe0bf0bc6c12c1b3291ce8f272aec4d
825d557ae63e5bb6a7d22e0132c96dc599d12ad0
67cd9d9ee17f59adcec358c90bad515b2590d7d1
4d3839c7f9ce921e92de82bc66440167cb6173a9
dea22be16c172ed0ca7a6e66ac29bda04027ca2f
20056273ec9279f4823e495cdecfe514537f1223
05a4020eb56a51b9f94f8c38675de51d1d917314
1be4be17bdc3c180b664def7238e17a2a432815b
640d1523256e923517184e6a22394df7c9530ff8
9dd623abb78e094bbf6ab5fcd4763cf2efa96c4b
8def5a407399c56c51ad4edca1a59377dc3c3ba6
8e9f5e8dacf7db67daea2b8a95d80c5bec36ac18
d9f6bbec2eeb275146eca739951664fd55c47cc1
ee79dd21cca51646e3344c161ea61bc2e68f21fb
88aed0b8e3f0db2e2726358a7622c4d5519ea709
93e70b6ad7ac82f3fdccce75d4bb1ddd5f556074
3beda060b31d1b5a359ff52567e12a00eb70147d
d8dc285a5c5499e70ff14154889c1ec6d1f30ddc
01fa8eb03bc1a7de7bb914a8d8bc468cd87c4bd5
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
c11100587d8d3334320836acbe53eddb9ee9d317
a1b2d1dd7e30fc1b5e8244186d560406e7482d88
4e04189d7071b44b74ced36801cb157416373bb1
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
3ba1889f454ffcd14352954ef30ad0393b02dc4a
a52b04976f09b34e37467238811baab5fbb9102b
3d397dc04aab8d81c00aae2a8e5afa099fc57567
65971b663a06984bb22886649caccd92a9d99515
535bcb476b6ef41f11d738ece7b5cf63a4d7b232
645772647867574620d453ca8b8bb7693a1910eb
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
cb662f494f27b0ffc2058151f550b0cb08572db1
7c0bab1197b5685f86c39a81372d44f8f8648451
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
b4d35ac315fc70da74b6299f6dd854f461b0dcaf
aebdadbac908b72002ad6eaf079d63e405032e1c
bb6844a800393e8aa098eca19af75c1dd801b327
bf6cdf5e4405c0d266889d2067d71115218bd66b
bb53d0df1656c310e75a829b133110d1fa7e7374
49131366201e701efaa96af3882fe770fb03dd74
f792d3d3f6651d918ee5d201f1057f1c2bc65a3a
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
3a84e4f93954feb3a028a93476d10d578ebd215d
186798c6d1284def21512a5d65426808d7838bb2
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
8b0e64c5121ee14acdafa624681c9f291a390bb1
a719a58a4b5fc9603a0cc915813e56637648e874
54707c4965b0da9e2acd07e4675af07611b9a884
7d855fa3639dea523871717eed0d57448b1e14e6
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
d9beaa09d7c86297d59eeb474885f06faabff997
b2fae8cb54d2e4929437d941e831dcb584c5f645
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
4c405925c4435d24cd1075f8d813c5239d29335b
a3d2cc3f8f5b3cc1e077cdaf38bed922cbb940db
2cefb1bdd723f0591affa2ec261b4e7e12fc5b5e
5bfc4a8b9bdc1e10fefd30bc54baa3e5b619f705
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
6cd090344849557de6409f033a1b7262675f4bdd
bf2f1fac8363d151865fb545ea1c77f17de2c188
427b0a192501a55b94b7a502aa3243f05e72667d"
"testDesiredConfigurationsAfterApplyingLatestForStackInOtherThreads","TRUE","5","assertFalse
assertNotNull
assertEquals","{
    long clusterId = ormTestHelper.createCluster(java.util.UUID.randomUUID().toString());
    org.apache.ambari.server.state.Cluster cluster = clusters.getCluster(clusterId);
    ormTestHelper.addHost(clusters, cluster, ""h1"");
    org.apache.ambari.server.state.StackId stackId = cluster.getCurrentStackVersion();
    org.apache.ambari.server.state.StackId newStackId = new org.apache.ambari.server.state.StackId(""HDP-2.2.0"");
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity repoVersion220 = ormTestHelper.getOrCreateRepositoryVersion(newStackId, ""2.2.0-1234"");
    junit.framework.Assert.assertFalse(stackId.equals(newStackId));
    java.lang.String serviceName = ""ZOOKEEPER"";
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion = ormTestHelper.getOrCreateRepositoryVersion(cluster);
    org.apache.ambari.server.state.Service service = cluster.addService(serviceName, repositoryVersion);
    java.lang.String configType = ""zoo.cfg"";
    java.util.Map<java.lang.String, java.lang.String> properties = new java.util.HashMap<>();
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> propertiesAttributes = new java.util.HashMap<>();
    org.apache.ambari.server.state.ConfigFactory configFactory = org.apache.ambari.server.actionmanager.TestActionSchedulerThreading.injector.getInstance(org.apache.ambari.server.state.ConfigFactory.class);
    properties.put(""foo-property-1"", ""foo-value-1"");
    org.apache.ambari.server.state.Config c1 = configFactory.createNew(stackId, cluster, configType, ""version-1"", properties, propertiesAttributes);
    cluster.addDesiredConfig(""admin"", com.google.common.collect.Sets.newHashSet(c1), ""note-1"");
    service.setDesiredRepositoryVersion(repoVersion220);
    properties.put(""foo-property-2"", ""foo-value-2"");
    org.apache.ambari.server.state.Config c2 = configFactory.createNew(newStackId, cluster, configType, ""version-2"", properties, propertiesAttributes);
    cluster.addDesiredConfig(""admin"", com.google.common.collect.Sets.newHashSet(c2), ""note-2"");
    java.util.Map<java.lang.String, org.apache.ambari.server.state.DesiredConfig> desiredConfigs = cluster.getDesiredConfigs();
    org.apache.ambari.server.state.DesiredConfig desiredConfig = desiredConfigs.get(configType);
    desiredConfig = desiredConfigs.get(configType);
    org.junit.Assert.assertNotNull(desiredConfig);
    org.junit.Assert.assertEquals(java.lang.Long.valueOf(2), desiredConfig.getVersion());
    org.junit.Assert.assertEquals(""version-2"", desiredConfig.getTag());
    final java.lang.String hostName = cluster.getHosts().iterator().next().getHostName();
    service.setDesiredRepositoryVersion(repositoryVersion);
    java.util.concurrent.Semaphore applyLatestConfigsSemaphore = new java.util.concurrent.Semaphore(1, true);
    java.util.concurrent.Semaphore threadInitialCachingSemaphore = new java.util.concurrent.Semaphore(1, true);
    threadInitialCachingSemaphore.acquire();
    applyLatestConfigsSemaphore.acquire();
    final org.apache.ambari.server.actionmanager.TestActionSchedulerThreading.InstrumentedActionScheduler runnable = new org.apache.ambari.server.actionmanager.TestActionSchedulerThreading.InstrumentedActionScheduler(clusterId, hostName, threadInitialCachingSemaphore, applyLatestConfigsSemaphore);
    org.apache.ambari.server.actionmanager.TestActionSchedulerThreading.injector.injectMembers(runnable);
    final java.lang.Thread thread = new java.lang.Thread(runnable);
    thread.start();
    threadInitialCachingSemaphore.acquire();
    cluster.applyLatestConfigurations(stackId, serviceName);
    applyLatestConfigsSemaphore.release();
    thread.join();
    runnable.validateAssertions();
}","testDesiredConfigurationsAfterApplyingLatestForStackInOtherThreads()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestActionSchedulerThreading.java","c2409e740f84d6f051659b3b36d853902e698a60
c4148d805c4145d545712bbce6127e7518a7b7ce
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
a6639a7c72043ff7bda03e6ba305913c7503193a
ecc19031952bf37829f07752f0563acb0eab52df"
"testTaskTimeout","TRUE","2","assertEquals","{
    org.apache.ambari.server.actionmanager.Stage s = org.apache.ambari.server.utils.StageUtils.getATestStage(1, 1, ""h1"", ""{\""host_param\"":\""param_value\""}"", ""{\""stage_param\"":\""param_value\""}"");
    s.addHostRoleExecutionCommand(""h1"", org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.INSTALL, null, ""c1"", ""HDFS"", false, false);
    s.addHostRoleExecutionCommand(""h1"", org.apache.ambari.server.Role.HBASE_MASTER, org.apache.ambari.server.RoleCommand.INSTALL, null, ""c1"", ""HBASE"", false, false);
    for (org.apache.ambari.server.actionmanager.ExecutionCommandWrapper wrapper : s.getExecutionCommands(""h1"")) {
        java.util.Map<java.lang.String, java.lang.String> commandParams = new java.util.TreeMap<>();
        commandParams.put(org.apache.ambari.server.agent.ExecutionCommand.KeyNames.COMMAND_TIMEOUT, ""600"");
        wrapper.getExecutionCommand().setCommandParams(commandParams);
    }
    org.junit.Assert.assertEquals(3 * 600000, s.getStageTimeout());
}","testTaskTimeout()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestStage.java","c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
e4db57093f4d17497366cdfbf02127f36399bf42
8def5a407399c56c51ad4edca1a59377dc3c3ba6
ee79dd21cca51646e3344c161ea61bc2e68f21fb
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
9faeaf5a525bfee0932c1a654b28651c0b1705dd
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
40e94f00d6e5001cdc5a1d5e86c1e6a4b541fde7
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
96f197ad1ee2c3d418f2428931e8af130f932707
9a525ef0227c763fdfdb8822a9796be5c5e80355
0c5f8d21dc935bad434fd54f918b47e828f5a397
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testGetRequestContext","TRUE","2","assertEquals","{
    org.apache.ambari.server.actionmanager.Stage stage = stageFactory.createNew(1, ""/logDir"", ""c1"", 1L, ""My Context"", """", """");
    org.junit.Assert.assertEquals(""My Context"", stage.getRequestContext());
}","testGetRequestContext()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/actionmanager/TestStage.java","c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
e4db57093f4d17497366cdfbf02127f36399bf42
8def5a407399c56c51ad4edca1a59377dc3c3ba6
ee79dd21cca51646e3344c161ea61bc2e68f21fb
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
9faeaf5a525bfee0932c1a654b28651c0b1705dd
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
40e94f00d6e5001cdc5a1d5e86c1e6a4b541fde7
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
96f197ad1ee2c3d418f2428931e8af130f932707
9a525ef0227c763fdfdb8822a9796be5c5e80355
0c5f8d21dc935bad434fd54f918b47e828f5a397
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testDeserializeHostInfo","TRUE","7","assertEquals","{
    java.lang.String hostinfo = ""{\""architecture\"": \""x86_64\"", "" + ((((((((((((((((((((((((((((""\""augeasversion\"": \""0.10.0\"","" + ""\""domain\"": \""test.com\"", "") + ""\""facterversion\"": \""1.6.10\"","") + ""\""fqdn\"": \""dev.test.com\"", "") + ""\""hardwareisa\"": \""x86_64\"", "") + ""\""hardwaremodel\"": \""x86_64\"","") + ""\""hostname\"": \""dev\"", "") + ""\""id\"": \""root\"", "") + ""\""interfaces\"": \""eth0,lo\"", "") + ""\""ipaddress\"": \""10.0.2.15\"","") + ""\""ipaddress_eth0\"": \""10.0.2.15\"","") + ""\""ipaddress_lo\"": \""127.0.0.1\"","") + ""\""is_virtual\"": true,"") + ""\""kernel\"": \""Linux\"", "") + ""\""kernelmajversion\"": \""2.6\"","") + ""\""kernelrelease\"": \""2.6.18-238.12.1.el5\"","") + ""\""kernelversion\"": \""2.6.18\"", "") + ""\""lsbdistcodename\"": \""Final\"","") + ""\""lsbdistdescription\"": \""CentOS release 5.8 (Final)\"","") + ""\""lsbdistid\"": \""CentOS\"", "") + ""\""lsbdistrelease\"": \""5.8\"", "") + ""\""lsbmajdistrelease\"": \""5\"","") + ""\""macaddress\"": \""08:00:27:D2:59:B2\"", "") + ""\""macaddress_eth0\"": \""08:00:27:D2:59:B2\"","") + ""\""manufacturer\"": \""innotek GmbH\"","") + ""\""memoryfree\"": 2453667,"") + ""\""memorysize\"": 3051356, "") + ""\""memorytotal\"": 3051356,"") + ""\""netmask\"": \""255.255.255.0\""}"");
    org.codehaus.jackson.map.ObjectMapper mapper = new org.codehaus.jackson.map.ObjectMapper();
    mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    org.apache.ambari.server.agent.HostInfo info = mapper.readValue(hostinfo, org.apache.ambari.server.agent.HostInfo.class);
    junit.framework.Assert.assertEquals(info.getMemoryTotal(), 3051356L);
    junit.framework.Assert.assertEquals(info.getKernel(), ""Linux"");
    junit.framework.Assert.assertEquals(info.getFQDN(), ""dev.test.com"");
    junit.framework.Assert.assertEquals(info.getAgentUserId(), ""root"");
    junit.framework.Assert.assertEquals(info.getMemorySize(), 3051356L);
    junit.framework.Assert.assertEquals(info.getArchitecture(), ""x86_64"");
}","testDeserializeHostInfo()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/AgentHostInfoTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
8f6091221699692bcc27420c0369968ff838ab8c"
"hostIsRegistered","TRUE","4","assertTrue
assertEquals
assertSame","{
    java.lang.String sessionId = ""session ID"";
    java.lang.Long hostId = 1L;
    org.apache.ambari.server.state.Host host = org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.state.Host.class);
    EasyMock.expect(host.getHostId()).andReturn(hostId).anyTimes();
    EasyMock.replay(host);
    underTest.register(sessionId, host);
    org.junit.Assert.assertTrue(underTest.isRegistered(sessionId));
    org.junit.Assert.assertEquals(sessionId, underTest.getSessionId(hostId));
    org.junit.Assert.assertSame(host, underTest.getHost(sessionId));
}","hostIsRegistered()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/AgentSessionManagerTest.java","6ecac18cb5668ec3b74fe69751dc54d65f33f698
f0def7cec51bbfc9ad6ded071e1b481b49b6fee2"
"exceptionThrownForUnknownHost","FALSE","0","None","{
    java.lang.Long notRegisteredHostId = 2L;
    underTest.getSessionId(notRegisteredHostId);
}","exceptionThrownForUnknownHost()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/AgentSessionManagerTest.java","6ecac18cb5668ec3b74fe69751dc54d65f33f698
f0def7cec51bbfc9ad6ded071e1b481b49b6fee2"
"exceptionThrownForUnknownSessionId","FALSE","0","None","{
    underTest.getHost(""unknown session ID"");
}","exceptionThrownForUnknownSessionId()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/AgentSessionManagerTest.java","6ecac18cb5668ec3b74fe69751dc54d65f33f698
f0def7cec51bbfc9ad6ded071e1b481b49b6fee2"
"registerRemovesOldSessionId","TRUE","4","assertFalse
assertEquals
assertSame","{
    java.lang.String oldSessionId = ""old session ID"";
    java.lang.String newSessionId = ""new session ID"";
    java.lang.Long hostId = 1L;
    org.apache.ambari.server.state.Host host = org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.state.Host.class);
    EasyMock.expect(host.getHostId()).andReturn(hostId).anyTimes();
    EasyMock.replay(host);
    underTest.register(oldSessionId, host);
    underTest.register(newSessionId, host);
    org.junit.Assert.assertFalse(underTest.isRegistered(oldSessionId));
    org.junit.Assert.assertEquals(newSessionId, underTest.getSessionId(hostId));
    org.junit.Assert.assertSame(host, underTest.getHost(newSessionId));
}","registerRemovesOldSessionId()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/AgentSessionManagerTest.java","6ecac18cb5668ec3b74fe69751dc54d65f33f698
f0def7cec51bbfc9ad6ded071e1b481b49b6fee2"
"unregisterRemovesSessionId","TRUE","2","assertFalse","{
    java.lang.String sessionId = ""session ID"";
    java.lang.Long hostId = 1L;
    org.apache.ambari.server.state.Host host = org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.state.Host.class);
    EasyMock.expect(host.getHostId()).andReturn(hostId).anyTimes();
    EasyMock.replay(host);
    underTest.register(sessionId, host);
    underTest.unregisterByHost(hostId);
    org.junit.Assert.assertFalse(underTest.isRegistered(sessionId));
    underTest.getSessionId(hostId);
}","unregisterRemovesSessionId()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/AgentSessionManagerTest.java","6ecac18cb5668ec3b74fe69751dc54d65f33f698
f0def7cec51bbfc9ad6ded071e1b481b49b6fee2"
"testHeartbeatWithConfigs","TRUE","4","assertNotNull
assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost1 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost2 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.INSTALLED);
    serviceComponentHost2.setState(org.apache.ambari.server.state.State.INSTALLED);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setResponseId(0);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr.setTaskId(1);
    cr.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    cr.setStatus(""COMPLETED"");
    cr.setStdErr("""");
    cr.setStdOut("""");
    cr.setExitCode(215);
    cr.setRoleCommand(""START"");
    reports.add(cr);
    hb.setReports(reports);
    org.apache.ambari.server.orm.entities.HostEntity host1 = hostDAO.findByName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.junit.Assert.assertNotNull(host1);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
        }
    });
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertNotNull(serviceComponentHost1.getActualConfigs());
    org.junit.Assert.assertEquals(serviceComponentHost1.getActualConfigs().size(), 1);
}","testHeartbeatWithConfigs()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testRestartRequiredAfterInstallClient","TRUE","4","assertNotNull
assertFalse
assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    serviceComponentHost.setState(org.apache.ambari.server.state.State.INSTALLED);
    serviceComponentHost.setRestartRequired(true);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setResponseId(0);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr.setRoleCommand(""INSTALL"");
    cr.setCustomCommand(""EXECUTION_COMMAND"");
    cr.setTaskId(1);
    cr.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT);
    cr.setStatus(""COMPLETED"");
    cr.setStdErr("""");
    cr.setStdOut("""");
    cr.setExitCode(215);
    reports.add(cr);
    hb.setReports(reports);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
            add(command);
        }
    });
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertNotNull(serviceComponentHost.getActualConfigs());
    org.junit.Assert.assertFalse(serviceComponentHost.isRestartRequired());
    org.junit.Assert.assertEquals(serviceComponentHost.getActualConfigs().size(), 1);
}","testRestartRequiredAfterInstallClient()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testHeartbeatCustomCommandWithConfigs","TRUE","5","assertNotNull
assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost1 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost2 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.INSTALLED);
    serviceComponentHost2.setState(org.apache.ambari.server.state.State.INSTALLED);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setResponseId(0);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr.setRoleCommand(""CUSTOM_COMMAND"");
    cr.setCustomCommand(""RESTART"");
    cr.setTaskId(1);
    cr.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    cr.setStatus(""COMPLETED"");
    cr.setStdErr("""");
    cr.setStdOut("""");
    cr.setExitCode(215);
    org.apache.ambari.server.agent.CommandReport crn = new org.apache.ambari.server.agent.CommandReport();
    crn.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    crn.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    crn.setRoleCommand(""CUSTOM_COMMAND"");
    crn.setCustomCommand(""START"");
    crn.setTaskId(1);
    crn.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    crn.setStatus(""COMPLETED"");
    crn.setStdErr("""");
    crn.setStdOut("""");
    crn.setExitCode(215);
    reports.add(cr);
    reports.add(crn);
    hb.setReports(reports);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
            add(command);
        }
    });
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertNotNull(serviceComponentHost1.getActualConfigs());
    org.junit.Assert.assertEquals(serviceComponentHost1.getActualConfigs().size(), 1);
    org.junit.Assert.assertNotNull(serviceComponentHost2.getActualConfigs());
    org.junit.Assert.assertEquals(serviceComponentHost2.getActualConfigs().size(), 1);
}","testHeartbeatCustomCommandWithConfigs()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testHeartbeatCustomStartStop","TRUE","6","assertTrue
assertEquals
assertFalse","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost1 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost2 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.INSTALLED);
    serviceComponentHost2.setState(org.apache.ambari.server.state.State.STARTED);
    serviceComponentHost1.setRestartRequired(true);
    serviceComponentHost2.setRestartRequired(true);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setResponseId(0);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr.setRoleCommand(""CUSTOM_COMMAND"");
    cr.setCustomCommand(""START"");
    cr.setTaskId(1);
    cr.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    cr.setStatus(""COMPLETED"");
    cr.setStdErr("""");
    cr.setStdOut("""");
    cr.setExitCode(215);
    org.apache.ambari.server.agent.CommandReport crn = new org.apache.ambari.server.agent.CommandReport();
    crn.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    crn.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    crn.setRoleCommand(""CUSTOM_COMMAND"");
    crn.setCustomCommand(""STOP"");
    crn.setTaskId(1);
    crn.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    crn.setStatus(""COMPLETED"");
    crn.setStdErr("""");
    crn.setStdOut("""");
    crn.setExitCode(215);
    reports.add(cr);
    reports.add(crn);
    hb.setReports(reports);
    org.junit.Assert.assertTrue(serviceComponentHost1.isRestartRequired());
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
            add(command);
        }
    });
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    heartbeatProcessor.processHeartbeat(hb);
    org.apache.ambari.server.state.State componentState1 = serviceComponentHost1.getState();
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.State.STARTED, componentState1);
    org.junit.Assert.assertFalse(serviceComponentHost1.isRestartRequired());
    org.apache.ambari.server.state.State componentState2 = serviceComponentHost2.getState();
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.State.INSTALLED, componentState2);
    org.junit.Assert.assertTrue(serviceComponentHost2.isRestartRequired());
}","testHeartbeatCustomStartStop()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testStatusHeartbeat","TRUE","4","assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost1 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost2 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost3 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.INSTALLED);
    serviceComponentHost2.setState(org.apache.ambari.server.state.State.INSTALLED);
    serviceComponentHost3.setState(org.apache.ambari.server.state.State.STARTING);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setReports(new java.util.ArrayList<>());
    java.util.ArrayList<org.apache.ambari.server.agent.ComponentStatus> componentStatuses = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.ComponentStatus componentStatus1 = new org.apache.ambari.server.agent.ComponentStatus();
    componentStatus1.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    componentStatus1.setMessage(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus);
    componentStatus1.setStatus(org.apache.ambari.server.state.State.STARTED.name());
    componentStatus1.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    componentStatuses.add(componentStatus1);
    org.apache.ambari.server.agent.ComponentStatus componentStatus2 = new org.apache.ambari.server.agent.ComponentStatus();
    componentStatus2.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    componentStatus2.setMessage(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus);
    componentStatus2.setStatus(org.apache.ambari.server.state.State.STARTED.name());
    componentStatus2.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE);
    componentStatuses.add(componentStatus2);
    hb.setComponentStatus(componentStatuses);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
            add(command);
        }
    });
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    heartbeatProcessor.processHeartbeat(hb);
    org.apache.ambari.server.state.State componentState1 = serviceComponentHost1.getState();
    org.apache.ambari.server.state.State componentState2 = serviceComponentHost2.getState();
    org.apache.ambari.server.state.State componentState3 = serviceComponentHost3.getState();
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.State.STARTED, componentState1);
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.State.INSTALLED, componentState2);
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.State.STARTING, componentState3);
}","testStatusHeartbeat()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testCommandReport","TRUE","6","assertEquals","{
    injector.injectMembers(this);
    clusters.addHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.StackId dummyStackId = new org.apache.ambari.server.state.StackId(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyStackId);
    clusters.addCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster, dummyStackId);
    org.apache.ambari.server.actionmanager.ActionDBAccessor db = injector.getInstance(org.apache.ambari.server.actionmanager.ActionDBAccessorImpl.class);
    org.apache.ambari.server.actionmanager.ActionManager am = injector.getInstance(org.apache.ambari.server.actionmanager.ActionManager.class);
    heartbeatTestHelper.populateActionDB(db, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, requestId, stageId);
    org.apache.ambari.server.actionmanager.Stage stage = db.getAllStages(requestId).get(0);
    org.junit.Assert.assertEquals(stageId, stage.getStageId());
    stage.setHostRoleStatus(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.agent.DummyHeartbeatConstants.HBASE_MASTER, org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED);
    db.hostRoleScheduled(stage, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.agent.DummyHeartbeatConstants.HBASE_MASTER);
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr.setTaskId(1);
    cr.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.HBASE_MASTER);
    cr.setStatus(""COMPLETED"");
    cr.setStdErr("""");
    cr.setStdOut("""");
    cr.setExitCode(215);
    reports.add(cr);
    am.processTaskResponse(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, reports, org.apache.ambari.server.utils.CommandUtils.convertToTaskIdCommandMap(stage.getOrderedHostRoleCommands()));
    org.junit.Assert.assertEquals(215, am.getAction(requestId, stageId).getExitCode(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.agent.DummyHeartbeatConstants.HBASE_MASTER));
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED, am.getAction(requestId, stageId).getHostRoleStatus(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.agent.DummyHeartbeatConstants.HBASE_MASTER));
    org.apache.ambari.server.actionmanager.Stage s = db.getAllStages(requestId).get(0);
    org.junit.Assert.assertEquals(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED, s.getHostRoleStatus(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.agent.DummyHeartbeatConstants.HBASE_MASTER));
    org.junit.Assert.assertEquals(215, s.getExitCode(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.agent.DummyHeartbeatConstants.HBASE_MASTER));
}","testCommandReport()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testCommandReportOnHeartbeatUpdatedState","TRUE","9","assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost1 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.INSTALLED);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr.setTaskId(1);
    cr.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    cr.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS.toString());
    cr.setStdErr(""none"");
    cr.setStdOut(""dummy output"");
    cr.setExitCode(777);
    cr.setRoleCommand(""START"");
    reports.add(cr);
    hb.setReports(reports);
    hb.setComponentStatus(new java.util.ArrayList<>());
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
        }
    }).anyTimes();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertEquals(""Host state should  be "" + org.apache.ambari.server.state.State.INSTALLED, org.apache.ambari.server.state.State.INSTALLED, serviceComponentHost1.getState());
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(1);
    cr.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED.toString());
    cr.setExitCode(0);
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertEquals(""Host state should be "" + org.apache.ambari.server.state.State.STARTED, org.apache.ambari.server.state.State.STARTED, serviceComponentHost1.getState());
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(2);
    cr.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS.toString());
    cr.setRoleCommand(""STOP"");
    cr.setExitCode(777);
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertEquals(""Host state should be "" + org.apache.ambari.server.state.State.STARTED, org.apache.ambari.server.state.State.STARTED, serviceComponentHost1.getState());
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(3);
    cr.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED.toString());
    cr.setExitCode(0);
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertEquals(""Host state should be "" + org.apache.ambari.server.state.State.INSTALLED, org.apache.ambari.server.state.State.INSTALLED, serviceComponentHost1.getState());
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.STARTING);
    cr.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS.toString());
    cr.setExitCode(777);
    cr.setRoleCommand(""START"");
    hb.setResponseId(4);
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertEquals(""Host state should be "" + org.apache.ambari.server.state.State.STARTING, org.apache.ambari.server.state.State.STARTING, serviceComponentHost1.getState());
    cr.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED.toString());
    cr.setExitCode(0);
    hb.setResponseId(5);
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertEquals(""Host state should be "" + org.apache.ambari.server.state.State.STARTED, org.apache.ambari.server.state.State.STARTED, serviceComponentHost1.getState());
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.STOPPING);
    cr.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS.toString());
    cr.setExitCode(777);
    cr.setRoleCommand(""STOP"");
    hb.setResponseId(6);
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertEquals(""Host state should be "" + org.apache.ambari.server.state.State.STOPPING, org.apache.ambari.server.state.State.STOPPING, serviceComponentHost1.getState());
    cr.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED.toString());
    cr.setExitCode(0);
    hb.setResponseId(7);
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertEquals(""Host state should be "" + org.apache.ambari.server.state.State.INSTALLED, org.apache.ambari.server.state.State.INSTALLED, serviceComponentHost1.getState());
}","testCommandReportOnHeartbeatUpdatedState()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testUpgradeSpecificHandling","TRUE","6","assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost1 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.UPGRADING);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr.setTaskId(1);
    cr.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    cr.setRoleCommand(""INSTALL"");
    cr.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS.toString());
    cr.setStdErr(""none"");
    cr.setStdOut(""dummy output"");
    cr.setExitCode(777);
    reports.add(cr);
    hb.setReports(reports);
    hb.setComponentStatus(new java.util.ArrayList<>());
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
        }
    }).anyTimes();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertEquals(""Host state should  be "" + org.apache.ambari.server.state.State.UPGRADING, org.apache.ambari.server.state.State.UPGRADING, serviceComponentHost1.getState());
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(1);
    cr.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED.toString());
    cr.setExitCode(0);
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertEquals(""Host state should be "" + org.apache.ambari.server.state.State.INSTALLED, org.apache.ambari.server.state.State.INSTALLED, serviceComponentHost1.getState());
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.UPGRADING);
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(2);
    cr.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED.toString());
    cr.setExitCode(3);
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertEquals(""Host state should be "" + org.apache.ambari.server.state.State.UPGRADING, org.apache.ambari.server.state.State.UPGRADING, serviceComponentHost1.getState());
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.UPGRADING);
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(3);
    cr.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.PENDING.toString());
    cr.setExitCode(55);
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertEquals(""Host state should be "" + org.apache.ambari.server.state.State.UPGRADING, org.apache.ambari.server.state.State.UPGRADING, serviceComponentHost1.getState());
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.UPGRADING);
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(4);
    cr.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.QUEUED.toString());
    cr.setExitCode(55);
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertEquals(""Host state should be "" + org.apache.ambari.server.state.State.UPGRADING, org.apache.ambari.server.state.State.UPGRADING, serviceComponentHost1.getState());
}","testUpgradeSpecificHandling()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testCommandStatusProcesses","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1).setState(org.apache.ambari.server.state.State.STARTED);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setReports(new java.util.ArrayList<>());
    java.util.List<java.util.Map<java.lang.String, java.lang.String>> procs = new java.util.ArrayList<>();
    java.util.Map<java.lang.String, java.lang.String> proc1info = new java.util.HashMap<>();
    proc1info.put(""name"", ""a"");
    proc1info.put(""status"", ""RUNNING"");
    procs.add(proc1info);
    java.util.Map<java.lang.String, java.lang.String> proc2info = new java.util.HashMap<>();
    proc2info.put(""name"", ""b"");
    proc2info.put(""status"", ""NOT_RUNNING"");
    procs.add(proc2info);
    java.util.Map<java.lang.String, java.lang.Object> extra = new java.util.HashMap<>();
    extra.put(""processes"", procs);
    java.util.ArrayList<org.apache.ambari.server.agent.ComponentStatus> componentStatuses = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.ComponentStatus componentStatus1 = new org.apache.ambari.server.agent.ComponentStatus();
    componentStatus1.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    componentStatus1.setMessage(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus);
    componentStatus1.setStatus(org.apache.ambari.server.state.State.STARTED.name());
    componentStatus1.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    componentStatus1.setExtra(extra);
    componentStatuses.add(componentStatus1);
    hb.setComponentStatus(componentStatuses);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
        }
    }).anyTimes();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    heartbeatProcessor.processHeartbeat(hb);
    org.apache.ambari.server.state.ServiceComponentHost sch = hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.junit.Assert.assertEquals(java.lang.Integer.valueOf(2), java.lang.Integer.valueOf(sch.getProcesses().size()));
    hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(1);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setReports(new java.util.ArrayList<>());
    componentStatus1 = new org.apache.ambari.server.agent.ComponentStatus();
    componentStatus1.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    componentStatus1.setMessage(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus);
    componentStatus1.setStatus(org.apache.ambari.server.state.State.STARTED.name());
    componentStatus1.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hb.setComponentStatus(java.util.Collections.singletonList(componentStatus1));
    heartbeatProcessor.processHeartbeat(hb);
}","testCommandStatusProcesses()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testComponentUpgradeFailReport","TRUE","4","assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost1 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost2 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.StackId stack130 = new org.apache.ambari.server.state.StackId(""HDP-1.3.0"");
    org.apache.ambari.server.state.StackId stack120 = new org.apache.ambari.server.state.StackId(""HDP-1.2.0"");
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.UPGRADING);
    serviceComponentHost2.setState(org.apache.ambari.server.state.State.INSTALLING);
    org.apache.ambari.server.actionmanager.Stage s = stageFactory.createNew(requestId, ""/a/b"", ""cluster1"", 1L, ""action manager test"", ""commandParamsStage"", ""hostParamsStage"");
    s.setStageId(stageId);
    s.addHostRoleExecutionCommand(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.UPGRADE, new org.apache.ambari.server.state.svccomphost.ServiceComponentHostUpgradeEvent(org.apache.ambari.server.Role.DATANODE.toString(), org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, java.lang.System.currentTimeMillis(), ""HDP-1.3.0""), org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster, ""HDFS"", false, false);
    s.addHostRoleExecutionCommand(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.NAMENODE, org.apache.ambari.server.RoleCommand.INSTALL, new org.apache.ambari.server.state.svccomphost.ServiceComponentHostInstallEvent(org.apache.ambari.server.Role.NAMENODE.toString(), org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, java.lang.System.currentTimeMillis(), ""HDP-1.3.0""), org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster, ""HDFS"", false, false);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = new java.util.ArrayList<>();
    stages.add(s);
    org.apache.ambari.server.actionmanager.Request request = new org.apache.ambari.server.actionmanager.Request(stages, ""clusterHostInfo"", clusters);
    actionDBAccessor.persistActions(request);
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr.setTaskId(1);
    cr.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    cr.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS.toString());
    cr.setStdErr(""none"");
    cr.setStdOut(""dummy output"");
    actionDBAccessor.updateHostRoleState(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, requestId, stageId, org.apache.ambari.server.Role.DATANODE.name(), cr);
    cr.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    cr.setTaskId(2);
    actionDBAccessor.updateHostRoleState(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, requestId, stageId, org.apache.ambari.server.Role.NAMENODE.name(), cr);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    org.apache.ambari.server.agent.CommandReport cr1 = new org.apache.ambari.server.agent.CommandReport();
    cr1.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr1.setTaskId(1);
    cr1.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr1.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    cr1.setRoleCommand(""INSTALL"");
    cr1.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED.toString());
    cr1.setStdErr(""none"");
    cr1.setStdOut(""dummy output"");
    cr1.setExitCode(0);
    org.apache.ambari.server.agent.CommandReport cr2 = new org.apache.ambari.server.agent.CommandReport();
    cr2.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr2.setTaskId(2);
    cr2.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr2.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    cr2.setRoleCommand(""INSTALL"");
    cr2.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED.toString());
    cr2.setStdErr(""none"");
    cr2.setStdOut(""dummy output"");
    cr2.setExitCode(0);
    java.util.ArrayList<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    reports.add(cr1);
    reports.add(cr2);
    hb.setReports(reports);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
            add(command);
        }
    });
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertEquals(""State of SCH should change after fail report"", org.apache.ambari.server.state.State.UPGRADING, serviceComponentHost1.getState());
    org.junit.Assert.assertEquals(""State of SCH should change after fail report"", org.apache.ambari.server.state.State.INSTALL_FAILED, serviceComponentHost2.getState());
    org.junit.Assert.assertEquals(""Stack version of SCH should not change after fail report"", org.apache.ambari.server.state.State.INSTALL_FAILED, serviceComponentHost2.getState());
}","testComponentUpgradeFailReport()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testComponentUpgradeInProgressReport","TRUE","3","assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost1 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost2 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.StackId stack130 = new org.apache.ambari.server.state.StackId(""HDP-1.3.0"");
    org.apache.ambari.server.state.StackId stack120 = new org.apache.ambari.server.state.StackId(""HDP-1.2.0"");
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.UPGRADING);
    serviceComponentHost2.setState(org.apache.ambari.server.state.State.INSTALLING);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    org.apache.ambari.server.agent.CommandReport cr1 = new org.apache.ambari.server.agent.CommandReport();
    cr1.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr1.setTaskId(1);
    cr1.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr1.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    cr1.setRoleCommand(""INSTALL"");
    cr1.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS.toString());
    cr1.setStdErr(""none"");
    cr1.setStdOut(""dummy output"");
    cr1.setExitCode(777);
    org.apache.ambari.server.agent.CommandReport cr2 = new org.apache.ambari.server.agent.CommandReport();
    cr2.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr2.setTaskId(2);
    cr2.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr2.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    cr2.setRoleCommand(""INSTALL"");
    cr2.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS.toString());
    cr2.setStdErr(""none"");
    cr2.setStdOut(""dummy output"");
    cr2.setExitCode(777);
    java.util.ArrayList<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    reports.add(cr1);
    reports.add(cr2);
    hb.setReports(reports);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
            add(command);
        }
    });
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    handler.handleHeartBeat(hb);
    org.junit.Assert.assertEquals(""State of SCH not change while operation is in progress"", org.apache.ambari.server.state.State.UPGRADING, serviceComponentHost1.getState());
    org.junit.Assert.assertEquals(""State of SCH not change while operation is  in progress"", org.apache.ambari.server.state.State.INSTALLING, serviceComponentHost2.getState());
}","testComponentUpgradeInProgressReport()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testHeartBeatWithAlertAndInvalidCluster","FALSE","0","None","{
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<>());
    EasyMock.replay(am);
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Clusters fsm = clusters;
    org.apache.ambari.server.state.Host hostObject = clusters.getHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hostObject.setIPv4(""ipv4"");
    hostObject.setIPv6(""ipv6"");
    hostObject.setOsType(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOsType);
    org.apache.ambari.server.agent.HeartBeatHandler handler = new org.apache.ambari.server.agent.HeartBeatHandler(config, fsm, am, org.apache.ambari.server.security.encryption.Encryptor.NONE, injector);
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hi.setOS(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOs);
    hi.setOSRelease(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOSRelease);
    reg.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    reg.setHardwareProfile(hi);
    reg.setAgentVersion(metaInfo.getServerVersion());
    handler.handleRegistration(reg);
    hostObject.setState(org.apache.ambari.server.state.HostState.UNHEALTHY);
    org.apache.ambari.server.agent.ExecutionCommand execCmd = new org.apache.ambari.server.agent.ExecutionCommand();
    execCmd.setRequestAndStage(2, 34);
    execCmd.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    org.apache.ambari.server.agent.HostStatus hs = new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus);
    hb.setResponseId(0);
    hb.setNodeStatus(hs);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.Alert alert = new org.apache.ambari.server.state.Alert(""foo"", ""bar"", ""baz"", ""foobar"", ""foobarbaz"", org.apache.ambari.server.state.AlertState.OK);
    alert.setClusterId(-1L);
    java.util.List<org.apache.ambari.server.state.Alert> alerts = java.util.Collections.singletonList(alert);
    hb.setAlerts(alerts);
    handler.getHeartbeatProcessor().processHeartbeat(hb);
}","testHeartBeatWithAlertAndInvalidCluster()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testInstallPackagesWithVersion","TRUE","4","assertNotNull
assertNull","{
    org.apache.ambari.server.utils.EventBusSynchronizer.synchronizeAmbariEventPublisher(injector);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(java.util.Collections.singletonList(command)).anyTimes();
    EasyMock.replay(am);
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    com.google.gson.JsonObject json = new com.google.gson.JsonObject();
    json.addProperty(""actual_version"", ""2.2.1.0-2222"");
    json.addProperty(""package_installation_result"", ""SUCCESS"");
    json.addProperty(""installed_repository_version"", ""0.1-1234"");
    json.addProperty(""stack_id"", cluster.getDesiredStackVersion().getStackId());
    org.apache.ambari.server.agent.CommandReport cmdReport = new org.apache.ambari.server.agent.CommandReport();
    cmdReport.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cmdReport.setTaskId(1);
    cmdReport.setCustomCommand(""install_packages"");
    cmdReport.setStructuredOut(json.toString());
    cmdReport.setRoleCommand(org.apache.ambari.server.RoleCommand.ACTIONEXECUTE.name());
    cmdReport.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED.name());
    cmdReport.setRole(""install_packages"");
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    reports.add(cmdReport);
    hb.setReports(reports);
    hb.setTimestamp(0L);
    hb.setResponseId(0);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setComponentStatus(new java.util.ArrayList<>());
    org.apache.ambari.server.state.StackId stackId = new org.apache.ambari.server.state.StackId(""HDP"", ""0.1"");
    org.apache.ambari.server.orm.dao.RepositoryVersionDAO dao = injector.getInstance(org.apache.ambari.server.orm.dao.RepositoryVersionDAO.class);
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity entity = helper.getOrCreateRepositoryVersion(cluster);
    org.junit.Assert.assertNotNull(entity);
    heartbeatProcessor.processHeartbeat(hb);
    entity = dao.findByStackAndVersion(stackId, ""2.2.1.0-2222"");
    org.junit.Assert.assertNull(entity);
    entity = dao.findByStackAndVersion(stackId, ""0.1.1"");
    org.junit.Assert.assertNotNull(entity);
}","testInstallPackagesWithVersion()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testInstallPackagesWithId","TRUE","4","assertNotNull
assertNull","{
    org.apache.ambari.server.utils.EventBusSynchronizer.synchronizeAmbariEventPublisher(injector);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(java.util.Collections.singletonList(command)).anyTimes();
    EasyMock.replay(am);
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.orm.dao.RepositoryVersionDAO dao = injector.getInstance(org.apache.ambari.server.orm.dao.RepositoryVersionDAO.class);
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity entity = helper.getOrCreateRepositoryVersion(cluster);
    org.junit.Assert.assertNotNull(entity);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    com.google.gson.JsonObject json = new com.google.gson.JsonObject();
    json.addProperty(""actual_version"", ""2.2.1.0-2222"");
    json.addProperty(""package_installation_result"", ""SUCCESS"");
    json.addProperty(""repository_version_id"", entity.getId());
    org.apache.ambari.server.agent.CommandReport cmdReport = new org.apache.ambari.server.agent.CommandReport();
    cmdReport.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cmdReport.setTaskId(1);
    cmdReport.setCustomCommand(""install_packages"");
    cmdReport.setStructuredOut(json.toString());
    cmdReport.setRoleCommand(org.apache.ambari.server.RoleCommand.ACTIONEXECUTE.name());
    cmdReport.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED.name());
    cmdReport.setRole(""install_packages"");
    cmdReport.setClusterId(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyClusterId);
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    reports.add(cmdReport);
    hb.setReports(reports);
    hb.setTimestamp(0L);
    hb.setResponseId(0);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setComponentStatus(new java.util.ArrayList<>());
    org.apache.ambari.server.state.StackId stackId = new org.apache.ambari.server.state.StackId(""HDP"", ""0.1"");
    heartbeatProcessor.processHeartbeat(hb);
    entity = dao.findByStackAndVersion(stackId, ""2.2.1.0-2222"");
    org.junit.Assert.assertNotNull(entity);
    entity = dao.findByStackAndVersion(stackId, ""0.1.1"");
    org.junit.Assert.assertNull(entity);
}","testInstallPackagesWithId()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testComponentInProgressStatusSafeAfterStatusReport","TRUE","3","assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost1 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost2 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.STARTING);
    serviceComponentHost2.setState(org.apache.ambari.server.state.State.STOPPING);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setReports(new java.util.ArrayList<>());
    java.util.ArrayList<org.apache.ambari.server.agent.ComponentStatus> componentStatuses = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.ComponentStatus componentStatus1 = new org.apache.ambari.server.agent.ComponentStatus();
    componentStatus1.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    componentStatus1.setMessage(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus);
    componentStatus1.setStatus(org.apache.ambari.server.state.State.INSTALLED.name());
    componentStatus1.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    componentStatuses.add(componentStatus1);
    org.apache.ambari.server.agent.ComponentStatus componentStatus2 = new org.apache.ambari.server.agent.ComponentStatus();
    componentStatus2.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    componentStatus2.setMessage(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus);
    componentStatus2.setStatus(org.apache.ambari.server.state.State.INSTALLED.name());
    componentStatus2.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    componentStatuses.add(componentStatus2);
    hb.setComponentStatus(componentStatuses);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
            add(command);
        }
    });
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    heartbeatProcessor.processHeartbeat(hb);
    org.apache.ambari.server.state.State componentState1 = serviceComponentHost1.getState();
    org.apache.ambari.server.state.State componentState2 = serviceComponentHost2.getState();
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.State.STARTING, componentState1);
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.State.STOPPING, componentState2);
}","testComponentInProgressStatusSafeAfterStatusReport()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/HeartbeatProcessorTest.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
30b6f5b61400efda3bff9a64b06ba57938433df3
d04ce2e87442534bb27aff4ff0f5647b36945a72
ad1264127c78c44eb05de15ffdbf6875e934f9bc
ab8d58ba4464791b95b56be75fd44ce9c20349c6
f206e95711ab3d117cfc26587c9d09c52c86c16f
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
d53c9e2ee99c046ae5b37b531419549397f4aea1
d237c9ad36815756685b1384a43bbb90e3aa2117
ecc19031952bf37829f07752f0563acb0eab52df
ef799757a1c85431d659fd7dc2ad39666a0ce681
21a544891e7388c807ad8b88eb80afada9e31b19
0288d909475ee383396ad07844c3e9100a897f5a
cb5b1ea61722e8e79f647c369cc78b5b1fdc50f0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
236beac472b77b0f5b098ff15a7ce9d6332e52ae
083ac6dab5cf59c01da054eb656507c089a54620"
"testHeartbeat","TRUE","3","assertEquals","{
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<>());
    EasyMock.replay(am);
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE);
    java.util.Collection<org.apache.ambari.server.state.Host> hosts = cluster.getHosts();
    org.junit.Assert.assertEquals(hosts.size(), 1);
    org.apache.ambari.server.state.Host hostObject = hosts.iterator().next();
    hostObject.setIPv4(""ipv4"");
    hostObject.setIPv6(""ipv6"");
    hostObject.setOsType(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOsType);
    java.lang.String hostname = hostObject.getHostName();
    org.apache.ambari.server.agent.HeartBeatHandler handler = createHeartBeatHandler();
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(hostname);
    hi.setOS(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOs);
    hi.setOSRelease(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOSRelease);
    reg.setHostname(hostname);
    reg.setHardwareProfile(hi);
    reg.setAgentVersion(metaInfo.getServerVersion());
    handler.handleRegistration(reg);
    hostObject.setState(org.apache.ambari.server.state.HostState.UNHEALTHY);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setResponseId(0);
    org.apache.ambari.server.agent.HostStatus hs = new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus);
    java.util.List<org.apache.ambari.server.state.Alert> al = new java.util.ArrayList<>();
    al.add(new org.apache.ambari.server.state.Alert());
    hb.setNodeStatus(hs);
    hb.setHostname(hostname);
    handler.handleHeartBeat(hb);
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.HostState.HEALTHY, hostObject.getState());
}","testHeartbeat()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testStatusHeartbeatWithAnnotation","TRUE","3","assertFalse
assertTrue","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setReports(new java.util.ArrayList<>());
    java.util.ArrayList<org.apache.ambari.server.agent.ComponentStatus> componentStatuses = new java.util.ArrayList<>();
    hb.setComponentStatus(componentStatuses);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
        }
    }).anyTimes();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartBeatResponse resp = handler.handleHeartBeat(hb);
    junit.framework.Assert.assertFalse(resp.hasMappedComponents());
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost1 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.INIT);
    hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(1);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setReports(new java.util.ArrayList<>());
    hb.setComponentStatus(componentStatuses);
    resp = handler.handleHeartBeat(hb);
    junit.framework.Assert.assertTrue(resp.hasMappedComponents());
}","testStatusHeartbeatWithAnnotation()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testLiveStatusUpdateAfterStopFailed","TRUE","3","assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost1 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost2 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.STARTED);
    serviceComponentHost2.setState(org.apache.ambari.server.state.State.STARTED);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setReports(new java.util.ArrayList<>());
    java.util.ArrayList<org.apache.ambari.server.agent.ComponentStatus> componentStatuses = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.ComponentStatus componentStatus1 = new org.apache.ambari.server.agent.ComponentStatus();
    componentStatus1.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    componentStatus1.setMessage(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus);
    componentStatus1.setStatus(org.apache.ambari.server.state.State.STARTED.name());
    componentStatus1.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    componentStatuses.add(componentStatus1);
    org.apache.ambari.server.agent.ComponentStatus componentStatus2 = new org.apache.ambari.server.agent.ComponentStatus();
    componentStatus2.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    componentStatus2.setMessage(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus);
    componentStatus2.setStatus(org.apache.ambari.server.state.State.INSTALLED.name());
    componentStatus2.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    componentStatuses.add(componentStatus2);
    hb.setComponentStatus(componentStatuses);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
            add(command);
        }
    });
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    heartbeatProcessor.processHeartbeat(hb);
    org.apache.ambari.server.state.State componentState1 = serviceComponentHost1.getState();
    org.apache.ambari.server.state.State componentState2 = serviceComponentHost2.getState();
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.State.STARTED, componentState1);
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.State.INSTALLED, componentState2);
}","testLiveStatusUpdateAfterStopFailed()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testRegistration","TRUE","6","assertEquals
assertTrue","{
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = createHeartBeatHandler();
    clusters.addHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.Host hostObject = clusters.getHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hostObject.setIPv4(""ipv4"");
    hostObject.setIPv6(""ipv6"");
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hi.setOS(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOsType);
    reg.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    reg.setCurrentPingPort(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCurrentPingPort);
    reg.setHardwareProfile(hi);
    reg.setAgentVersion(metaInfo.getServerVersion());
    reg.setPrefix(org.apache.ambari.server.configuration.Configuration.PREFIX_DIR);
    handler.handleRegistration(reg);
    org.junit.Assert.assertEquals(hostObject.getState(), org.apache.ambari.server.state.HostState.WAITING_FOR_HOST_STATUS_UPDATES);
    org.junit.Assert.assertEquals(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOsType, hostObject.getOsType());
    org.junit.Assert.assertEquals(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCurrentPingPort, hostObject.getCurrentPingPort());
    org.junit.Assert.assertTrue(hostObject.getLastRegistrationTime() != 0);
    org.junit.Assert.assertEquals(hostObject.getLastHeartbeatTime(), hostObject.getLastRegistrationTime());
}","testRegistration()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testRegistrationRecoveryConfig","TRUE","3","assertEquals
assertNull","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).setRecoveryEnabled(true);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).setRecoveryEnabled(true);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = createHeartBeatHandler();
    handler.start();
    org.apache.ambari.server.state.Host hostObject = clusters.getHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hostObject.setIPv4(""ipv4"");
    hostObject.setIPv6(""ipv6"");
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hi.setOS(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOsType);
    reg.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    reg.setCurrentPingPort(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCurrentPingPort);
    reg.setHardwareProfile(hi);
    reg.setAgentVersion(metaInfo.getServerVersion());
    reg.setPrefix(org.apache.ambari.server.configuration.Configuration.PREFIX_DIR);
    org.apache.ambari.server.agent.RegistrationResponse rr = handler.handleRegistration(reg);
    org.apache.ambari.server.agent.RecoveryConfig rc = rr.getRecoveryConfig();
    org.junit.Assert.assertEquals(rc.getEnabledComponents(), ""DATANODE,NAMENODE"");
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    org.apache.ambari.server.agent.HeartBeatResponse hbr = handler.handleHeartBeat(hb);
    org.junit.Assert.assertNull(hbr.getRecoveryConfig());
    handler.stop();
}","testRegistrationRecoveryConfig()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testRegistrationRecoveryConfigMaintenanceMode","TRUE","2","assertEquals","{
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = createHeartBeatHandler();
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).setRecoveryEnabled(true);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).setRecoveryEnabled(true);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT).setRecoveryEnabled(true);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.Host hostObject = clusters.getHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hostObject.setIPv4(""ipv4"");
    hostObject.setIPv6(""ipv6"");
    org.apache.ambari.server.state.ServiceComponentHost schHdfsClient = hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    schHdfsClient.setMaintenanceState(org.apache.ambari.server.state.MaintenanceState.ON);
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hi.setOS(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOsType);
    reg.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    reg.setCurrentPingPort(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCurrentPingPort);
    reg.setHardwareProfile(hi);
    reg.setAgentVersion(metaInfo.getServerVersion());
    reg.setPrefix(org.apache.ambari.server.configuration.Configuration.PREFIX_DIR);
    org.apache.ambari.server.agent.RegistrationResponse rr = handler.handleRegistration(reg);
    org.apache.ambari.server.agent.RecoveryConfig rc = rr.getRecoveryConfig();
    org.junit.Assert.assertEquals(rc.getEnabledComponents(), ""DATANODE,NAMENODE"");
}","testRegistrationRecoveryConfigMaintenanceMode()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testRegistrationAgentConfig","TRUE","7","assertFalse
assertTrue","{
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = createHeartBeatHandler();
    clusters.addHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.Host hostObject = clusters.getHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hostObject.setIPv4(""ipv4"");
    hostObject.setIPv6(""ipv6"");
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hi.setOS(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOsType);
    reg.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    reg.setCurrentPingPort(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCurrentPingPort);
    reg.setHardwareProfile(hi);
    reg.setAgentVersion(metaInfo.getServerVersion());
    reg.setPrefix(org.apache.ambari.server.configuration.Configuration.PREFIX_DIR);
    org.apache.ambari.server.agent.RegistrationResponse rr = handler.handleRegistration(reg);
    java.util.Map<java.lang.String, java.lang.String> config = rr.getAgentConfig();
    org.junit.Assert.assertFalse(config.isEmpty());
    org.junit.Assert.assertTrue(config.containsKey(org.apache.ambari.server.configuration.Configuration.CHECK_REMOTE_MOUNTS.getKey()));
    org.junit.Assert.assertTrue(""false"".equals(config.get(org.apache.ambari.server.configuration.Configuration.CHECK_REMOTE_MOUNTS.getKey())));
    org.junit.Assert.assertTrue(config.containsKey(org.apache.ambari.server.configuration.Configuration.CHECK_MOUNTS_TIMEOUT.getKey()));
    org.junit.Assert.assertTrue(""0"".equals(config.get(org.apache.ambari.server.configuration.Configuration.CHECK_MOUNTS_TIMEOUT.getKey())));
    org.junit.Assert.assertTrue(""true"".equals(config.get(org.apache.ambari.server.configuration.Configuration.ENABLE_AUTO_AGENT_CACHE_UPDATE.getKey())));
}","testRegistrationAgentConfig()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testRegistrationWithBadVersion","TRUE","3","assertTrue","{
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = createHeartBeatHandler();
    clusters.addHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.Host hostObject = clusters.getHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hostObject.setIPv4(""ipv4"");
    hostObject.setIPv6(""ipv6"");
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hi.setOS(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOsType);
    reg.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    reg.setHardwareProfile(hi);
    reg.setAgentVersion("""");
    reg.setPrefix(org.apache.ambari.server.configuration.Configuration.PREFIX_DIR);
    try {
        handler.handleRegistration(reg);
        org.junit.Assert.fail(""Expected failure for non compatible agent version"");
    } catch (org.apache.ambari.server.AmbariException e) {
        org.apache.ambari.server.agent.TestHeartbeatHandler.log.debug(""Error:{}"", e.getMessage());
        junit.framework.Assert.assertTrue(e.getMessage().contains(""Cannot register host with non compatible agent version""));
    }
    reg.setAgentVersion(null);
    try {
        handler.handleRegistration(reg);
        org.junit.Assert.fail(""Expected failure for non compatible agent version"");
    } catch (org.apache.ambari.server.AmbariException e) {
        org.apache.ambari.server.agent.TestHeartbeatHandler.log.debug(""Error:{}"", e.getMessage());
        junit.framework.Assert.assertTrue(e.getMessage().contains(""Cannot register host with non compatible agent version""));
    }
}","testRegistrationWithBadVersion()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testRegistrationPublicHostname","TRUE","6","assertEquals
assertTrue","{
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = createHeartBeatHandler();
    clusters.addHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.Host hostObject = clusters.getHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hostObject.setIPv4(""ipv4"");
    hostObject.setIPv6(""ipv6"");
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hi.setOS(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOsType);
    reg.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    reg.setHardwareProfile(hi);
    reg.setPublicHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1 + ""-public"");
    reg.setAgentVersion(metaInfo.getServerVersion());
    handler.handleRegistration(reg);
    org.junit.Assert.assertEquals(hostObject.getState(), org.apache.ambari.server.state.HostState.WAITING_FOR_HOST_STATUS_UPDATES);
    org.junit.Assert.assertEquals(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOsType, hostObject.getOsType());
    org.junit.Assert.assertTrue(hostObject.getLastRegistrationTime() != 0);
    org.junit.Assert.assertEquals(hostObject.getLastHeartbeatTime(), hostObject.getLastRegistrationTime());
    org.apache.ambari.server.state.Host verifyHost = clusters.getHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.junit.Assert.assertEquals(verifyHost.getPublicHostName(), reg.getPublicHostname());
}","testRegistrationPublicHostname()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testInvalidOSRegistration","FALSE","0","None","{
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = createHeartBeatHandler();
    clusters.addHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.Host hostObject = clusters.getHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hostObject.setIPv4(""ipv4"");
    hostObject.setIPv6(""ipv6"");
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hi.setOS(""MegaOperatingSystem"");
    reg.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    reg.setHardwareProfile(hi);
    reg.setAgentVersion(metaInfo.getServerVersion());
    try {
        handler.handleRegistration(reg);
        org.junit.Assert.fail(""Expected failure for non matching os type"");
    } catch (org.apache.ambari.server.AmbariException e) {
    }
}","testInvalidOSRegistration()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testIncompatibleAgentRegistration","FALSE","0","None","{
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = createHeartBeatHandler();
    clusters.addHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.Host hostObject = clusters.getHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hostObject.setIPv4(""ipv4"");
    hostObject.setIPv6(""ipv6"");
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hi.setOS(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOsType);
    reg.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    reg.setHardwareProfile(hi);
    reg.setAgentVersion(""0.0.0"");
    try {
        handler.handleRegistration(reg);
        org.junit.Assert.fail(""Expected failure for non compatible agent version"");
    } catch (org.apache.ambari.server.AmbariException e) {
    }
}","testIncompatibleAgentRegistration()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testRegisterNewNode","TRUE","5","assertEquals","{
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.replay(am);
    org.apache.ambari.server.state.Clusters fsm = clusters;
    fsm.addHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.Host hostObject = clusters.getHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hostObject.setIPv4(""ipv4"");
    hostObject.setIPv6(""ipv6"");
    org.apache.ambari.server.agent.HeartBeatHandler handler = createHeartBeatHandler();
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hi.setOS(""redhat5"");
    reg.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    reg.setHardwareProfile(hi);
    reg.setAgentVersion(metaInfo.getServerVersion());
    reg.setPrefix(org.apache.ambari.server.configuration.Configuration.PREFIX_DIR);
    org.apache.ambari.server.agent.RegistrationResponse response = handler.handleRegistration(reg);
    org.junit.Assert.assertEquals(hostObject.getState(), org.apache.ambari.server.state.HostState.WAITING_FOR_HOST_STATUS_UPDATES);
    org.junit.Assert.assertEquals(""redhat5"", hostObject.getOsType());
    org.junit.Assert.assertEquals(0, response.getResponseId());
    org.junit.Assert.assertEquals(reg.getPrefix(), hostObject.getPrefix());
}","testRegisterNewNode()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testRequestId","TRUE","7","assertEquals
assertTrue","{
    org.apache.ambari.server.agent.HeartBeatHandler heartBeatHandler = injector.getInstance(org.apache.ambari.server.agent.HeartBeatHandler.class);
    org.apache.ambari.server.agent.Register register = new org.apache.ambari.server.agent.Register();
    register.setHostname(""newHost"");
    register.setTimestamp(new java.util.Date().getTime());
    register.setResponseId(123);
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hi.setOS(""redhat5"");
    register.setHardwareProfile(hi);
    register.setAgentVersion(metaInfo.getServerVersion());
    org.apache.ambari.server.agent.RegistrationResponse registrationResponse = heartBeatHandler.handleRegistration(register);
    org.junit.Assert.assertEquals(""ResponseId should start from zero"", 0L, registrationResponse.getResponseId());
    org.apache.ambari.server.agent.HeartBeat heartBeat = constructHeartBeat(""newHost"", registrationResponse.getResponseId(), org.apache.ambari.server.agent.HostStatus.Status.HEALTHY);
    org.apache.ambari.server.agent.HeartBeatResponse hbResponse = heartBeatHandler.handleHeartBeat(heartBeat);
    org.junit.Assert.assertEquals(""responseId was not incremented"", 1L, hbResponse.getResponseId());
    org.junit.Assert.assertTrue(""Not cached response returned"", hbResponse == heartBeatHandler.handleHeartBeat(heartBeat));
    heartBeat.setResponseId(1L);
    hbResponse = heartBeatHandler.handleHeartBeat(heartBeat);
    org.junit.Assert.assertEquals(""responseId was not incremented"", 2L, hbResponse.getResponseId());
    org.junit.Assert.assertTrue(""Agent is flagged for restart"", hbResponse.isRestartAgent() == null);
    org.apache.ambari.server.agent.TestHeartbeatHandler.log.debug(org.apache.ambari.server.utils.StageUtils.jaxbToString(hbResponse));
    heartBeat.setResponseId(20L);
    hbResponse = heartBeatHandler.handleHeartBeat(heartBeat);
    org.junit.Assert.assertTrue(""Agent is not flagged for restart"", hbResponse.isRestartAgent());
    org.apache.ambari.server.agent.TestHeartbeatHandler.log.debug(org.apache.ambari.server.utils.StageUtils.jaxbToString(hbResponse));
}","testRequestId()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testStateCommandsAtRegistration","TRUE","3","assertTrue","{
    java.util.List<org.apache.ambari.server.agent.StatusCommand> dummyCmds = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.StatusCommand statusCmd1 = new org.apache.ambari.server.agent.StatusCommand();
    statusCmd1.setClusterName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster);
    statusCmd1.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    dummyCmds.add(statusCmd1);
    org.apache.ambari.server.agent.HeartbeatMonitor hm = Mockito.mock(org.apache.ambari.server.agent.HeartbeatMonitor.class);
    Mockito.when(hm.generateStatusCommands(Matchers.anyString())).thenReturn(dummyCmds);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = createHeartBeatHandler();
    handler.setHeartbeatMonitor(hm);
    clusters.addHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.Host hostObject = clusters.getHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hostObject.setIPv4(""ipv4"");
    hostObject.setIPv6(""ipv6"");
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hi.setOS(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOsType);
    reg.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    reg.setHardwareProfile(hi);
    reg.setAgentVersion(metaInfo.getServerVersion());
    org.apache.ambari.server.agent.RegistrationResponse registrationResponse = handler.handleRegistration(reg);
    registrationResponse.getStatusCommands();
    org.junit.Assert.assertTrue(registrationResponse.getStatusCommands().size() == 1);
    org.junit.Assert.assertTrue(registrationResponse.getStatusCommands().get(0).equals(statusCmd1));
}","testStateCommandsAtRegistration()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testTaskInProgressHandling","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost1 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.INSTALLING);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr.setTaskId(1);
    cr.setClusterId(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyClusterId);
    cr.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    cr.setRoleCommand(""INSTALL"");
    cr.setStatus(""IN_PROGRESS"");
    cr.setStdErr(""none"");
    cr.setStdOut(""dummy output"");
    cr.setExitCode(777);
    reports.add(cr);
    hb.setReports(reports);
    hb.setComponentStatus(new java.util.ArrayList<>());
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, org.apache.ambari.server.RoleCommand.INSTALL);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
        }
    });
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    handler.handleHeartBeat(hb);
    handler.getHeartbeatProcessor().processHeartbeat(hb);
    org.apache.ambari.server.state.State componentState1 = serviceComponentHost1.getState();
    org.junit.Assert.assertEquals(""Host state should still be installing"", org.apache.ambari.server.state.State.INSTALLING, componentState1);
}","testTaskInProgressHandling()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testOPFailedEventForAbortedTask","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost1 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.INSTALLING);
    org.apache.ambari.server.actionmanager.Stage s = stageFactory.createNew(1, ""/a/b"", ""cluster1"", 1L, ""action manager test"", ""commandParamsStage"", ""hostParamsStage"");
    s.setStageId(1);
    s.addHostRoleExecutionCommand(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, org.apache.ambari.server.RoleCommand.INSTALL, new org.apache.ambari.server.state.svccomphost.ServiceComponentHostInstallEvent(org.apache.ambari.server.Role.DATANODE.toString(), org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, java.lang.System.currentTimeMillis(), ""HDP-1.3.0""), org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster, ""HDFS"", false, false);
    java.util.List<org.apache.ambari.server.actionmanager.Stage> stages = new java.util.ArrayList<>();
    stages.add(s);
    org.apache.ambari.server.actionmanager.Request request = new org.apache.ambari.server.actionmanager.Request(stages, ""clusterHostInfo"", clusters);
    actionDBAccessor.persistActions(request);
    actionDBAccessor.abortHostRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, 1, 1, org.apache.ambari.server.Role.DATANODE.name());
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    java.util.List<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.CommandReport cr = new org.apache.ambari.server.agent.CommandReport();
    cr.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(1, 1));
    cr.setTaskId(1);
    cr.setClusterId(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyClusterId);
    cr.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    cr.setRoleCommand(""INSTALL"");
    cr.setStatus(""FAILED"");
    cr.setStdErr(""none"");
    cr.setStdOut(""dummy output"");
    cr.setExitCode(777);
    reports.add(cr);
    hb.setReports(reports);
    hb.setComponentStatus(new java.util.ArrayList<>());
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
        }
    });
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    handler.handleHeartBeat(hb);
    handler.getHeartbeatProcessor().processHeartbeat(hb);
    org.apache.ambari.server.state.State componentState1 = serviceComponentHost1.getState();
    org.junit.Assert.assertEquals(""Host state should still be installing"", org.apache.ambari.server.state.State.INSTALLING, componentState1);
}","testOPFailedEventForAbortedTask()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testStatusHeartbeat","TRUE","2","assertTrue","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost1 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost2 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.ServiceComponentHost serviceComponentHost3 = clusters.getCluster(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster).getService(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS).getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    serviceComponentHost1.setState(org.apache.ambari.server.state.State.INSTALLED);
    serviceComponentHost2.setState(org.apache.ambari.server.state.State.STARTED);
    serviceComponentHost3.setState(org.apache.ambari.server.state.State.STARTED);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setReports(new java.util.ArrayList<>());
    hb.setAgentEnv(new org.apache.ambari.server.agent.AgentEnv());
    hb.setMounts(new java.util.ArrayList<>());
    java.util.ArrayList<org.apache.ambari.server.agent.ComponentStatus> componentStatuses = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.ComponentStatus componentStatus1 = createComponentStatus(new java.lang.Long(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyClusterId), org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus, org.apache.ambari.server.state.State.STARTED, org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE, ""{\""stackName\"":\""HDP\"",\""stackVersion\"":\""1.3.0\""}"");
    org.apache.ambari.server.agent.ComponentStatus componentStatus2 = createComponentStatus(new java.lang.Long(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyClusterId), org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus, org.apache.ambari.server.state.State.STARTED, org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE, """");
    org.apache.ambari.server.agent.ComponentStatus componentStatus3 = createComponentStatus(new java.lang.Long(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyClusterId), org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus, org.apache.ambari.server.state.State.INSTALLED, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS_CLIENT, ""{\""stackName\"":\""HDP\"",\""stackVersion\"":\""1.3.0\""}"");
    componentStatuses.add(componentStatus1);
    componentStatuses.add(componentStatus2);
    componentStatuses.add(componentStatus3);
    hb.setComponentStatus(componentStatuses);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<>());
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    handler.handleHeartBeat(hb);
    heartbeatProcessor.processHeartbeat(hb);
    org.junit.Assert.assertTrue(hb.getAgentEnv().getHostHealth().getServerTimeStampAtReporting() >= hb.getTimestamp());
}","testStatusHeartbeat()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testRecoveryStatusReports","TRUE","7","assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Host hostObject = clusters.getHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1).setState(org.apache.ambari.server.state.State.STARTED);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1).setState(org.apache.ambari.server.state.State.STARTED);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
            add(command);
        }
    }).anyTimes();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = createHeartBeatHandler();
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hi.setOS(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOs);
    hi.setOSRelease(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOSRelease);
    reg.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    reg.setHardwareProfile(hi);
    reg.setAgentVersion(metaInfo.getServerVersion());
    handler.handleRegistration(reg);
    hostObject.setState(org.apache.ambari.server.state.HostState.UNHEALTHY);
    org.apache.ambari.server.agent.HeartBeat hb1 = new org.apache.ambari.server.agent.HeartBeat();
    hb1.setResponseId(0);
    hb1.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb1.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.agent.RecoveryReport rr = new org.apache.ambari.server.agent.RecoveryReport();
    rr.setSummary(""RECOVERABLE"");
    java.util.List<org.apache.ambari.server.agent.ComponentRecoveryReport> compRecReports = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.ComponentRecoveryReport compRecReport = new org.apache.ambari.server.agent.ComponentRecoveryReport();
    compRecReport.setLimitReached(java.lang.Boolean.FALSE);
    compRecReport.setName(""DATANODE"");
    compRecReport.setNumAttempts(2);
    compRecReports.add(compRecReport);
    rr.setComponentReports(compRecReports);
    hb1.setRecoveryReport(rr);
    handler.handleHeartBeat(hb1);
    org.junit.Assert.assertEquals(""RECOVERABLE"", hostObject.getRecoveryReport().getSummary());
    org.junit.Assert.assertEquals(1, hostObject.getRecoveryReport().getComponentReports().size());
    org.junit.Assert.assertEquals(2, hostObject.getRecoveryReport().getComponentReports().get(0).getNumAttempts());
    org.apache.ambari.server.agent.HeartBeat hb2 = new org.apache.ambari.server.agent.HeartBeat();
    hb2.setResponseId(1);
    hb2.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb2.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    rr = new org.apache.ambari.server.agent.RecoveryReport();
    rr.setSummary(""UNRECOVERABLE"");
    compRecReports = new java.util.ArrayList<>();
    compRecReport = new org.apache.ambari.server.agent.ComponentRecoveryReport();
    compRecReport.setLimitReached(java.lang.Boolean.TRUE);
    compRecReport.setName(""DATANODE"");
    compRecReport.setNumAttempts(5);
    compRecReports.add(compRecReport);
    rr.setComponentReports(compRecReports);
    hb2.setRecoveryReport(rr);
    handler.handleHeartBeat(hb2);
    org.junit.Assert.assertEquals(""UNRECOVERABLE"", hostObject.getRecoveryReport().getSummary());
    org.junit.Assert.assertEquals(1, hostObject.getRecoveryReport().getComponentReports().size());
    org.junit.Assert.assertEquals(5, hostObject.getRecoveryReport().getComponentReports().get(0).getNumAttempts());
}","testRecoveryStatusReports()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testProcessStatusReports","TRUE","9","assertEquals","{
    org.apache.ambari.server.state.Clusters fsm = clusters;
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Host hostObject = clusters.getHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1).setState(org.apache.ambari.server.state.State.STARTED);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1).setState(org.apache.ambari.server.state.State.STARTED);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
            add(command);
        }
    }).anyTimes();
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = createHeartBeatHandler();
    org.apache.ambari.server.agent.HeartbeatProcessor heartbeatProcessor = handler.getHeartbeatProcessor();
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setHostName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hi.setOS(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOs);
    hi.setOSRelease(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyOSRelease);
    reg.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    reg.setHardwareProfile(hi);
    reg.setAgentVersion(metaInfo.getServerVersion());
    handler.handleRegistration(reg);
    hostObject.setState(org.apache.ambari.server.state.HostState.UNHEALTHY);
    org.apache.ambari.server.agent.HeartBeat hb1 = new org.apache.ambari.server.agent.HeartBeat();
    hb1.setResponseId(0);
    hb1.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb1.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    java.util.List<org.apache.ambari.server.agent.ComponentStatus> componentStatus = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.ComponentStatus dataNodeStatus = new org.apache.ambari.server.agent.ComponentStatus();
    dataNodeStatus.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    dataNodeStatus.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    dataNodeStatus.setStatus(""STARTED"");
    componentStatus.add(dataNodeStatus);
    org.apache.ambari.server.agent.ComponentStatus nameNodeStatus = new org.apache.ambari.server.agent.ComponentStatus();
    nameNodeStatus.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    nameNodeStatus.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    nameNodeStatus.setStatus(""STARTED"");
    componentStatus.add(nameNodeStatus);
    hb1.setComponentStatus(componentStatus);
    handler.handleHeartBeat(hb1);
    heartbeatProcessor.processHeartbeat(hb1);
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.HostHealthStatus.HealthStatus.HEALTHY.name(), hostObject.getStatus());
    org.apache.ambari.server.agent.HeartBeat hb2 = new org.apache.ambari.server.agent.HeartBeat();
    hb2.setResponseId(1);
    hb2.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb2.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    componentStatus = new java.util.ArrayList<>();
    dataNodeStatus = new org.apache.ambari.server.agent.ComponentStatus();
    dataNodeStatus.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    dataNodeStatus.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    dataNodeStatus.setStatus(""INSTALLED"");
    componentStatus.add(dataNodeStatus);
    nameNodeStatus = new org.apache.ambari.server.agent.ComponentStatus();
    nameNodeStatus.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    nameNodeStatus.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    nameNodeStatus.setStatus(""STARTED"");
    componentStatus.add(nameNodeStatus);
    hb2.setComponentStatus(componentStatus);
    handler.handleHeartBeat(hb2);
    heartbeatProcessor.processHeartbeat(hb2);
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.HostHealthStatus.HealthStatus.ALERT.name(), hostObject.getStatus());
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1).setMaintenanceState(org.apache.ambari.server.state.MaintenanceState.ON);
    org.apache.ambari.server.agent.HeartBeat hb2a = new org.apache.ambari.server.agent.HeartBeat();
    hb2a.setResponseId(2);
    hb2a.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb2a.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    componentStatus = new java.util.ArrayList<>();
    dataNodeStatus = new org.apache.ambari.server.agent.ComponentStatus();
    dataNodeStatus.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    dataNodeStatus.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    dataNodeStatus.setStatus(""INSTALLED"");
    componentStatus.add(dataNodeStatus);
    nameNodeStatus = new org.apache.ambari.server.agent.ComponentStatus();
    nameNodeStatus.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    nameNodeStatus.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    nameNodeStatus.setStatus(""STARTED"");
    componentStatus.add(nameNodeStatus);
    hb2a.setComponentStatus(componentStatus);
    handler.handleHeartBeat(hb2a);
    heartbeatProcessor.processHeartbeat(hb2a);
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.HostHealthStatus.HealthStatus.HEALTHY.name(), hostObject.getStatus());
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1).setMaintenanceState(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.apache.ambari.server.agent.HeartBeat hb3 = new org.apache.ambari.server.agent.HeartBeat();
    hb3.setResponseId(3);
    hb3.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb3.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    componentStatus = new java.util.ArrayList<>();
    dataNodeStatus = new org.apache.ambari.server.agent.ComponentStatus();
    dataNodeStatus.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    dataNodeStatus.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    dataNodeStatus.setStatus(""INSTALLED"");
    componentStatus.add(dataNodeStatus);
    nameNodeStatus = new org.apache.ambari.server.agent.ComponentStatus();
    nameNodeStatus.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    nameNodeStatus.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    nameNodeStatus.setStatus(""INSTALLED"");
    componentStatus.add(nameNodeStatus);
    hb3.setComponentStatus(componentStatus);
    handler.handleHeartBeat(hb3);
    heartbeatProcessor.processHeartbeat(hb3);
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.HostHealthStatus.HealthStatus.UNHEALTHY.name(), hostObject.getStatus());
    hb1.setResponseId(4);
    handler.handleHeartBeat(hb1);
    heartbeatProcessor.processHeartbeat(hb1);
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.HostHealthStatus.HealthStatus.HEALTHY.name(), hostObject.getStatus());
    EasyMock.reset(am);
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
        }
    }).anyTimes();
    EasyMock.replay(am);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1).setState(org.apache.ambari.server.state.State.INSTALLED);
    org.apache.ambari.server.agent.HeartBeat hb4 = new org.apache.ambari.server.agent.HeartBeat();
    hb4.setResponseId(5);
    hb4.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb4.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    componentStatus = new java.util.ArrayList<>();
    dataNodeStatus = new org.apache.ambari.server.agent.ComponentStatus();
    dataNodeStatus.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    dataNodeStatus.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    dataNodeStatus.setStatus(""STARTED"");
    componentStatus.add(dataNodeStatus);
    hb4.setComponentStatus(componentStatus);
    handler.handleHeartBeat(hb4);
    heartbeatProcessor.processHeartbeat(hb4);
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.HostHealthStatus.HealthStatus.UNHEALTHY.name(), hostObject.getStatus());
    hb1.setResponseId(6);
    handler.handleHeartBeat(hb1);
    heartbeatProcessor.processHeartbeat(hb1);
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.HostHealthStatus.HealthStatus.HEALTHY.name(), hostObject.getStatus());
    org.apache.ambari.server.agent.HeartBeat hb5 = new org.apache.ambari.server.agent.HeartBeat();
    hb5.setResponseId(7);
    hb5.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb5.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    org.apache.ambari.server.agent.CommandReport cr1 = new org.apache.ambari.server.agent.CommandReport();
    cr1.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr1.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr1.setTaskId(1);
    cr1.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    cr1.setStatus(""COMPLETED"");
    cr1.setStdErr("""");
    cr1.setStdOut("""");
    cr1.setExitCode(215);
    cr1.setRoleCommand(""STOP"");
    java.util.ArrayList<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    reports.add(cr1);
    hb5.setReports(reports);
    handler.handleHeartBeat(hb5);
    heartbeatProcessor.processHeartbeat(hb5);
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.HostHealthStatus.HealthStatus.ALERT.name(), hostObject.getStatus());
}","testProcessStatusReports()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testIgnoreCustomActionReport","FALSE","0","None","{
    org.apache.ambari.server.agent.CommandReport cr1 = new org.apache.ambari.server.agent.CommandReport();
    cr1.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr1.setTaskId(1);
    cr1.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr1.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    cr1.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED.toString());
    cr1.setRoleCommand(""CUSTOM_COMMAND"");
    cr1.setStdErr(""none"");
    cr1.setStdOut(""dummy output"");
    cr1.setExitCode(0);
    org.apache.ambari.server.agent.CommandReport cr2 = new org.apache.ambari.server.agent.CommandReport();
    cr2.setActionId(org.apache.ambari.server.utils.StageUtils.getActionId(requestId, stageId));
    cr2.setTaskId(2);
    cr2.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    cr2.setRole(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    cr2.setStatus(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED.toString());
    cr2.setRoleCommand(""ACTIONEXECUTE"");
    cr2.setStdErr(""none"");
    cr2.setStdOut(""dummy output"");
    cr2.setExitCode(0);
    java.util.ArrayList<org.apache.ambari.server.agent.CommandReport> reports = new java.util.ArrayList<>();
    reports.add(cr1);
    reports.add(cr2);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setReports(reports);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
            add(command);
        }
    });
    EasyMock.replay(am);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    try {
        handler.handleHeartBeat(hb);
        handler.getHeartbeatProcessor().processHeartbeat(hb);
    } catch (java.lang.Exception e) {
        org.junit.Assert.fail();
    }
}","testIgnoreCustomActionReport()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testComponents","TRUE","4","assertNotNull
assertEquals","{
    org.apache.ambari.server.agent.ComponentsResponse expected = new org.apache.ambari.server.agent.ComponentsResponse();
    org.apache.ambari.server.state.StackId dummyStackId = new org.apache.ambari.server.state.StackId(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyStackId);
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> dummyComponents = new java.util.HashMap<>();
    java.util.Map<java.lang.String, java.lang.String> dummyCategoryMap = new java.util.HashMap<>();
    dummyCategoryMap.put(""NAMENODE"", ""MASTER"");
    dummyComponents.put(""HDFS"", dummyCategoryMap);
    expected.setClusterName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster);
    expected.setStackName(dummyStackId.getStackName());
    expected.setStackVersion(dummyStackId.getStackVersion());
    expected.setComponents(dummyComponents);
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service service = org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.state.Service.class);
    EasyMock.expect(service.getName()).andReturn(""HDFS"").atLeastOnce();
    java.util.Map<java.lang.String, org.apache.ambari.server.state.ServiceComponent> componentMap = new java.util.HashMap<>();
    org.apache.ambari.server.state.ServiceComponent nnComponent = org.easymock.EasyMock.createNiceMock(org.apache.ambari.server.state.ServiceComponent.class);
    EasyMock.expect(nnComponent.getName()).andReturn(""NAMENODE"").atLeastOnce();
    EasyMock.expect(nnComponent.getDesiredStackId()).andReturn(dummyStackId).atLeastOnce();
    componentMap.put(""NAMENODE"", nnComponent);
    EasyMock.expect(service.getServiceComponents()).andReturn(componentMap).atLeastOnce();
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.replay(service, nnComponent, am);
    cluster.addService(service);
    org.apache.ambari.server.agent.HeartBeatHandler handler = heartbeatTestHelper.getHeartBeatHandler(am);
    org.junit.Assert.assertNotNull(handler);
    org.apache.ambari.server.agent.ComponentsResponse actual = handler.handleComponents(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyCluster);
    if (org.apache.ambari.server.agent.TestHeartbeatHandler.log.isDebugEnabled()) {
        org.apache.ambari.server.agent.TestHeartbeatHandler.log.debug(actual.toString());
    }
    org.junit.Assert.assertEquals(expected.getClusterName(), actual.getClusterName());
    org.junit.Assert.assertEquals(expected.getComponents(), actual.getComponents());
}","testComponents()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testCommandStatusProcesses_empty","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).addServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1).setState(org.apache.ambari.server.state.State.STARTED);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(0);
    hb.setHostname(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus));
    hb.setReports(new java.util.ArrayList<>());
    java.util.ArrayList<org.apache.ambari.server.agent.ComponentStatus> componentStatuses = new java.util.ArrayList<>();
    org.apache.ambari.server.agent.ComponentStatus componentStatus1 = new org.apache.ambari.server.agent.ComponentStatus();
    componentStatus1.setServiceName(org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    componentStatus1.setMessage(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostStatus);
    componentStatus1.setStatus(org.apache.ambari.server.state.State.STARTED.name());
    componentStatus1.setComponentName(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    componentStatuses.add(componentStatus1);
    hb.setComponentStatus(componentStatuses);
    final org.apache.ambari.server.actionmanager.HostRoleCommand command = hostRoleCommandFactory.create(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1, org.apache.ambari.server.Role.DATANODE, null, null);
    org.apache.ambari.server.actionmanager.ActionManager am = actionManagerTestHelper.getMockActionManager();
    EasyMock.expect(am.getTasks(org.easymock.EasyMock.<java.util.List<java.lang.Long>>anyObject())).andReturn(new java.util.ArrayList<org.apache.ambari.server.actionmanager.HostRoleCommand>() {
        {
            add(command);
        }
    });
    EasyMock.replay(am);
    org.apache.ambari.server.state.ServiceComponentHost sch = hdfs.getServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE).getServiceComponentHost(org.apache.ambari.server.agent.DummyHeartbeatConstants.DummyHostname1);
    junit.framework.Assert.assertEquals(java.lang.Integer.valueOf(0), java.lang.Integer.valueOf(sch.getProcesses().size()));
}","testCommandStatusProcesses_empty()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testInjectKeytabApplicableHost","TRUE","23","assertNotNull
assertEquals
assertFalse","{
    java.util.List<java.util.Map<java.lang.String, java.lang.String>> kcp;
    java.util.Map<java.lang.String, java.lang.String> properties;
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE);
    kcp = testInjectKeytabSetKeytab(""c6403.ambari.apache.org"");
    junit.framework.Assert.assertNotNull(kcp);
    junit.framework.Assert.assertEquals(1, kcp.size());
    properties = kcp.get(0);
    junit.framework.Assert.assertNotNull(properties);
    junit.framework.Assert.assertEquals(""c6403.ambari.apache.org"", properties.get(org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter.HOSTNAME));
    junit.framework.Assert.assertEquals(""dn/_HOST@_REALM"", properties.get(org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter.PRINCIPAL));
    junit.framework.Assert.assertEquals(""/etc/security/keytabs/dn.service.keytab"", properties.get(org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter.KEYTAB_FILE_PATH));
    junit.framework.Assert.assertEquals(""hdfs"", properties.get(org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter.KEYTAB_FILE_OWNER_NAME));
    junit.framework.Assert.assertEquals(""r"", properties.get(org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter.KEYTAB_FILE_OWNER_ACCESS));
    junit.framework.Assert.assertEquals(""hadoop"", properties.get(org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter.KEYTAB_FILE_GROUP_NAME));
    junit.framework.Assert.assertEquals("""", properties.get(org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter.KEYTAB_FILE_GROUP_ACCESS));
    junit.framework.Assert.assertEquals(org.apache.commons.codec.binary.Base64.encodeBase64String(""hello"".getBytes()), kcp.get(0).get(org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.KEYTAB_CONTENT_BASE64));
    kcp = testInjectKeytabRemoveKeytab(""c6403.ambari.apache.org"");
    junit.framework.Assert.assertNotNull(kcp);
    junit.framework.Assert.assertEquals(1, kcp.size());
    properties = kcp.get(0);
    junit.framework.Assert.assertNotNull(properties);
    junit.framework.Assert.assertEquals(""c6403.ambari.apache.org"", properties.get(org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter.HOSTNAME));
    junit.framework.Assert.assertEquals(""dn/_HOST@_REALM"", properties.get(org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter.PRINCIPAL));
    junit.framework.Assert.assertEquals(""/etc/security/keytabs/dn.service.keytab"", properties.get(org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter.KEYTAB_FILE_PATH));
    junit.framework.Assert.assertFalse(properties.containsKey(org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter.KEYTAB_FILE_OWNER_NAME));
    junit.framework.Assert.assertFalse(properties.containsKey(org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter.KEYTAB_FILE_OWNER_ACCESS));
    junit.framework.Assert.assertFalse(properties.containsKey(org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter.KEYTAB_FILE_GROUP_NAME));
    junit.framework.Assert.assertFalse(properties.containsKey(org.apache.ambari.server.serveraction.kerberos.KerberosIdentityDataFileWriter.KEYTAB_FILE_GROUP_ACCESS));
    junit.framework.Assert.assertFalse(properties.containsKey(org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.KEYTAB_CONTENT_BASE64));
}","testInjectKeytabApplicableHost()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testInjectKeytabNotApplicableHost","TRUE","5","assertNotNull
assertTrue","{
    org.apache.ambari.server.state.Cluster cluster = heartbeatTestHelper.getDummyCluster();
    org.apache.ambari.server.state.Service hdfs = addService(cluster, org.apache.ambari.server.agent.DummyHeartbeatConstants.HDFS);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.DATANODE);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.NAMENODE);
    hdfs.addServiceComponent(org.apache.ambari.server.agent.DummyHeartbeatConstants.SECONDARY_NAMENODE);
    java.util.List<java.util.Map<java.lang.String, java.lang.String>> kcp;
    kcp = testInjectKeytabSetKeytab(""c6401.ambari.apache.org"");
    junit.framework.Assert.assertNotNull(kcp);
    junit.framework.Assert.assertTrue(kcp.isEmpty());
    kcp = testInjectKeytabRemoveKeytab(""c6401.ambari.apache.org"");
    junit.framework.Assert.assertNotNull(kcp);
    junit.framework.Assert.assertTrue(kcp.isEmpty());
}","testInjectKeytabNotApplicableHost()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatHandler.java","a103423b3e777ac0f61a5ff3bb6bf06ddd369fa6
01dd596025384a86fc3afddf9f6168b1762f8dc7
c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
91f19026d1dd999e03cd5f09d13fbd8cb5aad43d
620539fa490b05ce0b4e93911423fd10e1267053
a091011d02211f74ba01247931ed9833446f9a1e
e55846957e3c17d4157b1d81e26cb030d940daaf
40da07e13e0e560489de5d0e2b217eaeccabd956
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
d50333d021a3118b7cc86c708cd817448e8add2f
d42c1391f13049e78fa9e64c9693551ec1c2cc66
eaeef19fa09297d2be70bb2732c196d9e79654fc
08807911bcc092d17d1312467026ce002f3451f8
f62e103ceda822b5a461f58402b817af965c7776
30b6f5b61400efda3bff9a64b06ba57938433df3
67fc4a3785da0a7c39dcb27f220c8573a59ab63d
d03c24b9f21cd91af78e0bfca2a1ce1e0de51bdf
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d04ce2e87442534bb27aff4ff0f5647b36945a72
c7a3bcd9cd9b4c92990405c6826140dee9ddd46e
ab8d58ba4464791b95b56be75fd44ce9c20349c6
2258b10639d510f879953b41dc4709b9e12ed05a
44c1cb51236886bbb968946b6718cbac64d1a984
a45e8f4f5e6a214cab98896092bc7d7d588a518b
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
a45f5427b08fc354e8b54481e7da3d6083112345
f2bbe4781841b871993b3e8dd88e5f56169cf1b8
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
2a00812a66fb6bd1e92f857ed0ecd4cb5f91a615
b299641a076266e8f2a19f55068c89d56bc602b7
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
4fc52a61f5515780a85d54051bfbb08ba7e530b1
edce0b1173b6629e50b053be140490fa288ec361
db46822fbf50c5e5222bdec094b3a011584f8ee8
60a6bd4575fb87fc26c4a277cbabf850ef2089e1
615438b272e6bd8efd37481ef684ae7d68921e64
8335312d0527582bdb6701cfb1709a35b553b682
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
d53c9e2ee99c046ae5b37b531419549397f4aea1
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
ecc19031952bf37829f07752f0563acb0eab52df
6320d589f942b41cdab34c1de241423ccb5b4752
340f7ce6b6d9d46b4f04f7e40892700288b26c9a
3e75bb3a645a01502af4c0b6e456a2c7d6e31a90
083ac6dab5cf59c01da054eb656507c089a54620
cbef0c14682ae24f2754063c48ce521c58cdca27
ac5ca8fd1cd51360f7394c1fd85f8a062a4fb8e2
aec920c390718b0ace19a9055656ea69fc01175d
8def5a407399c56c51ad4edca1a59377dc3c3ba6
74a29e47c6a0c401c23b73befa478b27e6bbc083
38d5eaf0c867d0cbd47fe11eca55bb16f7640c52
ad2f5442b3706235969c8982d3fa92fea808dc29
b21f48299ccaa46f9a092d56d728221d8814f6c3
44b6e7b979df43dbea7d648a92f4e2b44fa02d05
be383cf3dd37e076b5226357babbd1f51cc4b7d7
8a7c54c6334b986bada53965d9512d79d951a7dc
27f566dd7d456aa585c9ebeebfb49574d25c5679
ac1ba0e4f2595e4dc109f3aa5a0ae06f47f4c012
ee79dd21cca51646e3344c161ea61bc2e68f21fb
746df034c630081df187dd442fb460596568113f
dcbf12ef92b3922d13e5fb00bc5551fd927cbf08
f11e2f0630f922cf7102fe4291d5c80230b4cb8c
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
fe39b6460b1f0ad50ece5a5cdc8bfede688956fa
89be8e5581079337432922f2ed7f4640314ba086
32fc073fb7631477d684c8d7214846d3dbbc6128
1646be07045abf0812468fa9f127d7af5b8e6538
c775c60710095259f9c089378d7cd960393ea49f
acf9018a745b68a6e5e939ee71b86d60b986b7f7
aab897d57a9c53a66205421a64e3c265bfd231a0
f37d999664c5540478a053c21ddd311ed98c5b61
a6df75fd6146569096a2678fbfbb56665a43c296
e7303b1ce6605c2986d0a0cf93340ef8ffe1e73b
600f1afcd9f2f4f70c20e005a0f6b748214e15c8
85ff51496d555bdac09198523a9860b20be31c35
92815dd588597842a02d3143657554a8085d880e
3cb6f6aea3865952fced27677ef341970b6d661e
c3bf0db08f5f761f3519740239f5342a05561475
f6248ae5f65ff403311262eb5e51631b9f5081c0
89dc6c1c5bfe06eac6bd188a53103bc766218f81
c938c4840c8ecd22e01ce923a6ededa069830802
3d397dc04aab8d81c00aae2a8e5afa099fc57567
aa43727ea3ee301eb79245739dafde336623d86d
522744fc2f4f74d102488381cf0d6e9fd7ceb13a
9faeaf5a525bfee0932c1a654b28651c0b1705dd
9bbb43e57bb6071fabcb23c12ffb222fb33cccdb
7c0bab1197b5685f86c39a81372d44f8f8648451
a63cf2238ddecbe7c1b8be3b3faa09f172b344b5
f3aab68ec417d8e2c39c216962e1e1d47d56d401
b844303663efdf0460141c5e790ad61fb45268dd
44ced4d5d8bcbc8f37fe7be418b1d10f39b2b3fe
4c04bf87204f0616d36e4e42e91f5cc6d6efeda3
11a9f1d5b6116668a8914fb1d4cab58c6149e76f
e445a9ce487d2486a556b29b693c6083ffd396f3
71aa1f24c5cb852a513117956e1f10571e545c91
03e04a684a481eede81faa015b13d2a0f7df8546
01bd864f1cbe8f497e309469f3ec776419b98269
044a29f9b1dd70969355edfa09c17f814927ec49
e1f4f2e8b062f36f1db623423b682dd0019b0f19
0a79a472ebcaccda560816e4f744b68cc5a801fa
8e8a9a47fd5d9afb0fcc4bd41b283c409d5bc355
af56baa0b497869398726ae6b6c78b8707072d95
c86976551f4dd1a437bed6e728ae39bbc2040736
b15eca4a0e6371f7e548dce4b381d97412df6831
8c2895f9dbe176f64a327a3beacf9da0f3e69f74
d60ee2cb16f25d799ade3ceb629ad9edb3643049
d44b3124f15f0a1c3229e75f29c80085e5483170
708e59d9b3f26f3d31d2bd4a9b5f2c2bfcd17af3
471403cd51feafa74088360b32f297766ea8d64f
8b0e64c5121ee14acdafa624681c9f291a390bb1
8bf3d0b56cf66c3ef2e9d61efad942f7cebb405e
f6ee76b0a8dd7e595fdd9988754950c59cdf0291
65bf3370f3228cbd364f2d9d5ca36b81ba53180f
a719a58a4b5fc9603a0cc915813e56637648e874
ec385434caab0398932f745c608d47f4fd65c433
7374436e034cce4bb8f86454ec8846b564c682c4
8f2ce06b61d16c63dd8341bacf86bf1a7a72781a
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
e4827126710d09d5c0773aecf49816eac364dc8d
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
38924d9e066a728e8de86a3e9195eac286cf251a
5fc6ba4959a7c924f2a5df4831aa6c2720cb4ce4
e046f95e1592afb8a33f4f905fbc09152f714b4e
b2fae8cb54d2e4929437d941e831dcb584c5f645
f00f883002854c13575019668eebaa49d86bb7ed
6ce45f710e69532b65414d6fe130d975cf8c8a64
292390d81ea9a8d4ece0771d61b9bc5d79a29284
6c1433c431d53d021edb987250dab95e07d09486
0030250767bfc21d5347fdb8daea37dc19a20711
cc9ae66fdf97e43188a9fa6185918c83b90f3c72
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
d6ce83acfd91a3adba828ce7655833369a50d823
b4d6b0209bdfce1f3a9dbd2de5180aa0ff45fb9f
1e4001f4739302f429442f6d8ca5662c581fff16
27d96c9c8c6cf2fd76795c39b23c7c19e424801c
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
90375352ea2de2f290127523a5ae554df3327791
997940a4b56ed3e4f61121e28679049bf85ad476
bf04fcdb638587469b96043c57b3e4bdaac7a709
7e59ad9b94625df91ff2b8d2e864887284e08262
a8461c0fc40e4b0ac8a53c23e60bec1febce7dcc
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testHeartbeatLoss","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.Clusters fsm = org.apache.ambari.server.agent.TestHeartbeatMonitor.injector.getInstance(org.apache.ambari.server.state.Clusters.class);
    java.lang.String hostname = ""host1"";
    fsm.addHost(hostname);
    org.apache.ambari.server.actionmanager.ActionManager am = Mockito.mock(org.apache.ambari.server.actionmanager.ActionManager.class);
    org.apache.ambari.server.configuration.Configuration configuration = Mockito.mock(org.apache.ambari.server.configuration.Configuration.class);
    Mockito.when(configuration.getHeartbeatMonitorInterval()).thenReturn(10);
    org.apache.ambari.server.agent.HeartbeatMonitor hm = new org.apache.ambari.server.agent.HeartbeatMonitor(fsm, am, 10, org.apache.ambari.server.agent.TestHeartbeatMonitor.injector);
    org.apache.ambari.server.agent.HeartBeatHandler handler = new org.apache.ambari.server.agent.HeartBeatHandler(configuration, fsm, am, org.apache.ambari.server.security.encryption.Encryptor.NONE, org.apache.ambari.server.agent.TestHeartbeatMonitor.injector);
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    reg.setHostname(hostname);
    reg.setResponseId(12);
    reg.setTimestamp(java.lang.System.currentTimeMillis() - 300);
    reg.setAgentVersion(org.apache.ambari.server.agent.TestHeartbeatMonitor.ambariMetaInfo.getServerVersion());
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setOS(""Centos5"");
    reg.setHardwareProfile(hi);
    handler.handleRegistration(reg);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setHostname(hostname);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, ""cool""));
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(12);
    handler.handleHeartBeat(hb);
    hm.start();
    org.junit.Assert.assertEquals(fsm.getHost(hostname).getState(), org.apache.ambari.server.state.HostState.HEARTBEAT_LOST);
    hm.shutdown();
}","testHeartbeatLoss()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatMonitor.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
576449879d7f39c267eb80edf4a3644d4bbfcc1e
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
7c687bbc226b19f85a6f6f292537760e5d6d8048
ab8d58ba4464791b95b56be75fd44ce9c20349c6
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
c4581345d6e6ff5fd7d367c0d6a8df0821648feb
a6639a7c72043ff7bda03e6ba305913c7503193a
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
392a752d27ce3d0dd7e044ce8c4ab5e9d10f6e74
8425f1fa714718e32a05e8fcd005047c6de46451
1123ba265592958f188eaf9b1eac843bcb4d3f1c
2c40528d9ae1e36b7bab9b5f3dd51338dd8e7366
cbef0c14682ae24f2754063c48ce521c58cdca27
6944d61f05cda5d4b47810bc4f835a2bb8e44016
a3a0ae041a43aaa1ffdc8f9247338bb68dd5675f
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
aab897d57a9c53a66205421a64e3c265bfd231a0
92815dd588597842a02d3143657554a8085d880e
c938c4840c8ecd22e01ce923a6ededa069830802
aa43727ea3ee301eb79245739dafde336623d86d
e4ededeb69dde413b35a6400197b23a889b3963d
2cceee2ea3933b05cef97e6d48f029dcebe9c200
a65ae123b1081d7f7dfd5c121585e9d08992eb33
ce4020028973fadaa79f1bacea649de0b61dbe0c
b844303663efdf0460141c5e790ad61fb45268dd
b0ae1fdde4cb5f58f64df23f4ffa4e35b25c3601
b94eb716ba3228be6d39f0fc9009f8e63d146c89
96bad666fac95e6060253fb55941da12bf8216a1
1b038795381cae1a796d4904422e9bd622b3aa80
01bd864f1cbe8f497e309469f3ec776419b98269
e1f4f2e8b062f36f1db623423b682dd0019b0f19
d23cdc160a2b2414ef7f6833cd29aa1cc56bfe45
6292620075cbb27760a06c3b6e733f905da36dd4
d57d5f7946a9ef56ee34b846c02c8c54db2093a3
e65468a6c09b7dc1133ff973443cef8f956a962b
82f69585a0f3d0023450ccf084426794901e9641
e23877fb77dc6219058171ad7bfff79720d9e141
27b11a994ec266b5d557b1a22717fa91d9567d02
c6944bc5461f7c84e0a9f82ce17b316c7f4a952e
06527319f15335218ce07aecfc8062ac562c8788
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
d6ce83acfd91a3adba828ce7655833369a50d823
734566422ff7578022e50577370c72b48a9b9731
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testStateCommandsGeneration","TRUE","10","assertTrue
assertEquals","{
    org.apache.ambari.server.state.StackId stackId = new org.apache.ambari.server.state.StackId(""HDP-0.1"");
    org.apache.ambari.server.state.Clusters clusters = org.apache.ambari.server.agent.TestHeartbeatMonitor.injector.getInstance(org.apache.ambari.server.state.Clusters.class);
    clusters.addHost(hostname1);
    setOsFamily(clusters.getHost(hostname1), ""redhat"", ""6.3"");
    clusters.addHost(hostname2);
    setOsFamily(clusters.getHost(hostname2), ""redhat"", ""6.3"");
    clusters.addCluster(clusterName, stackId);
    org.apache.ambari.server.state.Cluster cluster = clusters.getCluster(clusterName);
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion = org.apache.ambari.server.agent.TestHeartbeatMonitor.helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());
    java.util.Set<java.lang.String> hostNames = new java.util.HashSet<java.lang.String>() {
        {
            add(hostname1);
            add(hostname2);
        }
    };
    org.apache.ambari.server.state.ConfigFactory configFactory = org.apache.ambari.server.agent.TestHeartbeatMonitor.injector.getInstance(org.apache.ambari.server.state.ConfigFactory.class);
    org.apache.ambari.server.state.Config config = configFactory.createNew(cluster, ""hadoop-env"", ""version1"", new java.util.HashMap<java.lang.String, java.lang.String>() {
        {
            put(""a"", ""b"");
        }
    }, new java.util.HashMap<>());
    cluster.addDesiredConfig(""_test"", java.util.Collections.singleton(config));
    clusters.mapAndPublishHostsToCluster(hostNames, clusterName);
    org.apache.ambari.server.state.Service hdfs = cluster.addService(serviceName, repositoryVersion);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.DATANODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.DATANODE.name()).addServiceComponentHost(hostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.NAMENODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.NAMENODE.name()).addServiceComponentHost(hostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name()).addServiceComponentHost(hostname1);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.DATANODE.name()).getServiceComponentHost(hostname1).setState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.NAMENODE.name()).getServiceComponentHost(hostname1).setState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name()).getServiceComponentHost(hostname1).setState(org.apache.ambari.server.state.State.INSTALLED);
    org.apache.ambari.server.actionmanager.ActionManager am = Mockito.mock(org.apache.ambari.server.actionmanager.ActionManager.class);
    org.apache.ambari.server.agent.HeartbeatMonitor hm = new org.apache.ambari.server.agent.HeartbeatMonitor(clusters, am, heartbeatMonitorWakeupIntervalMS, org.apache.ambari.server.agent.TestHeartbeatMonitor.injector);
    org.apache.ambari.server.configuration.Configuration configuration = Mockito.mock(org.apache.ambari.server.configuration.Configuration.class);
    Mockito.when(configuration.getHeartbeatMonitorInterval()).thenReturn(60000);
    org.apache.ambari.server.agent.HeartBeatHandler handler = new org.apache.ambari.server.agent.HeartBeatHandler(configuration, clusters, am, org.apache.ambari.server.security.encryption.Encryptor.NONE, org.apache.ambari.server.agent.TestHeartbeatMonitor.injector);
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    reg.setHostname(hostname1);
    reg.setResponseId(12);
    reg.setTimestamp(java.lang.System.currentTimeMillis() - 300);
    reg.setAgentVersion(org.apache.ambari.server.agent.TestHeartbeatMonitor.ambariMetaInfo.getServerVersion());
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setOS(""Centos5"");
    reg.setHardwareProfile(hi);
    handler.handleRegistration(reg);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setHostname(hostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, ""cool""));
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(12);
    handler.handleHeartBeat(hb);
    hm.getAgentRequests().setExecutionDetailsRequest(hostname1, ""DATANODE"", java.lang.Boolean.TRUE.toString());
    java.util.List<org.apache.ambari.server.agent.StatusCommand> cmds = hm.generateStatusCommands(hostname1);
    org.junit.Assert.assertTrue(""HeartbeatMonitor should generate StatusCommands for host1"", cmds.size() == 3);
    org.junit.Assert.assertEquals(""HDFS"", cmds.get(0).getServiceName());
    boolean containsDATANODEStatus = false;
    boolean containsNAMENODEStatus = false;
    boolean containsSECONDARY_NAMENODEStatus = false;
    for (org.apache.ambari.server.agent.StatusCommand cmd : cmds) {
        boolean isDataNode = cmd.getComponentName().equals(""DATANODE"");
        containsDATANODEStatus |= isDataNode;
        containsNAMENODEStatus |= cmd.getComponentName().equals(""NAMENODE"");
        containsSECONDARY_NAMENODEStatus |= cmd.getComponentName().equals(""SECONDARY_NAMENODE"");
        org.junit.Assert.assertTrue(cmd.getConfigurations().size() > 0);
        org.apache.ambari.server.agent.ExecutionCommand execCmd = cmd.getExecutionCommand();
        org.junit.Assert.assertEquals(isDataNode, execCmd != null);
        if (execCmd != null) {
            java.util.Map<java.lang.String, java.lang.String> commandParams = execCmd.getCommandParams();
            org.junit.Assert.assertTrue(org.apache.ambari.server.agent.ExecutionCommand.KeyNames.HOOKS_FOLDER + "" should be included"", commandParams.containsKey(org.apache.ambari.server.agent.ExecutionCommand.KeyNames.HOOKS_FOLDER));
        }
    }
    org.junit.Assert.assertEquals(true, containsDATANODEStatus);
    org.junit.Assert.assertEquals(true, containsNAMENODEStatus);
    org.junit.Assert.assertEquals(true, containsSECONDARY_NAMENODEStatus);
    cmds = hm.generateStatusCommands(hostname2);
    org.junit.Assert.assertTrue(""HeartbeatMonitor should not generate StatusCommands for host2 because it has no services"", cmds.isEmpty());
}","testStateCommandsGeneration()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatMonitor.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
576449879d7f39c267eb80edf4a3644d4bbfcc1e
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
7c687bbc226b19f85a6f6f292537760e5d6d8048
ab8d58ba4464791b95b56be75fd44ce9c20349c6
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
c4581345d6e6ff5fd7d367c0d6a8df0821648feb
a6639a7c72043ff7bda03e6ba305913c7503193a
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
392a752d27ce3d0dd7e044ce8c4ab5e9d10f6e74
8425f1fa714718e32a05e8fcd005047c6de46451
1123ba265592958f188eaf9b1eac843bcb4d3f1c
2c40528d9ae1e36b7bab9b5f3dd51338dd8e7366
cbef0c14682ae24f2754063c48ce521c58cdca27
6944d61f05cda5d4b47810bc4f835a2bb8e44016
a3a0ae041a43aaa1ffdc8f9247338bb68dd5675f
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
aab897d57a9c53a66205421a64e3c265bfd231a0
92815dd588597842a02d3143657554a8085d880e
c938c4840c8ecd22e01ce923a6ededa069830802
aa43727ea3ee301eb79245739dafde336623d86d
e4ededeb69dde413b35a6400197b23a889b3963d
2cceee2ea3933b05cef97e6d48f029dcebe9c200
a65ae123b1081d7f7dfd5c121585e9d08992eb33
ce4020028973fadaa79f1bacea649de0b61dbe0c
b844303663efdf0460141c5e790ad61fb45268dd
b0ae1fdde4cb5f58f64df23f4ffa4e35b25c3601
b94eb716ba3228be6d39f0fc9009f8e63d146c89
96bad666fac95e6060253fb55941da12bf8216a1
1b038795381cae1a796d4904422e9bd622b3aa80
01bd864f1cbe8f497e309469f3ec776419b98269
e1f4f2e8b062f36f1db623423b682dd0019b0f19
d23cdc160a2b2414ef7f6833cd29aa1cc56bfe45
6292620075cbb27760a06c3b6e733f905da36dd4
d57d5f7946a9ef56ee34b846c02c8c54db2093a3
e65468a6c09b7dc1133ff973443cef8f956a962b
82f69585a0f3d0023450ccf084426794901e9641
e23877fb77dc6219058171ad7bfff79720d9e141
27b11a994ec266b5d557b1a22717fa91d9567d02
c6944bc5461f7c84e0a9f82ce17b316c7f4a952e
06527319f15335218ce07aecfc8062ac562c8788
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
d6ce83acfd91a3adba828ce7655833369a50d823
734566422ff7578022e50577370c72b48a9b9731
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testStatusCommandForAnyComponents","TRUE","15","assertEquals
assertTrue","{
    org.apache.ambari.server.state.StackId stackId = new org.apache.ambari.server.state.StackId(""HDP-0.1"");
    org.apache.ambari.server.state.Clusters clusters = org.apache.ambari.server.agent.TestHeartbeatMonitor.injector.getInstance(org.apache.ambari.server.state.Clusters.class);
    clusters.addHost(hostname1);
    setOsFamily(clusters.getHost(hostname1), ""redhat"", ""6.3"");
    clusters.addHost(hostname2);
    setOsFamily(clusters.getHost(hostname2), ""redhat"", ""6.3"");
    clusters.addCluster(clusterName, stackId);
    org.apache.ambari.server.state.Cluster cluster = clusters.getCluster(clusterName);
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion = org.apache.ambari.server.agent.TestHeartbeatMonitor.helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());
    java.util.Set<java.lang.String> hostNames = new java.util.HashSet<java.lang.String>() {
        {
            add(hostname1);
            add(hostname2);
        }
    };
    org.apache.ambari.server.state.ConfigFactory configFactory = org.apache.ambari.server.agent.TestHeartbeatMonitor.injector.getInstance(org.apache.ambari.server.state.ConfigFactory.class);
    org.apache.ambari.server.state.Config hadoopEnvConfig = configFactory.createNew(cluster, ""hadoop-env"", ""version1"", new java.util.HashMap<java.lang.String, java.lang.String>() {
        {
            put(""a"", ""b"");
        }
    }, new java.util.HashMap<>());
    org.apache.ambari.server.state.Config hbaseEnvConfig = configFactory.createNew(cluster, ""hbase-env"", ""version1"", new java.util.HashMap<java.lang.String, java.lang.String>() {
        {
            put(""a"", ""b"");
        }
    }, new java.util.HashMap<>());
    cluster.addDesiredConfig(""_test"", java.util.Collections.singleton(hadoopEnvConfig));
    clusters.mapAndPublishHostsToCluster(hostNames, clusterName);
    org.apache.ambari.server.state.Service hdfs = cluster.addService(serviceName, repositoryVersion);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.DATANODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.DATANODE.name()).addServiceComponentHost(hostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.NAMENODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.NAMENODE.name()).addServiceComponentHost(hostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name()).addServiceComponentHost(hostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.HDFS_CLIENT.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.HDFS_CLIENT.name()).addServiceComponentHost(hostname1);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.HDFS_CLIENT.name()).addServiceComponentHost(hostname2);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.DATANODE.name()).getServiceComponentHost(hostname1).setState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.NAMENODE.name()).getServiceComponentHost(hostname1).setState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name()).getServiceComponentHost(hostname1).setState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.HDFS_CLIENT.name()).getServiceComponentHost(hostname1).setState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.HDFS_CLIENT.name()).getServiceComponentHost(hostname2).setState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.DATANODE.name()).getServiceComponentHost(hostname1).setDesiredState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.NAMENODE.name()).getServiceComponentHost(hostname1).setDesiredState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name()).getServiceComponentHost(hostname1).setDesiredState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.HDFS_CLIENT.name()).getServiceComponentHost(hostname1).setDesiredState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.HDFS_CLIENT.name()).getServiceComponentHost(hostname2).setDesiredState(org.apache.ambari.server.state.State.INSTALLED);
    org.apache.ambari.server.actionmanager.ActionManager am = Mockito.mock(org.apache.ambari.server.actionmanager.ActionManager.class);
    org.apache.ambari.server.agent.HeartbeatMonitor hm = new org.apache.ambari.server.agent.HeartbeatMonitor(clusters, am, heartbeatMonitorWakeupIntervalMS, org.apache.ambari.server.agent.TestHeartbeatMonitor.injector);
    org.apache.ambari.server.configuration.Configuration configuration = Mockito.mock(org.apache.ambari.server.configuration.Configuration.class);
    Mockito.when(configuration.getHeartbeatMonitorInterval()).thenReturn(60000);
    org.apache.ambari.server.agent.HeartBeatHandler handler = new org.apache.ambari.server.agent.HeartBeatHandler(configuration, clusters, am, org.apache.ambari.server.security.encryption.Encryptor.NONE, org.apache.ambari.server.agent.TestHeartbeatMonitor.injector);
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    reg.setHostname(hostname1);
    reg.setResponseId(12);
    reg.setTimestamp(java.lang.System.currentTimeMillis() - 300);
    reg.setAgentVersion(org.apache.ambari.server.agent.TestHeartbeatMonitor.ambariMetaInfo.getServerVersion());
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setOS(""Centos5"");
    reg.setHardwareProfile(hi);
    org.apache.ambari.server.agent.RegistrationResponse registrationResponse = handler.handleRegistration(reg);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setHostname(hostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, ""cool""));
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(12);
    handler.handleHeartBeat(hb);
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> statusCommandConfig = registrationResponse.getStatusCommands().get(0).getConfigurations();
    org.junit.Assert.assertEquals(statusCommandConfig.size(), 1);
    org.junit.Assert.assertTrue(statusCommandConfig.containsKey(""hadoop-env""));
    java.util.List<org.apache.ambari.server.agent.StatusCommand> cmds = hm.generateStatusCommands(hostname1);
    org.junit.Assert.assertTrue(""HeartbeatMonitor should generate StatusCommands for host1"", cmds.size() == 4);
    org.junit.Assert.assertEquals(""HDFS"", cmds.get(0).getServiceName());
    boolean containsDATANODEStatus = false;
    boolean containsNAMENODEStatus = false;
    boolean containsSECONDARY_NAMENODEStatus = false;
    boolean containsHDFS_CLIENTStatus = false;
    for (org.apache.ambari.server.agent.StatusCommand cmd : cmds) {
        containsDATANODEStatus |= cmd.getComponentName().equals(""DATANODE"");
        containsNAMENODEStatus |= cmd.getComponentName().equals(""NAMENODE"");
        containsSECONDARY_NAMENODEStatus |= cmd.getComponentName().equals(""SECONDARY_NAMENODE"");
        containsHDFS_CLIENTStatus |= cmd.getComponentName().equals(""HDFS_CLIENT"");
        org.junit.Assert.assertTrue(cmd.getConfigurations().size() > 0);
        org.junit.Assert.assertEquals(org.apache.ambari.server.state.State.INSTALLED, cmd.getDesiredState());
        org.junit.Assert.assertEquals(false, cmd.getHasStaleConfigs());
    }
    org.junit.Assert.assertTrue(containsDATANODEStatus);
    org.junit.Assert.assertTrue(containsNAMENODEStatus);
    org.junit.Assert.assertTrue(containsSECONDARY_NAMENODEStatus);
    org.junit.Assert.assertTrue(containsHDFS_CLIENTStatus);
    cmds = hm.generateStatusCommands(hostname2);
    org.junit.Assert.assertTrue(""HeartbeatMonitor should generate StatusCommands for host2, "" + ""even if it has only client components"", cmds.size() == 1);
    org.junit.Assert.assertTrue(cmds.get(0).getComponentName().equals(org.apache.ambari.server.Role.HDFS_CLIENT.name()));
    org.junit.Assert.assertEquals(hostname2, cmds.get(0).getHostname());
}","testStatusCommandForAnyComponents()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatMonitor.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
576449879d7f39c267eb80edf4a3644d4bbfcc1e
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
7c687bbc226b19f85a6f6f292537760e5d6d8048
ab8d58ba4464791b95b56be75fd44ce9c20349c6
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
c4581345d6e6ff5fd7d367c0d6a8df0821648feb
a6639a7c72043ff7bda03e6ba305913c7503193a
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
392a752d27ce3d0dd7e044ce8c4ab5e9d10f6e74
8425f1fa714718e32a05e8fcd005047c6de46451
1123ba265592958f188eaf9b1eac843bcb4d3f1c
2c40528d9ae1e36b7bab9b5f3dd51338dd8e7366
cbef0c14682ae24f2754063c48ce521c58cdca27
6944d61f05cda5d4b47810bc4f835a2bb8e44016
a3a0ae041a43aaa1ffdc8f9247338bb68dd5675f
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
aab897d57a9c53a66205421a64e3c265bfd231a0
92815dd588597842a02d3143657554a8085d880e
c938c4840c8ecd22e01ce923a6ededa069830802
aa43727ea3ee301eb79245739dafde336623d86d
e4ededeb69dde413b35a6400197b23a889b3963d
2cceee2ea3933b05cef97e6d48f029dcebe9c200
a65ae123b1081d7f7dfd5c121585e9d08992eb33
ce4020028973fadaa79f1bacea649de0b61dbe0c
b844303663efdf0460141c5e790ad61fb45268dd
b0ae1fdde4cb5f58f64df23f4ffa4e35b25c3601
b94eb716ba3228be6d39f0fc9009f8e63d146c89
96bad666fac95e6060253fb55941da12bf8216a1
1b038795381cae1a796d4904422e9bd622b3aa80
01bd864f1cbe8f497e309469f3ec776419b98269
e1f4f2e8b062f36f1db623423b682dd0019b0f19
d23cdc160a2b2414ef7f6833cd29aa1cc56bfe45
6292620075cbb27760a06c3b6e733f905da36dd4
d57d5f7946a9ef56ee34b846c02c8c54db2093a3
e65468a6c09b7dc1133ff973443cef8f956a962b
82f69585a0f3d0023450ccf084426794901e9641
e23877fb77dc6219058171ad7bfff79720d9e141
27b11a994ec266b5d557b1a22717fa91d9567d02
c6944bc5461f7c84e0a9f82ce17b316c7f4a952e
06527319f15335218ce07aecfc8062ac562c8788
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
d6ce83acfd91a3adba828ce7655833369a50d823
734566422ff7578022e50577370c72b48a9b9731
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testHeartbeatStateCommandsEnqueueing","TRUE","3","assertTrue
assertEquals","{
    org.apache.ambari.server.state.StackId stackId = new org.apache.ambari.server.state.StackId(""HDP-0.1"");
    org.apache.ambari.server.state.Clusters clusters = org.apache.ambari.server.agent.TestHeartbeatMonitor.injector.getInstance(org.apache.ambari.server.state.Clusters.class);
    clusters.addHost(hostname1);
    setOsFamily(clusters.getHost(hostname1), ""redhat"", ""5.9"");
    clusters.addCluster(clusterName, stackId);
    org.apache.ambari.server.state.Cluster cluster = clusters.getCluster(clusterName);
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion = org.apache.ambari.server.agent.TestHeartbeatMonitor.helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());
    java.util.Set<java.lang.String> hostNames = new java.util.HashSet<java.lang.String>() {
        {
            add(hostname1);
        }
    };
    clusters.mapAndPublishHostsToCluster(hostNames, clusterName);
    org.apache.ambari.server.state.Service hdfs = cluster.addService(serviceName, repositoryVersion);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.DATANODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.DATANODE.name()).addServiceComponentHost(hostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.NAMENODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.NAMENODE.name()).addServiceComponentHost(hostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name()).addServiceComponentHost(hostname1);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.DATANODE.name()).getServiceComponentHost(hostname1).setState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.NAMENODE.name()).getServiceComponentHost(hostname1).setState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name()).getServiceComponentHost(hostname1).setState(org.apache.ambari.server.state.State.INSTALLED);
    org.mockito.ArgumentCaptor<org.apache.ambari.server.agent.AgentCommand> commandCaptor = org.mockito.ArgumentCaptor.forClass(org.apache.ambari.server.agent.AgentCommand.class);
    org.apache.ambari.server.actionmanager.ActionManager am = Mockito.mock(org.apache.ambari.server.actionmanager.ActionManager.class);
    org.apache.ambari.server.agent.HeartbeatMonitor hm = new org.apache.ambari.server.agent.HeartbeatMonitor(clusters, am, heartbeatMonitorWakeupIntervalMS, org.apache.ambari.server.agent.TestHeartbeatMonitor.injector);
    org.apache.ambari.server.configuration.Configuration configuration = Mockito.mock(org.apache.ambari.server.configuration.Configuration.class);
    Mockito.when(configuration.getHeartbeatMonitorInterval()).thenReturn(60000);
    org.apache.ambari.server.agent.HeartBeatHandler handler = new org.apache.ambari.server.agent.HeartBeatHandler(configuration, clusters, am, org.apache.ambari.server.security.encryption.Encryptor.NONE, org.apache.ambari.server.agent.TestHeartbeatMonitor.injector);
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    reg.setHostname(hostname1);
    reg.setResponseId(12);
    reg.setTimestamp(java.lang.System.currentTimeMillis() - 15);
    reg.setAgentVersion(org.apache.ambari.server.agent.TestHeartbeatMonitor.ambariMetaInfo.getServerVersion());
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setOS(""Centos5"");
    reg.setHardwareProfile(hi);
    handler.handleRegistration(reg);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setHostname(hostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, ""cool""));
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(13);
    handler.handleHeartBeat(hb);
    org.apache.ambari.server.agent.TestHeartbeatMonitor.LOG.info(""YYY"");
    clusters.getHost(hostname1).setLastHeartbeatTime(java.lang.System.currentTimeMillis() - 15);
    hm.start();
    java.lang.Thread.sleep(3 * heartbeatMonitorWakeupIntervalMS);
    hm.shutdown();
    int tryNumber = 0;
    while (hm.isAlive()) {
        hm.join(2 * heartbeatMonitorWakeupIntervalMS);
        tryNumber++;
        if (tryNumber >= 5) {
            org.junit.Assert.fail(""HeartbeatMonitor should be already stopped"");
        }
    } 
    java.util.List<org.apache.ambari.server.agent.AgentCommand> cmds = commandCaptor.getAllValues();
    org.junit.Assert.assertTrue(""HeartbeatMonitor should generate StatusCommands for host1"", cmds.size() >= 2);
    for (org.apache.ambari.server.agent.AgentCommand command : cmds) {
        org.junit.Assert.assertEquals(""HDFS"", ((org.apache.ambari.server.agent.StatusCommand) (command)).getServiceName());
    }
}","testHeartbeatStateCommandsEnqueueing()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatMonitor.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
576449879d7f39c267eb80edf4a3644d4bbfcc1e
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
7c687bbc226b19f85a6f6f292537760e5d6d8048
ab8d58ba4464791b95b56be75fd44ce9c20349c6
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
c4581345d6e6ff5fd7d367c0d6a8df0821648feb
a6639a7c72043ff7bda03e6ba305913c7503193a
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
392a752d27ce3d0dd7e044ce8c4ab5e9d10f6e74
8425f1fa714718e32a05e8fcd005047c6de46451
1123ba265592958f188eaf9b1eac843bcb4d3f1c
2c40528d9ae1e36b7bab9b5f3dd51338dd8e7366
cbef0c14682ae24f2754063c48ce521c58cdca27
6944d61f05cda5d4b47810bc4f835a2bb8e44016
a3a0ae041a43aaa1ffdc8f9247338bb68dd5675f
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
aab897d57a9c53a66205421a64e3c265bfd231a0
92815dd588597842a02d3143657554a8085d880e
c938c4840c8ecd22e01ce923a6ededa069830802
aa43727ea3ee301eb79245739dafde336623d86d
e4ededeb69dde413b35a6400197b23a889b3963d
2cceee2ea3933b05cef97e6d48f029dcebe9c200
a65ae123b1081d7f7dfd5c121585e9d08992eb33
ce4020028973fadaa79f1bacea649de0b61dbe0c
b844303663efdf0460141c5e790ad61fb45268dd
b0ae1fdde4cb5f58f64df23f4ffa4e35b25c3601
b94eb716ba3228be6d39f0fc9009f8e63d146c89
96bad666fac95e6060253fb55941da12bf8216a1
1b038795381cae1a796d4904422e9bd622b3aa80
01bd864f1cbe8f497e309469f3ec776419b98269
e1f4f2e8b062f36f1db623423b682dd0019b0f19
d23cdc160a2b2414ef7f6833cd29aa1cc56bfe45
6292620075cbb27760a06c3b6e733f905da36dd4
d57d5f7946a9ef56ee34b846c02c8c54db2093a3
e65468a6c09b7dc1133ff973443cef8f956a962b
82f69585a0f3d0023450ccf084426794901e9641
e23877fb77dc6219058171ad7bfff79720d9e141
27b11a994ec266b5d557b1a22717fa91d9567d02
c6944bc5461f7c84e0a9f82ce17b316c7f4a952e
06527319f15335218ce07aecfc8062ac562c8788
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
d6ce83acfd91a3adba828ce7655833369a50d823
734566422ff7578022e50577370c72b48a9b9731
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testHeartbeatLossWithComponent","TRUE","5","assertEquals","{
    org.apache.ambari.server.state.StackId stackId = new org.apache.ambari.server.state.StackId(""HDP-0.1"");
    org.apache.ambari.server.state.Clusters clusters = org.apache.ambari.server.agent.TestHeartbeatMonitor.injector.getInstance(org.apache.ambari.server.state.Clusters.class);
    clusters.addHost(hostname1);
    setOsFamily(clusters.getHost(hostname1), ""redhat"", ""6.3"");
    clusters.addCluster(clusterName, stackId);
    org.apache.ambari.server.state.Cluster cluster = clusters.getCluster(clusterName);
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion = org.apache.ambari.server.agent.TestHeartbeatMonitor.helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());
    java.util.Set<java.lang.String> hostNames = new java.util.HashSet<java.lang.String>() {
        {
            add(hostname1);
        }
    };
    clusters.mapAndPublishHostsToCluster(hostNames, clusterName);
    org.apache.ambari.server.state.Service hdfs = cluster.addService(serviceName, repositoryVersion);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.DATANODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.DATANODE.name()).addServiceComponentHost(hostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.NAMENODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.NAMENODE.name()).addServiceComponentHost(hostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name()).addServiceComponentHost(hostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.HDFS_CLIENT.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.HDFS_CLIENT.name()).addServiceComponentHost(hostname1);
    org.apache.ambari.server.actionmanager.ActionManager am = Mockito.mock(org.apache.ambari.server.actionmanager.ActionManager.class);
    org.apache.ambari.server.agent.HeartbeatMonitor hm = new org.apache.ambari.server.agent.HeartbeatMonitor(clusters, am, 10, org.apache.ambari.server.agent.TestHeartbeatMonitor.injector);
    org.apache.ambari.server.configuration.Configuration configuration = Mockito.mock(org.apache.ambari.server.configuration.Configuration.class);
    Mockito.when(configuration.getHeartbeatMonitorInterval()).thenReturn(10);
    org.apache.ambari.server.agent.HeartBeatHandler handler = new org.apache.ambari.server.agent.HeartBeatHandler(configuration, clusters, am, org.apache.ambari.server.security.encryption.Encryptor.NONE, org.apache.ambari.server.agent.TestHeartbeatMonitor.injector);
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    reg.setHostname(hostname1);
    reg.setResponseId(12);
    reg.setTimestamp(java.lang.System.currentTimeMillis() - 300);
    reg.setAgentVersion(org.apache.ambari.server.agent.TestHeartbeatMonitor.ambariMetaInfo.getServerVersion());
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setOS(""Centos5"");
    reg.setHardwareProfile(hi);
    handler.handleRegistration(reg);
    cluster = clusters.getClustersForHost(hostname1).iterator().next();
    for (org.apache.ambari.server.state.ServiceComponentHost sch : cluster.getServiceComponentHosts(hostname1)) {
        if (sch.getServiceComponentName().equals(""NAMENODE"")) {
            sch.handleEvent(new org.apache.ambari.server.state.svccomphost.ServiceComponentHostInstallEvent(sch.getServiceComponentName(), sch.getHostName(), java.lang.System.currentTimeMillis(), ""HDP-0.1""));
            sch.handleEvent(new org.apache.ambari.server.state.svccomphost.ServiceComponentHostOpSucceededEvent(sch.getServiceComponentName(), sch.getHostName(), java.lang.System.currentTimeMillis()));
            sch.handleEvent(new org.apache.ambari.server.state.svccomphost.ServiceComponentHostStartedEvent(sch.getServiceComponentName(), sch.getHostName(), java.lang.System.currentTimeMillis()));
        } else if (sch.getServiceComponentName().equals(""DATANODE"")) {
            sch.handleEvent(new org.apache.ambari.server.state.svccomphost.ServiceComponentHostInstallEvent(sch.getServiceComponentName(), sch.getHostName(), java.lang.System.currentTimeMillis(), ""HDP-0.1""));
        } else if (sch.getServiceComponentName().equals(""SECONDARY_NAMENODE"")) {
            sch.handleEvent(new org.apache.ambari.server.state.svccomphost.ServiceComponentHostInstallEvent(sch.getServiceComponentName(), sch.getHostName(), java.lang.System.currentTimeMillis(), ""HDP-0.1""));
            sch.handleEvent(new org.apache.ambari.server.state.svccomphost.ServiceComponentHostOpSucceededEvent(sch.getServiceComponentName(), sch.getHostName(), java.lang.System.currentTimeMillis()));
            sch.handleEvent(new org.apache.ambari.server.state.svccomphost.ServiceComponentHostDisableEvent(sch.getServiceComponentName(), sch.getHostName(), java.lang.System.currentTimeMillis()));
        }
    }
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setHostname(hostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, ""cool""));
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(12);
    handler.handleHeartBeat(hb);
    hm.start();
    hm.shutdown();
    cluster = clusters.getClustersForHost(hostname1).iterator().next();
    for (org.apache.ambari.server.state.ServiceComponentHost sch : cluster.getServiceComponentHosts(hostname1)) {
        org.apache.ambari.server.state.Service s = cluster.getService(sch.getServiceName());
        org.apache.ambari.server.state.ServiceComponent sc = s.getServiceComponent(sch.getServiceComponentName());
        if (sch.getServiceComponentName().equals(""NAMENODE"")) {
            org.junit.Assert.assertEquals(sch.getServiceComponentName(), org.apache.ambari.server.state.State.UNKNOWN, sch.getState());
        } else if (sch.getServiceComponentName().equals(""DATANODE"")) {
            org.junit.Assert.assertEquals(sch.getServiceComponentName(), org.apache.ambari.server.state.State.INSTALLING, sch.getState());
        } else if (sc.isClientComponent()) {
            org.junit.Assert.assertEquals(sch.getServiceComponentName(), org.apache.ambari.server.state.State.INIT, sch.getState());
        } else if (sch.getServiceComponentName().equals(""SECONDARY_NAMENODE"")) {
            org.junit.Assert.assertEquals(sch.getServiceComponentName(), org.apache.ambari.server.state.State.DISABLED, sch.getState());
        }
    }
}","testHeartbeatLossWithComponent()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatMonitor.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
576449879d7f39c267eb80edf4a3644d4bbfcc1e
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
7c687bbc226b19f85a6f6f292537760e5d6d8048
ab8d58ba4464791b95b56be75fd44ce9c20349c6
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
c4581345d6e6ff5fd7d367c0d6a8df0821648feb
a6639a7c72043ff7bda03e6ba305913c7503193a
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
392a752d27ce3d0dd7e044ce8c4ab5e9d10f6e74
8425f1fa714718e32a05e8fcd005047c6de46451
1123ba265592958f188eaf9b1eac843bcb4d3f1c
2c40528d9ae1e36b7bab9b5f3dd51338dd8e7366
cbef0c14682ae24f2754063c48ce521c58cdca27
6944d61f05cda5d4b47810bc4f835a2bb8e44016
a3a0ae041a43aaa1ffdc8f9247338bb68dd5675f
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
aab897d57a9c53a66205421a64e3c265bfd231a0
92815dd588597842a02d3143657554a8085d880e
c938c4840c8ecd22e01ce923a6ededa069830802
aa43727ea3ee301eb79245739dafde336623d86d
e4ededeb69dde413b35a6400197b23a889b3963d
2cceee2ea3933b05cef97e6d48f029dcebe9c200
a65ae123b1081d7f7dfd5c121585e9d08992eb33
ce4020028973fadaa79f1bacea649de0b61dbe0c
b844303663efdf0460141c5e790ad61fb45268dd
b0ae1fdde4cb5f58f64df23f4ffa4e35b25c3601
b94eb716ba3228be6d39f0fc9009f8e63d146c89
96bad666fac95e6060253fb55941da12bf8216a1
1b038795381cae1a796d4904422e9bd622b3aa80
01bd864f1cbe8f497e309469f3ec776419b98269
e1f4f2e8b062f36f1db623423b682dd0019b0f19
d23cdc160a2b2414ef7f6833cd29aa1cc56bfe45
6292620075cbb27760a06c3b6e733f905da36dd4
d57d5f7946a9ef56ee34b846c02c8c54db2093a3
e65468a6c09b7dc1133ff973443cef8f956a962b
82f69585a0f3d0023450ccf084426794901e9641
e23877fb77dc6219058171ad7bfff79720d9e141
27b11a994ec266b5d557b1a22717fa91d9567d02
c6944bc5461f7c84e0a9f82ce17b316c7f4a952e
06527319f15335218ce07aecfc8062ac562c8788
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
d6ce83acfd91a3adba828ce7655833369a50d823
734566422ff7578022e50577370c72b48a9b9731
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testStateCommandsWithAlertsGeneration","TRUE","4","assertEquals
assertTrue","{
    org.apache.ambari.server.state.StackId stackId = new org.apache.ambari.server.state.StackId(""HDP-2.0.7"");
    org.apache.ambari.server.state.Clusters clusters = org.apache.ambari.server.agent.TestHeartbeatMonitor.injector.getInstance(org.apache.ambari.server.state.Clusters.class);
    clusters.addHost(hostname1);
    setOsFamily(clusters.getHost(hostname1), ""redhat"", ""6.3"");
    clusters.addHost(hostname2);
    setOsFamily(clusters.getHost(hostname2), ""redhat"", ""6.3"");
    clusters.addCluster(clusterName, stackId);
    org.apache.ambari.server.state.Cluster cluster = clusters.getCluster(clusterName);
    cluster.setDesiredStackVersion(stackId);
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion = org.apache.ambari.server.agent.TestHeartbeatMonitor.helper.getOrCreateRepositoryVersion(stackId, stackId.getStackVersion());
    java.util.Set<java.lang.String> hostNames = new java.util.HashSet<java.lang.String>() {
        {
            add(hostname1);
            add(hostname2);
        }
    };
    clusters.mapAndPublishHostsToCluster(hostNames, clusterName);
    org.apache.ambari.server.state.Service hdfs = cluster.addService(serviceName, repositoryVersion);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.DATANODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.DATANODE.name()).addServiceComponentHost(hostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.NAMENODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.NAMENODE.name()).addServiceComponentHost(hostname1);
    hdfs.addServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name());
    hdfs.getServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name()).addServiceComponentHost(hostname1);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.DATANODE.name()).getServiceComponentHost(hostname1).setState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.NAMENODE.name()).getServiceComponentHost(hostname1).setState(org.apache.ambari.server.state.State.INSTALLED);
    hdfs.getServiceComponent(org.apache.ambari.server.Role.SECONDARY_NAMENODE.name()).getServiceComponentHost(hostname1).setState(org.apache.ambari.server.state.State.INSTALLED);
    org.apache.ambari.server.actionmanager.ActionManager am = Mockito.mock(org.apache.ambari.server.actionmanager.ActionManager.class);
    org.apache.ambari.server.agent.HeartbeatMonitor hm = new org.apache.ambari.server.agent.HeartbeatMonitor(clusters, am, heartbeatMonitorWakeupIntervalMS, org.apache.ambari.server.agent.TestHeartbeatMonitor.injector);
    org.apache.ambari.server.configuration.Configuration configuration = Mockito.mock(org.apache.ambari.server.configuration.Configuration.class);
    Mockito.when(configuration.getHeartbeatMonitorInterval()).thenReturn(60000);
    org.apache.ambari.server.agent.HeartBeatHandler handler = new org.apache.ambari.server.agent.HeartBeatHandler(configuration, clusters, am, org.apache.ambari.server.security.encryption.Encryptor.NONE, org.apache.ambari.server.agent.TestHeartbeatMonitor.injector);
    org.apache.ambari.server.agent.Register reg = new org.apache.ambari.server.agent.Register();
    reg.setHostname(hostname1);
    reg.setResponseId(12);
    reg.setTimestamp(java.lang.System.currentTimeMillis() - 300);
    reg.setAgentVersion(org.apache.ambari.server.agent.TestHeartbeatMonitor.ambariMetaInfo.getServerVersion());
    org.apache.ambari.server.agent.HostInfo hi = new org.apache.ambari.server.agent.HostInfo();
    hi.setOS(""Centos5"");
    reg.setHardwareProfile(hi);
    handler.handleRegistration(reg);
    org.apache.ambari.server.agent.HeartBeat hb = new org.apache.ambari.server.agent.HeartBeat();
    hb.setHostname(hostname1);
    hb.setNodeStatus(new org.apache.ambari.server.agent.HostStatus(org.apache.ambari.server.agent.HostStatus.Status.HEALTHY, ""cool""));
    hb.setTimestamp(java.lang.System.currentTimeMillis());
    hb.setResponseId(12);
    handler.handleHeartBeat(hb);
    java.util.List<org.apache.ambari.server.agent.StatusCommand> cmds = hm.generateStatusCommands(hostname1);
    org.junit.Assert.assertEquals(""HeartbeatMonitor should generate StatusCommands for host1"", 3, cmds.size());
    org.junit.Assert.assertEquals(""HDFS"", cmds.get(0).getServiceName());
    cmds = hm.generateStatusCommands(hostname2);
    org.junit.Assert.assertTrue(""HeartbeatMonitor should not generate StatusCommands for host2 because it has no services"", cmds.isEmpty());
}","testStateCommandsWithAlertsGeneration()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/TestHeartbeatMonitor.java","c79e80b678a14566531617fb53157a4591a66611
f8a019926fdca0073f08de54c5e9720260beef52
576449879d7f39c267eb80edf4a3644d4bbfcc1e
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
7c687bbc226b19f85a6f6f292537760e5d6d8048
ab8d58ba4464791b95b56be75fd44ce9c20349c6
44c1cb51236886bbb968946b6718cbac64d1a984
c2409e740f84d6f051659b3b36d853902e698a60
aaa821cc2455a29b1e83caf5eab98272053d5aa5
dcbd826c96b91c718caa519f44663b9a73f17da6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
c4581345d6e6ff5fd7d367c0d6a8df0821648feb
a6639a7c72043ff7bda03e6ba305913c7503193a
2c6008293a664ab3b0f24a3f22be54fe0e5f1faf
d6a847154e80158a0be0a26ee7dfc0d6dccac686
0de69e10b30a1dadf6f508170548cd347095193a
38700445bd793d27a8747d4c1d06b70f531ab677
392a752d27ce3d0dd7e044ce8c4ab5e9d10f6e74
8425f1fa714718e32a05e8fcd005047c6de46451
1123ba265592958f188eaf9b1eac843bcb4d3f1c
2c40528d9ae1e36b7bab9b5f3dd51338dd8e7366
cbef0c14682ae24f2754063c48ce521c58cdca27
6944d61f05cda5d4b47810bc4f835a2bb8e44016
a3a0ae041a43aaa1ffdc8f9247338bb68dd5675f
746df034c630081df187dd442fb460596568113f
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
aab897d57a9c53a66205421a64e3c265bfd231a0
92815dd588597842a02d3143657554a8085d880e
c938c4840c8ecd22e01ce923a6ededa069830802
aa43727ea3ee301eb79245739dafde336623d86d
e4ededeb69dde413b35a6400197b23a889b3963d
2cceee2ea3933b05cef97e6d48f029dcebe9c200
a65ae123b1081d7f7dfd5c121585e9d08992eb33
ce4020028973fadaa79f1bacea649de0b61dbe0c
b844303663efdf0460141c5e790ad61fb45268dd
b0ae1fdde4cb5f58f64df23f4ffa4e35b25c3601
b94eb716ba3228be6d39f0fc9009f8e63d146c89
96bad666fac95e6060253fb55941da12bf8216a1
1b038795381cae1a796d4904422e9bd622b3aa80
01bd864f1cbe8f497e309469f3ec776419b98269
e1f4f2e8b062f36f1db623423b682dd0019b0f19
d23cdc160a2b2414ef7f6833cd29aa1cc56bfe45
6292620075cbb27760a06c3b6e733f905da36dd4
d57d5f7946a9ef56ee34b846c02c8c54db2093a3
e65468a6c09b7dc1133ff973443cef8f956a962b
82f69585a0f3d0023450ccf084426794901e9641
e23877fb77dc6219058171ad7bfff79720d9e141
27b11a994ec266b5d557b1a22717fa91d9567d02
c6944bc5461f7c84e0a9f82ce17b316c7f4a952e
06527319f15335218ce07aecfc8062ac562c8788
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
d6ce83acfd91a3adba828ce7655833369a50d823
734566422ff7578022e50577370c72b48a9b9731
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
1a2052f0cbd72dd1f8da562b14739610d492eb61
bf2f1fac8363d151865fb545ea1c77f17de2c188"
"testGetHashWithTimestamp","TRUE","5","assertEquals
assertFalse","{
    org.apache.ambari.server.events.publishers.AmbariEventPublisher ambariEventPublisher = EasyMock.createNiceMock(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class);
    org.apache.ambari.server.agent.stomp.AgentConfigsHolder agentConfigsHolder = new org.apache.ambari.server.agent.stomp.AgentConfigsHolder(ambariEventPublisher, org.apache.ambari.server.security.encryption.Encryptor.NONE);
    org.apache.ambari.server.events.AgentConfigsUpdateEvent event1 = new org.apache.ambari.server.events.AgentConfigsUpdateEvent(null, null);
    event1.setHash(""01"");
    event1.setTimestamp(1L);
    java.lang.String eventHash1 = agentConfigsHolder.getHash(event1);
    org.apache.ambari.server.events.AgentConfigsUpdateEvent event2 = new org.apache.ambari.server.events.AgentConfigsUpdateEvent(null, null);
    event2.setHash(""02"");
    event2.setTimestamp(1L);
    java.lang.String eventHash2 = agentConfigsHolder.getHash(event2);
    org.apache.ambari.server.events.AgentConfigsUpdateEvent event3 = new org.apache.ambari.server.events.AgentConfigsUpdateEvent(null, null);
    event3.setHash(""01"");
    event3.setTimestamp(2L);
    java.lang.String eventHash3 = agentConfigsHolder.getHash(event3);
    org.apache.ambari.server.events.AgentConfigsUpdateEvent event4 = new org.apache.ambari.server.events.AgentConfigsUpdateEvent(null, null);
    event4.setHash(""02"");
    event4.setTimestamp(2L);
    java.lang.String eventHash4 = agentConfigsHolder.getHash(event4);
    org.apache.ambari.server.events.AgentConfigsUpdateEvent event5 = new org.apache.ambari.server.events.AgentConfigsUpdateEvent(null, org.apache.commons.collections.MapUtils.EMPTY_SORTED_MAP);
    event5.setHash(""01"");
    event5.setTimestamp(1L);
    java.lang.String eventHash5 = agentConfigsHolder.getHash(event5);
    org.junit.Assert.assertEquals(eventHash1, eventHash2);
    org.junit.Assert.assertEquals(eventHash1, eventHash3);
    org.junit.Assert.assertEquals(eventHash1, eventHash4);
    org.junit.Assert.assertFalse(eventHash1.equals(eventHash5));
}","testGetHashWithTimestamp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AgentDataHolderTest.java","f8a019926fdca0073f08de54c5e9720260beef52
aef0c47d9e8369b52b5e271d390071d3f193e37b
2357dd2537e246c858c599332e7b3830d0701610
c492689e54a5258a7464584965e443fc430bb017
4c877c8f7e57b68068a41dff38c5b7cab3fbb8ce"
"testGetHash","TRUE","3","assertEquals
assertFalse","{
    org.apache.ambari.server.events.publishers.AmbariEventPublisher ambariEventPublisher = EasyMock.createNiceMock(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class);
    org.apache.ambari.server.agent.stomp.MetadataHolder metadataHolder = new org.apache.ambari.server.agent.stomp.MetadataHolder(ambariEventPublisher);
    org.apache.ambari.server.events.MetadataUpdateEvent event1 = new org.apache.ambari.server.events.MetadataUpdateEvent(null, null, null, org.apache.ambari.server.events.UpdateEventType.CREATE);
    event1.setHash(""01"");
    java.lang.String eventHash1 = metadataHolder.getHash(event1);
    org.apache.ambari.server.events.MetadataUpdateEvent event2 = new org.apache.ambari.server.events.MetadataUpdateEvent(null, null, null, org.apache.ambari.server.events.UpdateEventType.CREATE);
    event2.setHash(""02"");
    java.lang.String eventHash2 = metadataHolder.getHash(event2);
    org.apache.ambari.server.events.MetadataUpdateEvent event3 = new org.apache.ambari.server.events.MetadataUpdateEvent(null, null, null, org.apache.ambari.server.events.UpdateEventType.UPDATE);
    event3.setHash(""01"");
    java.lang.String eventHash3 = metadataHolder.getHash(event3);
    org.junit.Assert.assertEquals(eventHash1, eventHash2);
    org.junit.Assert.assertFalse(eventHash1.equals(eventHash3));
}","testGetHash()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AgentDataHolderTest.java","f8a019926fdca0073f08de54c5e9720260beef52
aef0c47d9e8369b52b5e271d390071d3f193e37b
2357dd2537e246c858c599332e7b3830d0701610
c492689e54a5258a7464584965e443fc430bb017
4c877c8f7e57b68068a41dff38c5b7cab3fbb8ce"
"testHandleUpdateEmptyCurrent","TRUE","5","assertFalse
assertEquals","{
    org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent current = new org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent(org.apache.ambari.server.events.AlertDefinitionEventType.CREATE, java.util.Collections.emptyMap(), ""host1"", HOST_ID);
    java.util.Map<java.lang.Long, org.apache.ambari.server.agent.stomp.dto.AlertCluster> clusters = new java.util.HashMap<>();
    org.apache.ambari.server.agent.stomp.dto.AlertCluster cluster = org.apache.ambari.server.agent.stomp.dto.AlertCluster.emptyAlertCluster();
    clusters.put(1L, cluster);
    org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent update = new org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent(org.apache.ambari.server.events.AlertDefinitionEventType.UPDATE, clusters, ""host1"", HOST_ID);
    org.apache.ambari.server.agent.stomp.AlertDefinitionsHolder alertDefinitionsHolder = new org.apache.ambari.server.agent.stomp.AlertDefinitionsHolder(EasyMock.createNiceMock(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class));
    org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent result = alertDefinitionsHolder.handleUpdate(current, update);
    org.junit.Assert.assertFalse(result == update);
    org.junit.Assert.assertFalse(result == current);
    org.junit.Assert.assertEquals(org.apache.ambari.server.events.AlertDefinitionEventType.CREATE, result.getEventType());
    org.junit.Assert.assertEquals(result.getClusters(), update.getClusters());
}","testHandleUpdateEmptyCurrent()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolderTest.java","aef0c47d9e8369b52b5e271d390071d3f193e37b
2357dd2537e246c858c599332e7b3830d0701610
c492689e54a5258a7464584965e443fc430bb017"
"testHandleUpdateEmptyUpdate","TRUE","4","assertFalse
assertEquals","{
    java.util.Map<java.lang.Long, org.apache.ambari.server.agent.stomp.dto.AlertCluster> clusters = new java.util.HashMap<>();
    org.apache.ambari.server.agent.stomp.dto.AlertCluster cluster = org.apache.ambari.server.agent.stomp.dto.AlertCluster.emptyAlertCluster();
    clusters.put(1L, cluster);
    org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent current = new org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent(org.apache.ambari.server.events.AlertDefinitionEventType.CREATE, clusters, ""host1"", HOST_ID);
    org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent update = new org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent(org.apache.ambari.server.events.AlertDefinitionEventType.UPDATE, java.util.Collections.emptyMap(), ""host1"", HOST_ID);
    org.apache.ambari.server.agent.stomp.AlertDefinitionsHolder alertDefinitionsHolder = new org.apache.ambari.server.agent.stomp.AlertDefinitionsHolder(EasyMock.createNiceMock(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class));
    org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent result = alertDefinitionsHolder.handleUpdate(current, update);
    org.junit.Assert.assertFalse(result == update);
    org.junit.Assert.assertFalse(result == current);
    org.junit.Assert.assertEquals(result, null);
}","testHandleUpdateEmptyUpdate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolderTest.java","aef0c47d9e8369b52b5e271d390071d3f193e37b
2357dd2537e246c858c599332e7b3830d0701610
c492689e54a5258a7464584965e443fc430bb017"
"testHandleUpdateNoChanges","TRUE","4","assertFalse
assertEquals","{
    java.util.Map<java.lang.Long, org.apache.ambari.server.agent.stomp.dto.AlertCluster> currentClusters = new java.util.HashMap<>();
    org.apache.ambari.server.agent.stomp.dto.AlertCluster currentCluster = new org.apache.ambari.server.agent.stomp.dto.AlertCluster(java.util.Collections.emptyMap(), ""host1"");
    currentClusters.put(1L, currentCluster);
    org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent current = new org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent(org.apache.ambari.server.events.AlertDefinitionEventType.CREATE, currentClusters, ""host1"", HOST_ID);
    java.util.Map<java.lang.Long, org.apache.ambari.server.agent.stomp.dto.AlertCluster> updateClusters = new java.util.HashMap<>();
    org.apache.ambari.server.agent.stomp.dto.AlertCluster updateCluster = new org.apache.ambari.server.agent.stomp.dto.AlertCluster(java.util.Collections.emptyMap(), ""host1"");
    updateClusters.put(1L, updateCluster);
    org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent update = new org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent(org.apache.ambari.server.events.AlertDefinitionEventType.UPDATE, updateClusters, ""host1"", HOST_ID);
    org.apache.ambari.server.agent.stomp.AlertDefinitionsHolder alertDefinitionsHolder = new org.apache.ambari.server.agent.stomp.AlertDefinitionsHolder(EasyMock.createNiceMock(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class));
    org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent result = alertDefinitionsHolder.handleUpdate(current, update);
    org.junit.Assert.assertFalse(result == update);
    org.junit.Assert.assertFalse(result == current);
    org.junit.Assert.assertEquals(result, null);
}","testHandleUpdateNoChanges()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolderTest.java","aef0c47d9e8369b52b5e271d390071d3f193e37b
2357dd2537e246c858c599332e7b3830d0701610
c492689e54a5258a7464584965e443fc430bb017"
"testHandleUpdateOnChanges","TRUE","6","assertFalse
assertEquals
assertTrue","{
    java.util.Map<java.lang.Long, org.apache.ambari.server.agent.stomp.dto.AlertCluster> currentClusters = new java.util.HashMap<>();
    org.apache.ambari.server.agent.stomp.dto.AlertCluster currentCluster = new org.apache.ambari.server.agent.stomp.dto.AlertCluster(java.util.Collections.emptyMap(), ""host1"");
    currentClusters.put(1L, currentCluster);
    org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent current = new org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent(org.apache.ambari.server.events.AlertDefinitionEventType.CREATE, currentClusters, ""host1"", HOST_ID);
    java.util.Map<java.lang.Long, org.apache.ambari.server.agent.stomp.dto.AlertCluster> updateClusters = new java.util.HashMap<>();
    org.apache.ambari.server.agent.stomp.dto.AlertCluster updateCluster = new org.apache.ambari.server.agent.stomp.dto.AlertCluster(java.util.Collections.emptyMap(), ""host1"");
    updateClusters.put(2L, updateCluster);
    org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent update = new org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent(org.apache.ambari.server.events.AlertDefinitionEventType.UPDATE, updateClusters, ""host1"", HOST_ID);
    org.apache.ambari.server.agent.stomp.AlertDefinitionsHolder alertDefinitionsHolder = new org.apache.ambari.server.agent.stomp.AlertDefinitionsHolder(EasyMock.createNiceMock(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class));
    org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent result = alertDefinitionsHolder.handleUpdate(current, update);
    org.junit.Assert.assertFalse(result == update);
    org.junit.Assert.assertFalse(result == current);
    org.junit.Assert.assertEquals(2, result.getClusters().size());
    org.junit.Assert.assertTrue(result.getClusters().containsKey(1L));
    org.junit.Assert.assertTrue(result.getClusters().containsKey(2L));
}","testHandleUpdateOnChanges()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/AlertDefinitionsHolderTest.java","aef0c47d9e8369b52b5e271d390071d3f193e37b
2357dd2537e246c858c599332e7b3830d0701610
c492689e54a5258a7464584965e443fc430bb017"
"testHandleUpdateEmptyCurrent","TRUE","4","assertFalse
assertEquals","{
    org.apache.ambari.server.events.HostLevelParamsUpdateEvent current = new org.apache.ambari.server.events.HostLevelParamsUpdateEvent(HOST_ID, java.util.Collections.emptyMap());
    java.util.Map<java.lang.String, org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster> clusters = new java.util.HashMap<>();
    org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster cluster = new org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster(new org.apache.ambari.server.agent.RecoveryConfig(null), java.util.Collections.emptyMap());
    clusters.put(""1"", cluster);
    org.apache.ambari.server.events.HostLevelParamsUpdateEvent update = new org.apache.ambari.server.events.HostLevelParamsUpdateEvent(HOST_ID, clusters);
    org.apache.ambari.server.agent.stomp.HostLevelParamsHolder levelParamsHolder = new org.apache.ambari.server.agent.stomp.HostLevelParamsHolder(EasyMock.createNiceMock(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class));
    org.apache.ambari.server.events.HostLevelParamsUpdateEvent result = levelParamsHolder.handleUpdate(current, update);
    org.junit.Assert.assertFalse(result == update);
    org.junit.Assert.assertFalse(result == current);
    org.junit.Assert.assertEquals(result, update);
}","testHandleUpdateEmptyCurrent()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java","d4b97b0831fc59cd95cada70277628520a904d4d
4b5aafcf9cce58f56b28b5758fc0890874e26b50
aef0c47d9e8369b52b5e271d390071d3f193e37b
2357dd2537e246c858c599332e7b3830d0701610
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
c492689e54a5258a7464584965e443fc430bb017"
"testHandleUpdateEmptyUpdate","TRUE","4","assertFalse
assertEquals","{
    java.util.Map<java.lang.String, org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster> clusters = new java.util.HashMap<>();
    org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster cluster = new org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster(new org.apache.ambari.server.agent.RecoveryConfig(null), java.util.Collections.emptyMap());
    clusters.put(""1"", cluster);
    org.apache.ambari.server.events.HostLevelParamsUpdateEvent current = new org.apache.ambari.server.events.HostLevelParamsUpdateEvent(HOST_ID, clusters);
    org.apache.ambari.server.events.HostLevelParamsUpdateEvent update = new org.apache.ambari.server.events.HostLevelParamsUpdateEvent(HOST_ID, java.util.Collections.emptyMap());
    org.apache.ambari.server.agent.stomp.HostLevelParamsHolder levelParamsHolder = new org.apache.ambari.server.agent.stomp.HostLevelParamsHolder(EasyMock.createNiceMock(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class));
    org.apache.ambari.server.events.HostLevelParamsUpdateEvent result = levelParamsHolder.handleUpdate(current, update);
    org.junit.Assert.assertFalse(result == update);
    org.junit.Assert.assertFalse(result == current);
    org.junit.Assert.assertEquals(result, null);
}","testHandleUpdateEmptyUpdate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java","d4b97b0831fc59cd95cada70277628520a904d4d
4b5aafcf9cce58f56b28b5758fc0890874e26b50
aef0c47d9e8369b52b5e271d390071d3f193e37b
2357dd2537e246c858c599332e7b3830d0701610
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
c492689e54a5258a7464584965e443fc430bb017"
"testHandleUpdateNoChanges","TRUE","4","assertFalse
assertEquals","{
    java.util.Map<java.lang.String, org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster> currentClusters = new java.util.HashMap<>();
    org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster currentCluster = new org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster(new org.apache.ambari.server.agent.RecoveryConfig(null), java.util.Collections.emptyMap());
    currentClusters.put(""1"", currentCluster);
    org.apache.ambari.server.events.HostLevelParamsUpdateEvent current = new org.apache.ambari.server.events.HostLevelParamsUpdateEvent(HOST_ID, currentClusters);
    java.util.Map<java.lang.String, org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster> updateClusters = new java.util.HashMap<>();
    org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster updateCluster = new org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster(new org.apache.ambari.server.agent.RecoveryConfig(null), java.util.Collections.emptyMap());
    updateClusters.put(""1"", updateCluster);
    org.apache.ambari.server.events.HostLevelParamsUpdateEvent update = new org.apache.ambari.server.events.HostLevelParamsUpdateEvent(HOST_ID, updateClusters);
    org.apache.ambari.server.agent.stomp.HostLevelParamsHolder levelParamsHolder = new org.apache.ambari.server.agent.stomp.HostLevelParamsHolder(EasyMock.createNiceMock(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class));
    org.apache.ambari.server.events.HostLevelParamsUpdateEvent result = levelParamsHolder.handleUpdate(current, update);
    org.junit.Assert.assertFalse(result == update);
    org.junit.Assert.assertFalse(result == current);
    org.junit.Assert.assertEquals(result, null);
}","testHandleUpdateNoChanges()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java","d4b97b0831fc59cd95cada70277628520a904d4d
4b5aafcf9cce58f56b28b5758fc0890874e26b50
aef0c47d9e8369b52b5e271d390071d3f193e37b
2357dd2537e246c858c599332e7b3830d0701610
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
c492689e54a5258a7464584965e443fc430bb017"
"testHandleUpdateOnChanges","TRUE","6","assertFalse
assertEquals
assertTrue","{
    java.util.Map<java.lang.String, org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster> currentClusters = new java.util.HashMap<>();
    org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster currentCluster = new org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster(new org.apache.ambari.server.agent.RecoveryConfig(null), java.util.Collections.emptyMap());
    currentClusters.put(""1"", currentCluster);
    org.apache.ambari.server.events.HostLevelParamsUpdateEvent current = new org.apache.ambari.server.events.HostLevelParamsUpdateEvent(HOST_ID, currentClusters);
    java.util.Map<java.lang.String, org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster> updateClusters = new java.util.HashMap<>();
    org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster updateCluster = new org.apache.ambari.server.agent.stomp.dto.HostLevelParamsCluster(new org.apache.ambari.server.agent.RecoveryConfig(null), java.util.Collections.emptyMap());
    updateClusters.put(""2"", updateCluster);
    org.apache.ambari.server.events.HostLevelParamsUpdateEvent update = new org.apache.ambari.server.events.HostLevelParamsUpdateEvent(HOST_ID, updateClusters);
    org.apache.ambari.server.agent.stomp.HostLevelParamsHolder levelParamsHolder = new org.apache.ambari.server.agent.stomp.HostLevelParamsHolder(EasyMock.createNiceMock(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class));
    org.apache.ambari.server.events.HostLevelParamsUpdateEvent result = levelParamsHolder.handleUpdate(current, update);
    org.junit.Assert.assertFalse(result == update);
    org.junit.Assert.assertFalse(result == current);
    org.junit.Assert.assertEquals(2, result.getHostLevelParamsClusters().size());
    org.junit.Assert.assertTrue(result.getHostLevelParamsClusters().containsKey(""1""));
    org.junit.Assert.assertTrue(result.getHostLevelParamsClusters().containsKey(""2""));
}","testHandleUpdateOnChanges()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/HostLevelParamsHolderTest.java","d4b97b0831fc59cd95cada70277628520a904d4d
4b5aafcf9cce58f56b28b5758fc0890874e26b50
aef0c47d9e8369b52b5e271d390071d3f193e37b
2357dd2537e246c858c599332e7b3830d0701610
00274d4e25bbffbd21d4eb8fdecf47b70c68c7da
c492689e54a5258a7464584965e443fc430bb017"
"testHandlingReportHostAdd","TRUE","4","assertEquals","{
    org.apache.ambari.server.agent.stomp.dto.TopologyHost dummyHost = new org.apache.ambari.server.agent.stomp.dto.TopologyHost(1L, ""hostName1"");
    org.apache.ambari.server.agent.stomp.dto.TopologyHost hostToAddition = new org.apache.ambari.server.agent.stomp.dto.TopologyHost(2L, ""hostName2"");
    org.apache.ambari.server.agent.stomp.dto.TopologyCluster topologyCluster = new org.apache.ambari.server.agent.stomp.dto.TopologyCluster(new java.util.HashSet<>(), new java.util.HashSet() {
        {
            add(dummyHost);
        }
    });
    org.apache.ambari.server.agent.stomp.dto.TopologyUpdateHandlingReport report = new org.apache.ambari.server.agent.stomp.dto.TopologyUpdateHandlingReport();
    topologyCluster.update(java.util.Collections.emptySet(), java.util.Collections.singleton(hostToAddition), org.apache.ambari.server.events.UpdateEventType.UPDATE, report);
    org.junit.Assert.assertEquals(1L, report.getUpdatedHostNames().size());
    org.junit.Assert.assertEquals(""hostName2"", report.getUpdatedHostNames().iterator().next());
    org.junit.Assert.assertEquals(2L, topologyCluster.getTopologyHosts().size());
}","testHandlingReportHostAdd()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/TopologyClusterTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d"
"testHandlingReportHostDelete","TRUE","5","assertEquals","{
    org.apache.ambari.server.agent.stomp.dto.TopologyHost dummyHost = new org.apache.ambari.server.agent.stomp.dto.TopologyHost(1L, ""hostName1"");
    org.apache.ambari.server.agent.stomp.dto.TopologyHost hostToDelete = new org.apache.ambari.server.agent.stomp.dto.TopologyHost(2L, ""hostName2"");
    org.apache.ambari.server.agent.stomp.dto.TopologyHost update = new org.apache.ambari.server.agent.stomp.dto.TopologyHost(2L, ""hostName2"");
    org.apache.ambari.server.agent.stomp.dto.TopologyCluster topologyCluster = new org.apache.ambari.server.agent.stomp.dto.TopologyCluster(new java.util.HashSet<>(), new java.util.HashSet() {
        {
            add(dummyHost);
            add(hostToDelete);
        }
    });
    org.apache.ambari.server.agent.stomp.dto.TopologyUpdateHandlingReport report = new org.apache.ambari.server.agent.stomp.dto.TopologyUpdateHandlingReport();
    topologyCluster.update(java.util.Collections.emptySet(), java.util.Collections.singleton(update), org.apache.ambari.server.events.UpdateEventType.DELETE, report);
    org.junit.Assert.assertEquals(1L, report.getUpdatedHostNames().size());
    org.junit.Assert.assertEquals(""hostName2"", report.getUpdatedHostNames().iterator().next());
    org.junit.Assert.assertEquals(1L, topologyCluster.getTopologyHosts().size());
    org.junit.Assert.assertEquals(""hostName1"", topologyCluster.getTopologyHosts().iterator().next().getHostName());
}","testHandlingReportHostDelete()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/TopologyClusterTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d"
"testHandlingReportHostUpdate","TRUE","4","assertEquals","{
    org.apache.ambari.server.agent.stomp.dto.TopologyHost dummyHost = new org.apache.ambari.server.agent.stomp.dto.TopologyHost(1L, ""hostName1"");
    org.apache.ambari.server.agent.stomp.dto.TopologyHost hostToUpdate = new org.apache.ambari.server.agent.stomp.dto.TopologyHost(2L, ""hostName2"");
    org.apache.ambari.server.agent.stomp.dto.TopologyHost update = new org.apache.ambari.server.agent.stomp.dto.TopologyHost(2L, ""hostName2"", ""rack"", ""ipv4"");
    org.apache.ambari.server.agent.stomp.dto.TopologyCluster topologyCluster = new org.apache.ambari.server.agent.stomp.dto.TopologyCluster(new java.util.HashSet<>(), new java.util.HashSet() {
        {
            add(dummyHost);
            add(hostToUpdate);
        }
    });
    org.apache.ambari.server.agent.stomp.dto.TopologyUpdateHandlingReport report = new org.apache.ambari.server.agent.stomp.dto.TopologyUpdateHandlingReport();
    topologyCluster.update(java.util.Collections.emptySet(), java.util.Collections.singleton(update), org.apache.ambari.server.events.UpdateEventType.UPDATE, report);
    org.junit.Assert.assertEquals(1L, report.getUpdatedHostNames().size());
    org.junit.Assert.assertEquals(""hostName2"", report.getUpdatedHostNames().iterator().next());
    org.junit.Assert.assertEquals(2L, topologyCluster.getTopologyHosts().size());
}","testHandlingReportHostUpdate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/TopologyClusterTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d"
"testHandlingReportComponentAdd","TRUE","5","assertEquals
assertTrue","{
    org.apache.ambari.server.agent.stomp.dto.TopologyComponent dummyComponent = createDummyTopologyComponent(""comp1"", new java.lang.Long[]{ 1L, 2L }, new java.lang.String[]{ ""hostName1"", ""hostName2"" });
    org.apache.ambari.server.agent.stomp.dto.TopologyComponent componentToAddition = createDummyTopologyComponent(""comp2"", new java.lang.Long[]{ 1L, 3L }, new java.lang.String[]{ ""hostName1"", ""hostName3"" });
    org.apache.ambari.server.agent.stomp.dto.TopologyCluster topologyCluster = new org.apache.ambari.server.agent.stomp.dto.TopologyCluster(new java.util.HashSet() {
        {
            add(dummyComponent);
        }
    }, new java.util.HashSet<>());
    org.apache.ambari.server.agent.stomp.dto.TopologyUpdateHandlingReport report = new org.apache.ambari.server.agent.stomp.dto.TopologyUpdateHandlingReport();
    topologyCluster.update(java.util.Collections.singleton(componentToAddition), java.util.Collections.emptySet(), org.apache.ambari.server.events.UpdateEventType.UPDATE, report);
    org.junit.Assert.assertEquals(2L, report.getUpdatedHostNames().size());
    org.junit.Assert.assertTrue(report.getUpdatedHostNames().contains(""hostName1""));
    org.junit.Assert.assertTrue(report.getUpdatedHostNames().contains(""hostName3""));
    org.junit.Assert.assertEquals(2L, topologyCluster.getTopologyComponents().size());
}","testHandlingReportComponentAdd()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/TopologyClusterTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d"
"testHandlingReportComponentDeletePartially","TRUE","4","assertEquals
assertTrue","{
    org.apache.ambari.server.agent.stomp.dto.TopologyComponent dummyComponent = createDummyTopologyComponent(""comp1"", new java.lang.Long[]{ 1L, 2L }, new java.lang.String[]{ ""hostName1"", ""hostName2"" });
    org.apache.ambari.server.agent.stomp.dto.TopologyComponent componentToDelete = createDummyTopologyComponent(""comp2"", new java.lang.Long[]{ 1L, 3L }, new java.lang.String[]{ ""hostName1"", ""hostName3"" });
    org.apache.ambari.server.agent.stomp.dto.TopologyComponent update = createDummyTopologyComponent(""comp2"", new java.lang.Long[]{ 1L }, new java.lang.String[]{ ""hostName1"" });
    org.apache.ambari.server.agent.stomp.dto.TopologyCluster topologyCluster = new org.apache.ambari.server.agent.stomp.dto.TopologyCluster(new java.util.HashSet() {
        {
            add(dummyComponent);
            add(componentToDelete);
        }
    }, new java.util.HashSet<>());
    org.apache.ambari.server.agent.stomp.dto.TopologyUpdateHandlingReport report = new org.apache.ambari.server.agent.stomp.dto.TopologyUpdateHandlingReport();
    topologyCluster.update(java.util.Collections.singleton(update), java.util.Collections.emptySet(), org.apache.ambari.server.events.UpdateEventType.DELETE, report);
    org.junit.Assert.assertEquals(1L, report.getUpdatedHostNames().size());
    org.junit.Assert.assertTrue(report.getUpdatedHostNames().contains(""hostName1""));
    org.junit.Assert.assertEquals(2L, topologyCluster.getTopologyComponents().size());
}","testHandlingReportComponentDeletePartially()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/TopologyClusterTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d"
"testHandlingReportComponentDeleteFully","TRUE","5","assertEquals
assertTrue","{
    org.apache.ambari.server.agent.stomp.dto.TopologyComponent dummyComponent = createDummyTopologyComponent(""comp1"", new java.lang.Long[]{ 1L, 2L }, new java.lang.String[]{ ""hostName1"", ""hostName2"" });
    org.apache.ambari.server.agent.stomp.dto.TopologyComponent componentToDelete = createDummyTopologyComponent(""comp2"", new java.lang.Long[]{ 1L, 3L }, new java.lang.String[]{ ""hostName1"", ""hostName3"" });
    org.apache.ambari.server.agent.stomp.dto.TopologyComponent update = createDummyTopologyComponent(""comp2"", new java.lang.Long[]{ 1L, 3L }, new java.lang.String[]{ ""hostName1"", ""hostName3"" });
    org.apache.ambari.server.agent.stomp.dto.TopologyCluster topologyCluster = new org.apache.ambari.server.agent.stomp.dto.TopologyCluster(new java.util.HashSet() {
        {
            add(dummyComponent);
            add(componentToDelete);
        }
    }, new java.util.HashSet<>());
    org.apache.ambari.server.agent.stomp.dto.TopologyUpdateHandlingReport report = new org.apache.ambari.server.agent.stomp.dto.TopologyUpdateHandlingReport();
    topologyCluster.update(java.util.Collections.singleton(update), java.util.Collections.emptySet(), org.apache.ambari.server.events.UpdateEventType.DELETE, report);
    org.junit.Assert.assertEquals(2L, report.getUpdatedHostNames().size());
    org.junit.Assert.assertTrue(report.getUpdatedHostNames().contains(""hostName1""));
    org.junit.Assert.assertTrue(report.getUpdatedHostNames().contains(""hostName3""));
    org.junit.Assert.assertEquals(1L, topologyCluster.getTopologyComponents().size());
}","testHandlingReportComponentDeleteFully()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/TopologyClusterTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d"
"testHandlingReportComponentUpdate","TRUE","4","assertEquals
assertTrue","{
    org.apache.ambari.server.agent.stomp.dto.TopologyComponent dummyComponent = createDummyTopologyComponent(""comp1"", new java.lang.Long[]{ 1L, 2L }, new java.lang.String[]{ ""hostName1"", ""hostName2"" });
    org.apache.ambari.server.agent.stomp.dto.TopologyComponent componentToUpdate = createDummyTopologyComponent(""comp2"", new java.lang.Long[]{ 1L, 3L }, new java.lang.String[]{ ""hostName1"", ""hostName3"" });
    org.apache.ambari.server.agent.stomp.dto.TopologyComponent update = createDummyTopologyComponent(""comp2"", new java.lang.Long[]{ 1L, 4L }, new java.lang.String[]{ ""hostName1"", ""hostName4"" });
    org.apache.ambari.server.agent.stomp.dto.TopologyCluster topologyCluster = new org.apache.ambari.server.agent.stomp.dto.TopologyCluster(new java.util.HashSet() {
        {
            add(dummyComponent);
            add(componentToUpdate);
        }
    }, new java.util.HashSet<>());
    org.apache.ambari.server.agent.stomp.dto.TopologyUpdateHandlingReport report = new org.apache.ambari.server.agent.stomp.dto.TopologyUpdateHandlingReport();
    topologyCluster.update(java.util.Collections.singleton(update), java.util.Collections.emptySet(), org.apache.ambari.server.events.UpdateEventType.UPDATE, report);
    org.junit.Assert.assertEquals(1L, report.getUpdatedHostNames().size());
    org.junit.Assert.assertTrue(report.getUpdatedHostNames().contains(""hostName4""));
    org.junit.Assert.assertEquals(2L, topologyCluster.getTopologyComponents().size());
}","testHandlingReportComponentUpdate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/TopologyClusterTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d"
"testAddingNewAlertDefWithoutChangingExisting","TRUE","2","assertHasAlerts","{
    org.apache.ambari.server.state.alert.AlertDefinition existing1 = anAlertDefinition(1L);
    org.apache.ambari.server.state.alert.AlertDefinition existing2 = anAlertDefinition(2L);
    alertCluster = newAlertCluster(existing1, existing2);
    org.apache.ambari.server.state.alert.AlertDefinition newDef = anAlertDefinition(3L);
    org.apache.ambari.server.agent.stomp.dto.AlertCluster result = update(alertCluster, newDef);
    assertHasAlerts(result, existing1, existing2, newDef);
}","testAddingNewAlertDefWithoutChangingExisting()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/AlertClusterTest.java","8d096706bb37dbd693501a68ce07fbe1373324f0"
"testChangingContentOfExistingAlertDef","TRUE","2","assertHasAlerts","{
    org.apache.ambari.server.state.alert.AlertDefinition existing1 = anAlertDefinition(1L);
    org.apache.ambari.server.state.alert.AlertDefinition existing2 = anAlertDefinition(2L);
    alertCluster = newAlertCluster(existing1, existing2);
    org.apache.ambari.server.state.alert.AlertDefinition changed = anAlertDefinition(2, org.apache.ambari.server.agent.stomp.dto.AlertClusterTest.CHANGED_INTERVAL);
    org.apache.ambari.server.agent.stomp.dto.AlertCluster result = update(alertCluster, changed);
    assertHasAlerts(result, existing1, changed);
}","testChangingContentOfExistingAlertDef()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/AlertClusterTest.java","8d096706bb37dbd693501a68ce07fbe1373324f0"
"testAddingNewAlertDefAndChangingExisting","TRUE","2","assertHasAlerts","{
    org.apache.ambari.server.state.alert.AlertDefinition existing1 = anAlertDefinition(1L);
    org.apache.ambari.server.state.alert.AlertDefinition existing2 = anAlertDefinition(2L);
    alertCluster = newAlertCluster(existing1, existing2);
    org.apache.ambari.server.state.alert.AlertDefinition newDef = anAlertDefinition(3L);
    org.apache.ambari.server.state.alert.AlertDefinition changed = anAlertDefinition(2, 999);
    org.apache.ambari.server.agent.stomp.dto.AlertCluster result = update(alertCluster, newDef, changed);
    assertHasAlerts(result, existing1, changed, newDef);
}","testAddingNewAlertDefAndChangingExisting()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/AlertClusterTest.java","8d096706bb37dbd693501a68ce07fbe1373324f0"
"testNoChange","TRUE","2","assertThat","{
    org.apache.ambari.server.state.alert.AlertDefinition existing = anAlertDefinition(1L);
    alertCluster = newAlertCluster(existing);
    org.apache.ambari.server.agent.stomp.dto.AlertCluster result = update(alertCluster, existing);
    org.junit.Assert.assertThat(result, org.hamcrest.core.Is.is(org.hamcrest.CoreMatchers.nullValue()));
}","testNoChange()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/AlertClusterTest.java","8d096706bb37dbd693501a68ce07fbe1373324f0"
"shouldReturnFalseWhenUpdatingServiceLevelParamsWithoutNewOrRemovedServices","TRUE","3","assertFalse
assertEquals","{
    final java.util.SortedMap<java.lang.String, org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo> current = new java.util.TreeMap<>();
    current.put(""service1"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    current.put(""service2"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    current.put(""service3"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    final org.apache.ambari.server.agent.stomp.dto.MetadataCluster metadataCluster = org.apache.ambari.server.agent.stomp.dto.MetadataCluster.serviceLevelParamsMetadataCluster(null, current, true);
    final java.util.SortedMap<java.lang.String, org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo> updated = new java.util.TreeMap<>(current);
    org.junit.Assert.assertFalse(metadataCluster.updateServiceLevelParams(updated, true));
    org.junit.Assert.assertEquals(current, metadataCluster.getServiceLevelParams());
}","shouldReturnFalseWhenUpdatingServiceLevelParamsWithoutNewOrRemovedServices()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/MetadataClusterTest.java","02da908795aa0ba3ee151352b4346911d1a5481e"
"shouldReturnTrueWhenUpdatingServiceLevelParamsUponServiceAddition","TRUE","3","assertTrue
assertEquals","{
    final java.util.SortedMap<java.lang.String, org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo> current = new java.util.TreeMap<>();
    current.put(""service1"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    current.put(""service2"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    final org.apache.ambari.server.agent.stomp.dto.MetadataCluster metadataCluster = org.apache.ambari.server.agent.stomp.dto.MetadataCluster.serviceLevelParamsMetadataCluster(null, current, true);
    final java.util.SortedMap<java.lang.String, org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo> updated = new java.util.TreeMap<>(current);
    updated.put(""service3"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    org.junit.Assert.assertTrue(metadataCluster.updateServiceLevelParams(updated, true));
    org.junit.Assert.assertEquals(updated, metadataCluster.getServiceLevelParams());
}","shouldReturnTrueWhenUpdatingServiceLevelParamsUponServiceAddition()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/MetadataClusterTest.java","02da908795aa0ba3ee151352b4346911d1a5481e"
"shouldReturnTrueWhenUpdatingServiceLevelParamsUponServiceRemoval","TRUE","3","assertTrue
assertEquals","{
    final java.util.SortedMap<java.lang.String, org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo> current = new java.util.TreeMap<>();
    current.put(""service1"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    current.put(""service2"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    current.put(""service3"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    final org.apache.ambari.server.agent.stomp.dto.MetadataCluster metadataCluster = org.apache.ambari.server.agent.stomp.dto.MetadataCluster.serviceLevelParamsMetadataCluster(null, current, true);
    final java.util.SortedMap<java.lang.String, org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo> updated = new java.util.TreeMap<>(current);
    updated.remove(""service2"");
    org.junit.Assert.assertTrue(metadataCluster.updateServiceLevelParams(updated, true));
    org.junit.Assert.assertEquals(updated, metadataCluster.getServiceLevelParams());
}","shouldReturnTrueWhenUpdatingServiceLevelParamsUponServiceRemoval()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/MetadataClusterTest.java","02da908795aa0ba3ee151352b4346911d1a5481e"
"shouldReturnFalseWhenNullServiceLevelParamsArePassedBecauseOfPartialConfigurationUpdate","TRUE","3","assertFalse
assertEquals","{
    final java.util.SortedMap<java.lang.String, org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo> current = new java.util.TreeMap<>();
    current.put(""service1"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    current.put(""service2"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    current.put(""service3"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    final org.apache.ambari.server.agent.stomp.dto.MetadataCluster metadataCluster = org.apache.ambari.server.agent.stomp.dto.MetadataCluster.serviceLevelParamsMetadataCluster(null, current, true);
    org.junit.Assert.assertFalse(metadataCluster.updateServiceLevelParams(null, true));
    org.junit.Assert.assertEquals(current, metadataCluster.getServiceLevelParams());
}","shouldReturnFalseWhenNullServiceLevelParamsArePassedBecauseOfPartialConfigurationUpdate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/MetadataClusterTest.java","02da908795aa0ba3ee151352b4346911d1a5481e"
"shouldReturnTrueWhenUpdatingServiceLevelParamsWithoutFullServiceLevelMetadata","TRUE","3","assertTrue
assertEquals","{
    final java.util.SortedMap<java.lang.String, org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo> current = new java.util.TreeMap<>();
    current.put(""service1"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    current.put(""service2"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    current.put(""service3"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    final org.apache.ambari.server.agent.stomp.dto.MetadataCluster metadataCluster = org.apache.ambari.server.agent.stomp.dto.MetadataCluster.serviceLevelParamsMetadataCluster(null, current, true);
    final java.util.SortedMap<java.lang.String, org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo> updated = new java.util.TreeMap<>();
    updated.put(""service3"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v2"", java.lang.Boolean.TRUE, null, 2L, ""servicePackageFolder2""));
    updated.put(""service4"", new org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo(""v1"", java.lang.Boolean.FALSE, null, 1L, ""servicePackageFolder""));
    org.junit.Assert.assertTrue(metadataCluster.updateServiceLevelParams(updated, false));
    final java.util.SortedMap<java.lang.String, org.apache.ambari.server.agent.stomp.dto.MetadataServiceInfo> expected = current;
    expected.putAll(updated);
    org.junit.Assert.assertEquals(expected, metadataCluster.getServiceLevelParams());
}","shouldReturnTrueWhenUpdatingServiceLevelParamsWithoutFullServiceLevelMetadata()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/MetadataClusterTest.java","02da908795aa0ba3ee151352b4346911d1a5481e"
"shouldReturnFalseWhenUpdatingClusterLevelParamsWithoutClusterLevelParameterAdditionOrRemoval","TRUE","3","assertFalse
assertEquals","{
    final java.util.SortedMap<java.lang.String, java.lang.String> current = new java.util.TreeMap<>();
    current.put(""param1"", ""value1"");
    current.put(""param2"", ""value2"");
    current.put(""param3"", ""value3"");
    final org.apache.ambari.server.agent.stomp.dto.MetadataCluster metadataCluster = org.apache.ambari.server.agent.stomp.dto.MetadataCluster.clusterLevelParamsMetadataCluster(null, current);
    final java.util.SortedMap<java.lang.String, java.lang.String> updated = new java.util.TreeMap<>(current);
    org.junit.Assert.assertFalse(metadataCluster.updateClusterLevelParams(updated));
    org.junit.Assert.assertEquals(current, metadataCluster.getClusterLevelParams());
}","shouldReturnFalseWhenUpdatingClusterLevelParamsWithoutClusterLevelParameterAdditionOrRemoval()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/MetadataClusterTest.java","02da908795aa0ba3ee151352b4346911d1a5481e"
"shouldReturnTrueWhenUpdatingClusterLevelParamsUponClusterLevelParameterAddition","TRUE","3","assertTrue
assertEquals","{
    final java.util.SortedMap<java.lang.String, java.lang.String> current = new java.util.TreeMap<>();
    current.put(""param1"", ""value1"");
    current.put(""param2"", ""value2"");
    final org.apache.ambari.server.agent.stomp.dto.MetadataCluster metadataCluster = org.apache.ambari.server.agent.stomp.dto.MetadataCluster.clusterLevelParamsMetadataCluster(null, current);
    final java.util.SortedMap<java.lang.String, java.lang.String> updated = new java.util.TreeMap<>(current);
    updated.put(""param3"", ""value3"");
    org.junit.Assert.assertTrue(metadataCluster.updateClusterLevelParams(updated));
    org.junit.Assert.assertEquals(updated, metadataCluster.getClusterLevelParams());
}","shouldReturnTrueWhenUpdatingClusterLevelParamsUponClusterLevelParameterAddition()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/MetadataClusterTest.java","02da908795aa0ba3ee151352b4346911d1a5481e"
"shouldReturnTrueWhenUpdatingClusterLevelParamsUponClusterLevelParameterRemoval","TRUE","3","assertTrue
assertEquals","{
    final java.util.SortedMap<java.lang.String, java.lang.String> current = new java.util.TreeMap<>();
    current.put(""param1"", ""value1"");
    current.put(""param2"", ""value2"");
    current.put(""param3"", ""value3"");
    final org.apache.ambari.server.agent.stomp.dto.MetadataCluster metadataCluster = org.apache.ambari.server.agent.stomp.dto.MetadataCluster.clusterLevelParamsMetadataCluster(null, current);
    final java.util.SortedMap<java.lang.String, java.lang.String> updated = new java.util.TreeMap<>(current);
    updated.remove(""param2"");
    org.junit.Assert.assertTrue(metadataCluster.updateClusterLevelParams(updated));
    org.junit.Assert.assertEquals(updated, metadataCluster.getClusterLevelParams());
}","shouldReturnTrueWhenUpdatingClusterLevelParamsUponClusterLevelParameterRemoval()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/MetadataClusterTest.java","02da908795aa0ba3ee151352b4346911d1a5481e"
"shouldReturnFalseWhenNullClusterLevelParamsArePassedBecauseOfPartialConfigurationUpdate","TRUE","3","assertFalse
assertEquals","{
    final java.util.SortedMap<java.lang.String, java.lang.String> current = new java.util.TreeMap<>();
    current.put(""param1"", ""value1"");
    current.put(""param2"", ""value2"");
    current.put(""param3"", ""value3"");
    final org.apache.ambari.server.agent.stomp.dto.MetadataCluster metadataCluster = org.apache.ambari.server.agent.stomp.dto.MetadataCluster.clusterLevelParamsMetadataCluster(null, current);
    org.junit.Assert.assertFalse(metadataCluster.updateClusterLevelParams(null));
    org.junit.Assert.assertEquals(current, metadataCluster.getClusterLevelParams());
}","shouldReturnFalseWhenNullClusterLevelParamsArePassedBecauseOfPartialConfigurationUpdate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/agent/stomp/dto/MetadataClusterTest.java","02da908795aa0ba3ee151352b4346911d1a5481e"
"testHealthyHostAlert","TRUE","8","assertEquals","{
    junit.framework.Assert.assertEquals(0, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    org.apache.ambari.server.alerts.AgentHeartbeatAlertRunnable runnable = new org.apache.ambari.server.alerts.AgentHeartbeatAlertRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    junit.framework.Assert.assertEquals(1, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    java.util.List<org.apache.ambari.server.events.AlertEvent> events = m_listener.getAlertEventInstances(org.apache.ambari.server.events.AlertReceivedEvent.class);
    junit.framework.Assert.assertEquals(1, events.size());
    org.apache.ambari.server.events.AlertReceivedEvent event = ((org.apache.ambari.server.events.AlertReceivedEvent) (events.get(0)));
    org.apache.ambari.server.state.Alert alert = event.getAlert();
    junit.framework.Assert.assertEquals(""AMBARI"", alert.getService());
    junit.framework.Assert.assertEquals(""AMBARI_SERVER"", alert.getComponent());
    junit.framework.Assert.assertEquals(org.apache.ambari.server.state.AlertState.OK, alert.getState());
    junit.framework.Assert.assertEquals(org.apache.ambari.server.alerts.AgentHeartbeatAlertRunnableTest.DEFINITION_NAME, alert.getName());
    EasyMock.verify(m_definition, m_host, m_cluster, m_clusters, m_definitionDao);
}","testHealthyHostAlert()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/AgentHeartbeatAlertRunnableTest.java","563d508f6eedf730e9d15183afb50790c4ffb52f
296484db88ec8cb8b4753f6e69e23db3975dfc1b
30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
c9a0d332e52d3abf3d8d1996187ae51c00978335
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
a48150ff2f678439054e9f86dd864ca02eff8d43
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe"
"testLostHeartbeatAlert","TRUE","8","assertEquals","{
    org.easymock.EasyMock.reset(m_host);
    EasyMock.expect(m_host.getState()).andReturn(org.apache.ambari.server.state.HostState.HEARTBEAT_LOST).atLeastOnce();
    EasyMock.replay(m_host);
    junit.framework.Assert.assertEquals(0, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    org.apache.ambari.server.alerts.AgentHeartbeatAlertRunnable runnable = new org.apache.ambari.server.alerts.AgentHeartbeatAlertRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    junit.framework.Assert.assertEquals(1, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    java.util.List<org.apache.ambari.server.events.AlertEvent> events = m_listener.getAlertEventInstances(org.apache.ambari.server.events.AlertReceivedEvent.class);
    junit.framework.Assert.assertEquals(1, events.size());
    org.apache.ambari.server.events.AlertReceivedEvent event = ((org.apache.ambari.server.events.AlertReceivedEvent) (events.get(0)));
    org.apache.ambari.server.state.Alert alert = event.getAlert();
    junit.framework.Assert.assertEquals(""AMBARI"", alert.getService());
    junit.framework.Assert.assertEquals(""AMBARI_SERVER"", alert.getComponent());
    junit.framework.Assert.assertEquals(org.apache.ambari.server.state.AlertState.CRITICAL, alert.getState());
    junit.framework.Assert.assertEquals(org.apache.ambari.server.alerts.AgentHeartbeatAlertRunnableTest.DEFINITION_NAME, alert.getName());
    EasyMock.verify(m_definition, m_host, m_cluster, m_clusters, m_definitionDao);
}","testLostHeartbeatAlert()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/AgentHeartbeatAlertRunnableTest.java","563d508f6eedf730e9d15183afb50790c4ffb52f
296484db88ec8cb8b4753f6e69e23db3975dfc1b
30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
c9a0d332e52d3abf3d8d1996187ae51c00978335
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
a48150ff2f678439054e9f86dd864ca02eff8d43
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe"
"testUnhealthyHostAlert","TRUE","8","assertEquals","{
    org.easymock.EasyMock.reset(m_host);
    EasyMock.expect(m_host.getState()).andReturn(org.apache.ambari.server.state.HostState.UNHEALTHY).atLeastOnce();
    EasyMock.replay(m_host);
    junit.framework.Assert.assertEquals(0, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    org.apache.ambari.server.alerts.AgentHeartbeatAlertRunnable runnable = new org.apache.ambari.server.alerts.AgentHeartbeatAlertRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    junit.framework.Assert.assertEquals(1, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    java.util.List<org.apache.ambari.server.events.AlertEvent> events = m_listener.getAlertEventInstances(org.apache.ambari.server.events.AlertReceivedEvent.class);
    junit.framework.Assert.assertEquals(1, events.size());
    org.apache.ambari.server.events.AlertReceivedEvent event = ((org.apache.ambari.server.events.AlertReceivedEvent) (events.get(0)));
    org.apache.ambari.server.state.Alert alert = event.getAlert();
    junit.framework.Assert.assertEquals(""AMBARI"", alert.getService());
    junit.framework.Assert.assertEquals(""AMBARI_SERVER"", alert.getComponent());
    junit.framework.Assert.assertEquals(org.apache.ambari.server.state.AlertState.CRITICAL, alert.getState());
    junit.framework.Assert.assertEquals(org.apache.ambari.server.alerts.AgentHeartbeatAlertRunnableTest.DEFINITION_NAME, alert.getName());
    EasyMock.verify(m_definition, m_host, m_cluster, m_clusters, m_definitionDao);
}","testUnhealthyHostAlert()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/AgentHeartbeatAlertRunnableTest.java","563d508f6eedf730e9d15183afb50790c4ffb52f
296484db88ec8cb8b4753f6e69e23db3975dfc1b
30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
c9a0d332e52d3abf3d8d1996187ae51c00978335
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
a48150ff2f678439054e9f86dd864ca02eff8d43
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe"
"testThresholdCalculations","TRUE","6","assertEquals","{
    org.apache.ambari.server.state.alert.AlertHelper alertHelper = new org.apache.ambari.server.state.alert.AlertHelper();
    org.junit.Assert.assertEquals(1, alertHelper.getThresholdValue(1, 2));
    org.junit.Assert.assertEquals(1, alertHelper.getThresholdValue(""1"", 2));
    org.junit.Assert.assertEquals(1, alertHelper.getThresholdValue(""1.00"", 2));
    org.junit.Assert.assertEquals(1, alertHelper.getThresholdValue(""foo"", 1));
    org.junit.Assert.assertEquals(1, alertHelper.getThresholdValue(new java.lang.Object(), 1));
}","testThresholdCalculations()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/AlertHelperTest.java","0907d6119f4e1a0f0ae1add6302cd2ad8fe4d149
82f192516fad8cc72dda2c5d2d92363ded8003ea
668e397993bfe08314b731dcd5affcca5d398d7f
6e6b4a1d74b46b501c9b071aae1f849502871b3f"
"testStaleAlertsOperations","TRUE","5","assertEquals
assertTrue","{
    org.apache.ambari.server.state.alert.AlertHelper alertHelper = new org.apache.ambari.server.state.alert.AlertHelper();
    alertHelper.addStaleAlerts(1L, new java.util.ArrayList<org.apache.ambari.server.agent.StaleAlert>() {
        {
            add(new org.apache.ambari.server.agent.StaleAlert(1L, 111L));
            add(new org.apache.ambari.server.agent.StaleAlert(2L, 111L));
            add(new org.apache.ambari.server.agent.StaleAlert(3L, 111L));
            add(new org.apache.ambari.server.agent.StaleAlert(4L, 111L));
        }
    });
    org.junit.Assert.assertEquals(4, alertHelper.getStaleAlerts(1L).size());
    alertHelper.addStaleAlerts(2L, new java.util.ArrayList<org.apache.ambari.server.agent.StaleAlert>() {
        {
            add(new org.apache.ambari.server.agent.StaleAlert(1L, 111L));
            add(new org.apache.ambari.server.agent.StaleAlert(2L, 111L));
        }
    });
    java.util.List<java.lang.Long> hostIds = alertHelper.getHostIdsByDefinitionId(1L);
    org.junit.Assert.assertEquals(2, hostIds.size());
    org.junit.Assert.assertTrue(hostIds.contains(1L));
    org.junit.Assert.assertTrue(hostIds.contains(2L));
}","testStaleAlertsOperations()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/AlertHelperTest.java","0907d6119f4e1a0f0ae1add6302cd2ad8fe4d149
82f192516fad8cc72dda2c5d2d92363ded8003ea
668e397993bfe08314b731dcd5affcca5d398d7f
6e6b4a1d74b46b501c9b071aae1f849502871b3f"
"testAlertFiresOKEvent","TRUE","7","assertEquals","{
    org.powermock.api.easymock.PowerMock.mockStatic(org.apache.ambari.server.alerts.AmbariPerformanceRunnable.PerformanceArea.class);
    EasyMock.expect(org.apache.ambari.server.alerts.AmbariPerformanceRunnable.PerformanceArea.values()).andReturn(new org.apache.ambari.server.alerts.AmbariPerformanceRunnable.PerformanceArea[0]);
    org.powermock.api.easymock.PowerMock.replay(org.apache.ambari.server.alerts.AmbariPerformanceRunnable.PerformanceArea.class);
    org.apache.ambari.server.alerts.AmbariPerformanceRunnable runnable = new org.apache.ambari.server.alerts.AmbariPerformanceRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    org.junit.Assert.assertEquals(1, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    java.util.List<org.apache.ambari.server.events.AlertEvent> events = m_listener.getAlertEventInstances(org.apache.ambari.server.events.AlertReceivedEvent.class);
    org.junit.Assert.assertEquals(1, events.size());
    org.apache.ambari.server.events.AlertReceivedEvent event = ((org.apache.ambari.server.events.AlertReceivedEvent) (events.get(0)));
    org.apache.ambari.server.state.Alert alert = event.getAlert();
    org.junit.Assert.assertEquals(""AMBARI"", alert.getService());
    org.junit.Assert.assertEquals(""AMBARI_SERVER"", alert.getComponent());
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.AlertState.OK, alert.getState());
    org.junit.Assert.assertEquals(org.apache.ambari.server.alerts.AmbariPerformanceRunnableTest.DEFINITION_NAME, alert.getName());
    EasyMock.verify(m_cluster, m_clusters, m_definitionDao);
}","testAlertFiresOKEvent()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/AmbariPerformanceRunnableTest.java","296484db88ec8cb8b4753f6e69e23db3975dfc1b
6e6b4a1d74b46b501c9b071aae1f849502871b3f
30b6f5b61400efda3bff9a64b06ba57938433df3
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
ddc656714914c34597eb4791920dd68f1430b242
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
a48150ff2f678439054e9f86dd864ca02eff8d43
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe"
"testAlertFiresUnknownEvent","TRUE","8","assertEquals
assertTrue","{
    org.apache.ambari.server.orm.dao.RequestDAO requestDAO = m_injector.getInstance(org.apache.ambari.server.orm.dao.RequestDAO.class);
    EasyMock.expect(requestDAO.findAllRequestIds(org.easymock.EasyMock.anyInt(), org.easymock.EasyMock.anyBoolean())).andReturn(new java.util.ArrayList<>());
    EasyMock.replay(requestDAO);
    org.apache.ambari.server.alerts.AmbariPerformanceRunnable runnable = new org.apache.ambari.server.alerts.AmbariPerformanceRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    org.junit.Assert.assertEquals(1, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    java.util.List<org.apache.ambari.server.events.AlertEvent> events = m_listener.getAlertEventInstances(org.apache.ambari.server.events.AlertReceivedEvent.class);
    org.junit.Assert.assertEquals(1, events.size());
    org.apache.ambari.server.events.AlertReceivedEvent event = ((org.apache.ambari.server.events.AlertReceivedEvent) (events.get(0)));
    org.apache.ambari.server.state.Alert alert = event.getAlert();
    org.junit.Assert.assertEquals(""AMBARI"", alert.getService());
    org.junit.Assert.assertEquals(""AMBARI_SERVER"", alert.getComponent());
    org.junit.Assert.assertEquals(org.apache.ambari.server.state.AlertState.UNKNOWN, alert.getState());
    org.junit.Assert.assertEquals(org.apache.ambari.server.alerts.AmbariPerformanceRunnableTest.DEFINITION_NAME, alert.getName());
    org.junit.Assert.assertTrue(alert.getText().contains(""(OK)""));
    EasyMock.verify(m_cluster, m_clusters, m_definitionDao);
}","testAlertFiresUnknownEvent()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/AmbariPerformanceRunnableTest.java","296484db88ec8cb8b4753f6e69e23db3975dfc1b
6e6b4a1d74b46b501c9b071aae1f849502871b3f
30b6f5b61400efda3bff9a64b06ba57938433df3
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
0fc7a6671feb10dc0e8475dc4878942cf19f46cc
ddc656714914c34597eb4791920dd68f1430b242
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
a48150ff2f678439054e9f86dd864ca02eff8d43
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe"
"testUpgradeInProgress","TRUE","8","assertEquals","{
    org.apache.ambari.server.orm.entities.UpgradeEntity upgrade = createNiceMock(org.apache.ambari.server.orm.entities.UpgradeEntity.class);
    EasyMock.expect(upgrade.getDirection()).andReturn(org.apache.ambari.server.stack.upgrade.Direction.UPGRADE).atLeastOnce();
    EasyMock.expect(m_cluster.getUpgradeInProgress()).andReturn(upgrade).once();
    replayAll();
    m_metaInfo.init();
    junit.framework.Assert.assertEquals(0, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    org.apache.ambari.server.alerts.ComponentVersionAlertRunnable runnable = new org.apache.ambari.server.alerts.ComponentVersionAlertRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    junit.framework.Assert.assertEquals(1, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    java.util.List<org.apache.ambari.server.events.AlertEvent> events = m_listener.getAlertEventInstances(org.apache.ambari.server.events.AlertReceivedEvent.class);
    junit.framework.Assert.assertEquals(1, events.size());
    org.apache.ambari.server.events.AlertReceivedEvent event = ((org.apache.ambari.server.events.AlertReceivedEvent) (events.get(0)));
    org.apache.ambari.server.state.Alert alert = event.getAlert();
    junit.framework.Assert.assertEquals(""AMBARI"", alert.getService());
    junit.framework.Assert.assertEquals(""AMBARI_SERVER"", alert.getComponent());
    junit.framework.Assert.assertEquals(org.apache.ambari.server.state.AlertState.SKIPPED, alert.getState());
    junit.framework.Assert.assertEquals(org.apache.ambari.server.alerts.ComponentVersionAlertRunnableTest.DEFINITION_NAME, alert.getName());
}","testUpgradeInProgress()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/ComponentVersionAlertRunnableTest.java","296484db88ec8cb8b4753f6e69e23db3975dfc1b
b145740dced09143d6cbeae5c52a8ec99a30f234
30b6f5b61400efda3bff9a64b06ba57938433df3
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
522039ebd3f259c2a54db5102108209b94d5d004
f65692a32d95e200624fa9d7dfb9ee7a1b00cb29
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da"
"testAllComponentVersionsCorrect","TRUE","8","assertEquals","{
    replayAll();
    m_metaInfo.init();
    junit.framework.Assert.assertEquals(0, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    org.apache.ambari.server.alerts.ComponentVersionAlertRunnable runnable = new org.apache.ambari.server.alerts.ComponentVersionAlertRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    junit.framework.Assert.assertEquals(1, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    java.util.List<org.apache.ambari.server.events.AlertEvent> events = m_listener.getAlertEventInstances(org.apache.ambari.server.events.AlertReceivedEvent.class);
    junit.framework.Assert.assertEquals(1, events.size());
    org.apache.ambari.server.events.AlertReceivedEvent event = ((org.apache.ambari.server.events.AlertReceivedEvent) (events.get(0)));
    org.apache.ambari.server.state.Alert alert = event.getAlert();
    junit.framework.Assert.assertEquals(""AMBARI"", alert.getService());
    junit.framework.Assert.assertEquals(""AMBARI_SERVER"", alert.getComponent());
    junit.framework.Assert.assertEquals(org.apache.ambari.server.state.AlertState.OK, alert.getState());
    junit.framework.Assert.assertEquals(org.apache.ambari.server.alerts.ComponentVersionAlertRunnableTest.DEFINITION_NAME, alert.getName());
    verifyAll();
}","testAllComponentVersionsCorrect()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/ComponentVersionAlertRunnableTest.java","296484db88ec8cb8b4753f6e69e23db3975dfc1b
b145740dced09143d6cbeae5c52a8ec99a30f234
30b6f5b61400efda3bff9a64b06ba57938433df3
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
522039ebd3f259c2a54db5102108209b94d5d004
f65692a32d95e200624fa9d7dfb9ee7a1b00cb29
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da"
"testomponentVersionMismatch","TRUE","8","assertEquals","{
    org.apache.ambari.server.state.ServiceComponentHost sch = m_hostComponentMap.get(org.apache.ambari.server.alerts.ComponentVersionAlertRunnableTest.HOSTNAME_1).get(0);
    org.easymock.EasyMock.reset(sch);
    EasyMock.expect(sch.getServiceName()).andReturn(""FOO"").atLeastOnce();
    EasyMock.expect(sch.getServiceComponentName()).andReturn(""FOO_COMPONENT"").atLeastOnce();
    EasyMock.expect(sch.getVersion()).andReturn(org.apache.ambari.server.alerts.ComponentVersionAlertRunnableTest.WRONG_VERSION).atLeastOnce();
    replayAll();
    m_metaInfo.init();
    junit.framework.Assert.assertEquals(0, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    org.apache.ambari.server.alerts.ComponentVersionAlertRunnable runnable = new org.apache.ambari.server.alerts.ComponentVersionAlertRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    junit.framework.Assert.assertEquals(1, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    java.util.List<org.apache.ambari.server.events.AlertEvent> events = m_listener.getAlertEventInstances(org.apache.ambari.server.events.AlertReceivedEvent.class);
    junit.framework.Assert.assertEquals(1, events.size());
    org.apache.ambari.server.events.AlertReceivedEvent event = ((org.apache.ambari.server.events.AlertReceivedEvent) (events.get(0)));
    org.apache.ambari.server.state.Alert alert = event.getAlert();
    junit.framework.Assert.assertEquals(""AMBARI"", alert.getService());
    junit.framework.Assert.assertEquals(""AMBARI_SERVER"", alert.getComponent());
    junit.framework.Assert.assertEquals(org.apache.ambari.server.state.AlertState.WARNING, alert.getState());
    junit.framework.Assert.assertEquals(org.apache.ambari.server.alerts.ComponentVersionAlertRunnableTest.DEFINITION_NAME, alert.getName());
    verifyAll();
}","testomponentVersionMismatch()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/ComponentVersionAlertRunnableTest.java","296484db88ec8cb8b4753f6e69e23db3975dfc1b
b145740dced09143d6cbeae5c52a8ec99a30f234
30b6f5b61400efda3bff9a64b06ba57938433df3
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
522039ebd3f259c2a54db5102108209b94d5d004
f65692a32d95e200624fa9d7dfb9ee7a1b00cb29
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da"
"testPrepareHostDefinitions","TRUE","16","assertEquals
assertNotNull
assertTrue","{
    org.apache.ambari.server.alerts.StaleAlertRunnable runnable = new org.apache.ambari.server.alerts.StaleAlertRunnable(m_definition.getDefinitionName());
    org.apache.ambari.server.agent.stomp.AlertDefinitionsHolder alertDefinitionHolder = m_injector.getInstance(org.apache.ambari.server.agent.stomp.AlertDefinitionsHolder.class);
    java.lang.Long alertDefinitionId1 = 1L;
    java.lang.Long alertDefinitionId2 = 2L;
    java.lang.Long alertDefinitionId3 = 3L;
    java.lang.Long alertDefinitionId4 = 4L;
    java.lang.Long hostId1 = 1L;
    java.lang.Long hostId2 = 2L;
    org.apache.ambari.server.state.alert.AlertDefinition alertDefinition1 = new org.apache.ambari.server.state.alert.AlertDefinition();
    alertDefinition1.setDefinitionId(alertDefinitionId1);
    org.apache.ambari.server.state.alert.AlertDefinition alertDefinition2 = new org.apache.ambari.server.state.alert.AlertDefinition();
    alertDefinition2.setDefinitionId(alertDefinitionId2);
    org.apache.ambari.server.state.alert.AlertDefinition alertDefinition3 = new org.apache.ambari.server.state.alert.AlertDefinition();
    alertDefinition3.setDefinitionId(alertDefinitionId3);
    org.apache.ambari.server.state.alert.AlertDefinition alertDefinition4 = new org.apache.ambari.server.state.alert.AlertDefinition();
    alertDefinition4.setDefinitionId(alertDefinitionId4);
    org.apache.ambari.server.agent.stomp.dto.AlertCluster alertCluster1host1 = new org.apache.ambari.server.agent.stomp.dto.AlertCluster(java.util.Collections.singletonMap(alertDefinitionId1, alertDefinition1), ""host1"");
    org.apache.ambari.server.agent.stomp.dto.AlertCluster alertCluster2host1 = new org.apache.ambari.server.agent.stomp.dto.AlertCluster(java.util.Collections.singletonMap(alertDefinitionId2, alertDefinition2), ""host1"");
    org.apache.ambari.server.agent.stomp.dto.AlertCluster alertCluster1host2 = new org.apache.ambari.server.agent.stomp.dto.AlertCluster(new java.util.HashMap() {
        {
            put(alertDefinitionId3, alertDefinition3);
            put(alertDefinitionId1, alertDefinition1);
        }
    }, ""host2"");
    org.apache.ambari.server.agent.stomp.dto.AlertCluster alertCluster2host2 = new org.apache.ambari.server.agent.stomp.dto.AlertCluster(java.util.Collections.singletonMap(alertDefinitionId4, alertDefinition4), ""host2"");
    org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent hostUpdate1 = new org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent(org.apache.ambari.server.events.AlertDefinitionEventType.CREATE, new java.util.HashMap() {
        {
            put(1L, alertCluster1host1);
            put(2L, alertCluster2host1);
        }
    }, ""host1"", hostId1);
    org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent hostUpdate2 = new org.apache.ambari.server.events.AlertDefinitionsAgentUpdateEvent(org.apache.ambari.server.events.AlertDefinitionEventType.CREATE, new java.util.HashMap() {
        {
            put(1L, alertCluster1host2);
            put(2L, alertCluster2host2);
        }
    }, ""host2"", hostId2);
    alertDefinitionHolder.setData(hostUpdate1, 1L);
    alertDefinitionHolder.setData(hostUpdate2, 2L);
    m_injector.injectMembers(runnable);
    java.util.Map<java.lang.Long, java.util.List<java.lang.Long>> alertDefinitionsToHost = runnable.prepareHostDefinitions(hostId1);
    junit.framework.Assert.assertEquals(2, alertDefinitionsToHost.size());
    junit.framework.Assert.assertNotNull(alertDefinitionsToHost.get(alertDefinitionId1));
    junit.framework.Assert.assertEquals(2, alertDefinitionsToHost.get(alertDefinitionId1).size());
    junit.framework.Assert.assertTrue(alertDefinitionsToHost.get(alertDefinitionId1).contains(hostId1));
    junit.framework.Assert.assertTrue(alertDefinitionsToHost.get(alertDefinitionId1).contains(hostId2));
    junit.framework.Assert.assertNotNull(alertDefinitionsToHost.get(alertDefinitionId3));
    junit.framework.Assert.assertEquals(1, alertDefinitionsToHost.get(alertDefinitionId3).size());
    junit.framework.Assert.assertEquals(java.lang.Long.valueOf(hostId2), alertDefinitionsToHost.get(alertDefinitionId3).get(0));
    alertDefinitionsToHost = runnable.prepareHostDefinitions(hostId2);
    junit.framework.Assert.assertEquals(2, alertDefinitionsToHost.size());
    junit.framework.Assert.assertNotNull(alertDefinitionsToHost.get(alertDefinitionId2));
    junit.framework.Assert.assertEquals(1, alertDefinitionsToHost.get(alertDefinitionId2).size());
    junit.framework.Assert.assertEquals(java.lang.Long.valueOf(hostId1), alertDefinitionsToHost.get(alertDefinitionId2).get(0));
    junit.framework.Assert.assertNotNull(alertDefinitionsToHost.get(alertDefinitionId4));
    junit.framework.Assert.assertEquals(1, alertDefinitionsToHost.get(alertDefinitionId4).size());
    junit.framework.Assert.assertEquals(java.lang.Long.valueOf(hostId2), alertDefinitionsToHost.get(alertDefinitionId4).get(0));
}","testPrepareHostDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/StaleAlertRunnableTest.java","296484db88ec8cb8b4753f6e69e23db3975dfc1b
6e6b4a1d74b46b501c9b071aae1f849502871b3f
30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
4aa1639b4892b0faeedb4b9df4c6c7ac2b20d299
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
a48150ff2f678439054e9f86dd864ca02eff8d43
bdf5effbe899c93b7da408417474f1c8cdbb4b2b
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe"
"testAllAlertsAreCurrent","TRUE","2","assertEquals","{
    org.apache.ambari.server.orm.entities.AlertDefinitionEntity definition = new org.apache.ambari.server.orm.entities.AlertDefinitionEntity();
    definition.setClusterId(org.apache.ambari.server.alerts.StaleAlertRunnableTest.CLUSTER_ID);
    definition.setDefinitionName(""foo-definition"");
    definition.setServiceName(""HDFS"");
    definition.setComponentName(""NAMENODE"");
    definition.setEnabled(true);
    definition.setScheduleInterval(1);
    org.apache.ambari.server.orm.entities.AlertCurrentEntity current1 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertCurrentEntity.class);
    org.apache.ambari.server.orm.entities.AlertHistoryEntity history1 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertHistoryEntity.class);
    EasyMock.expect(current1.getAlertHistory()).andReturn(history1).atLeastOnce();
    EasyMock.expect(current1.getDefinitionId()).andReturn(1L).atLeastOnce();
    EasyMock.expect(history1.getAlertDefinition()).andReturn(definition).atLeastOnce();
    EasyMock.expect(current1.getMaintenanceState()).andReturn(org.apache.ambari.server.state.MaintenanceState.OFF).atLeastOnce();
    EasyMock.expect(current1.getLatestTimestamp()).andReturn(java.lang.System.currentTimeMillis()).atLeastOnce();
    EasyMock.replay(current1, history1);
    m_currentAlerts.add(current1);
    junit.framework.Assert.assertEquals(0, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    org.apache.ambari.server.alerts.StaleAlertRunnable runnable = new org.apache.ambari.server.alerts.StaleAlertRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    checkSingleEventToState(org.apache.ambari.server.state.AlertState.OK);
    EasyMock.verify(m_cluster, m_clusters, m_definitionDao, m_alertHelper);
}","testAllAlertsAreCurrent()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/StaleAlertRunnableTest.java","296484db88ec8cb8b4753f6e69e23db3975dfc1b
6e6b4a1d74b46b501c9b071aae1f849502871b3f
30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
4aa1639b4892b0faeedb4b9df4c6c7ac2b20d299
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
a48150ff2f678439054e9f86dd864ca02eff8d43
bdf5effbe899c93b7da408417474f1c8cdbb4b2b
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe"
"testAmbariStaleAlert","TRUE","2","assertEquals","{
    org.apache.ambari.server.orm.entities.AlertDefinitionEntity definition = new org.apache.ambari.server.orm.entities.AlertDefinitionEntity();
    definition.setClusterId(org.apache.ambari.server.alerts.StaleAlertRunnableTest.CLUSTER_ID);
    definition.setDefinitionName(""foo-definition"");
    definition.setServiceName(""HDFS"");
    definition.setComponentName(""NAMENODE"");
    definition.setEnabled(true);
    definition.setScheduleInterval(1);
    org.apache.ambari.server.orm.entities.AlertCurrentEntity current1 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertCurrentEntity.class);
    org.apache.ambari.server.orm.entities.AlertHistoryEntity history1 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertHistoryEntity.class);
    EasyMock.expect(current1.getAlertHistory()).andReturn(history1).atLeastOnce();
    EasyMock.expect(current1.getDefinitionId()).andReturn(1L).atLeastOnce();
    EasyMock.expect(history1.getAlertDefinition()).andReturn(definition).atLeastOnce();
    EasyMock.expect(current1.getMaintenanceState()).andReturn(org.apache.ambari.server.state.MaintenanceState.OFF).atLeastOnce();
    EasyMock.expect(current1.getLatestTimestamp()).andReturn(1L).atLeastOnce();
    EasyMock.replay(current1, history1);
    m_currentAlerts.add(current1);
    junit.framework.Assert.assertEquals(0, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    org.apache.ambari.server.alerts.StaleAlertRunnable runnable = new org.apache.ambari.server.alerts.StaleAlertRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    checkSingleEventToState(org.apache.ambari.server.state.AlertState.CRITICAL);
    EasyMock.verify(m_cluster, m_clusters, m_definitionDao, m_alertHelper);
}","testAmbariStaleAlert()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/StaleAlertRunnableTest.java","296484db88ec8cb8b4753f6e69e23db3975dfc1b
6e6b4a1d74b46b501c9b071aae1f849502871b3f
30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
4aa1639b4892b0faeedb4b9df4c6c7ac2b20d299
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
a48150ff2f678439054e9f86dd864ca02eff8d43
bdf5effbe899c93b7da408417474f1c8cdbb4b2b
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe"
"testStaleAlertFromAgent","TRUE","2","assertEquals","{
    java.lang.Long alertDefinitionId = 1L;
    org.apache.ambari.server.orm.entities.AlertDefinitionEntity definition = new org.apache.ambari.server.orm.entities.AlertDefinitionEntity();
    definition.setClusterId(org.apache.ambari.server.alerts.StaleAlertRunnableTest.CLUSTER_ID);
    definition.setDefinitionName(""foo-definition"");
    definition.setServiceName(""HDFS"");
    definition.setComponentName(""NAMENODE"");
    definition.setEnabled(true);
    definition.setScheduleInterval(1);
    org.apache.ambari.server.orm.entities.AlertCurrentEntity current1 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertCurrentEntity.class);
    org.apache.ambari.server.orm.entities.AlertHistoryEntity history1 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertHistoryEntity.class);
    EasyMock.expect(current1.getAlertHistory()).andReturn(history1).atLeastOnce();
    EasyMock.expect(current1.getDefinitionId()).andReturn(alertDefinitionId).atLeastOnce();
    EasyMock.expect(history1.getAlertDefinition()).andReturn(definition).atLeastOnce();
    EasyMock.expect(history1.getHostName()).andReturn(""host1"").atLeastOnce();
    EasyMock.reset(m_alertHelper);
    EasyMock.expect(m_alertHelper.getWaitFactorMultiplier(EasyMock.anyObject(org.apache.ambari.server.state.alert.AlertDefinition.class))).andReturn(2).anyTimes();
    EasyMock.expect(m_alertHelper.getStaleAlerts(EasyMock.anyLong())).andReturn(java.util.Collections.singletonMap(alertDefinitionId, 0L)).atLeastOnce();
    EasyMock.expect(current1.getMaintenanceState()).andReturn(org.apache.ambari.server.state.MaintenanceState.OFF).atLeastOnce();
    EasyMock.expect(current1.getLatestTimestamp()).andReturn(java.lang.System.currentTimeMillis()).atLeastOnce();
    EasyMock.replay(current1, history1, m_alertHelper);
    m_currentAlerts.add(current1);
    junit.framework.Assert.assertEquals(0, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    org.apache.ambari.server.alerts.StaleAlertRunnable runnable = new org.apache.ambari.server.alerts.StaleAlertRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    checkSingleEventToState(org.apache.ambari.server.state.AlertState.CRITICAL);
    EasyMock.verify(m_cluster, m_clusters, m_definitionDao, m_alertHelper);
}","testStaleAlertFromAgent()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/StaleAlertRunnableTest.java","296484db88ec8cb8b4753f6e69e23db3975dfc1b
6e6b4a1d74b46b501c9b071aae1f849502871b3f
30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
4aa1639b4892b0faeedb4b9df4c6c7ac2b20d299
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
a48150ff2f678439054e9f86dd864ca02eff8d43
bdf5effbe899c93b7da408417474f1c8cdbb4b2b
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe"
"testStaleAlertHeartbeatLost","TRUE","2","assertEquals","{
    java.lang.Long alertDefinitionId = 1L;
    org.apache.ambari.server.orm.entities.AlertDefinitionEntity definition = new org.apache.ambari.server.orm.entities.AlertDefinitionEntity();
    definition.setClusterId(org.apache.ambari.server.alerts.StaleAlertRunnableTest.CLUSTER_ID);
    definition.setDefinitionName(""foo-definition"");
    definition.setServiceName(""HDFS"");
    definition.setComponentName(""NAMENODE"");
    definition.setEnabled(true);
    definition.setScheduleInterval(1);
    org.apache.ambari.server.orm.entities.AlertCurrentEntity current1 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertCurrentEntity.class);
    org.apache.ambari.server.orm.entities.AlertHistoryEntity history1 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertHistoryEntity.class);
    EasyMock.expect(current1.getAlertHistory()).andReturn(history1).atLeastOnce();
    EasyMock.expect(current1.getDefinitionId()).andReturn(alertDefinitionId).atLeastOnce();
    EasyMock.expect(history1.getAlertDefinition()).andReturn(definition).atLeastOnce();
    EasyMock.expect(history1.getHostName()).andReturn(""host1"").atLeastOnce();
    EasyMock.expect(current1.getMaintenanceState()).andReturn(org.apache.ambari.server.state.MaintenanceState.OFF).atLeastOnce();
    EasyMock.expect(current1.getLatestTimestamp()).andReturn(java.lang.System.currentTimeMillis()).atLeastOnce();
    EasyMock.reset(m_cluster, m_host);
    m_host = EasyMock.createNiceMock(org.apache.ambari.server.state.Host.class);
    EasyMock.expect(m_host.getHostId()).andReturn(1L);
    EasyMock.expect(m_host.getState()).andReturn(org.apache.ambari.server.state.HostState.HEARTBEAT_LOST);
    EasyMock.expect(m_cluster.getClusterId()).andReturn(org.apache.ambari.server.alerts.StaleAlertRunnableTest.CLUSTER_ID).atLeastOnce();
    EasyMock.expect(m_cluster.getHost(EasyMock.anyString())).andReturn(m_host).anyTimes();
    EasyMock.replay(current1, history1, m_host, m_cluster);
    m_currentAlerts.add(current1);
    junit.framework.Assert.assertEquals(0, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    org.apache.ambari.server.alerts.StaleAlertRunnable runnable = new org.apache.ambari.server.alerts.StaleAlertRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    checkSingleEventToState(org.apache.ambari.server.state.AlertState.CRITICAL);
    EasyMock.verify(m_cluster, m_clusters, m_definitionDao, m_alertHelper);
}","testStaleAlertHeartbeatLost()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/StaleAlertRunnableTest.java","296484db88ec8cb8b4753f6e69e23db3975dfc1b
6e6b4a1d74b46b501c9b071aae1f849502871b3f
30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
4aa1639b4892b0faeedb4b9df4c6c7ac2b20d299
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
a48150ff2f678439054e9f86dd864ca02eff8d43
bdf5effbe899c93b7da408417474f1c8cdbb4b2b
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe"
"testStaleAlertWithHostIgnore","TRUE","2","assertEquals","{
    java.lang.Long alertDefinitionId = 1L;
    prepareAlertHolderWithHostAlert(alertDefinitionId);
    org.apache.ambari.server.orm.entities.AlertDefinitionEntity definition = new org.apache.ambari.server.orm.entities.AlertDefinitionEntity();
    definition.setClusterId(org.apache.ambari.server.alerts.StaleAlertRunnableTest.CLUSTER_ID);
    definition.setDefinitionName(""foo-definition"");
    definition.setServiceName(""HDFS"");
    definition.setComponentName(""NAMENODE"");
    definition.setEnabled(true);
    definition.setScheduleInterval(1);
    org.apache.ambari.server.orm.entities.AlertCurrentEntity current1 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertCurrentEntity.class);
    org.apache.ambari.server.orm.entities.AlertHistoryEntity history1 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertHistoryEntity.class);
    EasyMock.expect(current1.getAlertHistory()).andReturn(history1).atLeastOnce();
    EasyMock.expect(current1.getDefinitionId()).andReturn(alertDefinitionId).atLeastOnce();
    EasyMock.expect(history1.getAlertDefinition()).andReturn(definition).atLeastOnce();
    EasyMock.expect(current1.getMaintenanceState()).andReturn(org.apache.ambari.server.state.MaintenanceState.OFF).atLeastOnce();
    EasyMock.expect(current1.getLatestTimestamp()).andReturn(java.lang.System.currentTimeMillis()).atLeastOnce();
    EasyMock.reset(m_cluster);
    org.apache.ambari.server.state.Host host1 = EasyMock.createNiceMock(org.apache.ambari.server.state.Host.class);
    org.apache.ambari.server.state.Host host2 = EasyMock.createNiceMock(org.apache.ambari.server.state.Host.class);
    EasyMock.expect(host1.getHostId()).andReturn(1L);
    EasyMock.expect(host1.getState()).andReturn(org.apache.ambari.server.state.HostState.HEARTBEAT_LOST).atLeastOnce();
    EasyMock.expect(host1.getLastHeartbeatTime()).andReturn(1L);
    EasyMock.expect(host2.getHostId()).andReturn(2L);
    EasyMock.expect(host2.getState()).andReturn(org.apache.ambari.server.state.HostState.HEALTHY).atLeastOnce();
    EasyMock.expect(host2.getLastHeartbeatTime()).andReturn(2L);
    EasyMock.expect(m_cluster.getClusterId()).andReturn(org.apache.ambari.server.alerts.StaleAlertRunnableTest.CLUSTER_ID).atLeastOnce();
    EasyMock.expect(m_cluster.getHost(EasyMock.eq(1L))).andReturn(host1).anyTimes();
    EasyMock.expect(m_cluster.getHost(EasyMock.eq(2L))).andReturn(host2).anyTimes();
    EasyMock.replay(current1, history1, host1, host2, m_cluster);
    m_currentAlerts.add(current1);
    junit.framework.Assert.assertEquals(0, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    org.apache.ambari.server.alerts.StaleAlertRunnable runnable = new org.apache.ambari.server.alerts.StaleAlertRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    checkSingleEventToState(org.apache.ambari.server.state.AlertState.OK);
    EasyMock.verify(m_cluster, m_clusters, m_definitionDao, m_alertHelper);
}","testStaleAlertWithHostIgnore()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/StaleAlertRunnableTest.java","296484db88ec8cb8b4753f6e69e23db3975dfc1b
6e6b4a1d74b46b501c9b071aae1f849502871b3f
30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
4aa1639b4892b0faeedb4b9df4c6c7ac2b20d299
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
a48150ff2f678439054e9f86dd864ca02eff8d43
bdf5effbe899c93b7da408417474f1c8cdbb4b2b
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe"
"testStaleAlertWithHostIgnoreCritical","TRUE","2","assertEquals","{
    java.lang.Long alertDefinitionId = 1L;
    prepareAlertHolderWithHostAlert(alertDefinitionId);
    org.apache.ambari.server.orm.entities.AlertDefinitionEntity definition = new org.apache.ambari.server.orm.entities.AlertDefinitionEntity();
    definition.setClusterId(org.apache.ambari.server.alerts.StaleAlertRunnableTest.CLUSTER_ID);
    definition.setDefinitionName(""foo-definition"");
    definition.setServiceName(""HDFS"");
    definition.setComponentName(""NAMENODE"");
    definition.setEnabled(true);
    definition.setScheduleInterval(1);
    org.apache.ambari.server.orm.entities.AlertCurrentEntity current1 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertCurrentEntity.class);
    org.apache.ambari.server.orm.entities.AlertHistoryEntity history1 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertHistoryEntity.class);
    EasyMock.expect(current1.getAlertHistory()).andReturn(history1).atLeastOnce();
    EasyMock.expect(current1.getDefinitionId()).andReturn(alertDefinitionId).atLeastOnce();
    EasyMock.expect(history1.getAlertDefinition()).andReturn(definition).atLeastOnce();
    EasyMock.expect(current1.getMaintenanceState()).andReturn(org.apache.ambari.server.state.MaintenanceState.OFF).atLeastOnce();
    EasyMock.expect(current1.getLatestTimestamp()).andReturn(java.lang.System.currentTimeMillis()).atLeastOnce();
    EasyMock.reset(m_cluster);
    org.apache.ambari.server.state.Host host1 = EasyMock.createNiceMock(org.apache.ambari.server.state.Host.class);
    org.apache.ambari.server.state.Host host2 = EasyMock.createNiceMock(org.apache.ambari.server.state.Host.class);
    EasyMock.expect(host1.getHostId()).andReturn(1L);
    EasyMock.expect(host1.getState()).andReturn(org.apache.ambari.server.state.HostState.HEARTBEAT_LOST).atLeastOnce();
    EasyMock.expect(host1.getLastHeartbeatTime()).andReturn(1L);
    EasyMock.expect(host2.getHostId()).andReturn(2L);
    EasyMock.expect(host2.getState()).andReturn(org.apache.ambari.server.state.HostState.HEARTBEAT_LOST).atLeastOnce();
    EasyMock.expect(host2.getLastHeartbeatTime()).andReturn(2L);
    EasyMock.expect(m_cluster.getClusterId()).andReturn(org.apache.ambari.server.alerts.StaleAlertRunnableTest.CLUSTER_ID).atLeastOnce();
    EasyMock.expect(m_cluster.getHost(EasyMock.eq(1L))).andReturn(host1).anyTimes();
    EasyMock.expect(m_cluster.getHost(EasyMock.eq(2L))).andReturn(host2).anyTimes();
    EasyMock.replay(current1, history1, host1, host2, m_cluster);
    m_currentAlerts.add(current1);
    junit.framework.Assert.assertEquals(0, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    org.apache.ambari.server.alerts.StaleAlertRunnable runnable = new org.apache.ambari.server.alerts.StaleAlertRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    checkSingleEventToState(org.apache.ambari.server.state.AlertState.CRITICAL);
    EasyMock.verify(m_cluster, m_clusters, m_definitionDao, m_alertHelper);
}","testStaleAlertWithHostIgnoreCritical()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/StaleAlertRunnableTest.java","296484db88ec8cb8b4753f6e69e23db3975dfc1b
6e6b4a1d74b46b501c9b071aae1f849502871b3f
30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
4aa1639b4892b0faeedb4b9df4c6c7ac2b20d299
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
a48150ff2f678439054e9f86dd864ca02eff8d43
bdf5effbe899c93b7da408417474f1c8cdbb4b2b
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe"
"testStaleAlertInMaintenaceMode","TRUE","2","assertEquals","{
    org.apache.ambari.server.orm.entities.AlertDefinitionEntity definition = new org.apache.ambari.server.orm.entities.AlertDefinitionEntity();
    definition.setClusterId(org.apache.ambari.server.alerts.StaleAlertRunnableTest.CLUSTER_ID);
    definition.setDefinitionName(""foo-definition"");
    definition.setServiceName(""HDFS"");
    definition.setComponentName(""NAMENODE"");
    definition.setEnabled(true);
    definition.setScheduleInterval(1);
    org.apache.ambari.server.orm.entities.AlertCurrentEntity current1 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertCurrentEntity.class);
    org.apache.ambari.server.orm.entities.AlertHistoryEntity history1 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertHistoryEntity.class);
    org.apache.ambari.server.orm.entities.AlertCurrentEntity current2 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertCurrentEntity.class);
    org.apache.ambari.server.orm.entities.AlertHistoryEntity history2 = EasyMock.createNiceMock(org.apache.ambari.server.orm.entities.AlertHistoryEntity.class);
    EasyMock.expect(current1.getAlertHistory()).andReturn(history1).atLeastOnce();
    EasyMock.expect(history1.getAlertDefinition()).andReturn(definition).atLeastOnce();
    EasyMock.expect(current2.getAlertHistory()).andReturn(history2).atLeastOnce();
    EasyMock.expect(history2.getAlertDefinition()).andReturn(definition).atLeastOnce();
    EasyMock.expect(current1.getMaintenanceState()).andReturn(org.apache.ambari.server.state.MaintenanceState.ON).atLeastOnce();
    EasyMock.expect(current1.getLatestTimestamp()).andReturn(1L).atLeastOnce();
    EasyMock.expect(current2.getMaintenanceState()).andReturn(org.apache.ambari.server.state.MaintenanceState.OFF).atLeastOnce();
    EasyMock.expect(current2.getLatestTimestamp()).andReturn(java.lang.System.currentTimeMillis()).atLeastOnce();
    EasyMock.replay(current1, history1, current2, history2);
    m_currentAlerts.add(current1);
    m_currentAlerts.add(current2);
    junit.framework.Assert.assertEquals(0, m_listener.getAlertEventReceivedCount(org.apache.ambari.server.events.AlertReceivedEvent.class));
    org.apache.ambari.server.alerts.StaleAlertRunnable runnable = new org.apache.ambari.server.alerts.StaleAlertRunnable(m_definition.getDefinitionName());
    m_injector.injectMembers(runnable);
    runnable.run();
    checkSingleEventToState(org.apache.ambari.server.state.AlertState.OK);
    EasyMock.verify(m_cluster, m_clusters, m_definitionDao, m_alertHelper);
}","testStaleAlertInMaintenaceMode()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/StaleAlertRunnableTest.java","296484db88ec8cb8b4753f6e69e23db3975dfc1b
6e6b4a1d74b46b501c9b071aae1f849502871b3f
30b6f5b61400efda3bff9a64b06ba57938433df3
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
4aa1639b4892b0faeedb4b9df4c6c7ac2b20d299
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
a48150ff2f678439054e9f86dd864ca02eff8d43
bdf5effbe899c93b7da408417474f1c8cdbb4b2b
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe"
"testBetweenOkAndWarnIsOk_dirUp","TRUE","2","assertState","{
    org.apache.ambari.server.alerts.Threshold threshold = new org.apache.ambari.server.alerts.Threshold(10.0, 20.0, 30.0);
    assertState(threshold, org.apache.ambari.server.state.AlertState.OK, 10, 15, 19);
}","testBetweenOkAndWarnIsOk_dirUp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/ThresholdTest.java","f1758bc9f931b578bb63b345542551ef6be32427"
"testBetweenWarnAndCritIsWarn_dirUp","TRUE","2","assertState","{
    org.apache.ambari.server.alerts.Threshold threshold = new org.apache.ambari.server.alerts.Threshold(10.0, 20.0, 30.0);
    assertState(threshold, org.apache.ambari.server.state.AlertState.WARNING, 20, 25, 29);
}","testBetweenWarnAndCritIsWarn_dirUp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/ThresholdTest.java","f1758bc9f931b578bb63b345542551ef6be32427"
"testAboveCritIsCrit_dirUp","TRUE","2","assertState","{
    org.apache.ambari.server.alerts.Threshold threshold = new org.apache.ambari.server.alerts.Threshold(10.0, 20.0, 30.0);
    assertState(threshold, org.apache.ambari.server.state.AlertState.CRITICAL, 30, 40, 99999);
}","testAboveCritIsCrit_dirUp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/ThresholdTest.java","f1758bc9f931b578bb63b345542551ef6be32427"
"testBelowOkIsUnknown_dirUp","TRUE","2","assertState","{
    org.apache.ambari.server.alerts.Threshold threshold = new org.apache.ambari.server.alerts.Threshold(10.0, 20, 30);
    assertState(threshold, org.apache.ambari.server.state.AlertState.UNKNOWN, 9, 2, -99999);
}","testBelowOkIsUnknown_dirUp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/ThresholdTest.java","f1758bc9f931b578bb63b345542551ef6be32427"
"testBelowCritIsCrit_dirDown","TRUE","2","assertState","{
    org.apache.ambari.server.alerts.Threshold threshold = new org.apache.ambari.server.alerts.Threshold(40.0, 30.0, 20.0);
    assertState(threshold, org.apache.ambari.server.state.AlertState.CRITICAL, 20, 15, 2, -99999);
}","testBelowCritIsCrit_dirDown()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/ThresholdTest.java","f1758bc9f931b578bb63b345542551ef6be32427"
"testBetweenWarnAndCritIsWarn_dirDown","TRUE","2","assertState","{
    org.apache.ambari.server.alerts.Threshold threshold = new org.apache.ambari.server.alerts.Threshold(40.0, 30.0, 20.0);
    assertState(threshold, org.apache.ambari.server.state.AlertState.WARNING, 30, 25, 21);
}","testBetweenWarnAndCritIsWarn_dirDown()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/ThresholdTest.java","f1758bc9f931b578bb63b345542551ef6be32427"
"testBetweenOkAndWarnIsOk_dirDown","TRUE","2","assertState","{
    org.apache.ambari.server.alerts.Threshold threshold = new org.apache.ambari.server.alerts.Threshold(40.0, 30.0, 20.0);
    assertState(threshold, org.apache.ambari.server.state.AlertState.OK, 40, 35, 31);
}","testBetweenOkAndWarnIsOk_dirDown()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/ThresholdTest.java","f1758bc9f931b578bb63b345542551ef6be32427"
"testAboveOkIsUnknown_dirDown","TRUE","2","assertState","{
    org.apache.ambari.server.alerts.Threshold threshold = new org.apache.ambari.server.alerts.Threshold(40.0, 30.0, 20.0);
    assertState(threshold, org.apache.ambari.server.state.AlertState.UNKNOWN, 41, 50, 9999);
}","testAboveOkIsUnknown_dirDown()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/ThresholdTest.java","f1758bc9f931b578bb63b345542551ef6be32427"
"testOkIsOptional","TRUE","2","assertState","{
    org.apache.ambari.server.alerts.Threshold threshold = new org.apache.ambari.server.alerts.Threshold(null, 20.0, 30.0);
    assertState(threshold, org.apache.ambari.server.state.AlertState.OK, 10, 15, 19);
}","testOkIsOptional()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/alerts/ThresholdTest.java","f1758bc9f931b578bb63b345542551ef6be32427"
"testGetMethod","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.AmbariCsrfProtectionFilter filter = new org.apache.ambari.server.api.AmbariCsrfProtectionFilter();
    com.sun.jersey.spi.container.ContainerRequest containerRequest = EasyMock.createMock(com.sun.jersey.spi.container.ContainerRequest.class);
    EasyMock.expect(containerRequest.getMethod()).andReturn(""GET"");
    EasyMock.replay(containerRequest);
    org.junit.Assert.assertEquals(containerRequest, filter.filter(containerRequest));
}","testGetMethod()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/AmbariCsrfProtectionFilterTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
d84b2f57b532c8f6361b5d807dd375aa4280b44b"
"testPostNoXRequestedBy","FALSE","0","None","{
    org.apache.ambari.server.api.AmbariCsrfProtectionFilter filter = new org.apache.ambari.server.api.AmbariCsrfProtectionFilter();
    com.sun.jersey.spi.container.ContainerRequest containerRequest = EasyMock.createMock(com.sun.jersey.spi.container.ContainerRequest.class);
    com.sun.jersey.core.header.InBoundHeaders headers = new com.sun.jersey.core.header.InBoundHeaders();
    EasyMock.expect(containerRequest.getMethod()).andReturn(""POST"");
    EasyMock.expect(containerRequest.getRequestHeaders()).andReturn(headers);
    EasyMock.replay(containerRequest);
    filter.filter(containerRequest);
}","testPostNoXRequestedBy()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/AmbariCsrfProtectionFilterTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
d84b2f57b532c8f6361b5d807dd375aa4280b44b"
"testPostXRequestedBy","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.AmbariCsrfProtectionFilter filter = new org.apache.ambari.server.api.AmbariCsrfProtectionFilter();
    com.sun.jersey.spi.container.ContainerRequest containerRequest = EasyMock.createMock(com.sun.jersey.spi.container.ContainerRequest.class);
    com.sun.jersey.core.header.InBoundHeaders headers = new com.sun.jersey.core.header.InBoundHeaders();
    headers.add(""X-Requested-By"", ""anything"");
    EasyMock.expect(containerRequest.getMethod()).andReturn(""GET"");
    EasyMock.expect(containerRequest.getRequestHeaders()).andReturn(headers);
    EasyMock.replay(containerRequest);
    org.junit.Assert.assertEquals(containerRequest, filter.filter(containerRequest));
}","testPostXRequestedBy()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/AmbariCsrfProtectionFilterTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
d84b2f57b532c8f6361b5d807dd375aa4280b44b"
"testErrorWithJetty","TRUE","5","assertEquals
assertNotNull","{
    org.eclipse.jetty.server.Server server = new org.eclipse.jetty.server.Server(0);
    org.apache.ambari.server.security.authentication.jwt.JwtAuthenticationPropertiesProvider propertiesProvider = createNiceMock(org.apache.ambari.server.security.authentication.jwt.JwtAuthenticationPropertiesProvider.class);
    EasyMock.expect(propertiesProvider.get()).andReturn(null).anyTimes();
    replayAll();
    org.eclipse.jetty.servlet.ServletContextHandler root = new org.eclipse.jetty.servlet.ServletContextHandler(server, ""/"", org.eclipse.jetty.servlet.ServletContextHandler.SECURITY | org.eclipse.jetty.servlet.ServletContextHandler.SESSIONS);
    root.addServlet(org.apache.ambari.server.api.AmbariErrorHandlerIT.HelloServlet.class, ""/hello"");
    root.addServlet(org.eclipse.jetty.servlet.DefaultServlet.class, ""/"");
    root.setErrorHandler(new org.apache.ambari.server.api.AmbariErrorHandler(gson, propertiesProvider));
    server.start();
    int localPort = ((org.eclipse.jetty.server.ServerConnector) (server.getConnectors()[0])).getLocalPort();
    com.sun.jersey.api.client.Client client = new com.sun.jersey.api.client.Client();
    com.sun.jersey.api.client.WebResource resource = client.resource((""http://localhost:"" + localPort) + ""/"");
    com.sun.jersey.api.client.ClientResponse successResponse = resource.path(""hello"").get(com.sun.jersey.api.client.ClientResponse.class);
    org.junit.Assert.assertEquals(javax.servlet.http.HttpServletResponse.SC_OK, successResponse.getStatus());
    com.sun.jersey.api.client.ClientResponse failResponse = resource.path(""fail"").get(com.sun.jersey.api.client.ClientResponse.class);
    org.junit.Assert.assertEquals(javax.servlet.http.HttpServletResponse.SC_NOT_FOUND, failResponse.getStatus());
    try {
        java.lang.String response = failResponse.getEntity(java.lang.String.class);
        java.lang.System.out.println(response);
        java.util.Map map;
        map = gson.fromJson(response, java.util.Map.class);
        java.lang.System.out.println(map);
        org.junit.Assert.assertNotNull(""Incorrect response status"", map.get(""status""));
        org.junit.Assert.assertNotNull(""Incorrect response message"", map.get(""message""));
    } catch (com.google.gson.JsonSyntaxException e1) {
        org.junit.Assert.fail(""Incorrect response"");
    }
    server.stop();
    verifyAll();
}","testErrorWithJetty()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/AmbariErrorHandlerIT.java","fb752e20e3f295d19237b0eef342b3b4df0e0a85
3b5343e14a9f9b5c103f4f2280ea735670dc8fd8
9d7e373c34bacaf2897287907cc3c81d0d14c7bc
04f8c53fec3febab19a68f80bd22a5ae7a312346
e4db57093f4d17497366cdfbf02127f36399bf42
5198b80af4ca24111d1c76dd705bf0f1495d9a4c
e0ee23f38b494bfa620fa1f78e493858371d431a
c03b6d4b01fbc336c296c9a1a92ca1308cba6ffc
9d39ab2e4cfb8534ce18acbb3589edfa475152bc
40ec645a59b9c27e180d5686ca7513933bd98383
36121f6c63e473a2dd4ccf089fc9e0c315c2e543
ed594409994665cd684aa3a5de995c9f7443aca6
de5093a5c8e56959d050e309f7bd5f52ecad36bc
8997ce0d50d91c4cb008d303a07dfd7a949d1788
90f00a2a4267a7a94e8c89ade790ca7b71d8199a"
"testHandleInternalServerError","TRUE","3","assertEquals","{
    final java.util.UUID requestId = java.util.UUID.fromString(""4db659b2-7902-477b-b8e6-c35261d3334a"");
    mockStatic(org.eclipse.jetty.server.HttpConnection.class, java.util.UUID.class, org.slf4j.LoggerFactory.class);
    Mockito.when(org.eclipse.jetty.server.HttpConnection.getCurrentConnection()).thenReturn(httpConnection);
    Mockito.when(java.util.UUID.randomUUID()).thenReturn(requestId);
    Mockito.when(org.slf4j.LoggerFactory.getLogger(org.apache.ambari.server.api.AmbariErrorHandler.class)).thenReturn(logger);
    java.lang.Throwable th = createNiceMock(java.lang.Throwable.class);
    org.easymock.Capture<java.lang.String> captureLogMessage = org.easymock.EasyMock.newCapture();
    logger.error(EasyMock.capture(captureLogMessage), EasyMock.eq(th));
    EasyMock.expectLastCall();
    EasyMock.expect(httpConnection.getHttpChannel()).andReturn(httpChannel);
    EasyMock.expect(httpChannel.getRequest()).andReturn(request);
    EasyMock.expect(httpChannel.getResponse()).andReturn(response).times(2);
    EasyMock.expect(response.getStatus()).andReturn(HttpStatus.SC_INTERNAL_SERVER_ERROR);
    final java.lang.String requestUri = ""/path/to/target"";
    EasyMock.expect(httpServletRequest.getRequestURI()).andReturn(requestUri);
    EasyMock.expect(httpServletRequest.getAttribute(javax.servlet.RequestDispatcher.ERROR_EXCEPTION)).andReturn(th);
    final java.io.StringWriter writer = new java.io.StringWriter();
    EasyMock.expect(httpServletResponse.getWriter()).andReturn(new java.io.PrintWriter(writer));
    EasyMock.expect(propertiesProvider.get()).andReturn(null).anyTimes();
    replayAll();
    final java.lang.String expectedResponse = (""{\""status\"":500,\""message\"":\""Internal server error, please refer the exception by "" + requestId) + "" in the server log file\""}"";
    final java.lang.String expectedErrorMessage = ((""Internal server error, please refer the exception by "" + requestId) + "" in the server log file, requestURI: "") + requestUri;
    org.apache.ambari.server.api.AmbariErrorHandler ambariErrorHandler = new org.apache.ambari.server.api.AmbariErrorHandler(gson, propertiesProvider);
    ambariErrorHandler.setShowStacks(false);
    ambariErrorHandler.handle(target, request, httpServletRequest, httpServletResponse);
    org.junit.Assert.assertEquals(expectedResponse, writer.toString());
    org.junit.Assert.assertEquals(expectedErrorMessage, captureLogMessage.getValue());
    verifyAll();
}","testHandleInternalServerError()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/AmbariErrorHandlerTest.java","fb752e20e3f295d19237b0eef342b3b4df0e0a85
3b5343e14a9f9b5c103f4f2280ea735670dc8fd8
9d7e373c34bacaf2897287907cc3c81d0d14c7bc
04f8c53fec3febab19a68f80bd22a5ae7a312346
e4db57093f4d17497366cdfbf02127f36399bf42
5198b80af4ca24111d1c76dd705bf0f1495d9a4c
e0ee23f38b494bfa620fa1f78e493858371d431a
c03b6d4b01fbc336c296c9a1a92ca1308cba6ffc
9d39ab2e4cfb8534ce18acbb3589edfa475152bc
40ec645a59b9c27e180d5686ca7513933bd98383
36121f6c63e473a2dd4ccf089fc9e0c315c2e543
ed594409994665cd684aa3a5de995c9f7443aca6
de5093a5c8e56959d050e309f7bd5f52ecad36bc
8997ce0d50d91c4cb008d303a07dfd7a949d1788
90f00a2a4267a7a94e8c89ade790ca7b71d8199a"
"testHandleGeneralError","TRUE","2","assertEquals","{
    mockStatic(org.eclipse.jetty.server.HttpConnection.class);
    Mockito.when(org.eclipse.jetty.server.HttpConnection.getCurrentConnection()).thenReturn(httpConnection);
    EasyMock.expect(httpConnection.getHttpChannel()).andReturn(httpChannel);
    EasyMock.expect(httpChannel.getRequest()).andReturn(request);
    EasyMock.expect(httpChannel.getResponse()).andReturn(response).anyTimes();
    EasyMock.expect(response.getStatus()).andReturn(HttpStatus.SC_BAD_REQUEST);
    final java.io.StringWriter writer = new java.io.StringWriter();
    EasyMock.expect(httpServletResponse.getWriter()).andReturn(new java.io.PrintWriter(writer));
    EasyMock.expect(propertiesProvider.get()).andReturn(null).anyTimes();
    replayAll();
    final java.lang.String expectedResponse = ""{\""status\"":400,\""message\"":\""Bad Request\""}"";
    org.apache.ambari.server.api.AmbariErrorHandler ambariErrorHandler = new org.apache.ambari.server.api.AmbariErrorHandler(gson, propertiesProvider);
    ambariErrorHandler.handle(target, request, httpServletRequest, httpServletResponse);
    java.lang.System.out.println(writer.toString());
    org.junit.Assert.assertEquals(expectedResponse, writer.toString());
    verifyAll();
}","testHandleGeneralError()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/AmbariErrorHandlerTest.java","fb752e20e3f295d19237b0eef342b3b4df0e0a85
3b5343e14a9f9b5c103f4f2280ea735670dc8fd8
9d7e373c34bacaf2897287907cc3c81d0d14c7bc
04f8c53fec3febab19a68f80bd22a5ae7a312346
e4db57093f4d17497366cdfbf02127f36399bf42
5198b80af4ca24111d1c76dd705bf0f1495d9a4c
e0ee23f38b494bfa620fa1f78e493858371d431a
c03b6d4b01fbc336c296c9a1a92ca1308cba6ffc
9d39ab2e4cfb8534ce18acbb3589edfa475152bc
40ec645a59b9c27e180d5686ca7513933bd98383
36121f6c63e473a2dd4ccf089fc9e0c315c2e543
ed594409994665cd684aa3a5de995c9f7443aca6
de5093a5c8e56959d050e309f7bd5f52ecad36bc
8997ce0d50d91c4cb008d303a07dfd7a949d1788
90f00a2a4267a7a94e8c89ade790ca7b71d8199a"
"testHandleInternalServerError","FALSE","0","None","{
    java.lang.Throwable th = EasyMock.createNiceMock(java.lang.Throwable.class);
    EasyMock.expect(httpServletRequest.getAttribute(javax.servlet.RequestDispatcher.ERROR_EXCEPTION)).andReturn(th).anyTimes();
    EasyMock.expect(httpServletResponse.getStatus()).andReturn(HttpStatus.SC_INTERNAL_SERVER_ERROR).anyTimes();
    ambariErrorHandler.handle(target, request, httpServletRequest, httpServletResponse);
    EasyMock.expectLastCall();
    EasyMock.replay(ambariErrorHandler, errorHandler, httpServletRequest, httpServletResponse, th);
    org.apache.ambari.server.api.AmbariViewErrorHandlerProxy proxy = new org.apache.ambari.server.api.AmbariViewErrorHandlerProxy(errorHandler, ambariErrorHandler);
    proxy.handle(target, request, httpServletRequest, httpServletResponse);
    EasyMock.verify(ambariErrorHandler, errorHandler, httpServletRequest, httpServletResponse, th);
}","testHandleInternalServerError()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/AmbariViewErrorHandlerProxyTest.java","fb752e20e3f295d19237b0eef342b3b4df0e0a85"
"testHandleGeneralError","FALSE","0","None","{
    java.lang.Throwable th = EasyMock.createNiceMock(java.lang.Throwable.class);
    EasyMock.expect(httpServletRequest.getAttribute(javax.servlet.RequestDispatcher.ERROR_EXCEPTION)).andReturn(th).anyTimes();
    EasyMock.expect(httpServletResponse.getStatus()).andReturn(HttpStatus.SC_BAD_REQUEST).anyTimes();
    errorHandler.handle(target, request, httpServletRequest, httpServletResponse);
    EasyMock.expectLastCall();
    EasyMock.replay(ambariErrorHandler, errorHandler, httpServletRequest, httpServletResponse, th);
    org.apache.ambari.server.api.AmbariViewErrorHandlerProxy proxy = new org.apache.ambari.server.api.AmbariViewErrorHandlerProxy(errorHandler, ambariErrorHandler);
    proxy.handle(target, request, httpServletRequest, httpServletResponse);
    EasyMock.verify(ambariErrorHandler, errorHandler, httpServletRequest, httpServletResponse, th);
}","testHandleGeneralError()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/AmbariViewErrorHandlerProxyTest.java","fb752e20e3f295d19237b0eef342b3b4df0e0a85"
"testShowStacks","TRUE","3","assertTrue","{
    org.easymock.Capture<java.lang.Boolean> captureShowStacksErrorHandler = org.easymock.EasyMock.newCapture();
    errorHandler.setShowStacks(EasyMock.captureBoolean(captureShowStacksErrorHandler));
    EasyMock.expectLastCall();
    org.easymock.Capture<java.lang.Boolean> captureShowStacksAmbariErrorHandler = org.easymock.EasyMock.newCapture();
    ambariErrorHandler.setShowStacks(EasyMock.captureBoolean(captureShowStacksAmbariErrorHandler));
    EasyMock.expectLastCall();
    EasyMock.replay(errorHandler, ambariErrorHandler);
    org.apache.ambari.server.api.AmbariViewErrorHandlerProxy proxy = new org.apache.ambari.server.api.AmbariViewErrorHandlerProxy(errorHandler, ambariErrorHandler);
    proxy.setShowStacks(true);
    junit.framework.Assert.assertTrue(captureShowStacksErrorHandler.getValue());
    junit.framework.Assert.assertTrue(captureShowStacksAmbariErrorHandler.getValue());
    EasyMock.verify(errorHandler, ambariErrorHandler);
}","testShowStacks()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/AmbariViewErrorHandlerProxyTest.java","fb752e20e3f295d19237b0eef342b3b4df0e0a85"
"testJSONContentTypeRequest","TRUE","3","assertEquals","{
    java.util.Vector<java.lang.String> headers = new java.util.Vector<>(1);
    headers.add(MediaType.APPLICATION_JSON);
    EasyMock.expect(request.getContentType()).andReturn(MediaType.APPLICATION_JSON).atLeastOnce();
    EasyMock.expect(request.getHeader(HttpHeaders.CONTENT_TYPE)).andReturn(MediaType.APPLICATION_JSON).atLeastOnce();
    EasyMock.expect(request.getHeaders(HttpHeaders.CONTENT_TYPE)).andReturn(headers.elements()).atLeastOnce();
    replayAll();
    org.apache.ambari.server.api.ContentTypeOverrideFilterTest.FilterChainMock chain = new org.apache.ambari.server.api.ContentTypeOverrideFilterTest.FilterChainMock();
    filter.doFilter(request, response, chain);
    junit.framework.Assert.assertEquals(MediaType.TEXT_PLAIN, chain.request.getHeader(HttpHeaders.CONTENT_TYPE));
    junit.framework.Assert.assertEquals(MediaType.TEXT_PLAIN, chain.request.getHeaders(HttpHeaders.CONTENT_TYPE).nextElement());
    verifyAll();
}","testJSONContentTypeRequest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/ContentTypeOverrideFilterTest.java","fa9e846e55baf91bbe4544a1b9506a6ac3568329"
"testGetUserNameMatcherNoUserNameInUri","TRUE","2","assertFalse","{
    java.lang.String uri = ""/aaa/bbb"";
    java.util.regex.Matcher m = filter.getUserNameMatcher(uri);
    boolean isMatch = m.matches();
    org.junit.Assert.assertFalse(isMatch);
}","testGetUserNameMatcherNoUserNameInUri()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/UserNameOverrideFilterTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
71b4c624fb219bb1626c238322bda6c2e5589f72"
"testGetUserNameMatcherNoPostInUri","TRUE","5","assertTrue
assertEquals","{
    java.lang.String uri = ""/aaa/users/user1@domain"";
    java.util.regex.Matcher m = filter.getUserNameMatcher(uri);
    boolean isMatch = m.find();
    java.lang.String pre = (isMatch) ? m.group(""pre"") : null;
    java.lang.String userName = (isMatch) ? m.group(""username"") : null;
    java.lang.String post = (isMatch) ? m.group(""post"") : null;
    org.junit.Assert.assertTrue(isMatch);
    org.junit.Assert.assertEquals(""/aaa/users/"", pre);
    org.junit.Assert.assertEquals(""user1@domain"", userName);
    org.junit.Assert.assertEquals("""", post);
}","testGetUserNameMatcherNoPostInUri()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/UserNameOverrideFilterTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
71b4c624fb219bb1626c238322bda6c2e5589f72"
"testGetUserNameMatcherPostInUri","TRUE","5","assertTrue
assertEquals","{
    java.lang.String uri = ""/aaa/users/user1@domain/privileges"";
    java.util.regex.Matcher m = filter.getUserNameMatcher(uri);
    boolean isMatch = m.find();
    java.lang.String pre = (isMatch) ? m.group(""pre"") : null;
    java.lang.String userName = (isMatch) ? m.group(""username"") : null;
    java.lang.String post = (isMatch) ? m.group(""post"") : null;
    org.junit.Assert.assertTrue(isMatch);
    org.junit.Assert.assertEquals(""/aaa/users/"", pre);
    org.junit.Assert.assertEquals(""user1@domain"", userName);
    org.junit.Assert.assertEquals(""/privileges"", post);
}","testGetUserNameMatcherPostInUri()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/UserNameOverrideFilterTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
71b4c624fb219bb1626c238322bda6c2e5589f72"
"testDoFilterNoUserNameInUri","FALSE","0","None","{
    EasyMock.expect(userRelatedRequest.getRequestURI()).andReturn(""/test/test1"").anyTimes();
    filterChain.doFilter(EasyMock.same(userRelatedRequest), EasyMock.same(response));
    EasyMock.expectLastCall();
    replayAll();
    filter.doFilter(userRelatedRequest, response, filterChain);
    verifyAll();
}","testDoFilterNoUserNameInUri()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/UserNameOverrideFilterTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
71b4c624fb219bb1626c238322bda6c2e5589f72"
"testDoFilterWithUserNameInUri","FALSE","0","None","{
    EasyMock.expect(userRelatedRequest.getRequestURI()).andReturn(""/test/users/testUserName/test1"").anyTimes();
    filterChain.doFilter(EasyMock.same(userRelatedRequest), EasyMock.same(response));
    EasyMock.expectLastCall();
    replayAll();
    filter.doFilter(userRelatedRequest, response, filterChain);
    verifyAll();
}","testDoFilterWithUserNameInUri()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/UserNameOverrideFilterTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
71b4c624fb219bb1626c238322bda6c2e5589f72"
"testDoFilterWithLoginAliasInUri","TRUE","2","assertEquals","{
    EasyMock.expect(userRelatedRequest.getRequestURI()).andReturn(java.lang.String.format(""/test/users/%s/test1"", java.net.URLEncoder.encode(""testLoginAlias@testdomain.com"", ""UTF-8""))).anyTimes();
    org.easymock.Capture<javax.servlet.ServletRequest> requestCapture = org.easymock.Capture.newInstance();
    filterChain.doFilter(EasyMock.capture(requestCapture), EasyMock.same(response));
    EasyMock.expectLastCall();
    org.powermock.api.easymock.PowerMock.mockStatic(org.apache.ambari.server.security.authorization.AuthorizationHelper.class);
    EasyMock.expect(org.apache.ambari.server.security.authorization.AuthorizationHelper.resolveLoginAliasToUserName(EasyMock.eq(""testLoginAlias@testdomain.com""))).andReturn(""testuser1"");
    org.powermock.api.easymock.PowerMock.replay(org.apache.ambari.server.security.authorization.AuthorizationHelper.class);
    replayAll();
    filter.doFilter(userRelatedRequest, response, filterChain);
    javax.servlet.http.HttpServletRequest updatedRequest = ((javax.servlet.http.HttpServletRequest) (requestCapture.getValue()));
    org.junit.Assert.assertEquals(""testLoginAlias@testdomain.com login alias in the request Uri should be resolved to testuser1 user name !"", ""/test/users/testuser1/test1"", updatedRequest.getRequestURI());
    org.powermock.api.easymock.PowerMock.verify(org.apache.ambari.server.security.authorization.AuthorizationHelper.class);
    verifyAll();
}","testDoFilterWithLoginAliasInUri()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/UserNameOverrideFilterTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
71b4c624fb219bb1626c238322bda6c2e5589f72"
"testHandleRequest__Synchronous_NoPropsInBody","TRUE","5","assertNotNull
assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createStrictMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createStrictMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.controller.spi.RequestStatus status = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource resource1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource resource2 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> setResources = new java.util.HashSet<>();
    setResources.add(resource1);
    setResources.add(resource2);
    EasyMock.expect(request.getResource()).andReturn(resource).atLeastOnce();
    EasyMock.expect(request.getQueryPredicate()).andReturn(null).atLeastOnce();
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    EasyMock.expect(request.getBody()).andReturn(body);
    EasyMock.expect(resource.getQuery()).andReturn(query);
    query.setRenderer(renderer);
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.isCreatable()).andReturn(true).anyTimes();
    EasyMock.expect(pm.create(resource, body)).andReturn(status);
    EasyMock.expect(status.getStatus()).andReturn(org.apache.ambari.server.controller.spi.RequestStatus.Status.Complete);
    EasyMock.expect(status.getAssociatedResources()).andReturn(setResources);
    EasyMock.expect(resource1.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.expect(resource2.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.replay(request, body, resource, resourceDefinition, query, pm, status, resource1, resource2);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.handlers.CreateHandlerTest.TestCreateHandler(pm).handleRequest(request);
    org.junit.Assert.assertNotNull(result);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resourcesNode = tree.getChild(""resources"");
    org.junit.Assert.assertEquals(2, resourcesNode.getChildren().size());
    boolean foundResource1 = false;
    boolean foundResource2 = false;
    for (org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> child : resourcesNode.getChildren()) {
        org.apache.ambari.server.controller.spi.Resource r = child.getObject();
        if ((r == resource1) && (!foundResource1)) {
            foundResource1 = true;
        } else if ((r == resource2) && (!foundResource2)) {
            foundResource2 = true;
        } else {
            org.junit.Assert.fail();
        }
    }
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.CREATED, result.getStatus().getStatus());
    EasyMock.verify(request, body, resource, resourceDefinition, query, pm, status, resource1, resource2);
}","testHandleRequest__Synchronous_NoPropsInBody()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/CreateHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
45bb354c771e6438158a1475a4f987d5a5553f09
5a60fa18a58ec1c38cdde625adb2b7e61eaf936b
1fc24756668b2dbb467b5652b1291659958c763a
88b170d49d17dc03d5a2fc48f41afaccea836307
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testHandleRequest__Synchronous","TRUE","5","assertNotNull
assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createStrictMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createStrictMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.controller.spi.RequestStatus status = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource resource1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource resource2 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> setResources = new java.util.HashSet<>();
    setResources.add(resource1);
    setResources.add(resource2);
    EasyMock.expect(request.getResource()).andReturn(resource).atLeastOnce();
    EasyMock.expect(request.getQueryPredicate()).andReturn(null).atLeastOnce();
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    EasyMock.expect(request.getBody()).andReturn(body).atLeastOnce();
    EasyMock.expect(resource.getQuery()).andReturn(query);
    query.setRenderer(renderer);
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.isCreatable()).andReturn(true).anyTimes();
    EasyMock.expect(pm.create(resource, body)).andReturn(status);
    EasyMock.expect(status.getStatus()).andReturn(org.apache.ambari.server.controller.spi.RequestStatus.Status.Complete);
    EasyMock.expect(status.getAssociatedResources()).andReturn(setResources);
    EasyMock.expect(resource1.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.expect(resource2.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.replay(request, body, resource, resourceDefinition, query, pm, status, resource1, resource2);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.handlers.CreateHandlerTest.TestCreateHandler(pm).handleRequest(request);
    org.junit.Assert.assertNotNull(result);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resourcesNode = tree.getChild(""resources"");
    org.junit.Assert.assertEquals(2, resourcesNode.getChildren().size());
    boolean foundResource1 = false;
    boolean foundResource2 = false;
    for (org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> child : resourcesNode.getChildren()) {
        org.apache.ambari.server.controller.spi.Resource r = child.getObject();
        if ((r == resource1) && (!foundResource1)) {
            foundResource1 = true;
        } else if ((r == resource2) && (!foundResource2)) {
            foundResource2 = true;
        } else {
            org.junit.Assert.fail();
        }
    }
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.CREATED, result.getStatus().getStatus());
    EasyMock.verify(request, body, resource, resourceDefinition, query, pm, status, resource1, resource2);
}","testHandleRequest__Synchronous()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/CreateHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
45bb354c771e6438158a1475a4f987d5a5553f09
5a60fa18a58ec1c38cdde625adb2b7e61eaf936b
1fc24756668b2dbb467b5652b1291659958c763a
88b170d49d17dc03d5a2fc48f41afaccea836307
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testHandleRequest__Asynchronous","TRUE","8","assertNotNull
assertEquals
assertSame","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createStrictMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createStrictMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.controller.spi.RequestStatus status = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource resource1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource resource2 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource requestResource = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> setResources = new java.util.HashSet<>();
    setResources.add(resource1);
    setResources.add(resource2);
    EasyMock.expect(request.getResource()).andReturn(resource).atLeastOnce();
    EasyMock.expect(request.getBody()).andReturn(body).atLeastOnce();
    EasyMock.expect(request.getQueryPredicate()).andReturn(null).atLeastOnce();
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    EasyMock.expect(resource.getQuery()).andReturn(query);
    query.setRenderer(renderer);
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.isCreatable()).andReturn(true).anyTimes();
    EasyMock.expect(pm.create(resource, body)).andReturn(status);
    EasyMock.expect(status.getStatus()).andReturn(org.apache.ambari.server.controller.spi.RequestStatus.Status.Accepted);
    EasyMock.expect(status.getAssociatedResources()).andReturn(setResources);
    EasyMock.expect(resource1.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.expect(resource2.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.expect(status.getRequestResource()).andReturn(requestResource).anyTimes();
    EasyMock.replay(request, body, resource, resourceDefinition, query, pm, status, resource1, resource2, requestResource);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.handlers.CreateHandlerTest.TestCreateHandler(pm).handleRequest(request);
    org.junit.Assert.assertNotNull(result);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(2, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resourcesNode = tree.getChild(""resources"");
    org.junit.Assert.assertEquals(2, resourcesNode.getChildren().size());
    boolean foundResource1 = false;
    boolean foundResource2 = false;
    for (org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> child : resourcesNode.getChildren()) {
        org.apache.ambari.server.controller.spi.Resource r = child.getObject();
        if ((r == resource1) && (!foundResource1)) {
            foundResource1 = true;
        } else if ((r == resource2) && (!foundResource2)) {
            foundResource2 = true;
        } else {
            org.junit.Assert.fail();
        }
    }
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> statusNode = tree.getChild(""request"");
    org.junit.Assert.assertNotNull(statusNode);
    org.junit.Assert.assertEquals(0, statusNode.getChildren().size());
    org.junit.Assert.assertSame(requestResource, statusNode.getObject());
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.ACCEPTED, result.getStatus().getStatus());
    EasyMock.verify(request, body, resource, resourceDefinition, query, pm, status, resource1, resource2, requestResource);
}","testHandleRequest__Asynchronous()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/CreateHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
45bb354c771e6438158a1475a4f987d5a5553f09
5a60fa18a58ec1c38cdde625adb2b7e61eaf936b
1fc24756668b2dbb467b5652b1291659958c763a
88b170d49d17dc03d5a2fc48f41afaccea836307
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testHandleRequest__AuthorizationFailure","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createStrictMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createStrictMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    EasyMock.expect(request.getResource()).andReturn(resource).atLeastOnce();
    EasyMock.expect(request.getBody()).andReturn(body).atLeastOnce();
    EasyMock.expect(request.getQueryPredicate()).andReturn(null).atLeastOnce();
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    EasyMock.expect(resource.getQuery()).andReturn(query);
    query.setRenderer(renderer);
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.isCreatable()).andReturn(true).anyTimes();
    EasyMock.expect(pm.create(resource, body)).andThrow(new org.apache.ambari.server.security.authorization.AuthorizationException());
    EasyMock.replay(request, body, resource, resourceDefinition, query, pm);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.handlers.CreateHandlerTest.TestCreateHandler(pm).handleRequest(request);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.FORBIDDEN, result.getStatus().getStatus());
    EasyMock.verify(request, body, resource, resourceDefinition, query, pm);
}","testHandleRequest__AuthorizationFailure()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/CreateHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
45bb354c771e6438158a1475a4f987d5a5553f09
5a60fa18a58ec1c38cdde625adb2b7e61eaf936b
1fc24756668b2dbb467b5652b1291659958c763a
88b170d49d17dc03d5a2fc48f41afaccea836307
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testHandleRequest__Synchronous","TRUE","5","assertNotNull
assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createStrictMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.controller.spi.RequestStatus status = EasyMock.createMock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource resource1 = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource resource2 = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Predicate userPredicate = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createNiceMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> setResources = new java.util.HashSet<>();
    setResources.add(resource1);
    setResources.add(resource2);
    EasyMock.expect(request.getResource()).andReturn(resource).atLeastOnce();
    EasyMock.expect(request.getBody()).andReturn(body).atLeastOnce();
    EasyMock.expect(request.getQueryPredicate()).andReturn(userPredicate).atLeastOnce();
    EasyMock.expect(resource.getQuery()).andReturn(query).atLeastOnce();
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    query.setRenderer(renderer);
    query.setUserPredicate(userPredicate);
    EasyMock.expect(pm.delete(resource, body)).andReturn(status);
    EasyMock.expect(status.getStatus()).andReturn(org.apache.ambari.server.controller.spi.RequestStatus.Status.Complete);
    EasyMock.expect(status.getAssociatedResources()).andReturn(setResources);
    EasyMock.expect(status.getStatusMetadata()).andReturn(new org.apache.ambari.server.controller.internal.DeleteStatusMetaData());
    EasyMock.expect(resource1.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.expect(resource2.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.replay(request, body, resource, pm, status, resource1, resource2, userPredicate, query);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.handlers.DeleteHandlerTest.TestDeleteHandler(pm).handleRequest(request);
    org.junit.Assert.assertNotNull(result);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resourcesNode = tree.getChild(""resources"");
    org.junit.Assert.assertEquals(2, resourcesNode.getChildren().size());
    boolean foundResource1 = false;
    boolean foundResource2 = false;
    for (org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> child : resourcesNode.getChildren()) {
        org.apache.ambari.server.controller.spi.Resource r = child.getObject();
        if ((r == resource1) && (!foundResource1)) {
            foundResource1 = true;
        } else if ((r == resource2) && (!foundResource2)) {
            foundResource2 = true;
        } else {
            org.junit.Assert.fail();
        }
    }
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK, result.getStatus().getStatus());
    EasyMock.verify(request, body, resource, pm, status, resource1, resource2, userPredicate, query);
}","testHandleRequest__Synchronous()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/DeleteHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
5af48693efa2dad3b702f64f87e6daaec253c869
45bb354c771e6438158a1475a4f987d5a5553f09
5a60fa18a58ec1c38cdde625adb2b7e61eaf936b
4a61ae33b42aa1f530768fb4dc70f41de92f07d2
1fc24756668b2dbb467b5652b1291659958c763a
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testHandleRequest__Asynchronous","TRUE","8","assertNotNull
assertEquals
assertSame","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createStrictMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.controller.spi.RequestStatus status = EasyMock.createMock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource resource1 = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource resource2 = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource requestResource = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createNiceMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> setResources = new java.util.HashSet<>();
    setResources.add(resource1);
    setResources.add(resource2);
    EasyMock.expect(request.getResource()).andReturn(resource).anyTimes();
    EasyMock.expect(request.getBody()).andReturn(body).atLeastOnce();
    EasyMock.expect(request.getQueryPredicate()).andReturn(null).atLeastOnce();
    EasyMock.expect(resource.getQuery()).andReturn(query).atLeastOnce();
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    query.setRenderer(renderer);
    EasyMock.expect(pm.delete(resource, body)).andReturn(status);
    EasyMock.expect(status.getStatus()).andReturn(org.apache.ambari.server.controller.spi.RequestStatus.Status.Accepted);
    EasyMock.expect(status.getAssociatedResources()).andReturn(setResources);
    EasyMock.expect(status.getStatusMetadata()).andReturn(null);
    EasyMock.expect(resource1.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.expect(resource2.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.expect(status.getRequestResource()).andReturn(requestResource).anyTimes();
    EasyMock.replay(request, body, resource, pm, status, resource1, resource2, requestResource, query);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.handlers.DeleteHandlerTest.TestDeleteHandler(pm).handleRequest(request);
    org.junit.Assert.assertNotNull(result);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(2, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resourcesNode = tree.getChild(""resources"");
    org.junit.Assert.assertEquals(2, resourcesNode.getChildren().size());
    boolean foundResource1 = false;
    boolean foundResource2 = false;
    for (org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> child : resourcesNode.getChildren()) {
        org.apache.ambari.server.controller.spi.Resource r = child.getObject();
        if ((r == resource1) && (!foundResource1)) {
            foundResource1 = true;
        } else if ((r == resource2) && (!foundResource2)) {
            foundResource2 = true;
        } else {
            org.junit.Assert.fail();
        }
    }
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> statusNode = tree.getChild(""request"");
    org.junit.Assert.assertNotNull(statusNode);
    org.junit.Assert.assertEquals(0, statusNode.getChildren().size());
    org.junit.Assert.assertSame(requestResource, statusNode.getObject());
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.ACCEPTED, result.getStatus().getStatus());
    EasyMock.verify(request, body, resource, pm, status, resource1, resource2, requestResource, query);
}","testHandleRequest__Asynchronous()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/DeleteHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
5af48693efa2dad3b702f64f87e6daaec253c869
45bb354c771e6438158a1475a4f987d5a5553f09
5a60fa18a58ec1c38cdde625adb2b7e61eaf936b
4a61ae33b42aa1f530768fb4dc70f41de92f07d2
1fc24756668b2dbb467b5652b1291659958c763a
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testHandleRequest__AuthorizationFailure","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createStrictMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    EasyMock.expect(request.getResource()).andReturn(resource).anyTimes();
    EasyMock.expect(request.getBody()).andReturn(body).atLeastOnce();
    EasyMock.expect(request.getQueryPredicate()).andReturn(null).atLeastOnce();
    EasyMock.expect(resource.getQuery()).andReturn(query).atLeastOnce();
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    query.setRenderer(renderer);
    EasyMock.expect(pm.delete(resource, body)).andThrow(new org.apache.ambari.server.security.authorization.AuthorizationException());
    EasyMock.replay(request, body, resource, pm, query);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.handlers.DeleteHandlerTest.TestDeleteHandler(pm).handleRequest(request);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.FORBIDDEN, result.getStatus().getStatus());
    EasyMock.verify(request, body, resource, pm, query);
}","testHandleRequest__AuthorizationFailure()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/DeleteHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
5af48693efa2dad3b702f64f87e6daaec253c869
45bb354c771e6438158a1475a4f987d5a5553f09
5a60fa18a58ec1c38cdde625adb2b7e61eaf936b
4a61ae33b42aa1f530768fb4dc70f41de92f07d2
1fc24756668b2dbb467b5652b1291659958c763a
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testIdempotentPersist","TRUE","3","assertNotNull
assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createNiceMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.controller.spi.RequestStatus status = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource resource1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource requestResource = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.ConfigGroupNotFoundException configGroupNotFoundException = EasyMock.createNiceMock(org.apache.ambari.server.ConfigGroupNotFoundException.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createNiceMock(org.apache.ambari.server.api.query.Query.class);
    EasyMock.expect(request.getResource()).andReturn(resource).anyTimes();
    EasyMock.expect(request.getBody()).andReturn(body).atLeastOnce();
    EasyMock.expect(pm.delete(resource, body)).andThrow(new org.apache.ambari.server.controller.spi.NoSuchResourceException(""Configgroup not exist"", configGroupNotFoundException));
    EasyMock.replay(request, body, resource, pm, status, resource1, requestResource, query);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.handlers.DeleteHandlerTest.TestDeleteHandler(pm).persist(resource, body);
    org.junit.Assert.assertNotNull(result);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.ACCEPTED, result.getStatus().getStatus());
}","testIdempotentPersist()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/DeleteHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
5af48693efa2dad3b702f64f87e6daaec253c869
45bb354c771e6438158a1475a4f987d5a5553f09
5a60fa18a58ec1c38cdde625adb2b7e61eaf936b
4a61ae33b42aa1f530768fb4dc70f41de92f07d2
1fc24756668b2dbb467b5652b1291659958c763a
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testHandleRequest","TRUE","8","assertEquals
assertTrue","{
    final java.lang.String BODY_STRING = ""Body string"";
    org.apache.ambari.server.api.services.Request request = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resourceInstance = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.resources.ResourceInstanceFactory resourceInstanceFactory = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstanceFactory.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createNiceMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.resources.ResourceInstance subResource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition subResourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.controller.spi.ClusterController controller = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.ClusterController.class);
    org.apache.ambari.server.controller.spi.Schema serviceSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema componentSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    java.lang.String resourceKeyProperty = ""resourceKeyProperty"";
    java.lang.String createKeyProperty = ""createKeyProperty"";
    org.apache.ambari.server.controller.spi.Resource resource1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource resource2 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createNiceMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.api.resources.ResourceInstance createResource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.controller.spi.RequestStatus status = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource statusResource1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource statusResource2 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.handlers.RequestHandler readHandler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = EasyMock.createNiceMock(org.apache.ambari.server.api.services.ResultStatus.class);
    org.easymock.Capture<org.apache.ambari.server.api.services.RequestBody> bodyCapture = org.easymock.EasyMock.newCapture();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setRequestProps = new java.util.HashSet<>();
    java.util.Map<java.lang.String, java.lang.Object> mapProperties = new java.util.HashMap<>();
    java.util.Set<java.util.Map<java.lang.String, java.lang.Object>> arraySet = new java.util.HashSet<>();
    mapProperties.put(""components"", arraySet);
    java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>();
    map.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceComponentInfo"", ""component_name""), ""SECONDARY_NAMENODE"");
    arraySet.add(map);
    map = new java.util.HashMap<>();
    map.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceComponentInfo"", ""component_name""), ""HDFS_CLIENT"");
    arraySet.add(map);
    setRequestProps.add(new org.apache.ambari.server.api.services.NamedPropertySet("""", mapProperties));
    java.util.Set<java.util.Map<java.lang.String, java.lang.Object>> setCreateProps = new java.util.HashSet<>();
    java.util.Map<java.lang.String, java.lang.Object> map1 = new java.util.HashMap<>();
    map1.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceComponentInfo"", ""component_name""), ""SECONDARY_NAMENODE"");
    map1.put(createKeyProperty, ""id1"");
    setCreateProps.add(map1);
    java.util.Map<java.lang.String, java.lang.Object> map2 = new java.util.HashMap<>();
    map2.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceComponentInfo"", ""component_name""), ""SECONDARY_NAMENODE"");
    map2.put(createKeyProperty, ""id2"");
    setCreateProps.add(map2);
    java.util.Map<java.lang.String, java.lang.Object> map3 = new java.util.HashMap<>();
    map3.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceComponentInfo"", ""component_name""), ""HDFS_CLIENT"");
    map3.put(createKeyProperty, ""id1"");
    setCreateProps.add(map3);
    java.util.Map<java.lang.String, java.lang.Object> map4 = new java.util.HashMap<>();
    map4.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceComponentInfo"", ""component_name""), ""HDFS_CLIENT"");
    map4.put(createKeyProperty, ""id2"");
    setCreateProps.add(map4);
    java.util.Map<java.lang.String, org.apache.ambari.server.api.resources.ResourceInstance> mapSubResources = new java.util.HashMap<>();
    mapSubResources.put(""components"", subResource);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, ""result"");
    resultTree.addChild(resource1, ""resource1"");
    resultTree.addChild(resource2, ""resource2"");
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> setStatusResources = new java.util.HashSet<>();
    setStatusResources.add(statusResource1);
    setStatusResources.add(statusResource2);
    EasyMock.expect(readHandler.handleRequest(request)).andReturn(result);
    EasyMock.expect(result.getStatus()).andReturn(resultStatus).anyTimes();
    EasyMock.expect(resultStatus.isErrorState()).andReturn(false);
    EasyMock.expect(result.getResultTree()).andReturn(resultTree);
    EasyMock.expect(body.getBody()).andReturn(BODY_STRING).anyTimes();
    EasyMock.expect(request.getResource()).andReturn(resourceInstance).anyTimes();
    EasyMock.expect(request.getBody()).andReturn(body).anyTimes();
    EasyMock.expect(body.getNamedPropertySets()).andReturn(setRequestProps).anyTimes();
    EasyMock.expect(resourceInstance.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceInstance.getKeyValueMap()).andReturn(mapIds).anyTimes();
    EasyMock.expect(resourceInstance.getSubResources()).andReturn(mapSubResources).anyTimes();
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Service).anyTimes();
    EasyMock.expect(resourceDefinition.isCreatable()).andReturn(true).anyTimes();
    EasyMock.expect(subResource.getResourceDefinition()).andReturn(subResourceDefinition).anyTimes();
    EasyMock.expect(subResourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Component).anyTimes();
    EasyMock.expect(controller.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(serviceSchema).anyTimes();
    EasyMock.expect(controller.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(componentSchema).anyTimes();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(resourceKeyProperty).anyTimes();
    EasyMock.expect(componentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(createKeyProperty).anyTimes();
    EasyMock.expect(result.getResultTree()).andReturn(resultTree).anyTimes();
    EasyMock.expect(resource1.getPropertyValue(resourceKeyProperty)).andReturn(""id1"").anyTimes();
    EasyMock.expect(resource2.getPropertyValue(resourceKeyProperty)).andReturn(""id2"").anyTimes();
    EasyMock.expect(resourceInstanceFactory.createResource(org.apache.ambari.server.controller.spi.Resource.Type.Component, mapIds)).andReturn(createResource).anyTimes();
    EasyMock.expect(createResource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(pm.create(EasyMock.same(createResource), EasyMock.capture(bodyCapture))).andReturn(status);
    EasyMock.expect(status.getStatus()).andReturn(org.apache.ambari.server.controller.spi.RequestStatus.Status.Complete).anyTimes();
    EasyMock.expect(status.getAssociatedResources()).andReturn(setStatusResources).anyTimes();
    EasyMock.expect(statusResource1.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Component).anyTimes();
    EasyMock.expect(statusResource2.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Component).anyTimes();
    EasyMock.replay(request, body, resourceInstance, resourceDefinition, query, predicate, result, subResource, subResourceDefinition, controller, serviceSchema, componentSchema, resource1, resource2, pm, resourceInstanceFactory, createResource, status, statusResource1, statusResource2, readHandler, resultStatus);
    org.apache.ambari.server.api.services.Result testResult = new org.apache.ambari.server.api.handlers.QueryCreateHandlerTest.TestQueryCreateHandler(resourceInstanceFactory, controller, pm, readHandler).handleRequest(request);
    java.util.Collection<org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource>> children = testResult.getResultTree().getChild(""resources"").getChildren();
    org.junit.Assert.assertEquals(2, children.size());
    boolean containsStatusResource1 = false;
    boolean containsStatusResource2 = false;
    for (org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> child : children) {
        org.apache.ambari.server.controller.spi.Resource r = child.getObject();
        if (r == statusResource1) {
            containsStatusResource1 = true;
        } else if (r == statusResource2) {
            containsStatusResource2 = true;
        }
    }
    org.junit.Assert.assertTrue(containsStatusResource1);
    org.junit.Assert.assertTrue(containsStatusResource2);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.CREATED, testResult.getStatus().getStatus());
    org.apache.ambari.server.api.services.RequestBody createBody = bodyCapture.getValue();
    org.junit.Assert.assertEquals(BODY_STRING, createBody.getBody());
    org.junit.Assert.assertEquals(4, createBody.getPropertySets().size());
    org.junit.Assert.assertEquals(setCreateProps, createBody.getPropertySets());
    EasyMock.verify(request, body, resourceInstance, resourceDefinition, query, predicate, result, subResource, subResourceDefinition, controller, serviceSchema, componentSchema, resource1, resource2, pm, resourceInstanceFactory, createResource, status, statusResource1, statusResource2, readHandler, resultStatus);
}","testHandleRequest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/QueryCreateHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
45bb354c771e6438158a1475a4f987d5a5553f09
88b170d49d17dc03d5a2fc48f41afaccea836307
1b1678ee390d53955fa1a2297086e9d17507e076
01fda0811dac6b204e4a30bd2c11a4774b3ca509
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86"
"tesHandleRequest_NoSubResourceNameSpecified","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resourceInstance = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createNiceMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.resources.ResourceInstance subResource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition subResourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.controller.spi.ClusterController controller = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.ClusterController.class);
    org.apache.ambari.server.controller.spi.Schema serviceSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema componentSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    java.lang.String resourceKeyProperty = ""resourceKeyProperty"";
    org.apache.ambari.server.controller.spi.Resource resource1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource resource2 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createNiceMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.api.resources.ResourceInstance createResource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.controller.spi.RequestStatus status = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource statusResource1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource statusResource2 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.handlers.RequestHandler readHandler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.ResultStatus queryResultStatus = EasyMock.createNiceMock(org.apache.ambari.server.api.services.ResultStatus.class);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setRequestProps = new java.util.HashSet<>();
    java.util.Map<java.lang.String, java.lang.Object> mapProperties = new java.util.HashMap<>();
    java.util.Set<java.util.Map<java.lang.String, java.lang.Object>> arraySet = new java.util.HashSet<>();
    mapProperties.put("""", arraySet);
    java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>();
    map.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceComponentInfo"", ""component_name""), ""SECONDARY_NAMENODE"");
    arraySet.add(map);
    map = new java.util.HashMap<>();
    map.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceComponentInfo"", ""component_name""), ""HDFS_CLIENT"");
    arraySet.add(map);
    setRequestProps.add(new org.apache.ambari.server.api.services.NamedPropertySet("""", mapProperties));
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, ""result"");
    resultTree.addChild(resource1, ""resource1"");
    resultTree.addChild(resource2, ""resource2"");
    EasyMock.expect(readHandler.handleRequest(request)).andReturn(result);
    EasyMock.expect(result.getStatus()).andReturn(queryResultStatus).anyTimes();
    EasyMock.expect(queryResultStatus.isErrorState()).andReturn(false);
    EasyMock.expect(result.getResultTree()).andReturn(resultTree);
    EasyMock.expect(request.getResource()).andReturn(resourceInstance).anyTimes();
    EasyMock.expect(request.getBody()).andReturn(body).anyTimes();
    EasyMock.expect(body.getNamedPropertySets()).andReturn(setRequestProps).anyTimes();
    EasyMock.expect(resourceInstance.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceInstance.getKeyValueMap()).andReturn(mapIds).anyTimes();
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Service).anyTimes();
    EasyMock.expect(controller.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(serviceSchema).anyTimes();
    EasyMock.expect(result.getResultTree()).andReturn(resultTree).anyTimes();
    EasyMock.expect(resource1.getPropertyValue(resourceKeyProperty)).andReturn(""id1"").anyTimes();
    EasyMock.expect(resource2.getPropertyValue(resourceKeyProperty)).andReturn(""id2"").anyTimes();
    EasyMock.replay(request, body, resourceInstance, resourceDefinition, query, predicate, result, subResource, subResourceDefinition, controller, serviceSchema, componentSchema, resource1, resource2, pm, createResource, status, statusResource1, statusResource2, readHandler, queryResultStatus);
    org.apache.ambari.server.api.services.Result testResult = new org.apache.ambari.server.api.handlers.QueryCreateHandlerTest.TestQueryCreateHandler(null, controller, pm, readHandler).handleRequest(request);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = testResult.getStatus();
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.BAD_REQUEST, resultStatus.getStatus());
    org.junit.Assert.assertEquals(""Invalid Request: A sub-resource name must be supplied."", resultStatus.getMessage());
    EasyMock.verify(request, body, resourceInstance, resourceDefinition, query, predicate, result, subResource, subResourceDefinition, controller, serviceSchema, componentSchema, resource1, resource2, pm, createResource, status, statusResource1, statusResource2, readHandler, queryResultStatus);
}","tesHandleRequest_NoSubResourceNameSpecified()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/QueryCreateHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
45bb354c771e6438158a1475a4f987d5a5553f09
88b170d49d17dc03d5a2fc48f41afaccea836307
1b1678ee390d53955fa1a2297086e9d17507e076
01fda0811dac6b204e4a30bd2c11a4774b3ca509
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86"
"tesHandleRequest_InvalidSubResSpecified","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resourceInstance = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createNiceMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.resources.ResourceInstance subResource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition subResourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.controller.spi.ClusterController controller = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.ClusterController.class);
    org.apache.ambari.server.controller.spi.Schema serviceSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema componentSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    java.lang.String resourceKeyProperty = ""resourceKeyProperty"";
    org.apache.ambari.server.controller.spi.Resource resource1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource resource2 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createNiceMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.api.resources.ResourceInstance createResource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.controller.spi.RequestStatus status = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource statusResource1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource statusResource2 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.handlers.RequestHandler readHandler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.ResultStatus queryResultStatus = EasyMock.createNiceMock(org.apache.ambari.server.api.services.ResultStatus.class);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setRequestProps = new java.util.HashSet<>();
    java.util.Map<java.lang.String, java.lang.Object> mapProperties = new java.util.HashMap<>();
    java.util.Set<java.util.Map<java.lang.String, java.lang.Object>> arraySet = new java.util.HashSet<>();
    mapProperties.put(""INVALID"", arraySet);
    java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>();
    map.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceComponentInfo"", ""component_name""), ""SECONDARY_NAMENODE"");
    arraySet.add(map);
    map = new java.util.HashMap<>();
    map.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceComponentInfo"", ""component_name""), ""HDFS_CLIENT"");
    arraySet.add(map);
    setRequestProps.add(new org.apache.ambari.server.api.services.NamedPropertySet("""", mapProperties));
    java.util.Map<java.lang.String, org.apache.ambari.server.api.resources.ResourceInstance> mapSubResources = new java.util.HashMap<>();
    mapSubResources.put(""components"", subResource);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, ""result"");
    resultTree.addChild(resource1, ""resource1"");
    resultTree.addChild(resource2, ""resource2"");
    EasyMock.expect(readHandler.handleRequest(request)).andReturn(result);
    EasyMock.expect(result.getStatus()).andReturn(queryResultStatus).anyTimes();
    EasyMock.expect(queryResultStatus.isErrorState()).andReturn(false);
    EasyMock.expect(result.getResultTree()).andReturn(resultTree);
    EasyMock.expect(request.getResource()).andReturn(resourceInstance).anyTimes();
    EasyMock.expect(request.getBody()).andReturn(body).anyTimes();
    EasyMock.expect(body.getNamedPropertySets()).andReturn(setRequestProps).anyTimes();
    EasyMock.expect(resourceInstance.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceInstance.getKeyValueMap()).andReturn(mapIds).anyTimes();
    EasyMock.expect(resourceInstance.getSubResources()).andReturn(mapSubResources).anyTimes();
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Service).anyTimes();
    EasyMock.expect(controller.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(serviceSchema).anyTimes();
    EasyMock.expect(result.getResultTree()).andReturn(resultTree).anyTimes();
    EasyMock.expect(resource1.getPropertyValue(resourceKeyProperty)).andReturn(""id1"").anyTimes();
    EasyMock.expect(resource2.getPropertyValue(resourceKeyProperty)).andReturn(""id2"").anyTimes();
    EasyMock.replay(request, body, resourceInstance, resourceDefinition, query, predicate, result, subResource, subResourceDefinition, controller, serviceSchema, componentSchema, resource1, resource2, pm, createResource, status, statusResource1, statusResource2, readHandler, queryResultStatus);
    org.apache.ambari.server.api.services.Result testResult = new org.apache.ambari.server.api.handlers.QueryCreateHandlerTest.TestQueryCreateHandler(null, controller, pm, readHandler).handleRequest(request);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = testResult.getStatus();
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.BAD_REQUEST, resultStatus.getStatus());
    org.junit.Assert.assertEquals(""Invalid Request: The specified sub-resource name is not valid: 'INVALID'."", resultStatus.getMessage());
    EasyMock.verify(request, body, resourceInstance, resourceDefinition, query, predicate, result, subResource, subResourceDefinition, controller, serviceSchema, componentSchema, resource1, resource2, pm, createResource, status, statusResource1, statusResource2, readHandler, queryResultStatus);
}","tesHandleRequest_InvalidSubResSpecified()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/QueryCreateHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
45bb354c771e6438158a1475a4f987d5a5553f09
88b170d49d17dc03d5a2fc48f41afaccea836307
1b1678ee390d53955fa1a2297086e9d17507e076
01fda0811dac6b204e4a30bd2c11a4774b3ca509
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86"
"tesHandleRequest_NoSubResourcesSpecified","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resourceInstance = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createNiceMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.resources.ResourceInstance subResource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition subResourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.controller.spi.ClusterController controller = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.ClusterController.class);
    org.apache.ambari.server.controller.spi.Schema serviceSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema componentSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    java.lang.String resourceKeyProperty = ""resourceKeyProperty"";
    org.apache.ambari.server.controller.spi.Resource resource1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource resource2 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createNiceMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.api.resources.ResourceInstance createResource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.controller.spi.RequestStatus status = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource statusResource1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource statusResource2 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.handlers.RequestHandler readHandler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.ResultStatus queryResultStatus = EasyMock.createNiceMock(org.apache.ambari.server.api.services.ResultStatus.class);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setRequestProps = new java.util.HashSet<>();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, ""result"");
    resultTree.addChild(resource1, ""resource1"");
    resultTree.addChild(resource2, ""resource2"");
    EasyMock.expect(readHandler.handleRequest(request)).andReturn(result);
    EasyMock.expect(result.getStatus()).andReturn(queryResultStatus).anyTimes();
    EasyMock.expect(queryResultStatus.isErrorState()).andReturn(false);
    EasyMock.expect(result.getResultTree()).andReturn(resultTree);
    EasyMock.expect(request.getResource()).andReturn(resourceInstance).anyTimes();
    EasyMock.expect(request.getBody()).andReturn(body).anyTimes();
    EasyMock.expect(body.getNamedPropertySets()).andReturn(setRequestProps).anyTimes();
    EasyMock.expect(resourceInstance.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceInstance.getKeyValueMap()).andReturn(mapIds).anyTimes();
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Service).anyTimes();
    EasyMock.expect(controller.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(serviceSchema).anyTimes();
    EasyMock.expect(result.getResultTree()).andReturn(resultTree).anyTimes();
    EasyMock.expect(resource1.getPropertyValue(resourceKeyProperty)).andReturn(""id1"").anyTimes();
    EasyMock.expect(resource2.getPropertyValue(resourceKeyProperty)).andReturn(""id2"").anyTimes();
    EasyMock.replay(request, body, resourceInstance, resourceDefinition, query, predicate, result, subResource, subResourceDefinition, controller, serviceSchema, componentSchema, resource1, resource2, pm, createResource, status, statusResource1, statusResource2, readHandler, queryResultStatus);
    org.apache.ambari.server.api.services.Result testResult = new org.apache.ambari.server.api.handlers.QueryCreateHandlerTest.TestQueryCreateHandler(null, controller, pm, readHandler).handleRequest(request);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = testResult.getStatus();
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.BAD_REQUEST, resultStatus.getStatus());
    org.junit.Assert.assertEquals(""Invalid Request: A minimum of one sub-resource must be specified for creation."", resultStatus.getMessage());
    EasyMock.verify(request, body, resourceInstance, resourceDefinition, query, predicate, result, subResource, subResourceDefinition, controller, serviceSchema, componentSchema, resource1, resource2, pm, createResource, status, statusResource1, statusResource2, readHandler, queryResultStatus);
}","tesHandleRequest_NoSubResourcesSpecified()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/QueryCreateHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
45bb354c771e6438158a1475a4f987d5a5553f09
88b170d49d17dc03d5a2fc48f41afaccea836307
1b1678ee390d53955fa1a2297086e9d17507e076
01fda0811dac6b204e4a30bd2c11a4774b3ca509
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86"
"testHandleRequest_MultipleSubResources","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resourceInstance = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.resources.ResourceInstanceFactory resourceInstanceFactory = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstanceFactory.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createNiceMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.resources.ResourceInstance subResource1 = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceInstance subResource2 = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition subResourceDefinition1 = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.resources.ResourceDefinition subResourceDefinition2 = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.controller.spi.ClusterController controller = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.ClusterController.class);
    org.apache.ambari.server.controller.spi.Schema serviceSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema subResSchema1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema subResSchema2 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    java.lang.String resourceKeyProperty = ""resourceKeyProperty"";
    java.lang.String createKeyProperty = ""createKeyProperty"";
    org.apache.ambari.server.controller.spi.Resource resource1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource resource2 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createNiceMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.api.resources.ResourceInstance createResource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.controller.spi.RequestStatus status = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource statusResource1 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource statusResource2 = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.handlers.RequestHandler readHandler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.ResultStatus queryResultStatus = EasyMock.createNiceMock(org.apache.ambari.server.api.services.ResultStatus.class);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setRequestProps = new java.util.HashSet<>();
    java.util.Map<java.lang.String, java.lang.Object> mapProperties = new java.util.HashMap<>();
    java.util.Set<java.util.Map<java.lang.String, java.lang.Object>> arraySet = new java.util.HashSet<>();
    mapProperties.put(""foo"", arraySet);
    java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>();
    map.put(""prop"", ""val"");
    arraySet.add(map);
    arraySet = new java.util.HashSet<>();
    mapProperties.put(""bar"", arraySet);
    map = new java.util.HashMap<>();
    map.put(""prop"", ""val"");
    arraySet.add(map);
    setRequestProps.add(new org.apache.ambari.server.api.services.NamedPropertySet("""", mapProperties));
    java.util.Map<java.lang.String, org.apache.ambari.server.api.resources.ResourceInstance> mapSubResources = new java.util.HashMap<>();
    mapSubResources.put(""foo"", subResource1);
    mapSubResources.put(""bar"", subResource2);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, ""result"");
    resultTree.addChild(resource1, ""resource1"");
    resultTree.addChild(resource2, ""resource2"");
    EasyMock.expect(readHandler.handleRequest(request)).andReturn(result);
    EasyMock.expect(result.getStatus()).andReturn(queryResultStatus).anyTimes();
    EasyMock.expect(queryResultStatus.isErrorState()).andReturn(false);
    EasyMock.expect(result.getResultTree()).andReturn(resultTree);
    EasyMock.expect(request.getResource()).andReturn(resourceInstance).anyTimes();
    EasyMock.expect(request.getBody()).andReturn(body).anyTimes();
    EasyMock.expect(body.getNamedPropertySets()).andReturn(setRequestProps).anyTimes();
    EasyMock.expect(resourceInstance.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceInstance.getKeyValueMap()).andReturn(mapIds).anyTimes();
    EasyMock.expect(resourceInstance.getSubResources()).andReturn(mapSubResources).anyTimes();
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Service).anyTimes();
    EasyMock.expect(subResource1.getResourceDefinition()).andReturn(subResourceDefinition1).anyTimes();
    EasyMock.expect(subResourceDefinition1.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Component).anyTimes();
    EasyMock.expect(subResource2.getResourceDefinition()).andReturn(subResourceDefinition2).anyTimes();
    EasyMock.expect(subResourceDefinition2.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent).anyTimes();
    EasyMock.expect(controller.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(serviceSchema).anyTimes();
    EasyMock.expect(controller.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(subResSchema1).anyTimes();
    EasyMock.expect(controller.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent)).andReturn(subResSchema2).anyTimes();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(resourceKeyProperty).anyTimes();
    EasyMock.expect(subResSchema1.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(createKeyProperty).anyTimes();
    EasyMock.expect(subResSchema2.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(createKeyProperty).anyTimes();
    EasyMock.expect(result.getResultTree()).andReturn(resultTree).anyTimes();
    EasyMock.expect(resource1.getPropertyValue(resourceKeyProperty)).andReturn(""id1"").anyTimes();
    EasyMock.expect(resource2.getPropertyValue(resourceKeyProperty)).andReturn(""id2"").anyTimes();
    EasyMock.replay(request, body, resourceInstance, resourceDefinition, query, predicate, result, subResource1, subResource2, subResourceDefinition1, subResourceDefinition2, controller, serviceSchema, subResSchema1, subResSchema2, resource1, resource2, pm, resourceInstanceFactory, createResource, status, statusResource1, statusResource2, readHandler, queryResultStatus);
    org.apache.ambari.server.api.services.Result testResult = new org.apache.ambari.server.api.handlers.QueryCreateHandlerTest.TestQueryCreateHandler(resourceInstanceFactory, controller, pm, readHandler).handleRequest(request);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = testResult.getStatus();
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.BAD_REQUEST, resultStatus.getStatus());
    org.junit.Assert.assertEquals(""Invalid Request: Multiple sub-resource types may not be created in the same request."", resultStatus.getMessage());
    EasyMock.verify(request, body, resourceInstance, resourceDefinition, query, predicate, result, subResource1, subResource2, subResourceDefinition1, subResourceDefinition2, controller, serviceSchema, subResSchema1, subResSchema2, resource1, resource2, pm, resourceInstanceFactory, createResource, status, statusResource1, statusResource2, readHandler, queryResultStatus);
}","testHandleRequest_MultipleSubResources()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/QueryCreateHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
45bb354c771e6438158a1475a4f987d5a5553f09
88b170d49d17dc03d5a2fc48f41afaccea836307
1b1678ee390d53955fa1a2297086e9d17507e076
01fda0811dac6b204e4a30bd2c11a4774b3ca509
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86"
"testHandleRequest_AuthorizationFailure","TRUE","2","assertEquals","{
    final java.lang.String BODY_STRING = ""Body string"";
    org.apache.ambari.server.api.services.Request request = EasyMock.createMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resourceInstance = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.resources.ResourceInstanceFactory resourceInstanceFactory = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceInstanceFactory.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.resources.ResourceInstance subResource = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition subResourceDefinition = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.controller.spi.ClusterController controller = EasyMock.createMock(org.apache.ambari.server.controller.spi.ClusterController.class);
    org.apache.ambari.server.controller.spi.Schema serviceSchema = EasyMock.createMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema componentSchema = EasyMock.createMock(org.apache.ambari.server.controller.spi.Schema.class);
    java.lang.String resourceKeyProperty = ""resourceKeyProperty"";
    java.lang.String createKeyProperty = ""createKeyProperty"";
    org.apache.ambari.server.controller.spi.Resource resource1 = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource resource2 = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.api.resources.ResourceInstance createResource = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.handlers.RequestHandler readHandler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = EasyMock.createMock(org.apache.ambari.server.api.services.ResultStatus.class);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setRequestProps = new java.util.HashSet<>();
    java.util.Map<java.lang.String, java.lang.Object> mapProperties = new java.util.HashMap<>();
    java.util.Set<java.util.Map<java.lang.String, java.lang.Object>> arraySet = new java.util.HashSet<>();
    mapProperties.put(""components"", arraySet);
    java.util.Map<java.lang.String, java.lang.Object> map = new java.util.HashMap<>();
    map.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceComponentInfo"", ""component_name""), ""SECONDARY_NAMENODE"");
    arraySet.add(map);
    map = new java.util.HashMap<>();
    map.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceComponentInfo"", ""component_name""), ""HDFS_CLIENT"");
    arraySet.add(map);
    setRequestProps.add(new org.apache.ambari.server.api.services.NamedPropertySet("""", mapProperties));
    java.util.Map<java.lang.String, org.apache.ambari.server.api.resources.ResourceInstance> mapSubResources = new java.util.HashMap<>();
    mapSubResources.put(""components"", subResource);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, ""result"");
    resultTree.addChild(resource1, ""resource1"");
    resultTree.addChild(resource2, ""resource2"");
    EasyMock.expect(readHandler.handleRequest(request)).andReturn(result).atLeastOnce();
    EasyMock.expect(result.getStatus()).andReturn(resultStatus).atLeastOnce();
    EasyMock.expect(resultStatus.isErrorState()).andReturn(false).atLeastOnce();
    EasyMock.expect(body.getBody()).andReturn(BODY_STRING).atLeastOnce();
    EasyMock.expect(request.getResource()).andReturn(resourceInstance).atLeastOnce();
    EasyMock.expect(request.getBody()).andReturn(body).atLeastOnce();
    EasyMock.expect(body.getNamedPropertySets()).andReturn(setRequestProps).atLeastOnce();
    EasyMock.expect(resourceInstance.getResourceDefinition()).andReturn(resourceDefinition).atLeastOnce();
    EasyMock.expect(resourceInstance.getKeyValueMap()).andReturn(mapIds).atLeastOnce();
    EasyMock.expect(resourceInstance.getSubResources()).andReturn(mapSubResources).atLeastOnce();
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Service).atLeastOnce();
    EasyMock.expect(subResource.getResourceDefinition()).andReturn(subResourceDefinition).atLeastOnce();
    EasyMock.expect(subResourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Component).atLeastOnce();
    EasyMock.expect(controller.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(serviceSchema).atLeastOnce();
    EasyMock.expect(controller.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(componentSchema).atLeastOnce();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(resourceKeyProperty).atLeastOnce();
    EasyMock.expect(componentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(createKeyProperty).atLeastOnce();
    EasyMock.expect(result.getResultTree()).andReturn(resultTree).atLeastOnce();
    EasyMock.expect(resource1.getPropertyValue(resourceKeyProperty)).andReturn(""id1"").atLeastOnce();
    EasyMock.expect(resource2.getPropertyValue(resourceKeyProperty)).andReturn(""id2"").atLeastOnce();
    EasyMock.expect(resourceInstanceFactory.createResource(org.apache.ambari.server.controller.spi.Resource.Type.Component, mapIds)).andReturn(createResource).atLeastOnce();
    EasyMock.expect(pm.create(EasyMock.anyObject(org.apache.ambari.server.api.resources.ResourceInstance.class), EasyMock.anyObject(org.apache.ambari.server.api.services.RequestBody.class))).andThrow(new org.apache.ambari.server.security.authorization.AuthorizationException());
    EasyMock.replay(request, body, resourceInstance, resourceDefinition, query, predicate, result, subResource, subResourceDefinition, controller, serviceSchema, componentSchema, resource1, resource2, pm, resourceInstanceFactory, createResource, readHandler, resultStatus);
    org.apache.ambari.server.api.services.Result testResult = new org.apache.ambari.server.api.handlers.QueryCreateHandlerTest.TestQueryCreateHandler(resourceInstanceFactory, controller, pm, readHandler).handleRequest(request);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.FORBIDDEN, testResult.getStatus().getStatus());
    EasyMock.verify(request, body, resourceInstance, resourceDefinition, query, predicate, result, subResource, subResourceDefinition, controller, serviceSchema, componentSchema, resource1, resource2, pm, resourceInstanceFactory, createResource, readHandler, resultStatus);
}","testHandleRequest_AuthorizationFailure()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/QueryCreateHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
45bb354c771e6438158a1475a4f987d5a5553f09
88b170d49d17dc03d5a2fc48f41afaccea836307
1b1678ee390d53955fa1a2297086e9d17507e076
01fda0811dac6b204e4a30bd2c11a4774b3ca509
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86"
"testHandleRequest__InvalidField","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createStrictMock(org.apache.ambari.server.api.query.Query.class);
    java.util.Map<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo> mapPartialResponseFields = new java.util.HashMap<>();
    mapPartialResponseFields.put(""foo/bar"", null);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    EasyMock.expect(request.getResource()).andReturn(resource);
    EasyMock.expect(request.getFields()).andReturn(mapPartialResponseFields);
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    EasyMock.expect(resource.getQuery()).andReturn(query);
    query.setPageRequest(null);
    query.setSortRequest(null);
    query.setRenderer(renderer);
    query.addProperty(""foo/bar"", null);
    EasyMock.expectLastCall().andThrow(new java.lang.IllegalArgumentException(""testMsg""));
    EasyMock.replay(request, resource, query);
    org.apache.ambari.server.api.handlers.ReadHandler handler = new org.apache.ambari.server.api.handlers.ReadHandler();
    org.apache.ambari.server.api.services.Result result = handler.handleRequest(request);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.BAD_REQUEST, result.getStatus().getStatus());
    org.junit.Assert.assertEquals(""testMsg"", result.getStatus().getMessage());
    EasyMock.verify(request, resource, query);
}","testHandleRequest__InvalidField()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java","5af6e562c26da91417e4d6d8407eb0cb72e2d9a4
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
45bb354c771e6438158a1475a4f987d5a5553f09
513afd873c5a093db85461358c5a4bbbf658dee7
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
dd535bcf81398132f973faf3a58e71c9aa66e51b
374d164abfb97dbcd46294d7c326b814149faf34
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
76849482eef70ae3180deee2707d6cdfd1789414
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74"
"testHandleRequest__OK","TRUE","3","assertSame
assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createStrictMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createStrictMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createStrictMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createStrictMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    org.easymock.Capture<org.apache.ambari.server.api.services.ResultStatus> resultStatusCapture = org.easymock.EasyMock.newCapture();
    java.util.Map<java.lang.String, java.lang.String> requestInfoProperties = java.util.Collections.singletonMap(""directive"", ""value"");
    java.util.Map<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo> mapPartialResponseFields = new java.util.HashMap<>();
    mapPartialResponseFields.put(""foo"", null);
    mapPartialResponseFields.put(""bar/c"", null);
    mapPartialResponseFields.put(""bar/d/e"", null);
    mapPartialResponseFields.put(""category/"", null);
    EasyMock.expect(request.getResource()).andReturn(resource);
    EasyMock.expect(resource.getQuery()).andReturn(query);
    EasyMock.expect(request.getPageRequest()).andReturn(null);
    EasyMock.expect(request.getSortRequest()).andReturn(null);
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    EasyMock.expect(request.getBody()).andReturn(body);
    EasyMock.expect(request.getFields()).andReturn(mapPartialResponseFields);
    EasyMock.expect(body.getRequestInfoProperties()).andReturn(requestInfoProperties);
    query.setRequestInfoProps(requestInfoProperties);
    query.addProperty(""foo"", null);
    query.addProperty(""bar/c"", null);
    query.addProperty(""bar/d/e"", null);
    query.addProperty(""category/"", null);
    EasyMock.expect(request.getQueryPredicate()).andReturn(predicate);
    query.setUserPredicate(predicate);
    query.setPageRequest(null);
    query.setSortRequest(null);
    query.setRenderer(renderer);
    EasyMock.expect(query.execute()).andReturn(result);
    result.setResultStatus(EasyMock.capture(resultStatusCapture));
    EasyMock.replay(request, resource, body, query, predicate, result);
    org.apache.ambari.server.api.handlers.ReadHandler handler = new org.apache.ambari.server.api.handlers.ReadHandler();
    org.junit.Assert.assertSame(result, handler.handleRequest(request));
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK, resultStatusCapture.getValue().getStatus());
    EasyMock.verify(request, resource, body, query, predicate, result);
}","testHandleRequest__OK()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java","5af6e562c26da91417e4d6d8407eb0cb72e2d9a4
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
45bb354c771e6438158a1475a4f987d5a5553f09
513afd873c5a093db85461358c5a4bbbf658dee7
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
dd535bcf81398132f973faf3a58e71c9aa66e51b
374d164abfb97dbcd46294d7c326b814149faf34
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
76849482eef70ae3180deee2707d6cdfd1789414
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74"
"testHandleRequest__SystemException","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createStrictMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createStrictMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    EasyMock.expect(request.getResource()).andReturn(resource);
    EasyMock.expect(resource.getQuery()).andReturn(query);
    EasyMock.expect(request.getPageRequest()).andReturn(null);
    EasyMock.expect(request.getSortRequest()).andReturn(null);
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    EasyMock.expect(request.getBody()).andReturn(null);
    EasyMock.expect(request.getFields()).andReturn(java.util.Collections.emptyMap());
    EasyMock.expect(request.getQueryPredicate()).andReturn(predicate);
    query.setUserPredicate(predicate);
    query.setPageRequest(null);
    query.setSortRequest(null);
    query.setRenderer(renderer);
    org.apache.ambari.server.controller.spi.SystemException systemException = new org.apache.ambari.server.controller.spi.SystemException(""testMsg"", new java.lang.RuntimeException());
    EasyMock.expect(query.execute()).andThrow(systemException);
    EasyMock.replay(request, resource, query, predicate);
    org.apache.ambari.server.api.handlers.ReadHandler handler = new org.apache.ambari.server.api.handlers.ReadHandler();
    org.apache.ambari.server.api.services.Result result = handler.handleRequest(request);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.SERVER_ERROR, result.getStatus().getStatus());
    org.junit.Assert.assertEquals(systemException.getMessage(), result.getStatus().getMessage());
    EasyMock.verify(request, resource, query, predicate);
}","testHandleRequest__SystemException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java","5af6e562c26da91417e4d6d8407eb0cb72e2d9a4
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
45bb354c771e6438158a1475a4f987d5a5553f09
513afd873c5a093db85461358c5a4bbbf658dee7
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
dd535bcf81398132f973faf3a58e71c9aa66e51b
374d164abfb97dbcd46294d7c326b814149faf34
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
76849482eef70ae3180deee2707d6cdfd1789414
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74"
"testHandleRequest__NoSuchParentResourceException","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createStrictMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createStrictMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.controller.spi.NoSuchParentResourceException exception = new org.apache.ambari.server.controller.spi.NoSuchParentResourceException(""exceptionMsg"", new java.lang.RuntimeException());
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    EasyMock.expect(request.getResource()).andReturn(resource);
    EasyMock.expect(resource.getQuery()).andReturn(query);
    EasyMock.expect(request.getPageRequest()).andReturn(null);
    EasyMock.expect(request.getSortRequest()).andReturn(null);
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    EasyMock.expect(request.getBody()).andReturn(null);
    EasyMock.expect(request.getFields()).andReturn(java.util.Collections.emptyMap());
    EasyMock.expect(request.getQueryPredicate()).andReturn(predicate);
    query.setUserPredicate(predicate);
    query.setPageRequest(null);
    query.setSortRequest(null);
    query.setRenderer(renderer);
    EasyMock.expect(query.execute()).andThrow(exception);
    EasyMock.replay(request, resource, query, predicate);
    org.apache.ambari.server.api.handlers.ReadHandler handler = new org.apache.ambari.server.api.handlers.ReadHandler();
    org.apache.ambari.server.api.services.Result result = handler.handleRequest(request);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.NOT_FOUND, result.getStatus().getStatus());
    org.junit.Assert.assertEquals(""exceptionMsg"", result.getStatus().getMessage());
    EasyMock.verify(request, resource, query, predicate);
}","testHandleRequest__NoSuchParentResourceException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java","5af6e562c26da91417e4d6d8407eb0cb72e2d9a4
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
45bb354c771e6438158a1475a4f987d5a5553f09
513afd873c5a093db85461358c5a4bbbf658dee7
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
dd535bcf81398132f973faf3a58e71c9aa66e51b
374d164abfb97dbcd46294d7c326b814149faf34
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
76849482eef70ae3180deee2707d6cdfd1789414
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74"
"testHandleRequest__UnsupportedPropertyException","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createStrictMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createStrictMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    org.apache.ambari.server.controller.spi.UnsupportedPropertyException exception = new org.apache.ambari.server.controller.spi.UnsupportedPropertyException(org.apache.ambari.server.controller.spi.Resource.Type.Cluster, java.util.Collections.singleton(""foo""));
    EasyMock.expect(request.getResource()).andReturn(resource);
    EasyMock.expect(resource.getQuery()).andReturn(query);
    EasyMock.expect(request.getPageRequest()).andReturn(null);
    EasyMock.expect(request.getSortRequest()).andReturn(null);
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    EasyMock.expect(request.getBody()).andReturn(null);
    EasyMock.expect(request.getFields()).andReturn(java.util.Collections.emptyMap());
    EasyMock.expect(request.getQueryPredicate()).andReturn(predicate);
    query.setUserPredicate(predicate);
    query.setPageRequest(null);
    query.setSortRequest(null);
    query.setRenderer(renderer);
    EasyMock.expect(query.execute()).andThrow(exception);
    EasyMock.replay(request, resource, query, predicate);
    org.apache.ambari.server.api.handlers.ReadHandler handler = new org.apache.ambari.server.api.handlers.ReadHandler();
    org.apache.ambari.server.api.services.Result result = handler.handleRequest(request);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.BAD_REQUEST, result.getStatus().getStatus());
    org.junit.Assert.assertEquals(exception.getMessage(), result.getStatus().getMessage());
    EasyMock.verify(request, resource, query, predicate);
}","testHandleRequest__UnsupportedPropertyException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java","5af6e562c26da91417e4d6d8407eb0cb72e2d9a4
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
45bb354c771e6438158a1475a4f987d5a5553f09
513afd873c5a093db85461358c5a4bbbf658dee7
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
dd535bcf81398132f973faf3a58e71c9aa66e51b
374d164abfb97dbcd46294d7c326b814149faf34
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
76849482eef70ae3180deee2707d6cdfd1789414
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74"
"testHandleRequest__NoSuchResourceException_OK","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createStrictMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createStrictMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.controller.spi.NoSuchResourceException exception = new org.apache.ambari.server.controller.spi.NoSuchResourceException(""msg"", new java.lang.RuntimeException());
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    EasyMock.expect(request.getResource()).andReturn(resource);
    EasyMock.expect(resource.getQuery()).andReturn(query);
    EasyMock.expect(request.getPageRequest()).andReturn(null);
    EasyMock.expect(request.getSortRequest()).andReturn(null);
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    EasyMock.expect(request.getBody()).andReturn(null);
    EasyMock.expect(request.getFields()).andReturn(java.util.Collections.emptyMap());
    EasyMock.expect(request.getQueryPredicate()).andReturn(predicate).anyTimes();
    query.setUserPredicate(predicate);
    query.setPageRequest(null);
    query.setSortRequest(null);
    query.setRenderer(renderer);
    EasyMock.expect(query.execute()).andThrow(exception);
    EasyMock.replay(request, resource, query, predicate);
    org.apache.ambari.server.api.handlers.ReadHandler handler = new org.apache.ambari.server.api.handlers.ReadHandler();
    org.apache.ambari.server.api.services.Result result = handler.handleRequest(request);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK, result.getStatus().getStatus());
    EasyMock.verify(request, resource, query, predicate);
}","testHandleRequest__NoSuchResourceException_OK()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java","5af6e562c26da91417e4d6d8407eb0cb72e2d9a4
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
45bb354c771e6438158a1475a4f987d5a5553f09
513afd873c5a093db85461358c5a4bbbf658dee7
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
dd535bcf81398132f973faf3a58e71c9aa66e51b
374d164abfb97dbcd46294d7c326b814149faf34
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
76849482eef70ae3180deee2707d6cdfd1789414
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74"
"testHandleRequest__NoSuchResourceException_NOT_FOUND","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createStrictMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createStrictMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.controller.spi.NoSuchResourceException exception = new org.apache.ambari.server.controller.spi.NoSuchResourceException(""msg"", new java.lang.RuntimeException());
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    EasyMock.expect(request.getResource()).andReturn(resource);
    EasyMock.expect(resource.getQuery()).andReturn(query);
    EasyMock.expect(request.getPageRequest()).andReturn(null);
    EasyMock.expect(request.getSortRequest()).andReturn(null);
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    EasyMock.expect(request.getBody()).andReturn(null);
    EasyMock.expect(request.getFields()).andReturn(java.util.Collections.emptyMap());
    EasyMock.expect(request.getQueryPredicate()).andReturn(null).anyTimes();
    query.setUserPredicate(null);
    query.setPageRequest(null);
    query.setSortRequest(null);
    query.setRenderer(renderer);
    EasyMock.expect(query.execute()).andThrow(exception);
    EasyMock.replay(request, resource, query);
    org.apache.ambari.server.api.handlers.ReadHandler handler = new org.apache.ambari.server.api.handlers.ReadHandler();
    org.apache.ambari.server.api.services.Result result = handler.handleRequest(request);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.NOT_FOUND, result.getStatus().getStatus());
    org.junit.Assert.assertEquals(exception.getMessage(), result.getStatus().getMessage());
    EasyMock.verify(request, resource, query);
}","testHandleRequest__NoSuchResourceException_NOT_FOUND()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java","5af6e562c26da91417e4d6d8407eb0cb72e2d9a4
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
45bb354c771e6438158a1475a4f987d5a5553f09
513afd873c5a093db85461358c5a4bbbf658dee7
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
dd535bcf81398132f973faf3a58e71c9aa66e51b
374d164abfb97dbcd46294d7c326b814149faf34
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
76849482eef70ae3180deee2707d6cdfd1789414
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74"
"testHandleRequest__AuthorizationException","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createStrictMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createStrictMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    EasyMock.expect(request.getResource()).andReturn(resource);
    EasyMock.expect(resource.getQuery()).andReturn(query);
    EasyMock.expect(request.getPageRequest()).andReturn(null);
    EasyMock.expect(request.getSortRequest()).andReturn(null);
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    EasyMock.expect(request.getBody()).andReturn(null);
    EasyMock.expect(request.getFields()).andReturn(java.util.Collections.emptyMap());
    EasyMock.expect(request.getQueryPredicate()).andReturn(predicate);
    query.setUserPredicate(predicate);
    query.setPageRequest(null);
    query.setSortRequest(null);
    query.setRenderer(renderer);
    org.apache.ambari.server.security.authorization.AuthorizationException authorizationException = new org.apache.ambari.server.security.authorization.AuthorizationException(""testMsg"");
    EasyMock.expect(query.execute()).andThrow(authorizationException);
    EasyMock.replay(request, resource, query, predicate);
    org.apache.ambari.server.api.handlers.ReadHandler handler = new org.apache.ambari.server.api.handlers.ReadHandler();
    org.apache.ambari.server.api.services.Result result = handler.handleRequest(request);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.FORBIDDEN, result.getStatus().getStatus());
    org.junit.Assert.assertEquals(authorizationException.getMessage(), result.getStatus().getMessage());
    EasyMock.verify(request, resource, query, predicate);
}","testHandleRequest__AuthorizationException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/ReadHandlerTest.java","5af6e562c26da91417e4d6d8407eb0cb72e2d9a4
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
45bb354c771e6438158a1475a4f987d5a5553f09
513afd873c5a093db85461358c5a4bbbf658dee7
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
dd535bcf81398132f973faf3a58e71c9aa66e51b
374d164abfb97dbcd46294d7c326b814149faf34
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
76849482eef70ae3180deee2707d6cdfd1789414
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74"
"testHandleRequest__Synchronous","TRUE","5","assertNotNull
assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createStrictMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.controller.spi.RequestStatus status = EasyMock.createMock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource resource1 = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource resource2 = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Predicate userPredicate = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createNiceMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> setResources = new java.util.HashSet<>();
    setResources.add(resource1);
    setResources.add(resource2);
    EasyMock.expect(request.getResource()).andReturn(resource).anyTimes();
    EasyMock.expect(request.getBody()).andReturn(body).anyTimes();
    EasyMock.expect(request.getQueryPredicate()).andReturn(userPredicate).atLeastOnce();
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    EasyMock.expect(resource.getQuery()).andReturn(query).atLeastOnce();
    query.setRenderer(renderer);
    query.setUserPredicate(userPredicate);
    EasyMock.expect(pm.update(resource, body)).andReturn(status);
    EasyMock.expect(status.getStatus()).andReturn(org.apache.ambari.server.controller.spi.RequestStatus.Status.Complete);
    EasyMock.expect(status.getStatusMetadata()).andReturn(null);
    EasyMock.expect(status.getAssociatedResources()).andReturn(setResources);
    EasyMock.expect(resource1.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.expect(resource2.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.replay(request, body, resource, pm, status, resource1, resource2, userPredicate, query);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.handlers.UpdateHandlerTest.TestUpdateHandler(pm).handleRequest(request);
    org.junit.Assert.assertNotNull(result);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resourcesNode = tree.getChild(""resources"");
    org.junit.Assert.assertEquals(2, resourcesNode.getChildren().size());
    boolean foundResource1 = false;
    boolean foundResource2 = false;
    for (org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> child : resourcesNode.getChildren()) {
        org.apache.ambari.server.controller.spi.Resource r = child.getObject();
        if ((r == resource1) && (!foundResource1)) {
            foundResource1 = true;
        } else if ((r == resource2) && (!foundResource2)) {
            foundResource2 = true;
        } else {
            org.junit.Assert.fail();
        }
    }
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK, result.getStatus().getStatus());
    EasyMock.verify(request, body, resource, pm, status, resource1, resource2, userPredicate, query);
}","testHandleRequest__Synchronous()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/UpdateHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
cc10ec0b4acdfb522ff193fc66f777aa82b9f6be
45bb354c771e6438158a1475a4f987d5a5553f09
5a60fa18a58ec1c38cdde625adb2b7e61eaf936b
1fc24756668b2dbb467b5652b1291659958c763a
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testHandleRequest__Asynchronous","TRUE","8","assertNotNull
assertEquals
assertSame","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createStrictMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.controller.spi.RequestStatus status = EasyMock.createMock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource resource1 = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource resource2 = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource requestResource = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Predicate userPredicate = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createNiceMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> setResources = new java.util.HashSet<>();
    setResources.add(resource1);
    setResources.add(resource2);
    EasyMock.expect(request.getResource()).andReturn(resource).anyTimes();
    EasyMock.expect(request.getBody()).andReturn(body).anyTimes();
    EasyMock.expect(request.getQueryPredicate()).andReturn(userPredicate).atLeastOnce();
    EasyMock.expect(request.getRenderer()).andReturn(renderer);
    EasyMock.expect(resource.getQuery()).andReturn(query).atLeastOnce();
    query.setRenderer(renderer);
    query.setUserPredicate(userPredicate);
    EasyMock.expect(pm.update(resource, body)).andReturn(status);
    EasyMock.expect(status.getStatus()).andReturn(org.apache.ambari.server.controller.spi.RequestStatus.Status.Accepted);
    EasyMock.expect(status.getStatusMetadata()).andReturn(null);
    EasyMock.expect(status.getAssociatedResources()).andReturn(setResources);
    EasyMock.expect(resource1.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.expect(resource2.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.expect(status.getRequestResource()).andReturn(requestResource).anyTimes();
    EasyMock.replay(request, body, resource, pm, status, resource1, resource2, requestResource, userPredicate, query);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.handlers.UpdateHandlerTest.TestUpdateHandler(pm).handleRequest(request);
    org.junit.Assert.assertNotNull(result);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(2, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resourcesNode = tree.getChild(""resources"");
    org.junit.Assert.assertEquals(2, resourcesNode.getChildren().size());
    boolean foundResource1 = false;
    boolean foundResource2 = false;
    for (org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> child : resourcesNode.getChildren()) {
        org.apache.ambari.server.controller.spi.Resource r = child.getObject();
        if ((r == resource1) && (!foundResource1)) {
            foundResource1 = true;
        } else if ((r == resource2) && (!foundResource2)) {
            foundResource2 = true;
        } else {
            org.junit.Assert.fail();
        }
    }
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> statusNode = tree.getChild(""request"");
    org.junit.Assert.assertNotNull(statusNode);
    org.junit.Assert.assertEquals(0, statusNode.getChildren().size());
    org.junit.Assert.assertSame(requestResource, statusNode.getObject());
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.ACCEPTED, result.getStatus().getStatus());
    EasyMock.verify(request, body, resource, pm, status, resource1, resource2, requestResource, userPredicate, query);
}","testHandleRequest__Asynchronous()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/UpdateHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
cc10ec0b4acdfb522ff193fc66f777aa82b9f6be
45bb354c771e6438158a1475a4f987d5a5553f09
5a60fa18a58ec1c38cdde625adb2b7e61eaf936b
1fc24756668b2dbb467b5652b1291659958c763a
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testHandleRequest__AuthorizationFailure","TRUE","3","assertNotNull
assertEquals","{
    org.apache.ambari.server.api.services.Request request = EasyMock.createMock(org.apache.ambari.server.api.services.Request.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.services.persistence.PersistenceManager pm = EasyMock.createStrictMock(org.apache.ambari.server.api.services.persistence.PersistenceManager.class);
    org.apache.ambari.server.controller.spi.Predicate userPredicate = EasyMock.createMock(org.apache.ambari.server.controller.spi.Predicate.class);
    org.apache.ambari.server.api.query.Query query = EasyMock.createMock(org.apache.ambari.server.api.query.Query.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    EasyMock.expect(request.getResource()).andReturn(resource).atLeastOnce();
    EasyMock.expect(request.getBody()).andReturn(body).atLeastOnce();
    EasyMock.expect(request.getQueryPredicate()).andReturn(userPredicate).atLeastOnce();
    EasyMock.expect(request.getRenderer()).andReturn(renderer).atLeastOnce();
    EasyMock.expect(resource.getQuery()).andReturn(query).atLeastOnce();
    query.setRenderer(renderer);
    query.setUserPredicate(userPredicate);
    EasyMock.expect(pm.update(resource, body)).andThrow(new org.apache.ambari.server.security.authorization.AuthorizationException());
    EasyMock.replay(request, body, resource, pm, userPredicate, query);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.handlers.UpdateHandlerTest.TestUpdateHandler(pm).handleRequest(request);
    org.junit.Assert.assertNotNull(result);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.ResultStatus.STATUS.FORBIDDEN, result.getStatus().getStatus());
    EasyMock.verify(request, body, resource, pm, userPredicate, query);
}","testHandleRequest__AuthorizationFailure()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/handlers/UpdateHandlerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
cc10ec0b4acdfb522ff193fc66f777aa82b9f6be
45bb354c771e6438158a1475a4f987d5a5553f09
5a60fa18a58ec1c38cdde625adb2b7e61eaf936b
1fc24756668b2dbb467b5652b1291659958c763a
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testTokens_simple","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""a""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""&""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_OPEN, ""(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""<=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""b""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""2""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""|""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, "">""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""c""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""3""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""a=1&(b<=2|c>3)"");
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_simple()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_multipleBrackets","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""<""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""a""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""&""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_OPEN, ""(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""<=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""b""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""2""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""&""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_OPEN, ""(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, "">=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""c""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""3""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""|""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""!=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""d""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""4""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""a<1&(b<=2&(c>=3|d!=4))"");
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_multipleBrackets()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testUnaryNot","TRUE","2","assertArrayEquals","{
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""!foo<5"");
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_UNARY_OPERATOR, ""!""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""<""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""5""));
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testUnaryNot()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testInOperator","TRUE","2","assertArrayEquals","{
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""foo.in(one, two, 3)"");
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR_FUNC, "".in(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""one, two, 3""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testInOperator()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testIsEmptyOperator","TRUE","2","assertArrayEquals","{
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""category1.isEmpty()"");
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR_FUNC, "".isEmpty(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""category1""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testIsEmptyOperator()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignoreFieldsSyntax___noPredicate","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""fields=foo,bar"");
    org.junit.Assert.assertEquals(0, tokens.length);
}","testTokens_ignoreFieldsSyntax___noPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignoreFieldsSyntax___fieldsFirst","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""fields=foo,bar&foo=1"");
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_ignoreFieldsSyntax___fieldsFirst()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignoreFieldsSyntax___fieldsLast","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""foo=1&fields=foo,bar"");
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_ignoreFieldsSyntax___fieldsLast()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignoreFormatSyntax___noPredicate","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""format=default"");
    org.junit.Assert.assertEquals(0, tokens.length);
}","testTokens_ignoreFormatSyntax___noPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignoreFormatSyntax___formatFirst","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""format=default&foo=1"");
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_ignoreFormatSyntax___formatFirst()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignoreFormatSyntax___formatLast","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""foo=1&format=foo"");
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_ignoreFormatSyntax___formatLast()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignoreUnderscoreSyntax___noPredicate","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""_=1"");
    org.junit.Assert.assertEquals(0, tokens.length);
}","testTokens_ignoreUnderscoreSyntax___noPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignoreUnderscoreSyntax___fieldsFirst","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""_=111111&foo=1"");
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_ignoreUnderscoreSyntax___fieldsFirst()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignoreUnderscoreSyntax___fieldsLast","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""foo=1&_=11111"");
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_ignoreUnderscoreSyntax___fieldsLast()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignore__multipleIgnoreFields","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""fields=a/b&foo=1&_=5555555"");
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_ignore__multipleIgnoreFields()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignore__multipleConsecutiveIgnoreFields","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""foo=1&fields=a/b&_=5555555"");
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_ignore__multipleConsecutiveIgnoreFields()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignore__multipleConsecutiveIgnoreFields2","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""fields=a/b&_=5555555&foo=1"");
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_ignore__multipleConsecutiveIgnoreFields2()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignore__fieldsMiddle","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""&""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""bar""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""2""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""foo=1&fields=a/b&bar=2"");
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_ignore__fieldsMiddle()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignore__fieldsMiddle2","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""&""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""bar""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""2""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""foo=1&fields=a/b,c&_=123&bar=2"");
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_ignore__fieldsMiddle2()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_ignore__userDefined","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""&""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""bar""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""2""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    java.util.Set<java.lang.String> propertiesToIgnore = new java.util.HashSet<>();
    propertiesToIgnore.add(""ignore1"");
    propertiesToIgnore.add(""otherIgnore"");
    propertiesToIgnore.add(""ba"");
    propertiesToIgnore.add(""ple"");
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""ba=gone&foo=1&ignore1=pleaseIgnoreMe&fields=a/b&bar=2&otherIgnore=byebye"", propertiesToIgnore);
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_ignore__userDefined()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_invalidRelationalOp","FALSE","0","None","{
    try {
        new org.apache.ambari.server.api.predicate.QueryLexer().tokens(""foo=1&bar|5"");
        org.junit.Assert.fail(""Expected InvalidQueryException due to invalid relational op"");
    } catch (org.apache.ambari.server.api.predicate.InvalidQueryException e) {
    }
}","testTokens_invalidRelationalOp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_invalidLogicalOp","FALSE","0","None","{
    try {
        new org.apache.ambari.server.api.predicate.QueryLexer().tokens(""foo=1<5=2"");
        org.junit.Assert.fail(""Expected InvalidQueryException due to invalid logical op"");
    } catch (org.apache.ambari.server.api.predicate.InvalidQueryException e) {
    }
}","testTokens_invalidLogicalOp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_invalidLogicalOp2","FALSE","0","None","{
    try {
        new org.apache.ambari.server.api.predicate.QueryLexer().tokens(""foo=1&&5=2"");
        org.junit.Assert.fail(""Expected InvalidQueryException due to invalid logical op"");
    } catch (org.apache.ambari.server.api.predicate.InvalidQueryException e) {
    }
}","testTokens_invalidLogicalOp2()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_matchesRegexp_simple","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR_FUNC, "".matches(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""StackConfigurations/property_type""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""(.*USER.*)|(.*GROUP.*)""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""StackConfigurations/property_type.matches((.*USER.*)|(.*GROUP.*))"");
    org.junit.Assert.assertArrayEquals(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_matchesRegexp_simple()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_matchesRegexp","TRUE","2","assertArrayEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_OPEN, ""(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR_FUNC, "".matches(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""StackConfigurations/property_type""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""(([^=])|=|!=),.in(&).*USER.*.isEmpty(a).matches(b)""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""|""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR_FUNC, "".matches(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""StackConfigurations/property_type""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""fields format to from .*GROUP.*""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    org.apache.ambari.server.api.predicate.Token[] tokens = lexer.tokens(""(StackConfigurations/property_type.matches((([^=])|=|!=),.in(&).*USER.*"" + "".isEmpty(a).matches(b))|StackConfigurations/property_type.matches(fields format to from .*GROUP.*))"");
    org.junit.Assert.assertArrayEquals(""All characters between \"".matches(\"" and corresponding closing \"")\"" bracket should "" + ""come to VALUE_OPERAND."", listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]), tokens);
}","testTokens_matchesRegexp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_matchesRegexpInvalidQuery","FALSE","0","None","{
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    lexer.tokens(""StackConfigurations/property_type.matches((.*USER.*)|(.*GROUP.*)"");
}","testTokens_matchesRegexpInvalidQuery()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testTokens_matchesRegexpInvalidQuery2","FALSE","0","None","{
    org.apache.ambari.server.api.predicate.QueryLexer lexer = new org.apache.ambari.server.api.predicate.QueryLexer();
    lexer.tokens(""StackConfigurations/property_type.matches((.*USER.*)|(.*GROUP.*)|StackConfigurations/property_type.matches(.*GROUP.*)"");
}","testTokens_matchesRegexpInvalidQuery2()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryLexerTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4fb0f6ec07b4e4df40bdfd63e26cb240305a8715
f77be4c4df25aef336f00a7aa9bc0591b347dfb6
265f13f467f9d190cba4a0e59271b68d45d5caae
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
053aca65b5a08e0fc55e0dbcd2a051b1c8238a50
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_simple","TRUE","2","assertEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""a""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""b""));
    org.apache.ambari.server.api.predicate.QueryParser parser = new org.apache.ambari.server.api.predicate.QueryParser();
    org.apache.ambari.server.controller.spi.Predicate p = parser.parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""a"", ""b""), p);
}","testParse_simple()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse","TRUE","2","assertEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""bar""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""&""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_OPEN, ""(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""<""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""a""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""&""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_OPEN, ""(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""<=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""b""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""2""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""|""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, "">""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""c""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""3""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""&""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, "">=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""d""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""100""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""|""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""!=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""e""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""5""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""&""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_UNARY_OPERATOR, ""!""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_OPEN, ""(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""f""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""6""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""|""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""g""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""7""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.apache.ambari.server.api.predicate.QueryParser parser = new org.apache.ambari.server.api.predicate.QueryParser();
    org.apache.ambari.server.controller.spi.Predicate p = parser.parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
    org.apache.ambari.server.controller.predicate.EqualsPredicate<java.lang.String> fooPred = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""foo"", ""bar"");
    org.apache.ambari.server.controller.predicate.LessPredicate<java.lang.String> aPred = new org.apache.ambari.server.controller.predicate.LessPredicate<>(""a"", ""1"");
    org.apache.ambari.server.controller.predicate.LessEqualsPredicate<java.lang.String> bPred = new org.apache.ambari.server.controller.predicate.LessEqualsPredicate<>(""b"", ""2"");
    org.apache.ambari.server.controller.predicate.GreaterEqualsPredicate<java.lang.String> cPred = new org.apache.ambari.server.controller.predicate.GreaterEqualsPredicate<>(""c"", ""3"");
    org.apache.ambari.server.controller.predicate.GreaterEqualsPredicate<java.lang.String> dPred = new org.apache.ambari.server.controller.predicate.GreaterEqualsPredicate<>(""d"", ""100"");
    org.apache.ambari.server.controller.predicate.NotPredicate ePred = new org.apache.ambari.server.controller.predicate.NotPredicate(new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""e"", ""5""));
    org.apache.ambari.server.controller.predicate.EqualsPredicate fPred = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""f"", ""6"");
    org.apache.ambari.server.controller.predicate.EqualsPredicate gPRed = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""g"", ""7"");
    org.apache.ambari.server.controller.predicate.OrPredicate bORcPred = new org.apache.ambari.server.controller.predicate.OrPredicate(bPred, cPred);
    org.apache.ambari.server.controller.predicate.AndPredicate aANDbORcPred = new org.apache.ambari.server.controller.predicate.AndPredicate(aPred, bORcPred);
    org.apache.ambari.server.controller.predicate.AndPredicate aANDbORcANDdPred = new org.apache.ambari.server.controller.predicate.AndPredicate(aANDbORcPred, dPred);
    org.apache.ambari.server.controller.predicate.AndPredicate fooANDaANDbORcANDdPred = new org.apache.ambari.server.controller.predicate.AndPredicate(fooPred, aANDbORcANDdPred);
    org.apache.ambari.server.controller.predicate.OrPredicate fORgPred = new org.apache.ambari.server.controller.predicate.OrPredicate(fPred, gPRed);
    org.apache.ambari.server.controller.predicate.NotPredicate NOTfORgPred = new org.apache.ambari.server.controller.predicate.NotPredicate(fORgPred);
    org.apache.ambari.server.controller.predicate.AndPredicate eANDNOTfORgPred = new org.apache.ambari.server.controller.predicate.AndPredicate(ePred, NOTfORgPred);
    org.apache.ambari.server.controller.predicate.OrPredicate rootPredicate = new org.apache.ambari.server.controller.predicate.OrPredicate(fooANDaANDbORcANDdPred, eANDNOTfORgPred);
    org.junit.Assert.assertEquals(rootPredicate, p);
}","testParse()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_NotOp__simple","TRUE","2","assertEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_UNARY_OPERATOR, ""!""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""a""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""b""));
    org.apache.ambari.server.api.predicate.QueryParser parser = new org.apache.ambari.server.api.predicate.QueryParser();
    org.apache.ambari.server.controller.spi.Predicate p = parser.parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.predicate.NotPredicate(new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""a"", ""b"")), p);
}","testParse_NotOp__simple()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_NotOp","TRUE","2","assertEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""a""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""&""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_UNARY_OPERATOR, ""!""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""b""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""2""));
    org.apache.ambari.server.api.predicate.QueryParser parser = new org.apache.ambari.server.api.predicate.QueryParser();
    org.apache.ambari.server.controller.spi.Predicate p = parser.parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
    org.apache.ambari.server.controller.predicate.EqualsPredicate aPred = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""a"", ""1"");
    org.apache.ambari.server.controller.predicate.EqualsPredicate bPred = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""b"", ""2"");
    org.apache.ambari.server.controller.predicate.NotPredicate notPred = new org.apache.ambari.server.controller.predicate.NotPredicate(bPred);
    org.apache.ambari.server.controller.predicate.AndPredicate andPred = new org.apache.ambari.server.controller.predicate.AndPredicate(aPred, notPred);
    org.junit.Assert.assertEquals(andPred, p);
}","testParse_NotOp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_InOp__simple","TRUE","2","assertEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR_FUNC, "".in(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""one,two,3""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.apache.ambari.server.api.predicate.QueryParser parser = new org.apache.ambari.server.api.predicate.QueryParser();
    org.apache.ambari.server.controller.spi.Predicate p = parser.parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
    org.apache.ambari.server.controller.predicate.EqualsPredicate ep1 = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""foo"", ""one"");
    org.apache.ambari.server.controller.predicate.EqualsPredicate ep2 = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""foo"", ""two"");
    org.apache.ambari.server.controller.predicate.EqualsPredicate ep3 = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""foo"", ""3"");
    org.apache.ambari.server.controller.predicate.OrPredicate orPredicate = new org.apache.ambari.server.controller.predicate.OrPredicate(ep1, ep2, ep3);
    org.junit.Assert.assertEquals(orPredicate, p);
}","testParse_InOp__simple()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_InOp__HostName","TRUE","2","assertEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR_FUNC, "".in(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""HostRoles/host_name""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""Host1,HOST2,HoSt3""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.apache.ambari.server.api.predicate.QueryParser parser = new org.apache.ambari.server.api.predicate.QueryParser();
    org.apache.ambari.server.controller.spi.Predicate p = parser.parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
    org.apache.ambari.server.controller.predicate.EqualsPredicate ep1 = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""HostRoles/host_name"", ""host1"");
    org.apache.ambari.server.controller.predicate.EqualsPredicate ep2 = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""HostRoles/host_name"", ""host2"");
    org.apache.ambari.server.controller.predicate.EqualsPredicate ep3 = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""HostRoles/host_name"", ""host3"");
    org.apache.ambari.server.controller.predicate.OrPredicate orPredicate = new org.apache.ambari.server.controller.predicate.OrPredicate(ep1, ep2, ep3);
    org.junit.Assert.assertEquals(orPredicate, p);
}","testParse_InOp__HostName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_InOp__HostName_Empty","TRUE","2","assertEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR_FUNC, "".in(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""Hosts/host_name""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.apache.ambari.server.api.predicate.QueryParser parser = new org.apache.ambari.server.api.predicate.QueryParser();
    try {
        org.apache.ambari.server.controller.spi.Predicate p = parser.parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
        org.junit.Assert.fail();
    } catch (org.apache.ambari.server.api.predicate.InvalidQueryException e) {
        org.junit.Assert.assertEquals(e.getMessage(), ""IN operator is missing a required right operand for property Hosts/host_name"");
    }
}","testParse_InOp__HostName_Empty()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_EquOp_HostName","TRUE","2","assertEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""HostRoles/host_name""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""HOST1""));
    org.apache.ambari.server.api.predicate.QueryParser parser = new org.apache.ambari.server.api.predicate.QueryParser();
    org.apache.ambari.server.controller.spi.Predicate p = parser.parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
    org.apache.ambari.server.controller.predicate.EqualsPredicate equalsPred = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""HostRoles/host_name"", ""host1"");
    org.junit.Assert.assertEquals(equalsPred, p);
}","testParse_EquOp_HostName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_InOp__exception","FALSE","0","None","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR_FUNC, "".in(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.apache.ambari.server.api.predicate.QueryParser parser = new org.apache.ambari.server.api.predicate.QueryParser();
    try {
        parser.parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
        org.junit.Assert.fail(""Expected InvalidQueryException due to missing right operand"");
    } catch (org.apache.ambari.server.api.predicate.InvalidQueryException e) {
    }
}","testParse_InOp__exception()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_FilterOp","TRUE","2","assertEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR_FUNC, "".matches(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, "".*""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.apache.ambari.server.api.predicate.QueryParser parser = new org.apache.ambari.server.api.predicate.QueryParser();
    org.apache.ambari.server.controller.spi.Predicate p = parser.parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
    org.apache.ambari.server.controller.predicate.FilterPredicate fp = new org.apache.ambari.server.controller.predicate.FilterPredicate(""foo"", "".*"");
    org.junit.Assert.assertEquals(fp, p);
}","testParse_FilterOp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_FilterOp_exception","FALSE","0","None","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR_FUNC, "".matches(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""foo""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.apache.ambari.server.api.predicate.QueryParser parser = new org.apache.ambari.server.api.predicate.QueryParser();
    try {
        org.apache.ambari.server.controller.spi.Predicate p = parser.parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
        org.junit.Assert.fail(""Filter operator is missing a required right operand."");
    } catch (org.apache.ambari.server.api.predicate.InvalidQueryException e) {
    }
}","testParse_FilterOp_exception()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_isEmptyOp__simple","TRUE","2","assertEquals","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR_FUNC, "".isEmpty(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""category1""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.apache.ambari.server.api.predicate.QueryParser parser = new org.apache.ambari.server.api.predicate.QueryParser();
    org.apache.ambari.server.controller.spi.Predicate p = parser.parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.predicate.CategoryIsEmptyPredicate(""category1""), p);
}","testParse_isEmptyOp__simple()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_isEmptyOp__exception","FALSE","0","None","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR_FUNC, "".isEmpty(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""category1""));
    org.apache.ambari.server.api.predicate.QueryParser parser = new org.apache.ambari.server.api.predicate.QueryParser();
    try {
        parser.parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
        org.junit.Assert.fail(""Expected InvalidQueryException due to missing closing bracket"");
    } catch (org.apache.ambari.server.api.predicate.InvalidQueryException e) {
    }
}","testParse_isEmptyOp__exception()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_isEmptyOp__exception2","FALSE","0","None","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR_FUNC, "".isEmpty(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""category1""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""one,two,3""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_CLOSE, "")""));
    org.apache.ambari.server.api.predicate.QueryParser parser = new org.apache.ambari.server.api.predicate.QueryParser();
    try {
        parser.parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
        org.junit.Assert.fail(""Expected InvalidQueryException due to existence of right operand"");
    } catch (org.apache.ambari.server.api.predicate.InvalidQueryException e) {
    }
}","testParse_isEmptyOp__exception2()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_noTokens","TRUE","2","assertNull","{
    org.junit.Assert.assertNull(new org.apache.ambari.server.api.predicate.QueryParser().parse(new org.apache.ambari.server.api.predicate.Token[0]));
}","testParse_noTokens()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_mismatchedBrackets","FALSE","0","None","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""a""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""&""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.BRACKET_OPEN, ""(""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""<=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""b""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""2""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.LOGICAL_OPERATOR, ""|""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, "">""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""c""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""3""));
    try {
        new org.apache.ambari.server.api.predicate.QueryParser().parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
        org.junit.Assert.fail(""Expected InvalidQueryException due to missing closing bracket"");
    } catch (org.apache.ambari.server.api.predicate.InvalidQueryException e) {
    }
}","testParse_mismatchedBrackets()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testParse_outOfOrderTokens","FALSE","0","None","{
    java.util.List<org.apache.ambari.server.api.predicate.Token> listTokens = new java.util.ArrayList<>();
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.PROPERTY_OPERAND, ""a""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.VALUE_OPERAND, ""1""));
    listTokens.add(new org.apache.ambari.server.api.predicate.Token(org.apache.ambari.server.api.predicate.Token.TYPE.RELATIONAL_OPERATOR, ""=""));
    try {
        new org.apache.ambari.server.api.predicate.QueryParser().parse(listTokens.toArray(new org.apache.ambari.server.api.predicate.Token[listTokens.size()]));
        org.junit.Assert.fail(""Expected InvalidQueryException due to invalid last token"");
    } catch (org.apache.ambari.server.api.predicate.InvalidQueryException e) {
    }
}","testParse_outOfOrderTokens()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/QueryParserTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
bc6cbf3596247c79c6a2aad9047ebe6a2d1cf27b
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
ae6d0106751467a1a38fb6e60213fb0f09ba692c
db7c6f50ca0cecf9e84b789d0d6ec543902fdc21
513afd873c5a093db85461358c5a4bbbf658dee7
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testGetName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""AndOperator"", new org.apache.ambari.server.api.predicate.operators.AndOperator(1).getName());
}","testGetName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/AndOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testToPredicate","TRUE","2","assertEquals","{
    org.apache.ambari.server.controller.predicate.EqualsPredicate p1 = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""p1"", ""one"");
    org.apache.ambari.server.controller.predicate.EqualsPredicate p2 = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""p2"", ""two"");
    org.apache.ambari.server.controller.predicate.AndPredicate andPredicate = new org.apache.ambari.server.controller.predicate.AndPredicate(p1, p2);
    org.junit.Assert.assertEquals(andPredicate, new org.apache.ambari.server.api.predicate.operators.AndOperator(1).toPredicate(p1, p2));
}","testToPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/AndOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetType","TRUE","2","assertSame","{
    org.junit.Assert.assertSame(org.apache.ambari.server.api.predicate.operators.Operator.TYPE.AND, new org.apache.ambari.server.api.predicate.operators.AndOperator(1).getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/AndOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetBasePrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(2, new org.apache.ambari.server.api.predicate.operators.AndOperator(1).getBasePrecedence());
}","testGetBasePrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/AndOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetPrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(4, new org.apache.ambari.server.api.predicate.operators.AndOperator(2).getPrecedence());
}","testGetPrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/AndOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""EqualsOperator"", new org.apache.ambari.server.api.predicate.operators.EqualsOperator().getName());
}","testGetName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/EqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testToPredicate","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""prop"", ""val""), new org.apache.ambari.server.api.predicate.operators.EqualsOperator().toPredicate(""prop"", ""val""));
}","testToPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/EqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetType","TRUE","2","assertSame","{
    org.junit.Assert.assertSame(org.apache.ambari.server.api.predicate.operators.Operator.TYPE.EQUAL, new org.apache.ambari.server.api.predicate.operators.EqualsOperator().getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/EqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetBasePrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.EqualsOperator().getBasePrecedence());
}","testGetBasePrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/EqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetPrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.EqualsOperator().getPrecedence());
}","testGetPrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/EqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""FilterOperator"", new org.apache.ambari.server.api.predicate.operators.FilterOperator().getName());
}","testGetName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/FilterOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
513afd873c5a093db85461358c5a4bbbf658dee7
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testToPredicate","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.predicate.FilterPredicate(""p1"", "".*""), new org.apache.ambari.server.api.predicate.operators.FilterOperator().toPredicate(""p1"", "".*""));
}","testToPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/FilterOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
513afd873c5a093db85461358c5a4bbbf658dee7
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetType","TRUE","2","assertSame","{
    org.junit.Assert.assertSame(org.apache.ambari.server.api.predicate.operators.Operator.TYPE.FILTER, new org.apache.ambari.server.api.predicate.operators.FilterOperator().getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/FilterOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
513afd873c5a093db85461358c5a4bbbf658dee7
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetBasePrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.FilterOperator().getBasePrecedence());
}","testGetBasePrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/FilterOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
513afd873c5a093db85461358c5a4bbbf658dee7
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetPrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.FilterOperator().getPrecedence());
}","testGetPrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/FilterOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
513afd873c5a093db85461358c5a4bbbf658dee7
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""GreaterEqualsOperator"", new org.apache.ambari.server.api.predicate.operators.GreaterEqualsOperator().getName());
}","testGetName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/GreaterEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testToPredicate","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.predicate.GreaterEqualsPredicate<>(""1"", ""2""), new org.apache.ambari.server.api.predicate.operators.GreaterEqualsOperator().toPredicate(""1"", ""2""));
}","testToPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/GreaterEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetType","TRUE","2","assertSame","{
    org.junit.Assert.assertSame(org.apache.ambari.server.api.predicate.operators.Operator.TYPE.GREATER_EQUAL, new org.apache.ambari.server.api.predicate.operators.GreaterEqualsOperator().getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/GreaterEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetBasePrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.GreaterEqualsOperator().getBasePrecedence());
}","testGetBasePrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/GreaterEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetPrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.GreaterEqualsOperator().getPrecedence());
}","testGetPrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/GreaterEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""GreaterOperator"", new org.apache.ambari.server.api.predicate.operators.GreaterOperator().getName());
}","testGetName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/GreaterOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testToPredicate","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.predicate.GreaterPredicate<>(""1"", ""2""), new org.apache.ambari.server.api.predicate.operators.GreaterOperator().toPredicate(""1"", ""2""));
}","testToPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/GreaterOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetType","TRUE","2","assertSame","{
    org.junit.Assert.assertSame(org.apache.ambari.server.api.predicate.operators.Operator.TYPE.GREATER, new org.apache.ambari.server.api.predicate.operators.GreaterOperator().getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/GreaterOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetBasePrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.GreaterOperator().getBasePrecedence());
}","testGetBasePrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/GreaterOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetPrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.GreaterOperator().getPrecedence());
}","testGetPrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/GreaterOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""InOperator"", new org.apache.ambari.server.api.predicate.operators.InOperator().getName());
}","testGetName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/InOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879"
"testToPredicate","TRUE","2","assertEquals","{
    java.lang.String prop = ""prop"";
    java.lang.String val = ""one,2,three"";
    org.apache.ambari.server.controller.predicate.EqualsPredicate p1 = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(prop, ""one"");
    org.apache.ambari.server.controller.predicate.EqualsPredicate p2 = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(prop, ""2"");
    org.apache.ambari.server.controller.predicate.EqualsPredicate p3 = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(prop, ""three"");
    org.apache.ambari.server.controller.predicate.OrPredicate orPredicate = new org.apache.ambari.server.controller.predicate.OrPredicate(p1, p2, p3);
    org.junit.Assert.assertEquals(orPredicate, new org.apache.ambari.server.api.predicate.operators.InOperator().toPredicate(prop, val));
}","testToPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/InOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879"
"testGetType","TRUE","2","assertSame","{
    org.junit.Assert.assertSame(org.apache.ambari.server.api.predicate.operators.Operator.TYPE.IN, new org.apache.ambari.server.api.predicate.operators.InOperator().getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/InOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879"
"testGetBasePrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.InOperator().getBasePrecedence());
}","testGetBasePrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/InOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879"
"testGetPrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.InOperator().getPrecedence());
}","testGetPrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/InOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879"
"testGetName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""IsEmptyOperator"", new org.apache.ambari.server.api.predicate.operators.IsEmptyOperator().getName());
}","testGetName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/IsEmptyOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testToPredicate","TRUE","2","assertEquals","{
    java.lang.String prop = ""prop"";
    org.apache.ambari.server.controller.spi.Predicate p = new org.apache.ambari.server.controller.predicate.CategoryIsEmptyPredicate(prop);
    org.junit.Assert.assertEquals(p, new org.apache.ambari.server.api.predicate.operators.IsEmptyOperator().toPredicate(prop, null));
}","testToPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/IsEmptyOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetType","TRUE","2","assertSame","{
    org.junit.Assert.assertSame(org.apache.ambari.server.api.predicate.operators.Operator.TYPE.IS_EMPTY, new org.apache.ambari.server.api.predicate.operators.IsEmptyOperator().getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/IsEmptyOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetBasePrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.IsEmptyOperator().getBasePrecedence());
}","testGetBasePrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/IsEmptyOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetPrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.IsEmptyOperator().getPrecedence());
}","testGetPrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/IsEmptyOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
d94b27e3f8c079ff2660964b5ffcfcf9d14971a5
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""LessEqualsOperator"", new org.apache.ambari.server.api.predicate.operators.LessEqualsOperator().getName());
}","testGetName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/LessEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testToPredicate","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.predicate.LessEqualsPredicate<>(""1"", ""2""), new org.apache.ambari.server.api.predicate.operators.LessEqualsOperator().toPredicate(""1"", ""2""));
}","testToPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/LessEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetType","TRUE","2","assertSame","{
    org.junit.Assert.assertSame(org.apache.ambari.server.api.predicate.operators.Operator.TYPE.LESS_EQUAL, new org.apache.ambari.server.api.predicate.operators.LessEqualsOperator().getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/LessEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetBasePrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.LessEqualsOperator().getBasePrecedence());
}","testGetBasePrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/LessEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetPrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.LessEqualsOperator().getPrecedence());
}","testGetPrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/LessEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""LessOperator"", new org.apache.ambari.server.api.predicate.operators.LessOperator().getName());
}","testGetName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/LessOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testToPredicate","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.predicate.LessPredicate<>(""1"", ""2""), new org.apache.ambari.server.api.predicate.operators.LessOperator().toPredicate(""1"", ""2""));
}","testToPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/LessOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetType","TRUE","2","assertSame","{
    org.junit.Assert.assertSame(org.apache.ambari.server.api.predicate.operators.Operator.TYPE.LESS, new org.apache.ambari.server.api.predicate.operators.LessOperator().getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/LessOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetBasePrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.LessOperator().getBasePrecedence());
}","testGetBasePrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/LessOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetPrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.LessOperator().getPrecedence());
}","testGetPrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/LessOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""NotEqualsOperator"", new org.apache.ambari.server.api.predicate.operators.NotEqualsOperator().getName());
}","testGetName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/NotEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testToPredicate","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.predicate.NotPredicate(new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""prop"", ""val"")), new org.apache.ambari.server.api.predicate.operators.NotEqualsOperator().toPredicate(""prop"", ""val""));
}","testToPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/NotEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetType","TRUE","2","assertSame","{
    org.junit.Assert.assertSame(org.apache.ambari.server.api.predicate.operators.Operator.TYPE.NOT_EQUAL, new org.apache.ambari.server.api.predicate.operators.NotEqualsOperator().getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/NotEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetBasePrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.NotEqualsOperator().getBasePrecedence());
}","testGetBasePrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/NotEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetPrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(-1, new org.apache.ambari.server.api.predicate.operators.NotEqualsOperator().getPrecedence());
}","testGetPrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/NotEqualsOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""NotOperator"", new org.apache.ambari.server.api.predicate.operators.NotOperator(1).getName());
}","testGetName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/NotOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testToPredicate","TRUE","2","assertEquals","{
    org.apache.ambari.server.controller.predicate.EqualsPredicate p = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""prop"", ""val"");
    org.apache.ambari.server.controller.predicate.NotPredicate notPredicate = new org.apache.ambari.server.controller.predicate.NotPredicate(p);
    org.junit.Assert.assertEquals(notPredicate, new org.apache.ambari.server.api.predicate.operators.NotOperator(1).toPredicate(null, p));
}","testToPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/NotOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetType","TRUE","2","assertSame","{
    org.junit.Assert.assertSame(org.apache.ambari.server.api.predicate.operators.Operator.TYPE.NOT, new org.apache.ambari.server.api.predicate.operators.NotOperator(1).getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/NotOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetBasePrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(3, new org.apache.ambari.server.api.predicate.operators.NotOperator(1).getBasePrecedence());
}","testGetBasePrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/NotOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetPrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(5, new org.apache.ambari.server.api.predicate.operators.NotOperator(2).getPrecedence());
}","testGetPrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/NotOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""OrOperator"", new org.apache.ambari.server.api.predicate.operators.OrOperator(1).getName());
}","testGetName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/OrOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testToPredicate","TRUE","2","assertEquals","{
    org.apache.ambari.server.controller.predicate.EqualsPredicate p1 = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""p1"", ""one"");
    org.apache.ambari.server.controller.predicate.EqualsPredicate p2 = new org.apache.ambari.server.controller.predicate.EqualsPredicate<>(""p2"", ""two"");
    org.apache.ambari.server.controller.predicate.OrPredicate orPRedicate = new org.apache.ambari.server.controller.predicate.OrPredicate(p1, p2);
    org.junit.Assert.assertEquals(orPRedicate, new org.apache.ambari.server.api.predicate.operators.OrOperator(1).toPredicate(p1, p2));
}","testToPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/OrOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testGetType","TRUE","2","assertSame","{
    org.junit.Assert.assertSame(org.apache.ambari.server.api.predicate.operators.Operator.TYPE.OR, new org.apache.ambari.server.api.predicate.operators.OrOperator(1).getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/OrOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testGetBasePrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(1, new org.apache.ambari.server.api.predicate.operators.OrOperator(1).getBasePrecedence());
}","testGetBasePrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/OrOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testGetPrecedence","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(3, new org.apache.ambari.server.api.predicate.operators.OrOperator(2).getPrecedence());
}","testGetPrecedence()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/predicate/operators/OrOperatorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
0808d3ce2bf404761f6db44f32d9ecb9d271f879
30b292bfdaa3dd881555c9326a4351279600a6e6"
"testGetExtendedPredicate","TRUE","15","assertTrue
assertFalse","{
    org.apache.ambari.server.controller.spi.Resource resource1 = new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.Service);
    resource1.setProperty(""name"", ""service1"");
    org.apache.ambari.server.controller.spi.Resource resource2 = new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.Service);
    resource2.setProperty(""name"", ""service2"");
    java.util.Map<java.lang.String, java.lang.Object> resource1SubProperties1 = new java.util.HashMap<>();
    resource1SubProperties1.put(""sub1/category/p1"", 1);
    resource1SubProperties1.put(""sub1/category/p2"", 2);
    resource1SubProperties1.put(""sub1/category/p3"", 3);
    java.util.Map<java.lang.String, java.lang.Object> resource1SubProperties2 = new java.util.HashMap<>();
    resource1SubProperties2.put(""sub1/category/p1"", 1);
    resource1SubProperties2.put(""sub1/category/p2"", 4);
    resource1SubProperties2.put(""sub1/category/p3"", 6);
    java.util.Map<java.lang.String, java.lang.Object> resource1SubProperties3 = new java.util.HashMap<>();
    resource1SubProperties3.put(""sub1/category/p1"", 1);
    resource1SubProperties3.put(""sub1/category/p2"", 8);
    resource1SubProperties3.put(""sub1/category/p3"", 12);
    java.util.Set<java.util.Map<java.lang.String, java.lang.Object>> resource1SubPropertiesSet = new java.util.HashSet<>();
    resource1SubPropertiesSet.add(resource1SubProperties1);
    resource1SubPropertiesSet.add(resource1SubProperties2);
    resource1SubPropertiesSet.add(resource1SubProperties3);
    java.util.Map<java.lang.String, java.lang.Object> resource2SubProperties1 = new java.util.HashMap<>();
    resource2SubProperties1.put(""sub1/category/p1"", 2);
    resource2SubProperties1.put(""sub1/category/p2"", 2);
    resource2SubProperties1.put(""sub1/category/p3"", 3);
    java.util.Map<java.lang.String, java.lang.Object> resource2SubProperties2 = new java.util.HashMap<>();
    resource2SubProperties2.put(""sub1/category/p1"", 2);
    resource2SubProperties2.put(""sub1/category/p2"", 4);
    resource2SubProperties2.put(""sub1/category/p3"", 6);
    java.util.Map<java.lang.String, java.lang.Object> resource2SubProperties3 = new java.util.HashMap<>();
    resource2SubProperties3.put(""sub1/category/p1"", 2);
    resource2SubProperties3.put(""sub1/category/p2"", 8);
    resource2SubProperties3.put(""sub1/category/p3"", 12);
    java.util.Set<java.util.Map<java.lang.String, java.lang.Object>> resource2SubPropertiesSet = new java.util.HashSet<>();
    resource2SubPropertiesSet.add(resource2SubProperties1);
    resource2SubPropertiesSet.add(resource2SubProperties2);
    resource2SubPropertiesSet.add(resource2SubProperties3);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource, java.util.Set<java.util.Map<java.lang.String, java.lang.Object>>> extendedPropertyMap = new java.util.HashMap<>();
    extendedPropertyMap.put(resource1, resource1SubPropertiesSet);
    extendedPropertyMap.put(resource2, resource2SubPropertiesSet);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(""sub1/category/p1"").equals(1).toPredicate();
    org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor visitor = new org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor(extendedPropertyMap);
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
    org.apache.ambari.server.controller.spi.Predicate extendedPredicate = visitor.getExtendedPredicate();
    org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource1));
    org.junit.Assert.assertFalse(extendedPredicate.evaluate(resource2));
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(""sub1/category/p1"").equals(2).toPredicate();
    visitor = new org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor(extendedPropertyMap);
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
    extendedPredicate = visitor.getExtendedPredicate();
    org.junit.Assert.assertFalse(extendedPredicate.evaluate(resource1));
    org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource2));
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(""sub1/category/p2"").equals(4).toPredicate();
    visitor = new org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor(extendedPropertyMap);
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
    extendedPredicate = visitor.getExtendedPredicate();
    org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource1));
    org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource2));
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(""sub1/category/p2"").equals(5).toPredicate();
    visitor = new org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor(extendedPropertyMap);
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
    extendedPredicate = visitor.getExtendedPredicate();
    org.junit.Assert.assertFalse(extendedPredicate.evaluate(resource1));
    org.junit.Assert.assertFalse(extendedPredicate.evaluate(resource2));
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().not().property(""sub1/category/p2"").equals(5).toPredicate();
    visitor = new org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor(extendedPropertyMap);
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
    extendedPredicate = visitor.getExtendedPredicate();
    org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource1));
    org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource2));
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(""sub1/category/p1"").equals(1).and().property(""sub1/category/p2"").equals(4).toPredicate();
    visitor = new org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor(extendedPropertyMap);
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
    extendedPredicate = visitor.getExtendedPredicate();
    org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource1));
    org.junit.Assert.assertFalse(extendedPredicate.evaluate(resource2));
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(""sub1/category/p1"").equals(1).or().property(""sub1/category/p2"").equals(4).toPredicate();
    visitor = new org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor(extendedPropertyMap);
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
    extendedPredicate = visitor.getExtendedPredicate();
    org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource1));
    org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource2));
}","testGetExtendedPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/ExtendedResourcePredicateVisitorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
e5d225a2db6afc6d1b03f03027d3582ffac88850"
"testSortDoesNotAddExtraRootPaths","TRUE","3","assertEquals","{
    java.util.List<org.apache.ambari.server.controller.spi.SortRequestProperty> sortRequestProperties = new java.util.ArrayList<>();
    sortRequestProperties.add(new org.apache.ambari.server.controller.spi.SortRequestProperty(org.apache.ambari.server.controller.internal.AlertHistoryResourceProvider.ALERT_HISTORY_TIMESTAMP, org.apache.ambari.server.controller.spi.SortRequest.Order.ASC));
    org.apache.ambari.server.controller.spi.SortRequest sortRequest = new org.apache.ambari.server.controller.internal.SortRequestImpl(sortRequestProperties);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(org.apache.ambari.server.controller.internal.AlertHistoryResourceProvider.ALERT_HISTORY_DEFINITION_NAME).equals(""foo"").toPredicate();
    org.apache.ambari.server.api.query.JpaSortBuilderTest.MockAlertHistoryredicateVisitor visitor = new org.apache.ambari.server.api.query.JpaSortBuilderTest.MockAlertHistoryredicateVisitor();
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
    org.apache.ambari.server.api.query.JpaSortBuilder<org.apache.ambari.server.orm.entities.AlertHistoryEntity> sortBuilder = new org.apache.ambari.server.api.query.JpaSortBuilder<>();
    java.util.List<javax.persistence.criteria.Order> sortOrders = sortBuilder.buildSortOrders(sortRequest, visitor);
    junit.framework.Assert.assertEquals(sortOrders.size(), 1);
    javax.persistence.criteria.CriteriaQuery<org.apache.ambari.server.orm.entities.AlertHistoryEntity> query = visitor.getCriteriaQuery();
    java.util.Set<javax.persistence.criteria.Root<?>> roots = query.getRoots();
    junit.framework.Assert.assertEquals(1, roots.size());
}","testSortDoesNotAddExtraRootPaths()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/JpaSortBuilderTest.java","c2409e740f84d6f051659b3b36d853902e698a60
893f97e437990a154229d7545c2a6797defd714c
8e2abf97bd2f10bad978d176a53bffd0ad2c7b67
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
3a7906c84737511475e718a0da50397b31ef7b52
0887e8e3d6b6030143a8f3b38475e72875f899f1"
"testGetProcessedPredicate","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.StackResourceDefinition();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Stack, ""HDP"");
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(""Stacks/stack_name"").equals(""HDP"").and().property(""versions/stackServices/StackServices/service_name"").equals(""HBASE"").and().property(""versions/operatingSystems/OperatingSystems/os_type"").equals(""centos5"").toPredicate();
    org.apache.ambari.server.api.query.ProcessingPredicateVisitor visitor = new org.apache.ambari.server.api.query.ProcessingPredicateVisitor(instance);
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
    org.apache.ambari.server.controller.spi.Predicate processedPredicate = visitor.getProcessedPredicate();
    org.apache.ambari.server.controller.spi.Predicate expectedPredicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(""Stacks/stack_name"").equals(""HDP"").toPredicate();
    org.junit.Assert.assertEquals(expectedPredicate, processedPredicate);
}","testGetProcessedPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/ProcessingPredicateVisitorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
e793b6c83812f3e1712437315e8790397c55311a
e5d225a2db6afc6d1b03f03027d3582ffac88850"
"testGetSubResourceForNotPredicate","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.HostResourceDefinition();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Host, null);
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    org.apache.ambari.server.controller.spi.Predicate notPredicate1 = new org.apache.ambari.server.controller.utilities.PredicateBuilder().not().property(""host_components/HostRoles/component_name"").equals(""ZOOKEEPER_SERVER"").toPredicate();
    org.apache.ambari.server.controller.spi.Predicate notPredicate2 = new org.apache.ambari.server.controller.utilities.PredicateBuilder().not().property(""host_components/HostRoles/component_name"").equals(""HBASE_MASTER"").toPredicate();
    org.apache.ambari.server.controller.spi.Predicate andPredicate = new org.apache.ambari.server.controller.predicate.AndPredicate(notPredicate1, notPredicate2);
    org.apache.ambari.server.api.query.ProcessingPredicateVisitor visitor = new org.apache.ambari.server.api.query.ProcessingPredicateVisitor(instance);
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(andPredicate, visitor);
    java.util.Set<java.lang.String> categories = visitor.getSubResourceCategories();
    org.junit.Assert.assertEquals(categories.iterator().next(), ""host_components"");
}","testGetSubResourceForNotPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/ProcessingPredicateVisitorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
e793b6c83812f3e1712437315e8790397c55311a
e5d225a2db6afc6d1b03f03027d3582ffac88850"
"testGetSubResourceCategories","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.StackResourceDefinition();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Stack, ""HDP"");
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(""Stacks/stack_name"").equals(""HDP"").and().property(""versions/stackServices/StackServices/service_name"").equals(""HBASE"").and().property(""versions/operatingSystems/OperatingSystems/os_type"").equals(""centos5"").toPredicate();
    org.apache.ambari.server.api.query.ProcessingPredicateVisitor visitor = new org.apache.ambari.server.api.query.ProcessingPredicateVisitor(instance);
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
    java.util.Set<java.lang.String> categories = visitor.getSubResourceCategories();
    java.util.Set<java.lang.String> expected = new java.util.HashSet<>();
    expected.add(""versions"");
    org.junit.Assert.assertEquals(expected, categories);
}","testGetSubResourceCategories()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/ProcessingPredicateVisitorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
e793b6c83812f3e1712437315e8790397c55311a
e5d225a2db6afc6d1b03f03027d3582ffac88850"
"testGetSubResourceProperties","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.StackResourceDefinition();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Stack, ""HDP"");
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(""Stacks/stack_name"").equals(""HDP"").and().property(""versions/stackServices/StackServices/service_name"").equals(""HBASE"").and().property(""versions/operatingSystems/OperatingSystems/os_type"").equals(""centos5"").toPredicate();
    org.apache.ambari.server.api.query.ProcessingPredicateVisitor visitor = new org.apache.ambari.server.api.query.ProcessingPredicateVisitor(instance);
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
    java.util.Set<java.lang.String> properties = visitor.getSubResourceProperties();
    java.util.Set<java.lang.String> expected = new java.util.HashSet<>();
    expected.add(""versions/stackServices/StackServices/service_name"");
    expected.add(""versions/operatingSystems/OperatingSystems/os_type"");
    org.junit.Assert.assertEquals(expected, properties);
}","testGetSubResourceProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/ProcessingPredicateVisitorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
e793b6c83812f3e1712437315e8790397c55311a
e5d225a2db6afc6d1b03f03027d3582ffac88850"
"testIsCollection__True","TRUE","2","assertTrue","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Cluster, ""cluster"");
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Service, null);
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Service).anyTimes();
    EasyMock.expect(resourceDefinition.getSubResourceDefinitions()).andReturn(java.util.Collections.emptySet()).anyTimes();
    EasyMock.replay(resourceDefinition);
    org.apache.ambari.server.api.resources.ResourceInstance instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    org.junit.Assert.assertTrue(instance.isCollectionResource());
    EasyMock.verify(resourceDefinition);
}","testIsCollection__True()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testIsCollection__False","TRUE","2","assertFalse","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Cluster, ""cluster"");
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Service, ""service"");
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Service).anyTimes();
    EasyMock.expect(resourceDefinition.getSubResourceDefinitions()).andReturn(java.util.Collections.emptySet()).anyTimes();
    EasyMock.replay(resourceDefinition);
    org.apache.ambari.server.api.resources.ResourceInstance instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    org.junit.Assert.assertFalse(instance.isCollectionResource());
    EasyMock.verify(resourceDefinition);
}","testIsCollection__False()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute__Cluster_instance_noSpecifiedProps","TRUE","6","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Cluster, ""cluster"");
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> setChildren = new java.util.HashSet<>();
    setChildren.add(new org.apache.ambari.server.api.resources.SubResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.Host));
    EasyMock.expect(resourceDefinition.getSubResourceDefinitions()).andReturn(setChildren).anyTimes();
    EasyMock.replay(resourceDefinition);
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    org.apache.ambari.server.api.services.Result result = instance.execute();
    EasyMock.verify(resourceDefinition);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> clusterNode = tree.getChild(""Cluster:1"");
    org.junit.Assert.assertEquals(""Cluster:1"", clusterNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Cluster, clusterNode.getObject().getType());
    org.junit.Assert.assertEquals(1, clusterNode.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> hostNode = clusterNode.getChild(""hosts"");
    org.junit.Assert.assertEquals(4, hostNode.getChildren().size());
}","testExecute__Cluster_instance_noSpecifiedProps()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute__Stack_instance_noSpecifiedProps","TRUE","6","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.StackResourceDefinition();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Stack, ""HDP"");
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    org.apache.ambari.server.api.services.Result result = instance.execute();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> stackNode = tree.getChild(""Stack:1"");
    org.junit.Assert.assertEquals(""Stack:1"", stackNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Stack, stackNode.getObject().getType());
    org.junit.Assert.assertEquals(1, stackNode.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> versionsNode = stackNode.getChild(""versions"");
    org.junit.Assert.assertEquals(3, versionsNode.getChildren().size());
}","testExecute__Stack_instance_noSpecifiedProps()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetJoinedResourceProperties","TRUE","6","assertEquals
assertTrue","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.StackResourceDefinition();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Stack, ""HDP"");
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    instance.addProperty(""versions/*"", null);
    instance.addProperty(""versions/operating_systems/*"", null);
    instance.addProperty(""versions/operating_systems/repositories/*"", null);
    instance.execute();
    java.util.Set<java.lang.String> propertyIds = new java.util.HashSet<>();
    propertyIds.add(""versions/operating_systems/repositories/Repositories/repo_id"");
    propertyIds.add(""versions/operating_systems/OperatingSystems/os_type"");
    java.util.Map<org.apache.ambari.server.controller.spi.Resource, java.util.Set<java.util.Map<java.lang.String, java.lang.Object>>> resourcePropertiesMap = instance.getJoinedResourceProperties(propertyIds, null, null);
    java.util.Set<java.util.Map<java.lang.String, java.lang.Object>> propertyMaps = null;
    for (java.util.Map.Entry<org.apache.ambari.server.controller.spi.Resource, java.util.Set<java.util.Map<java.lang.String, java.lang.Object>>> resourceSetEntry : resourcePropertiesMap.entrySet()) {
        org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Stack, resourceSetEntry.getKey().getType());
        propertyMaps = resourceSetEntry.getValue();
    }
    if (propertyMaps == null) {
        org.junit.Assert.fail(""No property maps found!"");
    }
    org.junit.Assert.assertEquals(6, propertyMaps.size());
    for (java.util.Map<java.lang.String, java.lang.Object> map : propertyMaps) {
        org.junit.Assert.assertEquals(2, map.size());
        org.junit.Assert.assertTrue(map.containsKey(""versions/operating_systems/OperatingSystems/os_type""));
        org.junit.Assert.assertTrue(map.containsKey(""versions/operating_systems/repositories/Repositories/repo_id""));
    }
}","testGetJoinedResourceProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute_subResourcePredicate","TRUE","13","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.StackResourceDefinition();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Stack, ""HDP"");
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    org.apache.ambari.server.controller.utilities.PredicateBuilder pb = new org.apache.ambari.server.controller.utilities.PredicateBuilder();
    org.apache.ambari.server.controller.spi.Predicate predicate = pb.property(""versions/operating_systems/OperatingSystems/os_type"").equals(""centos5"").toPredicate();
    instance.setUserPredicate(predicate);
    org.apache.ambari.server.api.services.Result result = instance.execute();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> stackNode = tree.getChild(""Stack:1"");
    org.junit.Assert.assertEquals(""Stack:1"", stackNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Stack, stackNode.getObject().getType());
    org.junit.Assert.assertEquals(1, stackNode.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> versionsNode = stackNode.getChild(""versions"");
    org.junit.Assert.assertEquals(3, versionsNode.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> versionNode = versionsNode.getChild(""StackVersion:1"");
    org.junit.Assert.assertEquals(""StackVersion:1"", versionNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.StackVersion, versionNode.getObject().getType());
    org.junit.Assert.assertEquals(1, versionNode.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> opSystemsNode = versionNode.getChild(""operating_systems"");
    org.junit.Assert.assertEquals(1, opSystemsNode.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> opSystemNode = opSystemsNode.getChild(""OperatingSystem:1"");
    org.junit.Assert.assertEquals(""OperatingSystem:1"", opSystemNode.getName());
    org.apache.ambari.server.controller.spi.Resource osResource = opSystemNode.getObject();
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.OperatingSystem, opSystemNode.getObject().getType());
    org.junit.Assert.assertEquals(""centos5"", osResource.getPropertyValue(""OperatingSystems/os_type""));
}","testExecute_subResourcePredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute_NoSuchResourceException","FALSE","0","None","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.ClusterResourceDefinition();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Cluster, ""c1"");
    org.apache.ambari.server.controller.spi.ClusterController clusterController = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.ClusterController.class);
    org.apache.ambari.server.controller.spi.QueryResponse queryResponse = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.QueryResponse.class);
    org.apache.ambari.server.controller.spi.Schema schema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = EasyMock.createNiceMock(org.apache.ambari.server.api.query.render.Renderer.class);
    EasyMock.expect(clusterController.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(schema).anyTimes();
    EasyMock.expect(clusterController.getResources(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Cluster), EasyMock.anyObject(org.apache.ambari.server.controller.spi.Request.class), EasyMock.anyObject(org.apache.ambari.server.controller.spi.Predicate.class))).andReturn(queryResponse);
    EasyMock.expect(queryResponse.getResources()).andReturn(java.util.Collections.emptySet()).anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""Clusters/cluster_name"").anyTimes();
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> treeNode = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, java.util.Collections.<java.lang.String>emptySet(), null);
    EasyMock.expect(renderer.finalizeProperties(org.easymock.EasyMock.anyObject(), EasyMock.anyBoolean())).andReturn(treeNode).anyTimes();
    EasyMock.replay(clusterController, queryResponse, schema, renderer);
    org.apache.ambari.server.api.query.QueryImpl query = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition, clusterController);
    query.setRenderer(renderer);
    try {
        query.execute();
        org.junit.Assert.fail(""Expected NoSuchResourceException!"");
    } catch (org.apache.ambari.server.controller.spi.NoSuchResourceException e) {
    }
    EasyMock.verify(clusterController, queryResponse, schema, renderer);
}","testExecute_NoSuchResourceException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute_SubResourcePropertyPredicate","FALSE","0","None","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.ClusterResourceDefinition();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Cluster, ""c1"");
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Host, ""h1"");
    org.apache.ambari.server.controller.spi.ClusterController clusterController = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.ClusterController.class);
    org.apache.ambari.server.controller.spi.QueryResponse clusterResponse = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.QueryResponse.class);
    org.apache.ambari.server.controller.spi.QueryResponse hostResponse = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.QueryResponse.class);
    org.apache.ambari.server.controller.spi.Schema clusterSchema = EasyMock.createNiceMock(""ClusterSchema"", org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema hostSchema = EasyMock.createNiceMock(""HostSchema"", org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = EasyMock.createNiceMock(org.apache.ambari.server.api.query.render.Renderer.class);
    org.apache.ambari.server.controller.spi.Resource clusterResource = EasyMock.createMock(""ClusterResource"", org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Resource hostResource = EasyMock.createMock(""HostResource"", org.apache.ambari.server.controller.spi.Resource.class);
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> clusterResources = java.util.Collections.singleton(clusterResource);
    java.util.Set<org.apache.ambari.server.controller.spi.Resource> hostResources = java.util.Collections.singleton(hostResource);
    java.lang.Iterable<org.apache.ambari.server.controller.spi.Resource> iterable = EasyMock.createNiceMock(java.lang.Iterable.class);
    java.util.Iterator<org.apache.ambari.server.controller.spi.Resource> iterator = EasyMock.createNiceMock(java.util.Iterator.class);
    EasyMock.expect(clusterController.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(clusterSchema).anyTimes();
    EasyMock.expect(clusterController.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Host)).andReturn(hostSchema).anyTimes();
    EasyMock.expect(clusterController.getResources(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Cluster), EasyMock.anyObject(org.apache.ambari.server.controller.spi.Request.class), EasyMock.anyObject(org.apache.ambari.server.controller.spi.Predicate.class))).andReturn(clusterResponse);
    EasyMock.expect(clusterController.getResources(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Host), EasyMock.anyObject(org.apache.ambari.server.controller.spi.Request.class), EasyMock.anyObject(org.apache.ambari.server.controller.spi.Predicate.class))).andReturn(hostResponse);
    EasyMock.expect(iterable.iterator()).andReturn(iterator).anyTimes();
    EasyMock.expect(iterator.hasNext()).andReturn(false).anyTimes();
    EasyMock.expect(clusterResponse.getResources()).andReturn(clusterResources).anyTimes();
    EasyMock.expect(hostResponse.getResources()).andReturn(hostResources).anyTimes();
    EasyMock.expect(clusterResource.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.expect(hostResource.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Host).anyTimes();
    EasyMock.expect(clusterSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""Clusters/cluster_name"").anyTimes();
    EasyMock.expect(clusterSchema.getKeyTypes()).andReturn(java.util.Collections.singleton(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).anyTimes();
    EasyMock.expect(hostSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(null).anyTimes();
    EasyMock.expect(hostSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Host)).andReturn(""Hosts/host_name"").anyTimes();
    EasyMock.expect(hostSchema.getKeyTypes()).andReturn(java.util.Collections.singleton(org.apache.ambari.server.controller.spi.Resource.Type.Host)).anyTimes();
    EasyMock.expect(clusterResource.getPropertyValue(""Clusters/cluster_name"")).andReturn(""c1"").anyTimes();
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> treeNode = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, java.util.Collections.<java.lang.String>emptySet(), null);
    EasyMock.expect(renderer.finalizeProperties(org.easymock.EasyMock.anyObject(), EasyMock.anyBoolean())).andReturn(treeNode).anyTimes();
    EasyMock.expect(clusterController.getIterable(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Cluster), EasyMock.anyObject(org.apache.ambari.server.controller.spi.QueryResponse.class), EasyMock.anyObject(org.apache.ambari.server.controller.spi.Request.class), EasyMock.anyObject(org.apache.ambari.server.controller.spi.Predicate.class), EasyMock.anyObject(org.apache.ambari.server.controller.spi.PageRequest.class), EasyMock.anyObject(org.apache.ambari.server.controller.spi.SortRequest.class))).andReturn(iterable).anyTimes();
    EasyMock.replay(clusterController, clusterResponse, clusterSchema, renderer, hostSchema, clusterResource, hostResource, hostResponse, iterable, iterator);
    org.apache.ambari.server.api.query.QueryImpl query = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition, clusterController);
    query.setUserPredicate(new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(""hosts/Hosts/host_name"").equals(""h1"").and().property(""metrics/boottime"").equals(""value"").toPredicate());
    query.setRenderer(renderer);
    query.execute();
    EasyMock.verify(clusterController, clusterResponse, clusterSchema, renderer, hostSchema, clusterResource, hostResource, hostResponse, iterable, iterator);
}","testExecute_SubResourcePropertyPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute_collection_NoSuchResourceException","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.ClusterResourceDefinition();
    org.apache.ambari.server.controller.spi.ClusterController clusterController = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.ClusterController.class);
    org.apache.ambari.server.controller.spi.QueryResponse queryResponse = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.QueryResponse.class);
    org.apache.ambari.server.controller.spi.Schema schema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = EasyMock.createNiceMock(org.apache.ambari.server.api.query.render.Renderer.class);
    java.lang.Iterable<org.apache.ambari.server.controller.spi.Resource> iterable = EasyMock.createNiceMock(java.lang.Iterable.class);
    java.util.Iterator<org.apache.ambari.server.controller.spi.Resource> iterator = EasyMock.createNiceMock(java.util.Iterator.class);
    EasyMock.expect(clusterController.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(schema).anyTimes();
    EasyMock.expect(clusterController.getResources(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Cluster), EasyMock.anyObject(org.apache.ambari.server.controller.spi.Request.class), EasyMock.anyObject(org.apache.ambari.server.controller.spi.Predicate.class))).andReturn(queryResponse);
    EasyMock.expect(clusterController.getIterable(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Cluster), EasyMock.anyObject(org.apache.ambari.server.controller.spi.QueryResponse.class), EasyMock.anyObject(org.apache.ambari.server.controller.spi.Request.class), EasyMock.anyObject(org.apache.ambari.server.controller.spi.Predicate.class), EasyMock.anyObject(org.apache.ambari.server.controller.spi.PageRequest.class), EasyMock.anyObject(org.apache.ambari.server.controller.spi.SortRequest.class))).andReturn(iterable).anyTimes();
    EasyMock.expect(iterable.iterator()).andReturn(iterator).anyTimes();
    EasyMock.expect(iterator.hasNext()).andReturn(false).anyTimes();
    EasyMock.expect(queryResponse.getResources()).andReturn(java.util.Collections.emptySet()).anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""Clusters/cluster_name"").anyTimes();
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> treeNode = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, java.util.Collections.<java.lang.String>emptySet(), null);
    EasyMock.expect(renderer.finalizeProperties(org.easymock.EasyMock.anyObject(), EasyMock.anyBoolean())).andReturn(treeNode).anyTimes();
    org.easymock.Capture<org.apache.ambari.server.api.services.Result> resultCapture = org.easymock.EasyMock.newCapture();
    EasyMock.expect(renderer.finalizeResult(EasyMock.capture(resultCapture))).andReturn(null);
    EasyMock.replay(clusterController, queryResponse, schema, renderer, iterable, iterator);
    org.apache.ambari.server.api.query.QueryImpl query = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(new java.util.HashMap<>(), resourceDefinition, clusterController);
    query.setRenderer(renderer);
    query.execute();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = resultCapture.getValue().getResultTree();
    org.junit.Assert.assertEquals(0, tree.getChildren().size());
    EasyMock.verify(clusterController, queryResponse, schema, renderer, iterable, iterator);
}","testExecute_collection_NoSuchResourceException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute__Stack_instance_specifiedSubResources","TRUE","23","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.StackResourceDefinition();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Stack, ""HDP"");
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    instance.addProperty(""versions/*"", null);
    instance.addProperty(""versions/operating_systems/*"", null);
    instance.addProperty(""versions/operating_systems/repositories/*"", null);
    org.apache.ambari.server.api.services.Result result = instance.execute();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> stackNode = tree.getChild(""Stack:1"");
    org.junit.Assert.assertEquals(""Stack:1"", stackNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Stack, stackNode.getObject().getType());
    org.junit.Assert.assertEquals(1, stackNode.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> versionsNode = stackNode.getChild(""versions"");
    org.junit.Assert.assertEquals(3, versionsNode.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> versionNode = versionsNode.getChild(""StackVersion:1"");
    org.junit.Assert.assertEquals(""StackVersion:1"", versionNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.StackVersion, versionNode.getObject().getType());
    org.junit.Assert.assertEquals(7, versionNode.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> opSystemsNode = versionNode.getChild(""operating_systems"");
    org.junit.Assert.assertEquals(3, opSystemsNode.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> opSystemNode = opSystemsNode.getChild(""OperatingSystem:1"");
    org.junit.Assert.assertEquals(""OperatingSystem:1"", opSystemNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.OperatingSystem, opSystemNode.getObject().getType());
    org.junit.Assert.assertEquals(1, opSystemNode.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> repositoriesNode = opSystemNode.getChild(""repositories"");
    org.junit.Assert.assertEquals(2, repositoriesNode.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> repositoryNode = repositoriesNode.getChild(""Repository:1"");
    org.junit.Assert.assertEquals(""Repository:1"", repositoryNode.getName());
    org.apache.ambari.server.controller.spi.Resource repositoryResource = repositoryNode.getObject();
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Repository, repositoryResource.getType());
    org.junit.Assert.assertEquals(""repo1"", repositoryResource.getPropertyValue(""Repositories/repo_id""));
    org.junit.Assert.assertEquals(""centos5"", repositoryResource.getPropertyValue(""Repositories/os_type""));
    org.junit.Assert.assertEquals(""1.2.1"", repositoryResource.getPropertyValue(""Repositories/stack_version""));
    org.junit.Assert.assertEquals(""HDP"", repositoryResource.getPropertyValue(""Repositories/stack_name""));
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> artifactsNode = versionNode.getChild(""artifacts"");
    org.junit.Assert.assertEquals(1, artifactsNode.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> artifactNode = artifactsNode.getChild(""StackArtifact:1"");
    org.junit.Assert.assertEquals(""StackArtifact:1"", artifactNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.StackArtifact, artifactNode.getObject().getType());
}","testExecute__Stack_instance_specifiedSubResources()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute_StackVersionPageResourcePredicate","TRUE","9","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.StackVersionResourceDefinition();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    org.apache.ambari.server.controller.utilities.PredicateBuilder pb = new org.apache.ambari.server.controller.utilities.PredicateBuilder();
    org.apache.ambari.server.controller.spi.Predicate predicate = pb.property(""Versions/stack_version"").equals(""1.2.1"").or().property(""Versions/stack_version"").equals(""1.2.2"").toPredicate();
    instance.setUserPredicate(predicate);
    instance.setPageRequest(new org.apache.ambari.server.controller.internal.PageRequestImpl(org.apache.ambari.server.controller.spi.PageRequest.StartingPoint.Beginning, 1, 0, null, null));
    org.apache.ambari.server.api.services.Result result = instance.execute();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> stackVersionNode = tree.getChild(""StackVersion:1"");
    org.junit.Assert.assertEquals(""StackVersion:1"", stackVersionNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.StackVersion, stackVersionNode.getObject().getType());
    org.junit.Assert.assertEquals(""1.2.1"", stackVersionNode.getObject().getPropertyValue(""Versions/stack_version""));
    instance.setPageRequest(new org.apache.ambari.server.controller.internal.PageRequestImpl(org.apache.ambari.server.controller.spi.PageRequest.StartingPoint.OffsetStart, 1, 1, null, null));
    result = instance.execute();
    tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    stackVersionNode = tree.getChild(""StackVersion:1"");
    org.junit.Assert.assertEquals(""StackVersion:1"", stackVersionNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.StackVersion, stackVersionNode.getObject().getType());
    org.junit.Assert.assertEquals(""1.2.2"", stackVersionNode.getObject().getPropertyValue(""Versions/stack_version""));
}","testExecute_StackVersionPageResourcePredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute_StackVersionPageSubResourcePredicate","TRUE","16","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.StackVersionResourceDefinition();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    instance.addProperty(""operating_systems/*"", null);
    org.apache.ambari.server.controller.utilities.PredicateBuilder pb = new org.apache.ambari.server.controller.utilities.PredicateBuilder();
    org.apache.ambari.server.controller.spi.Predicate predicate = pb.property(""operating_systems/OperatingSystems/os_type"").equals(""centos5"").toPredicate();
    instance.setUserPredicate(predicate);
    instance.setPageRequest(new org.apache.ambari.server.controller.internal.PageRequestImpl(org.apache.ambari.server.controller.spi.PageRequest.StartingPoint.Beginning, 1, 0, null, null));
    org.apache.ambari.server.api.services.Result result = instance.execute();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> stackVersionNode = tree.getChild(""StackVersion:1"");
    org.junit.Assert.assertEquals(""StackVersion:1"", stackVersionNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.StackVersion, stackVersionNode.getObject().getType());
    org.junit.Assert.assertEquals(""1.2.1"", stackVersionNode.getObject().getPropertyValue(""Versions/stack_version""));
    org.apache.ambari.server.api.query.QueryImpl instance2 = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    instance2.addProperty(""operating_systems/*"", null);
    instance2.setUserPredicate(predicate);
    instance2.setPageRequest(new org.apache.ambari.server.controller.internal.PageRequestImpl(org.apache.ambari.server.controller.spi.PageRequest.StartingPoint.OffsetStart, 1, 1, null, null));
    org.apache.ambari.server.api.services.Result result2 = instance2.execute();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree2 = result2.getResultTree();
    org.junit.Assert.assertEquals(1, tree2.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> stackVersionNode2 = tree2.getChild(""StackVersion:1"");
    org.junit.Assert.assertEquals(""StackVersion:1"", stackVersionNode2.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.StackVersion, stackVersionNode2.getObject().getType());
    org.junit.Assert.assertEquals(""1.2.2"", stackVersionNode2.getObject().getPropertyValue(""Versions/stack_version""));
    org.apache.ambari.server.api.query.QueryImpl instance3 = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    instance3.addProperty(""operating_systems/*"", null);
    instance3.setUserPredicate(predicate);
    instance3.setPageRequest(new org.apache.ambari.server.controller.internal.PageRequestImpl(org.apache.ambari.server.controller.spi.PageRequest.StartingPoint.OffsetStart, 2, 1, null, null));
    org.apache.ambari.server.api.services.Result result3 = instance3.execute();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree3 = result3.getResultTree();
    org.junit.Assert.assertEquals(2, tree3.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> stackVersionNode3 = tree3.getChild(""StackVersion:1"");
    org.junit.Assert.assertEquals(""StackVersion:1"", stackVersionNode3.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.StackVersion, stackVersionNode3.getObject().getType());
    org.junit.Assert.assertEquals(""1.2.2"", stackVersionNode3.getObject().getPropertyValue(""Versions/stack_version""));
    stackVersionNode3 = tree3.getChild(""StackVersion:2"");
    org.junit.Assert.assertEquals(""StackVersion:2"", stackVersionNode3.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.StackVersion, stackVersionNode3.getObject().getType());
    org.junit.Assert.assertEquals(""2.0.1"", stackVersionNode3.getObject().getPropertyValue(""Versions/stack_version""));
}","testExecute_StackVersionPageSubResourcePredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute__Host_collection_noSpecifiedProps","TRUE","10","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Host).anyTimes();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> setChildren = new java.util.HashSet<>();
    EasyMock.expect(resourceDefinition.getSubResourceDefinitions()).andReturn(setChildren).anyTimes();
    EasyMock.replay(resourceDefinition);
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    org.apache.ambari.server.api.services.Result result = instance.execute();
    EasyMock.verify(resourceDefinition);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(4, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> hostNode = tree.getChild(""Host:1"");
    org.junit.Assert.assertEquals(""Host:1"", hostNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    hostNode = tree.getChild(""Host:2"");
    org.junit.Assert.assertEquals(""Host:2"", hostNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    hostNode = tree.getChild(""Host:3"");
    org.junit.Assert.assertEquals(""Host:3"", hostNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    hostNode = tree.getChild(""Host:4"");
    org.junit.Assert.assertEquals(""Host:4"", hostNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
}","testExecute__Host_collection_noSpecifiedProps()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute__Host_collection_AlertsSummary","TRUE","21","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.HostResourceDefinition();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    final java.util.concurrent.atomic.AtomicInteger pageCallCount = new java.util.concurrent.atomic.AtomicInteger(0);
    org.apache.ambari.server.controller.internal.ClusterControllerImpl clusterControllerImpl = new org.apache.ambari.server.controller.internal.ClusterControllerImpl(new org.apache.ambari.server.controller.internal.ClusterControllerImplTest.TestProviderModule()) {
        @java.lang.Override
        public org.apache.ambari.server.controller.spi.PageResponse getPage(org.apache.ambari.server.controller.spi.Resource.Type type, org.apache.ambari.server.controller.spi.QueryResponse queryResponse, org.apache.ambari.server.controller.spi.Request request, org.apache.ambari.server.controller.spi.Predicate predicate, org.apache.ambari.server.controller.spi.PageRequest pageRequest, org.apache.ambari.server.controller.spi.SortRequest sortRequest) throws org.apache.ambari.server.controller.spi.UnsupportedPropertyException, org.apache.ambari.server.controller.spi.SystemException, org.apache.ambari.server.controller.spi.NoSuchResourceException, org.apache.ambari.server.controller.spi.NoSuchParentResourceException {
            pageCallCount.incrementAndGet();
            return super.getPage(type, queryResponse, request, predicate, pageRequest, sortRequest);
        }
    };
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition, clusterControllerImpl);
    pageCallCount.set(0);
    org.apache.ambari.server.api.services.Result result = instance.execute();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(4, tree.getChildren().size());
    org.junit.Assert.assertEquals(1, pageCallCount.get());
    pageCallCount.set(0);
    org.apache.ambari.server.controller.utilities.PredicateBuilder pb = new org.apache.ambari.server.controller.utilities.PredicateBuilder();
    org.apache.ambari.server.controller.spi.Predicate predicate = pb.property(""alerts_summary/CRITICAL"").greaterThan(0).toPredicate();
    instance.setUserPredicate(predicate);
    result = instance.execute();
    tree = result.getResultTree();
    org.junit.Assert.assertEquals(2, tree.getChildren().size());
    org.junit.Assert.assertEquals(2, pageCallCount.get());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> hostNode = tree.getChild(""Host:1"");
    org.junit.Assert.assertEquals(""Host:1"", hostNode.getName());
    org.junit.Assert.assertEquals(""host:0"", hostNode.getObject().getPropertyValue(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Hosts"", ""host_name"")));
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    org.junit.Assert.assertEquals(""1"", hostNode.getObject().getPropertyValue(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""alerts_summary"", ""CRITICAL"")));
    hostNode = tree.getChild(""Host:2"");
    org.junit.Assert.assertEquals(""Host:2"", hostNode.getName());
    org.junit.Assert.assertEquals(""host:2"", hostNode.getObject().getPropertyValue(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Hosts"", ""host_name"")));
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    org.junit.Assert.assertEquals(""1"", hostNode.getObject().getPropertyValue(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""alerts_summary"", ""CRITICAL"")));
    pageCallCount.set(0);
    pb = new org.apache.ambari.server.controller.utilities.PredicateBuilder();
    predicate = pb.property(""alerts_summary/WARNING"").greaterThan(0).toPredicate();
    instance.setUserPredicate(predicate);
    instance.setPageRequest(new org.apache.ambari.server.controller.internal.PageRequestImpl(org.apache.ambari.server.controller.spi.PageRequest.StartingPoint.Beginning, 1, 0, null, null));
    result = instance.execute();
    tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    org.junit.Assert.assertEquals(2, pageCallCount.get());
    hostNode = tree.getChild(""Host:1"");
    org.junit.Assert.assertEquals(""Host:1"", hostNode.getName());
    org.junit.Assert.assertEquals(""host:1"", hostNode.getObject().getPropertyValue(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Hosts"", ""host_name"")));
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    org.junit.Assert.assertEquals(""1"", hostNode.getObject().getPropertyValue(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""alerts_summary"", ""WARNING"")));
    pageCallCount.set(0);
    pb = new org.apache.ambari.server.controller.utilities.PredicateBuilder();
    predicate = pb.property(""alerts_summary/WARNING"").greaterThan(0).or().property(""host_components/HostRoles/component_name"").equals(""DATANODE"").toPredicate();
    instance.setUserPredicate(predicate);
    instance.setPageRequest(null);
    result = instance.execute();
    tree = result.getResultTree();
    org.junit.Assert.assertEquals(0, tree.getChildren().size());
    org.junit.Assert.assertEquals(6, pageCallCount.get());
}","testExecute__Host_collection_AlertsSummary()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute__collection_nullInternalPredicate_nullUserPredicate","TRUE","5","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> setChildren = new java.util.HashSet<>();
    setChildren.add(new org.apache.ambari.server.api.resources.SubResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.Host));
    EasyMock.expect(resourceDefinition.getSubResourceDefinitions()).andReturn(setChildren).anyTimes();
    EasyMock.replay(resourceDefinition);
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    org.apache.ambari.server.api.services.Result result = instance.execute();
    EasyMock.verify(resourceDefinition);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> clusterNode = tree.getChild(""Cluster:1"");
    org.junit.Assert.assertEquals(""Cluster:1"", clusterNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Cluster, clusterNode.getObject().getType());
    org.junit.Assert.assertEquals(0, clusterNode.getChildren().size());
}","testExecute__collection_nullInternalPredicate_nullUserPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute__collection_nullInternalPredicate_nonNullUserPredicate","TRUE","5","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Cluster, ""cluster"");
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Host).anyTimes();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> setChildren = new java.util.HashSet<>();
    EasyMock.expect(resourceDefinition.getSubResourceDefinitions()).andReturn(setChildren).anyTimes();
    EasyMock.replay(resourceDefinition);
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    org.apache.ambari.server.controller.utilities.PredicateBuilder pb = new org.apache.ambari.server.controller.utilities.PredicateBuilder();
    org.apache.ambari.server.controller.spi.Predicate predicate = pb.property(""Hosts/host_name"").equals(""host:2"").toPredicate();
    instance.setUserPredicate(predicate);
    org.apache.ambari.server.api.services.Result result = instance.execute();
    EasyMock.verify(resourceDefinition);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> hostNode = tree.getChild(""Host:1"");
    org.junit.Assert.assertEquals(""Host:1"", hostNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    org.junit.Assert.assertEquals(""host:2"", hostNode.getObject().getPropertyValue(""Hosts/host_name""));
}","testExecute__collection_nullInternalPredicate_nonNullUserPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute__collection_nonNullInternalPredicate_nonNullUserPredicate","TRUE","5","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Host).anyTimes();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> setChildren = new java.util.HashSet<>();
    EasyMock.expect(resourceDefinition.getSubResourceDefinitions()).andReturn(setChildren).anyTimes();
    EasyMock.replay(resourceDefinition);
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    org.apache.ambari.server.controller.utilities.PredicateBuilder pb = new org.apache.ambari.server.controller.utilities.PredicateBuilder();
    org.apache.ambari.server.controller.spi.Predicate predicate = pb.property(""Hosts/host_name"").equals(""host:2"").toPredicate();
    instance.setUserPredicate(predicate);
    org.apache.ambari.server.api.services.Result result = instance.execute();
    EasyMock.verify(resourceDefinition);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(1, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> hostNode = tree.getChild(""Host:1"");
    org.junit.Assert.assertEquals(""Host:1"", hostNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    org.junit.Assert.assertEquals(""host:2"", hostNode.getObject().getPropertyValue(""Hosts/host_name""));
}","testExecute__collection_nonNullInternalPredicate_nonNullUserPredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testAddProperty__localProperty","TRUE","14","assertEquals
assertNotNull","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Host).anyTimes();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> setChildren = new java.util.HashSet<>();
    EasyMock.expect(resourceDefinition.getSubResourceDefinitions()).andReturn(setChildren).anyTimes();
    EasyMock.replay(resourceDefinition);
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    instance.addLocalProperty(""c1/p1"");
    org.apache.ambari.server.api.services.Result result = instance.execute();
    EasyMock.verify(resourceDefinition);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(4, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> hostNode = tree.getChild(""Host:1"");
    org.junit.Assert.assertEquals(""Host:1"", hostNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p1""));
    hostNode = tree.getChild(""Host:2"");
    org.junit.Assert.assertEquals(""Host:2"", hostNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p1""));
    hostNode = tree.getChild(""Host:3"");
    org.junit.Assert.assertEquals(""Host:3"", hostNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p1""));
    hostNode = tree.getChild(""Host:4"");
    org.junit.Assert.assertEquals(""Host:4"", hostNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p1""));
}","testAddProperty__localProperty()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testAddProperty__allCategoryProperties","TRUE","22","assertEquals
assertNotNull","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    EasyMock.expect(resourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Host).anyTimes();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> setChildren = new java.util.HashSet<>();
    EasyMock.expect(resourceDefinition.getSubResourceDefinitions()).andReturn(setChildren).anyTimes();
    EasyMock.replay(resourceDefinition);
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImplTest.TestQuery(mapIds, resourceDefinition);
    instance.addLocalProperty(""c1"");
    org.apache.ambari.server.api.services.Result result = instance.execute();
    EasyMock.verify(resourceDefinition);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.junit.Assert.assertEquals(4, tree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> hostNode = tree.getChild(""Host:1"");
    org.junit.Assert.assertEquals(""Host:1"", hostNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p1""));
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p2""));
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p3""));
    hostNode = tree.getChild(""Host:2"");
    org.junit.Assert.assertEquals(""Host:2"", hostNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p1""));
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p2""));
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p3""));
    hostNode = tree.getChild(""Host:3"");
    org.junit.Assert.assertEquals(""Host:3"", hostNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p1""));
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p2""));
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p3""));
    hostNode = tree.getChild(""Host:4"");
    org.junit.Assert.assertEquals(""Host:4"", hostNode.getName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Host, hostNode.getObject().getType());
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p1""));
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p2""));
    org.junit.Assert.assertNotNull(hostNode.getObject().getPropertyValue(""c1/p3""));
}","testAddProperty__allCategoryProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute_RendererDoesNotRequirePropertyProviderInput","FALSE","0","None","{
    org.easymock.EasyMockSupport mockSupport = new org.easymock.EasyMockSupport();
    org.apache.ambari.server.api.resources.ResourceDefinition mockResourceDefinition = mockSupport.createMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.resources.SubResourceDefinition mockSubResourceDefinition = mockSupport.createMock(org.apache.ambari.server.api.resources.SubResourceDefinition.class);
    org.apache.ambari.server.controller.spi.ClusterController mockClusterController = mockSupport.createMock(org.apache.ambari.server.controller.spi.ClusterController.class);
    org.apache.ambari.server.api.query.render.Renderer mockRenderer = mockSupport.createMock(org.apache.ambari.server.api.query.render.Renderer.class);
    org.apache.ambari.server.controller.spi.QueryResponse mockQueryResponse = mockSupport.createMock(org.apache.ambari.server.controller.spi.QueryResponse.class);
    org.apache.ambari.server.controller.spi.QueryResponse mockSubQueryResponse = mockSupport.createMock(org.apache.ambari.server.controller.spi.QueryResponse.class);
    org.apache.ambari.server.controller.spi.Resource mockResource = mockSupport.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Schema mockSchema = mockSupport.createMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(mockResourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Host).atLeastOnce();
    EasyMock.expect(mockResourceDefinition.getSubResourceDefinitions()).andReturn(java.util.Collections.singleton(mockSubResourceDefinition)).atLeastOnce();
    EasyMock.expect(mockSubResourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Configuration).atLeastOnce();
    EasyMock.expect(mockSubResourceDefinition.isCollection()).andReturn(false).atLeastOnce();
    EasyMock.expect(mockSchema.getKeyPropertyId(EasyMock.isA(org.apache.ambari.server.controller.spi.Resource.Type.class))).andReturn(""test-value"").anyTimes();
    EasyMock.expect(mockSchema.getKeyTypes()).andReturn(java.util.Collections.emptySet()).anyTimes();
    mockRenderer.init(EasyMock.isA(org.apache.ambari.server.controller.spi.SchemaFactory.class));
    EasyMock.expect(mockRenderer.requiresPropertyProviderInput()).andReturn(false).times(2);
    EasyMock.expect(mockRenderer.finalizeProperties(EasyMock.isA(org.apache.ambari.server.api.util.TreeNode.class), EasyMock.eq(true))).andReturn(new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, java.util.Collections.<java.lang.String>emptySet(), ""test-node""));
    EasyMock.expect(mockRenderer.finalizeResult(EasyMock.isA(org.apache.ambari.server.api.services.Result.class))).andReturn(null);
    EasyMock.expect(mockClusterController.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Host)).andReturn(mockSchema).anyTimes();
    EasyMock.expect(mockClusterController.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Configuration)).andReturn(mockSchema).anyTimes();
    EasyMock.expect(mockClusterController.getResources(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Host), EasyMock.isA(org.apache.ambari.server.controller.spi.Request.class), ((org.apache.ambari.server.controller.spi.Predicate) (EasyMock.eq(null))))).andReturn(mockQueryResponse).atLeastOnce();
    EasyMock.expect(mockClusterController.getResources(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Configuration), EasyMock.isA(org.apache.ambari.server.controller.spi.Request.class), ((org.apache.ambari.server.controller.spi.Predicate) (EasyMock.eq(null))))).andReturn(mockSubQueryResponse).atLeastOnce();
    EasyMock.expect(mockClusterController.getIterable(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Host), EasyMock.isA(org.apache.ambari.server.controller.spi.QueryResponse.class), EasyMock.isA(org.apache.ambari.server.controller.spi.Request.class), ((org.apache.ambari.server.controller.spi.Predicate) (EasyMock.eq(null))), ((org.apache.ambari.server.controller.spi.PageRequest) (EasyMock.eq(null))), ((org.apache.ambari.server.controller.spi.SortRequest) (EasyMock.eq(null))))).andReturn(java.util.Collections.singleton(mockResource)).atLeastOnce();
    EasyMock.expect(mockClusterController.getIterable(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Configuration), EasyMock.isA(org.apache.ambari.server.controller.spi.QueryResponse.class), EasyMock.isA(org.apache.ambari.server.controller.spi.Request.class), ((org.apache.ambari.server.controller.spi.Predicate) (EasyMock.eq(null))), ((org.apache.ambari.server.controller.spi.PageRequest) (EasyMock.eq(null))), ((org.apache.ambari.server.controller.spi.SortRequest) (EasyMock.eq(null))))).andReturn(java.util.Collections.singleton(mockResource)).atLeastOnce();
    EasyMock.expect(mockQueryResponse.getResources()).andReturn(java.util.Collections.singleton(mockResource)).atLeastOnce();
    EasyMock.expect(mockSubQueryResponse.getResources()).andReturn(java.util.Collections.singleton(mockResource)).atLeastOnce();
    EasyMock.expect(mockResource.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Host).atLeastOnce();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mockSupport.replayAll();
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImpl(mapIds, mockResourceDefinition, mockClusterController);
    instance.setRenderer(mockRenderer);
    instance.ensureSubResources();
    instance.addProperty(""*"", null);
    instance.execute();
    mockSupport.verifyAll();
}","testExecute_RendererDoesNotRequirePropertyProviderInput()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testExecute_RendererRequiresPropertyProviderInput","FALSE","0","None","{
    org.easymock.EasyMockSupport mockSupport = new org.easymock.EasyMockSupport();
    org.apache.ambari.server.api.resources.ResourceDefinition mockResourceDefinition = mockSupport.createMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.resources.SubResourceDefinition mockSubResourceDefinition = mockSupport.createMock(org.apache.ambari.server.api.resources.SubResourceDefinition.class);
    org.apache.ambari.server.controller.spi.ClusterController mockClusterController = mockSupport.createMock(org.apache.ambari.server.controller.spi.ClusterController.class);
    org.apache.ambari.server.api.query.render.Renderer mockRenderer = mockSupport.createMock(org.apache.ambari.server.api.query.render.Renderer.class);
    org.apache.ambari.server.controller.spi.QueryResponse mockQueryResponse = mockSupport.createMock(org.apache.ambari.server.controller.spi.QueryResponse.class);
    org.apache.ambari.server.controller.spi.QueryResponse mockSubQueryResponse = mockSupport.createMock(org.apache.ambari.server.controller.spi.QueryResponse.class);
    org.apache.ambari.server.controller.spi.Resource mockResource = mockSupport.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.controller.spi.Schema mockSchema = mockSupport.createMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(mockResourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Host).atLeastOnce();
    EasyMock.expect(mockResourceDefinition.getSubResourceDefinitions()).andReturn(java.util.Collections.singleton(mockSubResourceDefinition)).atLeastOnce();
    EasyMock.expect(mockSubResourceDefinition.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Configuration).atLeastOnce();
    EasyMock.expect(mockSubResourceDefinition.isCollection()).andReturn(false).atLeastOnce();
    EasyMock.expect(mockSchema.getKeyPropertyId(EasyMock.isA(org.apache.ambari.server.controller.spi.Resource.Type.class))).andReturn(""test-value"").anyTimes();
    EasyMock.expect(mockSchema.getKeyTypes()).andReturn(java.util.Collections.emptySet()).anyTimes();
    mockRenderer.init(EasyMock.isA(org.apache.ambari.server.controller.spi.SchemaFactory.class));
    EasyMock.expect(mockRenderer.requiresPropertyProviderInput()).andReturn(true).times(2);
    EasyMock.expect(mockRenderer.finalizeProperties(EasyMock.isA(org.apache.ambari.server.api.util.TreeNode.class), EasyMock.eq(true))).andReturn(new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, java.util.Collections.<java.lang.String>emptySet(), ""test-node""));
    EasyMock.expect(mockRenderer.finalizeResult(EasyMock.isA(org.apache.ambari.server.api.services.Result.class))).andReturn(null);
    EasyMock.expect(mockClusterController.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Host)).andReturn(mockSchema).anyTimes();
    EasyMock.expect(mockClusterController.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Configuration)).andReturn(mockSchema).anyTimes();
    EasyMock.expect(mockClusterController.getResources(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Host), EasyMock.isA(org.apache.ambari.server.controller.spi.Request.class), ((org.apache.ambari.server.controller.spi.Predicate) (EasyMock.eq(null))))).andReturn(mockQueryResponse).atLeastOnce();
    EasyMock.expect(mockClusterController.getResources(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Configuration), EasyMock.isA(org.apache.ambari.server.controller.spi.Request.class), ((org.apache.ambari.server.controller.spi.Predicate) (EasyMock.eq(null))))).andReturn(mockSubQueryResponse).atLeastOnce();
    EasyMock.expect(mockClusterController.getIterable(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Host), EasyMock.isA(org.apache.ambari.server.controller.spi.QueryResponse.class), EasyMock.isA(org.apache.ambari.server.controller.spi.Request.class), ((org.apache.ambari.server.controller.spi.Predicate) (EasyMock.eq(null))), ((org.apache.ambari.server.controller.spi.PageRequest) (EasyMock.eq(null))), ((org.apache.ambari.server.controller.spi.SortRequest) (EasyMock.eq(null))))).andReturn(java.util.Collections.singleton(mockResource)).atLeastOnce();
    EasyMock.expect(mockClusterController.getIterable(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Configuration), EasyMock.isA(org.apache.ambari.server.controller.spi.QueryResponse.class), EasyMock.isA(org.apache.ambari.server.controller.spi.Request.class), ((org.apache.ambari.server.controller.spi.Predicate) (EasyMock.eq(null))), ((org.apache.ambari.server.controller.spi.PageRequest) (EasyMock.eq(null))), ((org.apache.ambari.server.controller.spi.SortRequest) (EasyMock.eq(null))))).andReturn(java.util.Collections.singleton(mockResource)).atLeastOnce();
    EasyMock.expect(mockClusterController.populateResources(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Host), EasyMock.eq(java.util.Collections.singleton(mockResource)), EasyMock.isA(org.apache.ambari.server.controller.spi.Request.class), ((org.apache.ambari.server.controller.spi.Predicate) (EasyMock.eq(null))))).andReturn(java.util.Collections.emptySet()).times(1);
    EasyMock.expect(mockClusterController.populateResources(EasyMock.eq(org.apache.ambari.server.controller.spi.Resource.Type.Configuration), EasyMock.eq(java.util.Collections.singleton(mockResource)), EasyMock.isA(org.apache.ambari.server.controller.spi.Request.class), ((org.apache.ambari.server.controller.spi.Predicate) (EasyMock.eq(null))))).andReturn(java.util.Collections.emptySet()).times(1);
    EasyMock.expect(mockQueryResponse.getResources()).andReturn(java.util.Collections.singleton(mockResource)).atLeastOnce();
    EasyMock.expect(mockSubQueryResponse.getResources()).andReturn(java.util.Collections.singleton(mockResource)).atLeastOnce();
    EasyMock.expect(mockResource.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Host).atLeastOnce();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mockSupport.replayAll();
    org.apache.ambari.server.api.query.QueryImpl instance = new org.apache.ambari.server.api.query.QueryImpl(mapIds, mockResourceDefinition, mockClusterController);
    instance.setRenderer(mockRenderer);
    instance.ensureSubResources();
    instance.addProperty(""*"", null);
    instance.execute();
    mockSupport.verifyAll();
}","testExecute_RendererRequiresPropertyProviderInput()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryImplTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
129041f548923abab41191e63a892d23193a7d52
3e57dc24c7ba3eaafe4a9d0e179c6e813726bcaa
44effc56526e7afe8f9ca8fc2a80c65c844f8d30
98405ef9bee07b974baeaa13cb143aeea6aeadfd
f05543d393aed760f49f799a447366d45b3a128b
43550a78dcffeec00888141995fa8103539dad43
631d913da909b3978f772678fdc458ba8ab0456f
474cfcd3db4d686b8036e429976678bbe7dc5c92
d822bf34e13483e6ad53552647eea97756c76a56
e148fca5aadff1f8720de8285d700c1fde7f8a7b
7ed98d53c1f1c24dc841baef54e02d2664f6a381
6bd0394a5f2254da2421f066473f680dc32772a1
92a95586e329ddb8674c63506dc54f998ce6c01f
9fcc9f5a4deff3ea03bfcb4f4199c32bc0ea6527
1785225b04e7610235ded00ed180220d98a84f65
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
e5d225a2db6afc6d1b03f03027d3582ffac88850
dd535bcf81398132f973faf3a58e71c9aa66e51b
46e034e5e07a6607ed5c430b27045eea53810803
fc427d9f3e2d448a4e8746dd04199ad17390755c
20702c6bf5dc99206980967b30335ab0061b1770
d58846eab9269fc94528740ab72fa414c3bb976e
3b78da641f0d863d552afb7ff3c5224c3b2577e7
a14a95011307876ed4315aade3094a5a409821d1
fd702592787f820888566a5e39ebdaecf9e748f8
5e739bea8e2f903d899f0f872ab591614087890f
c38a32265d3ff66fe166efc6910979805a42d8b7
6917d80a0d21155e2a573a3cf76afbdaf485372c
d0c8c7c1df69e036f017ef88effcf2c444a79d6d
476bdf8ff218b25212679a912bbc9928ff20bad1
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
207718cd571b3c6f8c7a61436b062d6a7131f2db
b41d25189fd21aa1a12ff398d75e7273f5b40d61
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64"
"testGetProperties","TRUE","2","assertEquals","{
    java.util.Set<java.lang.String> properties = new java.util.HashSet<>();
    org.apache.ambari.server.api.query.QueryInfo info = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ClusterResourceDefinition(), properties);
    org.junit.Assert.assertEquals(properties, info.getProperties());
}","testGetProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryInfoTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
89af4f19005c2a87561e2279fed8745a6f8a9645
ec385434caab0398932f745c608d47f4fd65c433
38924d9e066a728e8de86a3e9195eac286cf251a
bb45951281054e6e3643251733182dffc26a03ca
a12bb10131ca66e48e524500092695ecdcc86fea
27d96c9c8c6cf2fd76795c39b23c7c19e424801c"
"testGetResource","TRUE","2","assertSame","{
    org.apache.ambari.server.api.resources.ResourceDefinition resource = new org.apache.ambari.server.api.resources.ClusterResourceDefinition();
    org.apache.ambari.server.api.query.QueryInfo info = new org.apache.ambari.server.api.query.QueryInfo(resource, new java.util.HashSet<>());
    org.junit.Assert.assertSame(resource, info.getResource());
}","testGetResource()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/QueryInfoTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
89af4f19005c2a87561e2279fed8745a6f8a9645
ec385434caab0398932f745c608d47f4fd65c433
38924d9e066a728e8de86a3e9195eac286cf251a
bb45951281054e6e3643251733182dffc26a03ca
a12bb10131ca66e48e524500092695ecdcc86fea
27d96c9c8c6cf2fd76795c39b23c7c19e424801c"
"testGetSubResourcePredicate","TRUE","4","assertEquals","{
    org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(""ServiceInfo/service_name"").equals(""HBASE"").and().property(""components/ServiceComponentInfo/category"").equals(""SLAVE"").and().property(""components/host_components/metrics/cpu/cpu_num"").greaterThanEqualTo(1).toPredicate();
    org.apache.ambari.server.api.query.SubResourcePredicateVisitor visitor = new org.apache.ambari.server.api.query.SubResourcePredicateVisitor(""components"");
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
    org.apache.ambari.server.controller.spi.Predicate subResourcePredicate = visitor.getSubResourcePredicate();
    org.apache.ambari.server.controller.spi.Predicate expectedPredicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(""ServiceComponentInfo/category"").equals(""SLAVE"").and().property(""host_components/metrics/cpu/cpu_num"").greaterThanEqualTo(1).toPredicate();
    org.junit.Assert.assertEquals(expectedPredicate, subResourcePredicate);
    predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property(""ServiceInfo/service_name"").equals(""HBASE"").and().property(""ServiceInfo/component_name"").equals(""HBASE_MASTER"").toPredicate();
    visitor = new org.apache.ambari.server.api.query.SubResourcePredicateVisitor(""components"");
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
    subResourcePredicate = visitor.getSubResourcePredicate();
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.predicate.AndPredicate(), subResourcePredicate);
    org.apache.ambari.server.controller.spi.Predicate notPredicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().not().property(""host_components/HostRoles/component_name"").equals(""ZOOKEEPER_SERVER"").toPredicate();
    org.apache.ambari.server.controller.spi.Predicate expectedNotPredicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().not().property(""HostRoles/component_name"").equals(""ZOOKEEPER_SERVER"").toPredicate();
    visitor = new org.apache.ambari.server.api.query.SubResourcePredicateVisitor(""host_components"");
    org.apache.ambari.server.controller.utilities.PredicateHelper.visit(notPredicate, visitor);
    subResourcePredicate = visitor.getSubResourcePredicate();
    org.junit.Assert.assertEquals(expectedNotPredicate, subResourcePredicate);
}","testGetSubResourcePredicate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/SubResourcePredicateVisitorTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e793b6c83812f3e1712437315e8790397c55311a
e5d225a2db6afc6d1b03f03027d3582ffac88850"
"testFinalizeProperties__instance","TRUE","7","assertEquals
assertNotNull
assertTrue","{
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ClusterResourceDefinition(), new java.util.HashSet<>());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Cluster"");
    rootQuery.getProperties().add(""foo/bar"");
    rootQuery.getProperties().add(""prop1"");
    org.apache.ambari.server.api.query.QueryInfo hostInfo = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.HostResourceDefinition(), new java.util.HashSet<>());
    queryTree.addChild(hostInfo, ""Host"");
    org.apache.ambari.server.api.query.QueryInfo hostComponentInfo = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.HostComponentResourceDefinition(), new java.util.HashSet<>());
    queryTree.getChild(""Host"").addChild(hostComponentInfo, ""HostComponent"");
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = fullRenderer.finalizeProperties(queryTree, false);
    java.util.Set<java.lang.String> rootProperties = propertyTree.getObject();
    org.junit.Assert.assertEquals(2, rootProperties.size());
    org.junit.Assert.assertNotNull(propertyTree.getChild(""Host""));
    org.junit.Assert.assertTrue(propertyTree.getChild(""Host"").getObject().isEmpty());
    org.junit.Assert.assertNotNull(propertyTree.getChild(""Host/HostComponent""));
    org.junit.Assert.assertEquals(1, propertyTree.getChild(""Host/HostComponent"").getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getChild(""Host/HostComponent"").getObject().contains(""HostRoles/component_name""));
}","testFinalizeProperties__instance()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/ClusterBlueprintRendererTest.java","1a8b193fbc8da67597044cb26ee1a8cabcc86cd8
5a8af96159fe1fe43d2569d847a88de44dcf59c6
4bce57823da7d972df9e422e3f920ebbc60362f3
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
1aad067cff1601d3c0ddd1f019df0fa9eb442199
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bc806659971c05b873aa769007afa2916b2041dc
e4db57093f4d17497366cdfbf02127f36399bf42
6d06814f729d45db11d63465d0e9d640c49d2b23
95ca56f9cb7892a5a9e124e59b6171ad63cdc09e
98405ef9bee07b974baeaa13cb143aeea6aeadfd
66e42cbab8a714eac49b4ae84eb238d0c08accb5
c9f0dd0b8206956a7a71fa0adca64160710d2910
bc6f2c78552e5a21eaff72919d9b55d1dd79a290
7c5fb7b534eaec38c67dfed510ba97341bd2f0ce
2fc7adecea03ec70141f41e98f1aa2d089c3b364
64a73207ec4a4131af420a84e374b94f4ee7c220
8d464c2b286c522a47e2eb12f55d67e59ee61d37
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"clusterWithDefaultSettings","TRUE","3","assertEquals","{
    org.apache.ambari.server.controller.internal.Stack stack = org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.stackForSettingsTest();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> clusterNode = org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.clusterWith(stack, stack.getComponents(), org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.defaultCredentialStoreSettings(), org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.defaultRecoverySettings());
    java.util.Collection<java.util.Map<java.lang.String, java.lang.Object>> settings = fullRenderer.getSettings(clusterNode, stack);
    org.junit.Assert.assertEquals(com.google.common.collect.Lists.newArrayList(com.google.common.collect.ImmutableMap.of(org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.SERVICE_SETTINGS, com.google.common.collect.ImmutableSet.of()), com.google.common.collect.ImmutableMap.of(org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.COMPONENT_SETTINGS, com.google.common.collect.ImmutableSet.of())), settings);
    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableList.of(), minimalRenderer.getSettings(clusterNode, stack));
}","clusterWithDefaultSettings()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/ClusterBlueprintRendererTest.java","1a8b193fbc8da67597044cb26ee1a8cabcc86cd8
5a8af96159fe1fe43d2569d847a88de44dcf59c6
4bce57823da7d972df9e422e3f920ebbc60362f3
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
1aad067cff1601d3c0ddd1f019df0fa9eb442199
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bc806659971c05b873aa769007afa2916b2041dc
e4db57093f4d17497366cdfbf02127f36399bf42
6d06814f729d45db11d63465d0e9d640c49d2b23
95ca56f9cb7892a5a9e124e59b6171ad63cdc09e
98405ef9bee07b974baeaa13cb143aeea6aeadfd
66e42cbab8a714eac49b4ae84eb238d0c08accb5
c9f0dd0b8206956a7a71fa0adca64160710d2910
bc6f2c78552e5a21eaff72919d9b55d1dd79a290
7c5fb7b534eaec38c67dfed510ba97341bd2f0ce
2fc7adecea03ec70141f41e98f1aa2d089c3b364
64a73207ec4a4131af420a84e374b94f4ee7c220
8d464c2b286c522a47e2eb12f55d67e59ee61d37
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"clusterWithCustomSettings","TRUE","3","assertEquals","{
    org.apache.ambari.server.controller.internal.Stack stack = org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.stackForSettingsTest();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> clusterNode = org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.clusterWith(stack, stack.getComponents(), org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.customCredentialStoreSettingFor(stack, ""service1"", ""service2""), org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.customRecoverySettingsFor(stack, ""component1"", ""component2""));
    java.util.Collection<java.util.Map<java.lang.String, java.lang.Object>> settings = fullRenderer.getSettings(clusterNode, stack);
    org.junit.Assert.assertEquals(com.google.common.collect.Lists.newArrayList(com.google.common.collect.ImmutableMap.of(org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.SERVICE_SETTINGS, com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap.of(""name"", ""service1"", org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.CREDENTIAL_STORE_ENABLED, org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.FALSE), com.google.common.collect.ImmutableMap.of(""name"", ""service2"", org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.CREDENTIAL_STORE_ENABLED, org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.TRUE))), com.google.common.collect.ImmutableMap.of(org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.COMPONENT_SETTINGS, com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap.of(""name"", ""component1"", org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.RECOVERY_ENABLED, org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.FALSE), com.google.common.collect.ImmutableMap.of(""name"", ""component2"", org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.RECOVERY_ENABLED, org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.TRUE)))), settings);
    org.junit.Assert.assertEquals(settings, minimalRenderer.getSettings(clusterNode, stack));
}","clusterWithCustomSettings()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/ClusterBlueprintRendererTest.java","1a8b193fbc8da67597044cb26ee1a8cabcc86cd8
5a8af96159fe1fe43d2569d847a88de44dcf59c6
4bce57823da7d972df9e422e3f920ebbc60362f3
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
1aad067cff1601d3c0ddd1f019df0fa9eb442199
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bc806659971c05b873aa769007afa2916b2041dc
e4db57093f4d17497366cdfbf02127f36399bf42
6d06814f729d45db11d63465d0e9d640c49d2b23
95ca56f9cb7892a5a9e124e59b6171ad63cdc09e
98405ef9bee07b974baeaa13cb143aeea6aeadfd
66e42cbab8a714eac49b4ae84eb238d0c08accb5
c9f0dd0b8206956a7a71fa0adca64160710d2910
bc6f2c78552e5a21eaff72919d9b55d1dd79a290
7c5fb7b534eaec38c67dfed510ba97341bd2f0ce
2fc7adecea03ec70141f41e98f1aa2d089c3b364
64a73207ec4a4131af420a84e374b94f4ee7c220
8d464c2b286c522a47e2eb12f55d67e59ee61d37
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"clusterWithRecoveryDisabled","TRUE","3","assertEquals","{
    org.apache.ambari.server.controller.internal.Stack stack = org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.stackForSettingsTest();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> clusterNode = org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.clusterWith(stack, stack.getComponents(), org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.defaultCredentialStoreSettings(), org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.customRecoverySettingsFor(stack, ""component1""));
    java.util.Collection<java.util.Map<java.lang.String, java.lang.Object>> settings = fullRenderer.getSettings(clusterNode, stack);
    org.junit.Assert.assertEquals(com.google.common.collect.Lists.newArrayList(com.google.common.collect.ImmutableMap.of(org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.SERVICE_SETTINGS, com.google.common.collect.ImmutableSet.of()), com.google.common.collect.ImmutableMap.of(org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.COMPONENT_SETTINGS, com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap.of(""name"", ""component1"", org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.RECOVERY_ENABLED, org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.FALSE)))), settings);
    org.junit.Assert.assertEquals(com.google.common.collect.Lists.newArrayList(com.google.common.collect.ImmutableMap.of(org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.COMPONENT_SETTINGS, com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap.of(""name"", ""component1"", org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.RECOVERY_ENABLED, org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer.FALSE)))), minimalRenderer.getSettings(clusterNode, stack));
}","clusterWithRecoveryDisabled()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/ClusterBlueprintRendererTest.java","1a8b193fbc8da67597044cb26ee1a8cabcc86cd8
5a8af96159fe1fe43d2569d847a88de44dcf59c6
4bce57823da7d972df9e422e3f920ebbc60362f3
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
1aad067cff1601d3c0ddd1f019df0fa9eb442199
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bc806659971c05b873aa769007afa2916b2041dc
e4db57093f4d17497366cdfbf02127f36399bf42
6d06814f729d45db11d63465d0e9d640c49d2b23
95ca56f9cb7892a5a9e124e59b6171ad63cdc09e
98405ef9bee07b974baeaa13cb143aeea6aeadfd
66e42cbab8a714eac49b4ae84eb238d0c08accb5
c9f0dd0b8206956a7a71fa0adca64160710d2910
bc6f2c78552e5a21eaff72919d9b55d1dd79a290
7c5fb7b534eaec38c67dfed510ba97341bd2f0ce
2fc7adecea03ec70141f41e98f1aa2d089c3b364
64a73207ec4a4131af420a84e374b94f4ee7c220
8d464c2b286c522a47e2eb12f55d67e59ee61d37
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__instance_noComponentNode","TRUE","7","assertEquals
assertNotNull
assertTrue","{
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ClusterResourceDefinition(), new java.util.HashSet<>());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Cluster"");
    rootQuery.getProperties().add(""foo/bar"");
    rootQuery.getProperties().add(""prop1"");
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = fullRenderer.finalizeProperties(queryTree, false);
    java.util.Set<java.lang.String> rootProperties = propertyTree.getObject();
    org.junit.Assert.assertEquals(2, rootProperties.size());
    org.junit.Assert.assertNotNull(propertyTree.getChild(""Host""));
    org.junit.Assert.assertTrue(propertyTree.getChild(""Host"").getObject().isEmpty());
    org.junit.Assert.assertNotNull(propertyTree.getChild(""Host/HostComponent""));
    org.junit.Assert.assertEquals(1, propertyTree.getChild(""Host/HostComponent"").getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getChild(""Host/HostComponent"").getObject().contains(""HostRoles/component_name""));
}","testFinalizeProperties__instance_noComponentNode()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/ClusterBlueprintRendererTest.java","1a8b193fbc8da67597044cb26ee1a8cabcc86cd8
5a8af96159fe1fe43d2569d847a88de44dcf59c6
4bce57823da7d972df9e422e3f920ebbc60362f3
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
1aad067cff1601d3c0ddd1f019df0fa9eb442199
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bc806659971c05b873aa769007afa2916b2041dc
e4db57093f4d17497366cdfbf02127f36399bf42
6d06814f729d45db11d63465d0e9d640c49d2b23
95ca56f9cb7892a5a9e124e59b6171ad63cdc09e
98405ef9bee07b974baeaa13cb143aeea6aeadfd
66e42cbab8a714eac49b4ae84eb238d0c08accb5
c9f0dd0b8206956a7a71fa0adca64160710d2910
bc6f2c78552e5a21eaff72919d9b55d1dd79a290
7c5fb7b534eaec38c67dfed510ba97341bd2f0ce
2fc7adecea03ec70141f41e98f1aa2d089c3b364
64a73207ec4a4131af420a84e374b94f4ee7c220
8d464c2b286c522a47e2eb12f55d67e59ee61d37
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeResult_kerberos","TRUE","8","assertNull
assertEquals
assertNotNull","{
    setupMocksForKerberosEnabledCluster();
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(true);
    createClusterResultTree(result.getResultTree());
    org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer renderer = new org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.TestBlueprintRenderer(org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.topology, org.apache.ambari.server.controller.internal.BlueprintExportType.FULL);
    org.apache.ambari.server.api.services.Result blueprintResult = renderer.finalizeResult(result);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> blueprintTree = blueprintResult.getResultTree();
    org.junit.Assert.assertNull(blueprintTree.getStringProperty(""isCollection""));
    org.junit.Assert.assertEquals(1, blueprintTree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> blueprintNode = blueprintTree.getChildren().iterator().next();
    org.junit.Assert.assertEquals(0, blueprintNode.getChildren().size());
    org.apache.ambari.server.controller.spi.Resource blueprintResource = blueprintNode.getObject();
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> properties = blueprintResource.getPropertiesMap();
    org.junit.Assert.assertEquals(""HDP"", properties.get(""Blueprints"").get(""stack_name""));
    org.junit.Assert.assertEquals(""1.3.3"", properties.get(""Blueprints"").get(""stack_version""));
    java.util.Map<java.lang.String, java.lang.Object> securityProperties = ((java.util.Map<java.lang.String, java.lang.Object>) (properties.get(""Blueprints"").get(""security"")));
    org.junit.Assert.assertEquals(""KERBEROS"", securityProperties.get(""type""));
    org.junit.Assert.assertNotNull(((java.util.Map<java.lang.String, java.lang.Object>) (securityProperties.get(""kerberos_descriptor""))).get(""properties""));
}","testFinalizeResult_kerberos()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/ClusterBlueprintRendererTest.java","1a8b193fbc8da67597044cb26ee1a8cabcc86cd8
5a8af96159fe1fe43d2569d847a88de44dcf59c6
4bce57823da7d972df9e422e3f920ebbc60362f3
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
1aad067cff1601d3c0ddd1f019df0fa9eb442199
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bc806659971c05b873aa769007afa2916b2041dc
e4db57093f4d17497366cdfbf02127f36399bf42
6d06814f729d45db11d63465d0e9d640c49d2b23
95ca56f9cb7892a5a9e124e59b6171ad63cdc09e
98405ef9bee07b974baeaa13cb143aeea6aeadfd
66e42cbab8a714eac49b4ae84eb238d0c08accb5
c9f0dd0b8206956a7a71fa0adca64160710d2910
bc6f2c78552e5a21eaff72919d9b55d1dd79a290
7c5fb7b534eaec38c67dfed510ba97341bd2f0ce
2fc7adecea03ec70141f41e98f1aa2d089c3b364
64a73207ec4a4131af420a84e374b94f4ee7c220
8d464c2b286c522a47e2eb12f55d67e59ee61d37
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeResult","TRUE","15","assertNull
assertEquals","{
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(true);
    createClusterResultTree(result.getResultTree());
    org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer renderer = new org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.TestBlueprintRenderer(org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.topology, org.apache.ambari.server.controller.internal.BlueprintExportType.FULL);
    org.apache.ambari.server.api.services.Result blueprintResult = renderer.finalizeResult(result);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> blueprintTree = blueprintResult.getResultTree();
    org.junit.Assert.assertNull(blueprintTree.getStringProperty(""isCollection""));
    org.junit.Assert.assertEquals(1, blueprintTree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> blueprintNode = blueprintTree.getChildren().iterator().next();
    org.junit.Assert.assertEquals(0, blueprintNode.getChildren().size());
    org.apache.ambari.server.controller.spi.Resource blueprintResource = blueprintNode.getObject();
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> properties = blueprintResource.getPropertiesMap();
    org.junit.Assert.assertEquals(""HDP"", properties.get(""Blueprints"").get(""stack_name""));
    org.junit.Assert.assertEquals(""1.3.3"", properties.get(""Blueprints"").get(""stack_version""));
    java.util.Collection<java.util.Map<java.lang.String, java.lang.Object>> host_groups = ((java.util.Collection<java.util.Map<java.lang.String, java.lang.Object>>) (properties.get("""").get(""host_groups"")));
    org.junit.Assert.assertEquals(2, host_groups.size());
    for (java.util.Map<java.lang.String, java.lang.Object> hostGroupProperties : host_groups) {
        java.lang.String host_group_name = ((java.lang.String) (hostGroupProperties.get(""name"")));
        if (host_group_name.equals(""host_group_1"")) {
            org.junit.Assert.assertEquals(""1"", hostGroupProperties.get(""cardinality""));
            java.util.Collection<java.util.Map<java.lang.String, java.lang.String>> components = ((java.util.Collection<java.util.Map<java.lang.String, java.lang.String>>) (hostGroupProperties.get(""components"")));
            org.junit.Assert.assertEquals(5, components.size());
            java.util.Set<java.lang.String> expectedValues = com.google.common.collect.ImmutableSet.of(""JOBTRACKER"", ""TASKTRACKER"", ""NAMENODE"", ""DATANODE"", ""AMBARI_SERVER"");
            java.util.Set<java.lang.String> actualValues = new java.util.HashSet<>();
            for (java.util.Map<java.lang.String, java.lang.String> componentProperties : components) {
                org.junit.Assert.assertEquals(1, componentProperties.size());
                actualValues.add(componentProperties.get(""name""));
            }
            org.junit.Assert.assertEquals(expectedValues, actualValues);
        } else if (host_group_name.equals(""host_group_2"")) {
            org.junit.Assert.assertEquals(""2"", hostGroupProperties.get(""cardinality""));
            java.util.Collection<java.util.Map<java.lang.String, java.lang.String>> components = ((java.util.Collection<java.util.Map<java.lang.String, java.lang.String>>) (hostGroupProperties.get(""components"")));
            org.junit.Assert.assertEquals(2, components.size());
            java.util.Set<java.lang.String> expectedValues = com.google.common.collect.ImmutableSet.of(""TASKTRACKER"", ""DATANODE"");
            java.util.Set<java.lang.String> actualValues = new java.util.HashSet<>();
            for (java.util.Map<java.lang.String, java.lang.String> componentProperties : components) {
                org.junit.Assert.assertEquals(1, componentProperties.size());
                actualValues.add(componentProperties.get(""name""));
            }
            org.junit.Assert.assertEquals(expectedValues, actualValues);
        }
    }
}","testFinalizeResult()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/ClusterBlueprintRendererTest.java","1a8b193fbc8da67597044cb26ee1a8cabcc86cd8
5a8af96159fe1fe43d2569d847a88de44dcf59c6
4bce57823da7d972df9e422e3f920ebbc60362f3
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
1aad067cff1601d3c0ddd1f019df0fa9eb442199
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bc806659971c05b873aa769007afa2916b2041dc
e4db57093f4d17497366cdfbf02127f36399bf42
6d06814f729d45db11d63465d0e9d640c49d2b23
95ca56f9cb7892a5a9e124e59b6171ad63cdc09e
98405ef9bee07b974baeaa13cb143aeea6aeadfd
66e42cbab8a714eac49b4ae84eb238d0c08accb5
c9f0dd0b8206956a7a71fa0adca64160710d2910
bc6f2c78552e5a21eaff72919d9b55d1dd79a290
7c5fb7b534eaec38c67dfed510ba97341bd2f0ce
2fc7adecea03ec70141f41e98f1aa2d089c3b364
64a73207ec4a4131af420a84e374b94f4ee7c220
8d464c2b286c522a47e2eb12f55d67e59ee61d37
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeResultWithAttributes","TRUE","26","assertNull
assertEquals
assertNotNull
assertTrue","{
    org.apache.ambari.server.state.ServiceInfo hdfsService = new org.apache.ambari.server.state.ServiceInfo();
    hdfsService.setName(""HDFS"");
    org.apache.ambari.server.state.ServiceInfo mrService = new org.apache.ambari.server.state.ServiceInfo();
    mrService.setName(""MAPREDUCE"");
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(true);
    java.util.Map<java.lang.String, java.lang.Object> testDesiredConfigMap = new java.util.HashMap<>();
    org.apache.ambari.server.state.DesiredConfig testDesiredConfig = new org.apache.ambari.server.state.DesiredConfig();
    testDesiredConfig.setTag(""test-tag-one"");
    testDesiredConfigMap.put(""test-type-one"", testDesiredConfig);
    createClusterResultTree(result.getResultTree(), testDesiredConfigMap);
    org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer renderer = new org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.TestBlueprintRenderer(org.apache.ambari.server.api.query.render.ClusterBlueprintRendererTest.topology, org.apache.ambari.server.controller.internal.BlueprintExportType.FULL);
    org.apache.ambari.server.api.services.Result blueprintResult = renderer.finalizeResult(result);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> blueprintTree = blueprintResult.getResultTree();
    org.junit.Assert.assertNull(blueprintTree.getStringProperty(""isCollection""));
    org.junit.Assert.assertEquals(1, blueprintTree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> blueprintNode = blueprintTree.getChildren().iterator().next();
    org.junit.Assert.assertEquals(0, blueprintNode.getChildren().size());
    org.apache.ambari.server.controller.spi.Resource blueprintResource = blueprintNode.getObject();
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> properties = blueprintResource.getPropertiesMap();
    org.junit.Assert.assertEquals(""HDP"", properties.get(""Blueprints"").get(""stack_name""));
    org.junit.Assert.assertEquals(""1.3.3"", properties.get(""Blueprints"").get(""stack_version""));
    java.util.Collection<java.util.Map<java.lang.String, java.lang.Object>> host_groups = ((java.util.Collection<java.util.Map<java.lang.String, java.lang.Object>>) (properties.get("""").get(""host_groups"")));
    org.junit.Assert.assertEquals(2, host_groups.size());
    for (java.util.Map<java.lang.String, java.lang.Object> hostGroupProperties : host_groups) {
        java.lang.String host_group_name = ((java.lang.String) (hostGroupProperties.get(""name"")));
        if (host_group_name.equals(""host_group_1"")) {
            org.junit.Assert.assertEquals(""1"", hostGroupProperties.get(""cardinality""));
            java.util.Collection<java.util.Map<java.lang.String, java.lang.String>> components = ((java.util.Collection<java.util.Map<java.lang.String, java.lang.String>>) (hostGroupProperties.get(""components"")));
            org.junit.Assert.assertEquals(5, components.size());
            java.util.Set<java.lang.String> expectedValues = com.google.common.collect.ImmutableSet.of(""JOBTRACKER"", ""TASKTRACKER"", ""NAMENODE"", ""DATANODE"", ""AMBARI_SERVER"");
            java.util.Set<java.lang.String> actualValues = new java.util.HashSet<>();
            for (java.util.Map<java.lang.String, java.lang.String> componentProperties : components) {
                org.junit.Assert.assertEquals(1, componentProperties.size());
                actualValues.add(componentProperties.get(""name""));
            }
            org.junit.Assert.assertEquals(expectedValues, actualValues);
        } else if (host_group_name.equals(""host_group_2"")) {
            org.junit.Assert.assertEquals(""2"", hostGroupProperties.get(""cardinality""));
            java.util.Collection<java.util.Map<java.lang.String, java.lang.String>> components = ((java.util.Collection<java.util.Map<java.lang.String, java.lang.String>>) (hostGroupProperties.get(""components"")));
            org.junit.Assert.assertEquals(2, components.size());
            java.util.Set<java.lang.String> expectedValues = com.google.common.collect.ImmutableSet.of(""TASKTRACKER"", ""DATANODE"");
            java.util.Set<java.lang.String> actualValues = new java.util.HashSet<>();
            for (java.util.Map<java.lang.String, java.lang.String> componentProperties : components) {
                org.junit.Assert.assertEquals(1, componentProperties.size());
                actualValues.add(componentProperties.get(""name""));
            }
            org.junit.Assert.assertEquals(expectedValues, actualValues);
        }
    }
    java.util.List<java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.Map<java.lang.String, ?>>>> configurationsResult = ((java.util.List<java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.Map<java.lang.String, ?>>>>) (blueprintResource.getPropertyValue(""configurations"")));
    org.junit.Assert.assertEquals(""Incorrect number of config maps added"", 1, configurationsResult.size());
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, ?>> configMap = configurationsResult.iterator().next().get(""test-type-one"");
    org.junit.Assert.assertNotNull(""Expected config map was not included"", configMap);
    org.junit.Assert.assertEquals(""Incorrect number of maps added under expected type"", 2, configMap.size());
    org.junit.Assert.assertTrue(""Expected properties map was not found"", configMap.containsKey(""properties""));
    org.junit.Assert.assertTrue(""Expected properties_attributes map was not found"", configMap.containsKey(""properties_attributes""));
    java.util.Map<java.lang.String, ?> propertiesResult = configMap.get(""properties"");
    org.junit.Assert.assertEquals(""Incorrect number of config properties found"", 1, propertiesResult.size());
    java.util.Map<java.lang.String, ?> attributesResult = configMap.get(""properties_attributes"");
    org.junit.Assert.assertEquals(""Incorrect number of config attributes found"", 1, attributesResult.size());
    org.junit.Assert.assertEquals(""Incorrect property value included"", ""valueOne"", propertiesResult.get(""propertyOne""));
    org.junit.Assert.assertNotNull(""Expected attribute not found in exported Blueprint"", attributesResult.get(""final""));
    org.junit.Assert.assertTrue(""Attribute type map was not included"", attributesResult.get(""final"") instanceof java.util.Map);
    java.util.Map<java.lang.String, ?> finalMap = ((java.util.Map<java.lang.String, ?>) (attributesResult.get(""final"")));
    org.junit.Assert.assertEquals(""Attribute value is not correct"", ""true"", finalMap.get(""propertyOne""));
}","testFinalizeResultWithAttributes()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/ClusterBlueprintRendererTest.java","1a8b193fbc8da67597044cb26ee1a8cabcc86cd8
5a8af96159fe1fe43d2569d847a88de44dcf59c6
4bce57823da7d972df9e422e3f920ebbc60362f3
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
1aad067cff1601d3c0ddd1f019df0fa9eb442199
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bc806659971c05b873aa769007afa2916b2041dc
e4db57093f4d17497366cdfbf02127f36399bf42
6d06814f729d45db11d63465d0e9d640c49d2b23
95ca56f9cb7892a5a9e124e59b6171ad63cdc09e
98405ef9bee07b974baeaa13cb143aeea6aeadfd
66e42cbab8a714eac49b4ae84eb238d0c08accb5
c9f0dd0b8206956a7a71fa0adca64160710d2910
bc6f2c78552e5a21eaff72919d9b55d1dd79a290
7c5fb7b534eaec38c67dfed510ba97341bd2f0ce
2fc7adecea03ec70141f41e98f1aa2d089c3b364
64a73207ec4a4131af420a84e374b94f4ee7c220
8d464c2b286c522a47e2eb12f55d67e59ee61d37
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testClusterRendererDefaults","TRUE","2","assertFalse","{
    org.junit.Assert.assertFalse(""ClusterBlueprintRenderer should not require property provider input"", fullRenderer.requiresPropertyProviderInput());
}","testClusterRendererDefaults()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/ClusterBlueprintRendererTest.java","1a8b193fbc8da67597044cb26ee1a8cabcc86cd8
5a8af96159fe1fe43d2569d847a88de44dcf59c6
4bce57823da7d972df9e422e3f920ebbc60362f3
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
1aad067cff1601d3c0ddd1f019df0fa9eb442199
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bc806659971c05b873aa769007afa2916b2041dc
e4db57093f4d17497366cdfbf02127f36399bf42
6d06814f729d45db11d63465d0e9d640c49d2b23
95ca56f9cb7892a5a9e124e59b6171ad63cdc09e
98405ef9bee07b974baeaa13cb143aeea6aeadfd
66e42cbab8a714eac49b4ae84eb238d0c08accb5
c9f0dd0b8206956a7a71fa0adca64160710d2910
bc6f2c78552e5a21eaff72919d9b55d1dd79a290
7c5fb7b534eaec38c67dfed510ba97341bd2f0ce
2fc7adecea03ec70141f41e98f1aa2d089c3b364
64a73207ec4a4131af420a84e374b94f4ee7c220
8d464c2b286c522a47e2eb12f55d67e59ee61d37
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__instance_noProperties","TRUE","6","assertTrue
assertEquals","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema schema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(schema).anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Alert)).andReturn(schema).anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Artifact)).andReturn(schema).anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(""ServiceComponentInfo/component_name"").anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceComponentInfo/service_name"").anyTimes();
    EasyMock.replay(schemaFactory, schema);
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), new java.util.HashSet<>());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    org.apache.ambari.server.api.query.render.DefaultRenderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, false);
    org.junit.Assert.assertTrue(propertyTree.getObject().isEmpty());
    org.junit.Assert.assertEquals(3, propertyTree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> componentNode = propertyTree.getChild(""Component"");
    org.junit.Assert.assertEquals(2, componentNode.getObject().size());
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/component_name""));
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/service_name""));
    EasyMock.verify(schemaFactory, schema);
}","testFinalizeProperties__instance_noProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/DefaultRendererTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
98405ef9bee07b974baeaa13cb143aeea6aeadfd
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__instance_properties","TRUE","6","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema schema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(schema).anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""ServiceInfo/cluster_name"").anyTimes();
    EasyMock.replay(schemaFactory, schema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    serviceProperties.add(""foo/bar"");
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    org.apache.ambari.server.api.query.render.DefaultRenderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, false);
    org.junit.Assert.assertEquals(3, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/cluster_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""foo/bar""));
    org.junit.Assert.assertEquals(0, propertyTree.getChildren().size());
    EasyMock.verify(schemaFactory, schema);
}","testFinalizeProperties__instance_properties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/DefaultRendererTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
98405ef9bee07b974baeaa13cb143aeea6aeadfd
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__collection_noProperties","TRUE","5","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema schema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(schema).anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""ServiceInfo/cluster_name"").anyTimes();
    EasyMock.replay(schemaFactory, schema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    org.apache.ambari.server.api.query.render.DefaultRenderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, true);
    org.junit.Assert.assertEquals(2, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/cluster_name""));
    org.junit.Assert.assertEquals(0, propertyTree.getChildren().size());
    EasyMock.verify(schemaFactory, schema);
}","testFinalizeProperties__collection_noProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/DefaultRendererTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
98405ef9bee07b974baeaa13cb143aeea6aeadfd
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__collection_properties","TRUE","6","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema schema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(schema).anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""ServiceInfo/cluster_name"").anyTimes();
    EasyMock.replay(schemaFactory, schema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    serviceProperties.add(""foo/bar"");
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    org.apache.ambari.server.api.query.render.DefaultRenderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, true);
    org.junit.Assert.assertEquals(3, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/cluster_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""foo/bar""));
    org.junit.Assert.assertEquals(0, propertyTree.getChildren().size());
    EasyMock.verify(schemaFactory, schema);
}","testFinalizeProperties__collection_properties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/DefaultRendererTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
98405ef9bee07b974baeaa13cb143aeea6aeadfd
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__instance_subResource_noProperties","TRUE","9","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema serviceSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema componentSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(serviceSchema).anyTimes();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""ServiceInfo/cluster_name"").anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(componentSchema).anyTimes();
    EasyMock.expect(componentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceComponentInfo/service_name"").anyTimes();
    EasyMock.expect(componentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(""ServiceComponentInfo/component_name"").anyTimes();
    EasyMock.replay(schemaFactory, serviceSchema, componentSchema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    queryTree.addChild(new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ComponentResourceDefinition(), new java.util.HashSet<>()), ""Component"");
    org.apache.ambari.server.api.query.render.DefaultRenderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, false);
    org.junit.Assert.assertEquals(1, propertyTree.getChildren().size());
    org.junit.Assert.assertEquals(2, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/cluster_name""));
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> componentNode = propertyTree.getChild(""Component"");
    org.junit.Assert.assertEquals(0, componentNode.getChildren().size());
    org.junit.Assert.assertEquals(2, componentNode.getObject().size());
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/service_name""));
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/component_name""));
    EasyMock.verify(schemaFactory, serviceSchema, componentSchema);
}","testFinalizeProperties__instance_subResource_noProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/DefaultRendererTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
98405ef9bee07b974baeaa13cb143aeea6aeadfd
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__instance_subResource_properties","TRUE","11","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema serviceSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema componentSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(serviceSchema).anyTimes();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""ServiceInfo/cluster_name"").anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(componentSchema).anyTimes();
    EasyMock.expect(componentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceComponentInfo/service_name"").anyTimes();
    EasyMock.expect(componentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(""ServiceComponentInfo/component_name"").anyTimes();
    EasyMock.replay(schemaFactory, serviceSchema, componentSchema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    serviceProperties.add(""foo/bar"");
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    java.util.HashSet<java.lang.String> componentProperties = new java.util.HashSet<>();
    componentProperties.add(""goo/car"");
    queryTree.addChild(new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ComponentResourceDefinition(), componentProperties), ""Component"");
    org.apache.ambari.server.api.query.render.DefaultRenderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, false);
    org.junit.Assert.assertEquals(1, propertyTree.getChildren().size());
    org.junit.Assert.assertEquals(3, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/cluster_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""foo/bar""));
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> componentNode = propertyTree.getChild(""Component"");
    org.junit.Assert.assertEquals(0, componentNode.getChildren().size());
    org.junit.Assert.assertEquals(3, componentNode.getObject().size());
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/service_name""));
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/component_name""));
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""goo/car""));
    EasyMock.verify(schemaFactory, serviceSchema, componentSchema);
}","testFinalizeProperties__instance_subResource_properties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/DefaultRendererTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
98405ef9bee07b974baeaa13cb143aeea6aeadfd
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__collection_subResource_noProperties","TRUE","9","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema serviceSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema componentSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(serviceSchema).anyTimes();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""ServiceInfo/cluster_name"").anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(componentSchema).anyTimes();
    EasyMock.expect(componentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceComponentInfo/service_name"").anyTimes();
    EasyMock.expect(componentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(""ServiceComponentInfo/component_name"").anyTimes();
    EasyMock.replay(schemaFactory, serviceSchema, componentSchema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    queryTree.addChild(new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ComponentResourceDefinition(), new java.util.HashSet<>()), ""Component"");
    org.apache.ambari.server.api.query.render.DefaultRenderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, true);
    org.junit.Assert.assertEquals(1, propertyTree.getChildren().size());
    org.junit.Assert.assertEquals(2, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/cluster_name""));
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> componentNode = propertyTree.getChild(""Component"");
    org.junit.Assert.assertEquals(0, componentNode.getChildren().size());
    org.junit.Assert.assertEquals(2, componentNode.getObject().size());
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/service_name""));
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/component_name""));
    EasyMock.verify(schemaFactory, serviceSchema, componentSchema);
}","testFinalizeProperties__collection_subResource_noProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/DefaultRendererTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
98405ef9bee07b974baeaa13cb143aeea6aeadfd
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__collection_subResource_propertiesTopLevelOnly","TRUE","10","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema serviceSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema componentSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(serviceSchema).anyTimes();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""ServiceInfo/cluster_name"").anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(componentSchema).anyTimes();
    EasyMock.expect(componentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceComponentInfo/service_name"").anyTimes();
    EasyMock.expect(componentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(""ServiceComponentInfo/component_name"").anyTimes();
    EasyMock.replay(schemaFactory, serviceSchema, componentSchema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    serviceProperties.add(""foo/bar"");
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    queryTree.addChild(new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ComponentResourceDefinition(), new java.util.HashSet<>()), ""Component"");
    org.apache.ambari.server.api.query.render.DefaultRenderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, true);
    org.junit.Assert.assertEquals(1, propertyTree.getChildren().size());
    org.junit.Assert.assertEquals(3, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/cluster_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""foo/bar""));
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> componentNode = propertyTree.getChild(""Component"");
    org.junit.Assert.assertEquals(0, componentNode.getChildren().size());
    org.junit.Assert.assertEquals(2, componentNode.getObject().size());
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/service_name""));
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/component_name""));
    EasyMock.verify(schemaFactory, serviceSchema, componentSchema);
}","testFinalizeProperties__collection_subResource_propertiesTopLevelOnly()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/DefaultRendererTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
98405ef9bee07b974baeaa13cb143aeea6aeadfd
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeResult","TRUE","2","assertSame","{
    org.apache.ambari.server.api.services.Result result = EasyMock.createNiceMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.query.render.DefaultRenderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    org.junit.Assert.assertSame(result, renderer.finalizeResult(result));
}","testFinalizeResult()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/DefaultRendererTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
98405ef9bee07b974baeaa13cb143aeea6aeadfd
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testRequiresInputDefault","TRUE","2","assertTrue","{
    org.apache.ambari.server.api.query.render.Renderer defaultRenderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    org.junit.Assert.assertTrue(""Default renderer for cluster resources must require property provider input"", defaultRenderer.requiresPropertyProviderInput());
}","testRequiresInputDefault()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/DefaultRendererTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
98405ef9bee07b974baeaa13cb143aeea6aeadfd
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__NullPadding_property","TRUE","7","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema schema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(schema).anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""ServiceInfo/cluster_name"").anyTimes();
    EasyMock.replay(schemaFactory, schema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    serviceProperties.add(""foo/bar"");
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    org.apache.ambari.server.api.query.render.MetricsPaddingRenderer renderer = new org.apache.ambari.server.api.query.render.MetricsPaddingRenderer(""null_padding"");
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, false);
    org.junit.Assert.assertEquals(4, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/cluster_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""foo/bar""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""params/padding/NULLS""));
    org.junit.Assert.assertEquals(0, propertyTree.getChildren().size());
    EasyMock.verify(schemaFactory, schema);
}","testFinalizeProperties__NullPadding_property()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/MetricsPaddingRendererTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
34c1e9b2c7726a92d18de68d5b292cb87e564740"
"testFinalizeProperties__instance_noProperties","TRUE","5","assertTrue
assertEquals","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema schema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(schema).anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Alert)).andReturn(schema).anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Artifact)).andReturn(schema).anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(""ServiceComponentInfo/component_name"").anyTimes();
    EasyMock.replay(schemaFactory, schema);
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), new java.util.HashSet<>());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    org.apache.ambari.server.api.query.render.MinimalRenderer renderer = new org.apache.ambari.server.api.query.render.MinimalRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, false);
    org.junit.Assert.assertTrue(propertyTree.getObject().isEmpty());
    org.junit.Assert.assertEquals(3, propertyTree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> componentNode = propertyTree.getChild(""Component"");
    org.junit.Assert.assertEquals(1, componentNode.getObject().size());
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/component_name""));
    EasyMock.verify(schemaFactory, schema);
}","testFinalizeProperties__instance_noProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/MinimalRendererTest.java","e77a31ab0aa7edbabba29ba8e4d40becf122deef
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__instance_properties","TRUE","5","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema schema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(schema).anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.replay(schemaFactory, schema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    serviceProperties.add(""foo/bar"");
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    org.apache.ambari.server.api.query.render.MinimalRenderer renderer = new org.apache.ambari.server.api.query.render.MinimalRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, false);
    org.junit.Assert.assertEquals(2, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""foo/bar""));
    org.junit.Assert.assertEquals(0, propertyTree.getChildren().size());
    EasyMock.verify(schemaFactory, schema);
}","testFinalizeProperties__instance_properties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/MinimalRendererTest.java","e77a31ab0aa7edbabba29ba8e4d40becf122deef
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__collection_noProperties","TRUE","4","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema schema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(schema).anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.replay(schemaFactory, schema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    org.apache.ambari.server.api.query.render.MinimalRenderer renderer = new org.apache.ambari.server.api.query.render.MinimalRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, true);
    org.junit.Assert.assertEquals(1, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.junit.Assert.assertEquals(0, propertyTree.getChildren().size());
    EasyMock.verify(schemaFactory, schema);
}","testFinalizeProperties__collection_noProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/MinimalRendererTest.java","e77a31ab0aa7edbabba29ba8e4d40becf122deef
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__collection_properties","TRUE","5","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema schema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(schema).anyTimes();
    EasyMock.expect(schema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.replay(schemaFactory, schema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    serviceProperties.add(""foo/bar"");
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    org.apache.ambari.server.api.query.render.MinimalRenderer renderer = new org.apache.ambari.server.api.query.render.MinimalRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, true);
    org.junit.Assert.assertEquals(2, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""foo/bar""));
    org.junit.Assert.assertEquals(0, propertyTree.getChildren().size());
    EasyMock.verify(schemaFactory, schema);
}","testFinalizeProperties__collection_properties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/MinimalRendererTest.java","e77a31ab0aa7edbabba29ba8e4d40becf122deef
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__instance_subResource_noProperties","TRUE","7","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema serviceSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema componentSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(serviceSchema).anyTimes();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(componentSchema).anyTimes();
    EasyMock.expect(componentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(""ServiceComponentInfo/component_name"").anyTimes();
    EasyMock.replay(schemaFactory, serviceSchema, componentSchema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    queryTree.addChild(new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ComponentResourceDefinition(), new java.util.HashSet<>()), ""Component"");
    org.apache.ambari.server.api.query.render.MinimalRenderer renderer = new org.apache.ambari.server.api.query.render.MinimalRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, false);
    org.junit.Assert.assertEquals(1, propertyTree.getChildren().size());
    org.junit.Assert.assertEquals(1, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> componentNode = propertyTree.getChild(""Component"");
    org.junit.Assert.assertEquals(0, componentNode.getChildren().size());
    org.junit.Assert.assertEquals(1, componentNode.getObject().size());
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/component_name""));
    EasyMock.verify(schemaFactory, serviceSchema, componentSchema);
}","testFinalizeProperties__instance_subResource_noProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/MinimalRendererTest.java","e77a31ab0aa7edbabba29ba8e4d40becf122deef
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__instance_subResource_properties","TRUE","9","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema serviceSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema componentSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(serviceSchema).anyTimes();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(componentSchema).anyTimes();
    EasyMock.expect(componentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(""ServiceComponentInfo/component_name"").anyTimes();
    EasyMock.replay(schemaFactory, serviceSchema, componentSchema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    serviceProperties.add(""foo/bar"");
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    java.util.HashSet<java.lang.String> componentProperties = new java.util.HashSet<>();
    componentProperties.add(""goo/car"");
    queryTree.addChild(new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ComponentResourceDefinition(), componentProperties), ""Component"");
    org.apache.ambari.server.api.query.render.MinimalRenderer renderer = new org.apache.ambari.server.api.query.render.MinimalRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, false);
    org.junit.Assert.assertEquals(1, propertyTree.getChildren().size());
    org.junit.Assert.assertEquals(2, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""foo/bar""));
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> componentNode = propertyTree.getChild(""Component"");
    org.junit.Assert.assertEquals(0, componentNode.getChildren().size());
    org.junit.Assert.assertEquals(2, componentNode.getObject().size());
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/component_name""));
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""goo/car""));
    EasyMock.verify(schemaFactory, serviceSchema, componentSchema);
}","testFinalizeProperties__instance_subResource_properties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/MinimalRendererTest.java","e77a31ab0aa7edbabba29ba8e4d40becf122deef
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__collection_subResource_noProperties","TRUE","7","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema serviceSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema componentSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(serviceSchema).anyTimes();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(componentSchema).anyTimes();
    EasyMock.expect(componentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(""ServiceComponentInfo/component_name"").anyTimes();
    EasyMock.replay(schemaFactory, serviceSchema, componentSchema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    queryTree.addChild(new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ComponentResourceDefinition(), new java.util.HashSet<>()), ""Component"");
    org.apache.ambari.server.api.query.render.MinimalRenderer renderer = new org.apache.ambari.server.api.query.render.MinimalRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, true);
    org.junit.Assert.assertEquals(1, propertyTree.getChildren().size());
    org.junit.Assert.assertEquals(1, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> componentNode = propertyTree.getChild(""Component"");
    org.junit.Assert.assertEquals(0, componentNode.getChildren().size());
    org.junit.Assert.assertEquals(1, componentNode.getObject().size());
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/component_name""));
    EasyMock.verify(schemaFactory, serviceSchema, componentSchema);
}","testFinalizeProperties__collection_subResource_noProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/MinimalRendererTest.java","e77a31ab0aa7edbabba29ba8e4d40becf122deef
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeProperties__collection_subResource_propertiesTopLevelOnly","TRUE","8","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema serviceSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema componentSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(serviceSchema).anyTimes();
    EasyMock.expect(serviceSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Service)).andReturn(""ServiceInfo/service_name"").anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(componentSchema).anyTimes();
    EasyMock.expect(componentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Component)).andReturn(""ServiceComponentInfo/component_name"").anyTimes();
    EasyMock.replay(schemaFactory, serviceSchema, componentSchema);
    java.util.HashSet<java.lang.String> serviceProperties = new java.util.HashSet<>();
    serviceProperties.add(""foo/bar"");
    org.apache.ambari.server.api.query.QueryInfo rootQuery = new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ServiceResourceDefinition(), serviceProperties);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.api.query.QueryInfo> queryTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, rootQuery, ""Service"");
    queryTree.addChild(new org.apache.ambari.server.api.query.QueryInfo(new org.apache.ambari.server.api.resources.ComponentResourceDefinition(), new java.util.HashSet<>()), ""Component"");
    org.apache.ambari.server.api.query.render.MinimalRenderer renderer = new org.apache.ambari.server.api.query.render.MinimalRenderer();
    renderer.init(schemaFactory);
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> propertyTree = renderer.finalizeProperties(queryTree, true);
    org.junit.Assert.assertEquals(1, propertyTree.getChildren().size());
    org.junit.Assert.assertEquals(2, propertyTree.getObject().size());
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""ServiceInfo/service_name""));
    org.junit.Assert.assertTrue(propertyTree.getObject().contains(""foo/bar""));
    org.apache.ambari.server.api.util.TreeNode<java.util.Set<java.lang.String>> componentNode = propertyTree.getChild(""Component"");
    org.junit.Assert.assertEquals(0, componentNode.getChildren().size());
    org.junit.Assert.assertEquals(1, componentNode.getObject().size());
    org.junit.Assert.assertTrue(componentNode.getObject().contains(""ServiceComponentInfo/component_name""));
    EasyMock.verify(schemaFactory, serviceSchema, componentSchema);
}","testFinalizeProperties__collection_subResource_propertiesTopLevelOnly()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/MinimalRendererTest.java","e77a31ab0aa7edbabba29ba8e4d40becf122deef
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeResult","TRUE","16","assertNull
assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema clusterSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema hostSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema hostComponentSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(clusterSchema).anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Host)).andReturn(hostSchema).anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent)).andReturn(hostComponentSchema).anyTimes();
    EasyMock.expect(clusterSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""Clusters/cluster_name"").anyTimes();
    EasyMock.expect(hostSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""Hosts/cluster_name"").anyTimes();
    EasyMock.expect(hostSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Host)).andReturn(""Hosts/host_name"").anyTimes();
    EasyMock.expect(hostComponentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""HostRoles/cluster_name"").anyTimes();
    EasyMock.expect(hostComponentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Host)).andReturn(""HostRoles/host_name"").anyTimes();
    EasyMock.expect(hostComponentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent)).andReturn(""HostRoles/component_name"").anyTimes();
    EasyMock.replay(schemaFactory, clusterSchema, hostSchema, hostComponentSchema);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(true);
    createResultTree(result.getResultTree());
    org.apache.ambari.server.api.query.render.MinimalRenderer renderer = new org.apache.ambari.server.api.query.render.MinimalRenderer();
    renderer.init(schemaFactory);
    renderer.finalizeProperties(createPropertyTree(), false);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = renderer.finalizeResult(result).getResultTree();
    org.junit.Assert.assertNull(resultTree.getStringProperty(""isCollection""));
    org.junit.Assert.assertEquals(1, resultTree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> clusterNode = resultTree.getChildren().iterator().next();
    org.apache.ambari.server.controller.spi.Resource clusterResource = clusterNode.getObject();
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> clusterProperties = clusterResource.getPropertiesMap();
    org.junit.Assert.assertEquals(2, clusterProperties.size());
    org.junit.Assert.assertEquals(3, clusterProperties.get(""Clusters"").size());
    org.junit.Assert.assertEquals(""testCluster"", clusterProperties.get(""Clusters"").get(""cluster_name""));
    org.junit.Assert.assertEquals(""HDP-1.3.3"", clusterProperties.get(""Clusters"").get(""version""));
    org.junit.Assert.assertEquals(""value1"", clusterProperties.get(""Clusters"").get(""prop1""));
    org.junit.Assert.assertEquals(1, clusterProperties.get("""").size());
    org.junit.Assert.assertEquals(""bar"", clusterProperties.get("""").get(""foo""));
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> hosts = clusterNode.getChildren().iterator().next();
    for (org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> hostNode : hosts.getChildren()) {
        org.apache.ambari.server.controller.spi.Resource hostResource = hostNode.getObject();
        java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> hostProperties = hostResource.getPropertiesMap();
        org.junit.Assert.assertEquals(1, hostProperties.size());
        org.junit.Assert.assertEquals(1, hostProperties.get(""Hosts"").size());
        org.junit.Assert.assertTrue(hostProperties.get(""Hosts"").containsKey(""host_name""));
        for (org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> componentNode : hostNode.getChildren().iterator().next().getChildren()) {
            org.apache.ambari.server.controller.spi.Resource componentResource = componentNode.getObject();
            java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> componentProperties = componentResource.getPropertiesMap();
            org.junit.Assert.assertEquals(1, componentProperties.size());
            org.junit.Assert.assertEquals(1, componentProperties.get(""HostRoles"").size());
            org.junit.Assert.assertTrue(componentProperties.get(""HostRoles"").containsKey(""component_name""));
        }
    }
}","testFinalizeResult()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/MinimalRendererTest.java","e77a31ab0aa7edbabba29ba8e4d40becf122deef
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testFinalizeResult_propsSetOnSubResource","TRUE","18","assertNull
assertEquals
assertTrue","{
    org.apache.ambari.server.controller.spi.SchemaFactory schemaFactory = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.SchemaFactory.class);
    org.apache.ambari.server.controller.spi.Schema clusterSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema hostSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    org.apache.ambari.server.controller.spi.Schema hostComponentSchema = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Schema.class);
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(clusterSchema).anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.Host)).andReturn(hostSchema).anyTimes();
    EasyMock.expect(schemaFactory.getSchema(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent)).andReturn(hostComponentSchema).anyTimes();
    EasyMock.expect(clusterSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""Clusters/cluster_name"").anyTimes();
    EasyMock.expect(hostSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""Hosts/cluster_name"").anyTimes();
    EasyMock.expect(hostSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Host)).andReturn(""Hosts/host_name"").anyTimes();
    EasyMock.expect(hostComponentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Cluster)).andReturn(""HostRoles/cluster_name"").anyTimes();
    EasyMock.expect(hostComponentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.Host)).andReturn(""HostRoles/host_name"").anyTimes();
    EasyMock.expect(hostComponentSchema.getKeyPropertyId(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent)).andReturn(""HostRoles/component_name"").anyTimes();
    EasyMock.replay(schemaFactory, clusterSchema, hostSchema, hostComponentSchema);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(true);
    createResultTree(result.getResultTree());
    org.apache.ambari.server.api.query.render.MinimalRenderer renderer = new org.apache.ambari.server.api.query.render.MinimalRenderer();
    renderer.init(schemaFactory);
    renderer.finalizeProperties(createPropertyTreeWithSubProps(), false);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = renderer.finalizeResult(result).getResultTree();
    org.junit.Assert.assertNull(resultTree.getStringProperty(""isCollection""));
    org.junit.Assert.assertEquals(1, resultTree.getChildren().size());
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> clusterNode = resultTree.getChildren().iterator().next();
    org.apache.ambari.server.controller.spi.Resource clusterResource = clusterNode.getObject();
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> clusterProperties = clusterResource.getPropertiesMap();
    org.junit.Assert.assertEquals(2, clusterProperties.size());
    org.junit.Assert.assertEquals(3, clusterProperties.get(""Clusters"").size());
    org.junit.Assert.assertEquals(""testCluster"", clusterProperties.get(""Clusters"").get(""cluster_name""));
    org.junit.Assert.assertEquals(""HDP-1.3.3"", clusterProperties.get(""Clusters"").get(""version""));
    org.junit.Assert.assertEquals(""value1"", clusterProperties.get(""Clusters"").get(""prop1""));
    org.junit.Assert.assertEquals(1, clusterProperties.get("""").size());
    org.junit.Assert.assertEquals(""bar"", clusterProperties.get("""").get(""foo""));
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> hosts = clusterNode.getChildren().iterator().next();
    for (org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> hostNode : hosts.getChildren()) {
        org.apache.ambari.server.controller.spi.Resource hostResource = hostNode.getObject();
        java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> hostProperties = hostResource.getPropertiesMap();
        org.junit.Assert.assertEquals(2, hostProperties.size());
        org.junit.Assert.assertEquals(1, hostProperties.get(""Hosts"").size());
        org.junit.Assert.assertTrue(hostProperties.get(""Hosts"").containsKey(""host_name""));
        org.junit.Assert.assertEquals(1, hostProperties.get("""").size());
        org.junit.Assert.assertEquals(""bar"", hostProperties.get("""").get(""foo""));
        for (org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> componentNode : hostNode.getChildren().iterator().next().getChildren()) {
            org.apache.ambari.server.controller.spi.Resource componentResource = componentNode.getObject();
            java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> componentProperties = componentResource.getPropertiesMap();
            org.junit.Assert.assertEquals(1, componentProperties.size());
            org.junit.Assert.assertEquals(1, componentProperties.get(""HostRoles"").size());
            org.junit.Assert.assertTrue(componentProperties.get(""HostRoles"").containsKey(""component_name""));
        }
    }
}","testFinalizeResult_propsSetOnSubResource()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/query/render/MinimalRendererTest.java","e77a31ab0aa7edbabba29ba8e4d40becf122deef
ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
84c16c5c5981559454659d069463a5bbd26e7de6
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testGetPostProcessors","TRUE","4","assertEquals","{
    org.apache.ambari.server.api.resources.BaseResourceDefinition resourceDefinition = getResourceDefinition();
    java.util.List<org.apache.ambari.server.api.resources.ResourceDefinition.PostProcessor> postProcessors = resourceDefinition.getPostProcessors();
    org.junit.Assert.assertEquals(1, postProcessors.size());
    org.apache.ambari.server.api.resources.ResourceDefinition.PostProcessor processor = postProcessors.iterator().next();
    org.apache.ambari.server.controller.spi.Resource service = new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.Service);
    service.setProperty(""ServiceInfo/service_name"", ""Service1"");
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> parentNode = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, ""services"");
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> serviceNode = new org.apache.ambari.server.api.util.TreeNodeImpl<>(parentNode, service, ""service1"");
    parentNode.setProperty(""isCollection"", ""true"");
    org.apache.ambari.server.controller.ResourceProviderFactory factory = EasyMock.createMock(org.apache.ambari.server.controller.ResourceProviderFactory.class);
    org.apache.ambari.server.controller.MaintenanceStateHelper maintenanceStateHelper = EasyMock.createNiceMock(org.apache.ambari.server.controller.MaintenanceStateHelper.class);
    org.apache.ambari.server.controller.AmbariManagementController managementController = EasyMock.createMock(org.apache.ambari.server.controller.AmbariManagementController.class);
    org.apache.ambari.server.orm.dao.RepositoryVersionDAO repositoryVersionDAO = EasyMock.createNiceMock(org.apache.ambari.server.orm.dao.RepositoryVersionDAO.class);
    EasyMock.expect(maintenanceStateHelper.isOperationAllowed(EasyMock.anyObject(org.apache.ambari.server.controller.spi.Resource.Type.class), EasyMock.anyObject(org.apache.ambari.server.state.Service.class))).andReturn(true).anyTimes();
    org.apache.ambari.server.controller.spi.ResourceProvider serviceResourceProvider = new org.apache.ambari.server.controller.internal.ServiceResourceProvider(managementController, maintenanceStateHelper, repositoryVersionDAO);
    EasyMock.expect(factory.getServiceResourceProvider(EasyMock.anyObject(org.apache.ambari.server.controller.AmbariManagementController.class))).andReturn(serviceResourceProvider);
    org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.init(factory);
    EasyMock.replay(factory, managementController, maintenanceStateHelper);
    processor.process(null, serviceNode, ""http://c6401.ambari.apache.org:8080/api/v1/clusters/c1/services"");
    java.lang.String href = serviceNode.getStringProperty(""href"");
    org.junit.Assert.assertEquals(""http://c6401.ambari.apache.org:8080/api/v1/clusters/c1/services/Service1"", href);
    org.apache.ambari.server.controller.spi.Resource configGroup = new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.ConfigGroup);
    configGroup.setProperty(""ConfigGroup/id"", ""2"");
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resourcesNode = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, org.apache.ambari.server.api.handlers.BaseManagementHandler.RESOURCES_NODE_NAME);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> configGroupNode = new org.apache.ambari.server.api.util.TreeNodeImpl<>(resourcesNode, configGroup, ""configGroup1"");
    resourcesNode.setProperty(""isCollection"", ""true"");
    processor.process(null, configGroupNode, ""http://c6401.ambari.apache.org:8080/api/v1/clusters/c1/config_groups"");
    href = configGroupNode.getStringProperty(""href"");
    org.junit.Assert.assertEquals(""http://c6401.ambari.apache.org:8080/api/v1/clusters/c1/config_groups/2"", href);
}","testGetPostProcessors()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/BaseResourceDefinitionTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
f65692a32d95e200624fa9d7dfb9ee7a1b00cb29
dcbd826c96b91c718caa519f44663b9a73f17da6
ec51e16630debc6595d92a29690ce62fd719e2ca
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
66e42cbab8a714eac49b4ae84eb238d0c08accb5
5a60fa18a58ec1c38cdde625adb2b7e61eaf936b
0898c7373c39247c413b806bb2f5ecc5ce6d1f66
1fc24756668b2dbb467b5652b1291659958c763a
30a41aca30242dc6845b3315b1d26469164d2e68
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
f4e0f6ca4050a36e3007928c0049672dc5263ac9
2ef018b47885554873e03ab02953fa39cf43273d
ae1517672bd7b69005e0e6728dafbd77a0503854"
"testGetRenderer","TRUE","5","assertTrue
assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resource = getResourceDefinition();
    org.junit.Assert.assertTrue(resource.getRenderer(null) instanceof org.apache.ambari.server.api.query.render.DefaultRenderer);
    org.junit.Assert.assertTrue(resource.getRenderer(""default"") instanceof org.apache.ambari.server.api.query.render.DefaultRenderer);
    org.junit.Assert.assertTrue(resource.getRenderer(""minimal"") instanceof org.apache.ambari.server.api.query.render.MinimalRenderer);
    try {
        resource.getRenderer(""foo"");
        org.junit.Assert.fail(""Should have thrown an exception due to invalid renderer type"");
    } catch (java.lang.IllegalArgumentException e) {
        org.junit.Assert.assertEquals(""Invalid renderer name for resource of type Service"", e.getMessage());
    }
}","testGetRenderer()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/BaseResourceDefinitionTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
f65692a32d95e200624fa9d7dfb9ee7a1b00cb29
dcbd826c96b91c718caa519f44663b9a73f17da6
ec51e16630debc6595d92a29690ce62fd719e2ca
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
66e42cbab8a714eac49b4ae84eb238d0c08accb5
5a60fa18a58ec1c38cdde625adb2b7e61eaf936b
0898c7373c39247c413b806bb2f5ecc5ce6d1f66
1fc24756668b2dbb467b5652b1291659958c763a
30a41aca30242dc6845b3315b1d26469164d2e68
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
f4e0f6ca4050a36e3007928c0049672dc5263ac9
2ef018b47885554873e03ab02953fa39cf43273d
ae1517672bd7b69005e0e6728dafbd77a0503854"
"testReadDirectives","TRUE","6","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resource = getResourceDefinition();
    org.junit.Assert.assertEquals(java.util.Collections.emptySet(), resource.getReadDirectives());
    java.util.Map<org.apache.ambari.server.api.resources.BaseResourceDefinition.DirectiveType, java.util.List<java.lang.String>> directives = new java.util.HashMap<>();
    directives.put(org.apache.ambari.server.api.resources.BaseResourceDefinition.DirectiveType.DELETE, java.util.Arrays.asList(""do_something_delete"", ""do_something_else_delete""));
    directives.put(org.apache.ambari.server.api.resources.BaseResourceDefinition.DirectiveType.READ, java.util.Arrays.asList(""do_something_get"", ""do_something_else_get""));
    directives.put(org.apache.ambari.server.api.resources.BaseResourceDefinition.DirectiveType.CREATE, java.util.Arrays.asList(""do_something_post"", ""do_something_else_post""));
    directives.put(org.apache.ambari.server.api.resources.BaseResourceDefinition.DirectiveType.UPDATE, java.util.Arrays.asList(""do_something_put"", ""do_something_else_put""));
    resource = getResourceDefinition(directives);
    org.junit.Assert.assertEquals(new java.util.HashSet<java.lang.String>() {
        {
            add(""do_something_delete"");
            add(""do_something_else_delete"");
        }
    }, resource.getDeleteDirectives());
    org.junit.Assert.assertEquals(new java.util.HashSet<java.lang.String>() {
        {
            add(""do_something_get"");
            add(""do_something_else_get"");
        }
    }, resource.getReadDirectives());
    org.junit.Assert.assertEquals(new java.util.HashSet<java.lang.String>() {
        {
            add(""do_something_post"");
            add(""do_something_else_post"");
        }
    }, resource.getCreateDirectives());
    org.junit.Assert.assertEquals(new java.util.HashSet<java.lang.String>() {
        {
            add(""do_something_put"");
            add(""do_something_else_put"");
        }
    }, resource.getUpdateDirectives());
}","testReadDirectives()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/BaseResourceDefinitionTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
f65692a32d95e200624fa9d7dfb9ee7a1b00cb29
dcbd826c96b91c718caa519f44663b9a73f17da6
ec51e16630debc6595d92a29690ce62fd719e2ca
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
66e42cbab8a714eac49b4ae84eb238d0c08accb5
5a60fa18a58ec1c38cdde625adb2b7e61eaf936b
0898c7373c39247c413b806bb2f5ecc5ce6d1f66
1fc24756668b2dbb467b5652b1291659958c763a
30a41aca30242dc6845b3315b1d26469164d2e68
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
f4e0f6ca4050a36e3007928c0049672dc5263ac9
2ef018b47885554873e03ab02953fa39cf43273d
ae1517672bd7b69005e0e6728dafbd77a0503854"
"testGetType","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.BlueprintResourceDefinition definition = new org.apache.ambari.server.api.resources.BlueprintResourceDefinition();
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Blueprint, definition.getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/BlueprintResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
945f355065fab011b747568d8b78deaf02301574
5f464316237c2a1661602eaa230f197221aae271
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.BlueprintResourceDefinition definition = new org.apache.ambari.server.api.resources.BlueprintResourceDefinition();
    org.junit.Assert.assertEquals(""blueprints"", definition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/BlueprintResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
945f355065fab011b747568d8b78deaf02301574
5f464316237c2a1661602eaa230f197221aae271
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.BlueprintResourceDefinition definition = new org.apache.ambari.server.api.resources.BlueprintResourceDefinition();
    org.junit.Assert.assertEquals(""blueprint"", definition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/BlueprintResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
945f355065fab011b747568d8b78deaf02301574
5f464316237c2a1661602eaa230f197221aae271
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","2","assertTrue","{
    org.apache.ambari.server.api.resources.BlueprintResourceDefinition definition = new org.apache.ambari.server.api.resources.BlueprintResourceDefinition();
    org.junit.Assert.assertTrue(definition.getSubResourceDefinitions().isEmpty());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/BlueprintResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
945f355065fab011b747568d8b78deaf02301574
5f464316237c2a1661602eaa230f197221aae271
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetCreateDirectives","TRUE","3","assertEquals
assertTrue","{
    org.apache.ambari.server.api.resources.BlueprintResourceDefinition definition = new org.apache.ambari.server.api.resources.BlueprintResourceDefinition();
    java.util.Collection<java.lang.String> directives = definition.getCreateDirectives();
    org.junit.Assert.assertEquals(1, directives.size());
    org.junit.Assert.assertTrue(directives.contains(""validate_topology""));
}","testGetCreateDirectives()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/BlueprintResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
945f355065fab011b747568d8b78deaf02301574
5f464316237c2a1661602eaa230f197221aae271
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""clusters"", new org.apache.ambari.server.api.resources.ClusterResourceDefinition().getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ClusterResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
cbd88027a4cfd287e6b8669c30db06231a63c2b6
d902509f755701285bda9bc23b51bd2e58064133
2f00656c824390bbebb9a3441d3839c37427f3bc
84c16c5c5981559454659d069463a5bbd26e7de6
48f97d39975b005aaf3b3a262c7a1cdc2c8f86f1
ce4020028973fadaa79f1bacea649de0b61dbe0c
39a92eb492833ace0b997b2cc4c9523c61832cc0
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testGetSingularName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""cluster"", new org.apache.ambari.server.api.resources.ClusterResourceDefinition().getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ClusterResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
cbd88027a4cfd287e6b8669c30db06231a63c2b6
d902509f755701285bda9bc23b51bd2e58064133
2f00656c824390bbebb9a3441d3839c37427f3bc
84c16c5c5981559454659d069463a5bbd26e7de6
48f97d39975b005aaf3b3a262c7a1cdc2c8f86f1
ce4020028973fadaa79f1bacea649de0b61dbe0c
39a92eb492833ace0b997b2cc4c9523c61832cc0
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testGetSubResourceDefinitions","TRUE","15","assertEquals
assertTrue","{
    org.apache.ambari.server.api.resources.ResourceDefinition resource = new org.apache.ambari.server.api.resources.ClusterResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResources = resource.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(13, subResources.size());
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.Service));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.Host));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.Configuration));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.Request));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.Workflow));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.ConfigGroup));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.AlertDefinition));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.ServiceConfigVersion));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.ClusterPrivilege));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.Alert));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.ClusterStackVersion));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.Artifact));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.ClusterKerberosDescriptor));
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ClusterResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
cbd88027a4cfd287e6b8669c30db06231a63c2b6
d902509f755701285bda9bc23b51bd2e58064133
2f00656c824390bbebb9a3441d3839c37427f3bc
84c16c5c5981559454659d069463a5bbd26e7de6
48f97d39975b005aaf3b3a262c7a1cdc2c8f86f1
ce4020028973fadaa79f1bacea649de0b61dbe0c
39a92eb492833ace0b997b2cc4c9523c61832cc0
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testGetRenderer","TRUE","5","assertTrue","{
    org.apache.ambari.server.api.resources.ResourceDefinition resource = new org.apache.ambari.server.api.resources.ClusterResourceDefinition();
    org.junit.Assert.assertTrue(resource.getRenderer(null) instanceof org.apache.ambari.server.api.query.render.DefaultRenderer);
    org.junit.Assert.assertTrue(resource.getRenderer(""default"") instanceof org.apache.ambari.server.api.query.render.DefaultRenderer);
    org.junit.Assert.assertTrue(resource.getRenderer(""minimal"") instanceof org.apache.ambari.server.api.query.render.MinimalRenderer);
    org.junit.Assert.assertTrue(resource.getRenderer(""blueprint"") instanceof org.apache.ambari.server.api.query.render.ClusterBlueprintRenderer);
    try {
        resource.getRenderer(""foo"");
        org.junit.Assert.fail(""Should have thrown an exception due to invalid renderer type"");
    } catch (java.lang.IllegalArgumentException e) {
    }
}","testGetRenderer()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ClusterResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
cbd88027a4cfd287e6b8669c30db06231a63c2b6
d902509f755701285bda9bc23b51bd2e58064133
2f00656c824390bbebb9a3441d3839c37427f3bc
84c16c5c5981559454659d069463a5bbd26e7de6
48f97d39975b005aaf3b3a262c7a1cdc2c8f86f1
ce4020028973fadaa79f1bacea649de0b61dbe0c
39a92eb492833ace0b997b2cc4c9523c61832cc0
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85"
"testHrefReplace","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> repoVersionNode = nodeWithIdAndVersion(""42"", ""3.0"");
    postProcessHref(repoVersionNode);
    junit.framework.Assert.assertEquals(""http://host/api/v1/stacks/HDP/versions/3.0/compatible_repository_versions/42"", repoVersionNode.getStringProperty(""href""));
}","testHrefReplace()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/CompatibleRepositoryVersionDefinitionTest.java","18704c5ed953aed118b2958879ae16775df59522"
"testGetPluralName","TRUE","2","assertEquals","{
    final org.apache.ambari.server.api.resources.ComponentStackVersionResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.ComponentStackVersionResourceDefinition(null);
    org.junit.Assert.assertEquals(""stack_versions"", resourceDefinition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ComponentStackVersionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
7ed98d53c1f1c24dc841baef54e02d2664f6a381
2f00656c824390bbebb9a3441d3839c37427f3bc
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    final org.apache.ambari.server.api.resources.ComponentStackVersionResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.ComponentStackVersionResourceDefinition(null);
    org.junit.Assert.assertEquals(""stack_version"", resourceDefinition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ComponentStackVersionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
7ed98d53c1f1c24dc841baef54e02d2664f6a381
2f00656c824390bbebb9a3441d3839c37427f3bc
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","2","assertEquals","{
    final org.apache.ambari.server.api.resources.ComponentStackVersionResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.ComponentStackVersionResourceDefinition(null);
    final java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = resourceDefinition.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(1, subResourceDefinitions.size());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ComponentStackVersionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
7ed98d53c1f1c24dc841baef54e02d2664f6a381
2f00656c824390bbebb9a3441d3839c37427f3bc
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetType","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.CredentialResourceDefinition definition = new org.apache.ambari.server.api.resources.CredentialResourceDefinition();
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Credential, definition.getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/CredentialResourceDefinitionTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
3b41174457b8c15800812f54b81ee90683c32724
945f355065fab011b747568d8b78deaf02301574
5f464316237c2a1661602eaa230f197221aae271
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.CredentialResourceDefinition definition = new org.apache.ambari.server.api.resources.CredentialResourceDefinition();
    org.junit.Assert.assertEquals(""credentials"", definition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/CredentialResourceDefinitionTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
3b41174457b8c15800812f54b81ee90683c32724
945f355065fab011b747568d8b78deaf02301574
5f464316237c2a1661602eaa230f197221aae271
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.CredentialResourceDefinition definition = new org.apache.ambari.server.api.resources.CredentialResourceDefinition();
    org.junit.Assert.assertEquals(""credential"", definition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/CredentialResourceDefinitionTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
3b41174457b8c15800812f54b81ee90683c32724
945f355065fab011b747568d8b78deaf02301574
5f464316237c2a1661602eaa230f197221aae271
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","2","assertTrue","{
    org.apache.ambari.server.api.resources.CredentialResourceDefinition definition = new org.apache.ambari.server.api.resources.CredentialResourceDefinition();
    org.junit.Assert.assertTrue(definition.getSubResourceDefinitions().isEmpty());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/CredentialResourceDefinitionTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
3b41174457b8c15800812f54b81ee90683c32724
945f355065fab011b747568d8b78deaf02301574
5f464316237c2a1661602eaa230f197221aae271
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetCreateDirectives","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.CredentialResourceDefinition definition = new org.apache.ambari.server.api.resources.CredentialResourceDefinition();
    java.util.Collection<java.lang.String> directives = definition.getCreateDirectives();
    org.junit.Assert.assertEquals(0, directives.size());
}","testGetCreateDirectives()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/CredentialResourceDefinitionTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
3b41174457b8c15800812f54b81ee90683c32724
945f355065fab011b747568d8b78deaf02301574
5f464316237c2a1661602eaa230f197221aae271
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.FeedResourceDefinition definition = new org.apache.ambari.server.api.resources.FeedResourceDefinition();
    org.junit.Assert.assertEquals(""feeds"", definition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/FeedResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.FeedResourceDefinition definition = new org.apache.ambari.server.api.resources.FeedResourceDefinition();
    org.junit.Assert.assertEquals(""feed"", definition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/FeedResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.resources.FeedResourceDefinition definition = new org.apache.ambari.server.api.resources.FeedResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = definition.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(1, subResourceDefinitions.size());
    org.apache.ambari.server.api.resources.SubResourceDefinition subResourceDefinition = subResourceDefinitions.iterator().next();
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.DRInstance, subResourceDefinition.getType());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/FeedResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    final org.apache.ambari.server.api.resources.HostKerberosIdentityResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.HostKerberosIdentityResourceDefinition();
    org.junit.Assert.assertEquals(""kerberos_identities"", resourceDefinition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/HostKerberosIdentityResourceDefinitionTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
7ed98d53c1f1c24dc841baef54e02d2664f6a381
2f00656c824390bbebb9a3441d3839c37427f3bc
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    final org.apache.ambari.server.api.resources.HostKerberosIdentityResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.HostKerberosIdentityResourceDefinition();
    org.junit.Assert.assertEquals(""kerberos_identity"", resourceDefinition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/HostKerberosIdentityResourceDefinitionTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
7ed98d53c1f1c24dc841baef54e02d2664f6a381
2f00656c824390bbebb9a3441d3839c37427f3bc
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","2","assertEquals","{
    final org.apache.ambari.server.api.resources.HostKerberosIdentityResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.HostKerberosIdentityResourceDefinition();
    final java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = resourceDefinition.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(0, subResourceDefinitions.size());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/HostKerberosIdentityResourceDefinitionTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
7ed98d53c1f1c24dc841baef54e02d2664f6a381
2f00656c824390bbebb9a3441d3839c37427f3bc
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""hosts"", new org.apache.ambari.server.api.resources.HostResourceDefinition().getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/HostResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetSingularName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""host"", new org.apache.ambari.server.api.resources.HostResourceDefinition().getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/HostResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetSubResourceDefinitions","TRUE","6","assertEquals
assertTrue","{
    final org.apache.ambari.server.api.resources.ResourceDefinition resource = new org.apache.ambari.server.api.resources.HostResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResources = resource.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(4, subResources.size());
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.HostComponent));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.Alert));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.HostStackVersion));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.HostKerberosIdentity));
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/HostResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.InstanceResourceDefinition definition = new org.apache.ambari.server.api.resources.InstanceResourceDefinition();
    org.junit.Assert.assertEquals(""instances"", definition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/InstanceResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.InstanceResourceDefinition definition = new org.apache.ambari.server.api.resources.InstanceResourceDefinition();
    org.junit.Assert.assertEquals(""instance"", definition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/InstanceResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","2","assertTrue","{
    org.apache.ambari.server.api.resources.InstanceResourceDefinition definition = new org.apache.ambari.server.api.resources.InstanceResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = definition.getSubResourceDefinitions();
    org.junit.Assert.assertTrue(subResourceDefinitions.isEmpty());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/InstanceResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.JobResourceDefinition definition = new org.apache.ambari.server.api.resources.JobResourceDefinition();
    org.junit.Assert.assertEquals(""jobs"", definition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/JobResourceDefinitionTest.java","5db3355dd9289fd9a66dc227b9cf5089f5ebe0e3"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.JobResourceDefinition definition = new org.apache.ambari.server.api.resources.JobResourceDefinition();
    org.junit.Assert.assertEquals(""job"", definition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/JobResourceDefinitionTest.java","5db3355dd9289fd9a66dc227b9cf5089f5ebe0e3"
"testGetSubResourceDefinitions","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.resources.JobResourceDefinition definition = new org.apache.ambari.server.api.resources.JobResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = definition.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(1, subResourceDefinitions.size());
    org.apache.ambari.server.api.resources.SubResourceDefinition subResourceDefinition = subResourceDefinitions.iterator().next();
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.TaskAttempt, subResourceDefinition.getType());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/JobResourceDefinitionTest.java","5db3355dd9289fd9a66dc227b9cf5089f5ebe0e3"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.LdapSyncEventResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.LdapSyncEventResourceDefinition();
    org.junit.Assert.assertEquals(""ldap_sync_events"", resourceDefinition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/LdapSyncEventResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
1f7dbd5df4b624a083cc8f8fe4141e6289ecf46e
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.LdapSyncEventResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.LdapSyncEventResourceDefinition();
    org.junit.Assert.assertEquals(""ldap_sync_event"", resourceDefinition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/LdapSyncEventResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
1f7dbd5df4b624a083cc8f8fe4141e6289ecf46e
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.LdapSyncEventResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.LdapSyncEventResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = resourceDefinition.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(0, subResourceDefinitions.size());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/LdapSyncEventResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
1f7dbd5df4b624a083cc8f8fe4141e6289ecf46e
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testDefinitionNames","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition def = new org.apache.ambari.server.api.resources.MpackResourceDefinition();
    junit.framework.Assert.assertEquals(""mpack"", def.getSingularName());
    junit.framework.Assert.assertEquals(""mpacks"", def.getPluralName());
}","testDefinitionNames()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/MpackResourceDefinitionTest.java","a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
2ea37fbcd7cacc38e388f89aa6bd55a79eecce53
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
00a4991eecb205f7936929e7010856661f0ba59e
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
c2264fedc1ca9ed27ba56513823fc52fea400230
a12bb10131ca66e48e524500092695ecdcc86fea"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.PermissionResourceDefinition permissionResourceDefinition = new org.apache.ambari.server.api.resources.PermissionResourceDefinition();
    org.junit.Assert.assertEquals(""permissions"", permissionResourceDefinition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/PermissionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
09c9134793dcb1ec1691f2ca38147519b28f61f0
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.PermissionResourceDefinition permissionResourceDefinition = new org.apache.ambari.server.api.resources.PermissionResourceDefinition();
    org.junit.Assert.assertEquals(""permission"", permissionResourceDefinition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/PermissionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
09c9134793dcb1ec1691f2ca38147519b28f61f0
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","3","assertEquals
assertTrue","{
    org.apache.ambari.server.api.resources.PermissionResourceDefinition permissionResourceDefinition = new org.apache.ambari.server.api.resources.PermissionResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = permissionResourceDefinition.getSubResourceDefinitions();
    java.util.Set<org.apache.ambari.server.controller.spi.Resource.Type> expectedSubTypes = new java.util.HashSet<>();
    expectedSubTypes.add(org.apache.ambari.server.controller.spi.Resource.Type.RoleAuthorization);
    org.junit.Assert.assertEquals(1, subResourceDefinitions.size());
    for (org.apache.ambari.server.api.resources.SubResourceDefinition subResourceDefinition : subResourceDefinitions) {
        org.junit.Assert.assertTrue(expectedSubTypes.contains(subResourceDefinition.getType()));
    }
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/PermissionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
09c9134793dcb1ec1691f2ca38147519b28f61f0
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.PrivilegeResourceDefinition privilegeResourceDefinition = new org.apache.ambari.server.api.resources.PrivilegeResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.AmbariPrivilege);
    org.junit.Assert.assertEquals(""privileges"", privilegeResourceDefinition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/PrivilegeResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
e19a719bd413ec937071ef610f52dae093175132
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.PrivilegeResourceDefinition privilegeResourceDefinition = new org.apache.ambari.server.api.resources.PrivilegeResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.AmbariPrivilege);
    org.junit.Assert.assertEquals(""privilege"", privilegeResourceDefinition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/PrivilegeResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
e19a719bd413ec937071ef610f52dae093175132
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.PrivilegeResourceDefinition privilegeResourceDefinition = new org.apache.ambari.server.api.resources.PrivilegeResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.AmbariPrivilege);
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = privilegeResourceDefinition.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(0, subResourceDefinitions.size());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/PrivilegeResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
e19a719bd413ec937071ef610f52dae093175132
16911c85e18dfc337fa2be88b37214a1d5074e22
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    final org.apache.ambari.server.api.resources.RepositoryResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.RepositoryResourceDefinition();
    org.junit.Assert.assertEquals(""repositories"", resourceDefinition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/RepositoryResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
1abd35a7bd991e7e380aec2c8708d8d794fcb3cc
7ed98d53c1f1c24dc841baef54e02d2664f6a381
2f00656c824390bbebb9a3441d3839c37427f3bc
1bf2795a462e9780f482de306b7eeaf3c6e51f13
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    final org.apache.ambari.server.api.resources.RepositoryResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.RepositoryResourceDefinition();
    org.junit.Assert.assertEquals(""repository"", resourceDefinition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/RepositoryResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
1abd35a7bd991e7e380aec2c8708d8d794fcb3cc
7ed98d53c1f1c24dc841baef54e02d2664f6a381
2f00656c824390bbebb9a3441d3839c37427f3bc
1bf2795a462e9780f482de306b7eeaf3c6e51f13
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","2","assertEquals","{
    final org.apache.ambari.server.api.resources.RepositoryResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.RepositoryResourceDefinition();
    final java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = resourceDefinition.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(0, subResourceDefinitions.size());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/RepositoryResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
1abd35a7bd991e7e380aec2c8708d8d794fcb3cc
7ed98d53c1f1c24dc841baef54e02d2664f6a381
2f00656c824390bbebb9a3441d3839c37427f3bc
1bf2795a462e9780f482de306b7eeaf3c6e51f13
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetCreateDirectives","TRUE","3","assertEquals","{
    final org.apache.ambari.server.api.resources.RepositoryResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.RepositoryResourceDefinition();
    final java.util.Collection<java.lang.String> createDirectives = resourceDefinition.getCreateDirectives();
    org.junit.Assert.assertEquals(1, createDirectives.size());
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.resources.RepositoryResourceDefinition.VALIDATE_ONLY_DIRECTIVE, createDirectives.iterator().next());
}","testGetCreateDirectives()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/RepositoryResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
1abd35a7bd991e7e380aec2c8708d8d794fcb3cc
7ed98d53c1f1c24dc841baef54e02d2664f6a381
2f00656c824390bbebb9a3441d3839c37427f3bc
1bf2795a462e9780f482de306b7eeaf3c6e51f13
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    final org.apache.ambari.server.api.resources.RepositoryVersionResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.RepositoryVersionResourceDefinition();
    org.junit.Assert.assertEquals(""repository_versions"", resourceDefinition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/RepositoryVersionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
7ed98d53c1f1c24dc841baef54e02d2664f6a381
2f00656c824390bbebb9a3441d3839c37427f3bc
1bf2795a462e9780f482de306b7eeaf3c6e51f13
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    final org.apache.ambari.server.api.resources.RepositoryVersionResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.RepositoryVersionResourceDefinition();
    org.junit.Assert.assertEquals(""repository_version"", resourceDefinition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/RepositoryVersionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
7ed98d53c1f1c24dc841baef54e02d2664f6a381
2f00656c824390bbebb9a3441d3839c37427f3bc
1bf2795a462e9780f482de306b7eeaf3c6e51f13
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","3","assertEquals","{
    final org.apache.ambari.server.api.resources.RepositoryVersionResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.RepositoryVersionResourceDefinition();
    final java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = resourceDefinition.getSubResourceDefinitions();
    final java.util.Iterator<org.apache.ambari.server.api.resources.SubResourceDefinition> iterator = subResourceDefinitions.iterator();
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.OperatingSystem, iterator.next().getType());
    org.junit.Assert.assertEquals(1, subResourceDefinitions.size());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/RepositoryVersionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
7ed98d53c1f1c24dc841baef54e02d2664f6a381
2f00656c824390bbebb9a3441d3839c37427f3bc
1bf2795a462e9780f482de306b7eeaf3c6e51f13
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetStackArtifactDefinition","TRUE","4","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.StackArtifact, null);
    org.junit.Assert.assertEquals(""artifact"", resourceDefinition.getSingularName());
    org.junit.Assert.assertEquals(""artifacts"", resourceDefinition.getPluralName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.StackArtifact, resourceDefinition.getType());
}","testGetStackArtifactDefinition()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ResourceInstanceFactoryImplTest.java","c2409e740f84d6f051659b3b36d853902e698a60
ae6d0106751467a1a38fb6e60213fb0f09ba692c
cbd88027a4cfd287e6b8669c30db06231a63c2b6
09c9134793dcb1ec1691f2ca38147519b28f61f0
6df4da1683c56b0f8facc6fb5d33529fd9781fdb
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
d822bf34e13483e6ad53552647eea97756c76a56
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
a30758b5cccd9cbed331796171f2b36cf4ba18cc
be60c7ca2f99111dbe076aec54a335ed28976960
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testGetArtifactDefinition","TRUE","4","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.Artifact, null);
    org.junit.Assert.assertEquals(""artifact"", resourceDefinition.getSingularName());
    org.junit.Assert.assertEquals(""artifacts"", resourceDefinition.getPluralName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Artifact, resourceDefinition.getType());
}","testGetArtifactDefinition()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ResourceInstanceFactoryImplTest.java","c2409e740f84d6f051659b3b36d853902e698a60
ae6d0106751467a1a38fb6e60213fb0f09ba692c
cbd88027a4cfd287e6b8669c30db06231a63c2b6
09c9134793dcb1ec1691f2ca38147519b28f61f0
6df4da1683c56b0f8facc6fb5d33529fd9781fdb
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
d822bf34e13483e6ad53552647eea97756c76a56
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
a30758b5cccd9cbed331796171f2b36cf4ba18cc
be60c7ca2f99111dbe076aec54a335ed28976960
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testGetHostDefinition","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl resourceInstanceFactory = new org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> mapIds = new java.util.HashMap<>();
    mapIds.put(org.apache.ambari.server.controller.spi.Resource.Type.Host, ""TeSTHost1"");
    org.apache.ambari.server.api.resources.ResourceInstance resourceInstance = resourceInstanceFactory.createResource(org.apache.ambari.server.controller.spi.Resource.Type.Host, mapIds);
    org.junit.Assert.assertEquals(mapIds.get(org.apache.ambari.server.controller.spi.Resource.Type.Host), ""testhost1"");
}","testGetHostDefinition()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ResourceInstanceFactoryImplTest.java","c2409e740f84d6f051659b3b36d853902e698a60
ae6d0106751467a1a38fb6e60213fb0f09ba692c
cbd88027a4cfd287e6b8669c30db06231a63c2b6
09c9134793dcb1ec1691f2ca38147519b28f61f0
6df4da1683c56b0f8facc6fb5d33529fd9781fdb
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
d822bf34e13483e6ad53552647eea97756c76a56
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
a30758b5cccd9cbed331796171f2b36cf4ba18cc
be60c7ca2f99111dbe076aec54a335ed28976960
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testGetHostKerberosIdentityDefinition","TRUE","5","assertNotNull
assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.HostKerberosIdentity, null);
    org.junit.Assert.assertNotNull(resourceDefinition);
    org.junit.Assert.assertEquals(""kerberos_identity"", resourceDefinition.getSingularName());
    org.junit.Assert.assertEquals(""kerberos_identities"", resourceDefinition.getPluralName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.HostKerberosIdentity, resourceDefinition.getType());
}","testGetHostKerberosIdentityDefinition()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ResourceInstanceFactoryImplTest.java","c2409e740f84d6f051659b3b36d853902e698a60
ae6d0106751467a1a38fb6e60213fb0f09ba692c
cbd88027a4cfd287e6b8669c30db06231a63c2b6
09c9134793dcb1ec1691f2ca38147519b28f61f0
6df4da1683c56b0f8facc6fb5d33529fd9781fdb
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
d822bf34e13483e6ad53552647eea97756c76a56
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
a30758b5cccd9cbed331796171f2b36cf4ba18cc
be60c7ca2f99111dbe076aec54a335ed28976960
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testGetRoleAuthorizationDefinition","TRUE","5","assertNotNull
assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.RoleAuthorization, null);
    org.junit.Assert.assertNotNull(resourceDefinition);
    org.junit.Assert.assertEquals(""authorization"", resourceDefinition.getSingularName());
    org.junit.Assert.assertEquals(""authorizations"", resourceDefinition.getPluralName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.RoleAuthorization, resourceDefinition.getType());
}","testGetRoleAuthorizationDefinition()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ResourceInstanceFactoryImplTest.java","c2409e740f84d6f051659b3b36d853902e698a60
ae6d0106751467a1a38fb6e60213fb0f09ba692c
cbd88027a4cfd287e6b8669c30db06231a63c2b6
09c9134793dcb1ec1691f2ca38147519b28f61f0
6df4da1683c56b0f8facc6fb5d33529fd9781fdb
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
d822bf34e13483e6ad53552647eea97756c76a56
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
a30758b5cccd9cbed331796171f2b36cf4ba18cc
be60c7ca2f99111dbe076aec54a335ed28976960
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testGetUserAuthorizationDefinition","TRUE","5","assertNotNull
assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.UserAuthorization, null);
    org.junit.Assert.assertNotNull(resourceDefinition);
    org.junit.Assert.assertEquals(""authorization"", resourceDefinition.getSingularName());
    org.junit.Assert.assertEquals(""authorizations"", resourceDefinition.getPluralName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.UserAuthorization, resourceDefinition.getType());
}","testGetUserAuthorizationDefinition()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ResourceInstanceFactoryImplTest.java","c2409e740f84d6f051659b3b36d853902e698a60
ae6d0106751467a1a38fb6e60213fb0f09ba692c
cbd88027a4cfd287e6b8669c30db06231a63c2b6
09c9134793dcb1ec1691f2ca38147519b28f61f0
6df4da1683c56b0f8facc6fb5d33529fd9781fdb
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
d822bf34e13483e6ad53552647eea97756c76a56
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
a30758b5cccd9cbed331796171f2b36cf4ba18cc
be60c7ca2f99111dbe076aec54a335ed28976960
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testGetClusterKerberosDescriptorDefinition","TRUE","5","assertNotNull
assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.ClusterKerberosDescriptor, null);
    org.junit.Assert.assertNotNull(resourceDefinition);
    org.junit.Assert.assertEquals(""kerberos_descriptor"", resourceDefinition.getSingularName());
    org.junit.Assert.assertEquals(""kerberos_descriptors"", resourceDefinition.getPluralName());
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.ClusterKerberosDescriptor, resourceDefinition.getType());
}","testGetClusterKerberosDescriptorDefinition()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ResourceInstanceFactoryImplTest.java","c2409e740f84d6f051659b3b36d853902e698a60
ae6d0106751467a1a38fb6e60213fb0f09ba692c
cbd88027a4cfd287e6b8669c30db06231a63c2b6
09c9134793dcb1ec1691f2ca38147519b28f61f0
6df4da1683c56b0f8facc6fb5d33529fd9781fdb
66e42cbab8a714eac49b4ae84eb238d0c08accb5
d902509f755701285bda9bc23b51bd2e58064133
d822bf34e13483e6ad53552647eea97756c76a56
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
a30758b5cccd9cbed331796171f2b36cf4ba18cc
be60c7ca2f99111dbe076aec54a335ed28976960
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testGetPluralName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""services"", new org.apache.ambari.server.api.resources.ServiceResourceDefinition().getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ServiceResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
d902509f755701285bda9bc23b51bd2e58064133
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetSingularName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""service"", new org.apache.ambari.server.api.resources.ServiceResourceDefinition().getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ServiceResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
d902509f755701285bda9bc23b51bd2e58064133
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetSubResourceDefinitions","TRUE","5","assertEquals
assertTrue","{
    org.apache.ambari.server.api.resources.ResourceDefinition resource = new org.apache.ambari.server.api.resources.ServiceResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResources = resource.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(3, subResources.size());
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.Component));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.Alert));
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.Artifact));
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ServiceResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
d902509f755701285bda9bc23b51bd2e58064133
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.SimpleResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.Stage, ""stage"", ""stages"", org.apache.ambari.server.controller.spi.Resource.Type.Task);
    org.junit.Assert.assertEquals(""stages"", resourceDefinition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/SimpleResourceDefinitionTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
0898c7373c39247c413b806bb2f5ecc5ce6d1f66
ae77687f0e712b9682ee46236e78ce6b14a00135
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.SimpleResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.Stage, ""stage"", ""stages"", org.apache.ambari.server.controller.spi.Resource.Type.Task);
    org.junit.Assert.assertEquals(""stage"", resourceDefinition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/SimpleResourceDefinitionTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
0898c7373c39247c413b806bb2f5ecc5ce6d1f66
ae77687f0e712b9682ee46236e78ce6b14a00135
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testDirectives","FALSE","0","None","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition;
    resourceDefinition = new org.apache.ambari.server.api.resources.SimpleResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.Stage, ""stage"", ""stages"", org.apache.ambari.server.controller.spi.Resource.Type.Task);
    validateDirectives(java.util.Collections.emptySet(), resourceDefinition.getCreateDirectives());
    validateDirectives(java.util.Collections.emptySet(), resourceDefinition.getReadDirectives());
    validateDirectives(java.util.Collections.emptySet(), resourceDefinition.getUpdateDirectives());
    validateDirectives(java.util.Collections.emptySet(), resourceDefinition.getDeleteDirectives());
    java.util.HashMap<org.apache.ambari.server.api.resources.BaseResourceDefinition.DirectiveType, java.util.Collection<java.lang.String>> directives = new java.util.HashMap<>();
    directives.put(org.apache.ambari.server.api.resources.BaseResourceDefinition.DirectiveType.CREATE, java.util.Arrays.asList(""POST1"", ""POST2""));
    directives.put(org.apache.ambari.server.api.resources.BaseResourceDefinition.DirectiveType.READ, java.util.Arrays.asList(""GET1"", ""GET2""));
    directives.put(org.apache.ambari.server.api.resources.BaseResourceDefinition.DirectiveType.UPDATE, java.util.Arrays.asList(""PUT1"", ""PUT2""));
    directives.put(org.apache.ambari.server.api.resources.BaseResourceDefinition.DirectiveType.DELETE, java.util.Arrays.asList(""DEL1"", ""DEL2""));
    resourceDefinition = new org.apache.ambari.server.api.resources.SimpleResourceDefinition(org.apache.ambari.server.controller.spi.Resource.Type.Stage, ""stage"", ""stages"", java.util.Collections.singleton(org.apache.ambari.server.controller.spi.Resource.Type.Task), directives);
    validateDirectives(directives.get(org.apache.ambari.server.api.resources.BaseResourceDefinition.DirectiveType.CREATE), resourceDefinition.getCreateDirectives());
    validateDirectives(directives.get(org.apache.ambari.server.api.resources.BaseResourceDefinition.DirectiveType.READ), resourceDefinition.getReadDirectives());
    validateDirectives(directives.get(org.apache.ambari.server.api.resources.BaseResourceDefinition.DirectiveType.UPDATE), resourceDefinition.getUpdateDirectives());
    validateDirectives(directives.get(org.apache.ambari.server.api.resources.BaseResourceDefinition.DirectiveType.DELETE), resourceDefinition.getDeleteDirectives());
}","testDirectives()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/SimpleResourceDefinitionTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
0898c7373c39247c413b806bb2f5ecc5ce6d1f66
ae77687f0e712b9682ee46236e78ce6b14a00135
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""configurations"", new org.apache.ambari.server.api.resources.StackConfigurationResourceDefinition().getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/StackConfigurationDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
4bd764ed70d7b0b1ce5102cbf521fee0f27022ca
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetSingularName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""configuration"", new org.apache.ambari.server.api.resources.StackConfigurationResourceDefinition().getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/StackConfigurationDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
4bd764ed70d7b0b1ce5102cbf521fee0f27022ca
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetSubResourceDefinitions","TRUE","3","assertEquals
assertTrue","{
    org.apache.ambari.server.api.resources.ResourceDefinition resource = new org.apache.ambari.server.api.resources.StackConfigurationResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResources = resource.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(1, subResources.size());
    org.junit.Assert.assertTrue(includesType(subResources, org.apache.ambari.server.controller.spi.Resource.Type.StackConfigurationDependency));
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/StackConfigurationDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
4bd764ed70d7b0b1ce5102cbf521fee0f27022ca
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetPluralName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""dependencies"", new org.apache.ambari.server.api.resources.StackConfigurationDependencyResourceDefinition().getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/StackConfigurationDependencyDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
4bd764ed70d7b0b1ce5102cbf521fee0f27022ca
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetSingularName","TRUE","2","assertEquals","{
    org.junit.Assert.assertEquals(""dependency"", new org.apache.ambari.server.api.resources.StackConfigurationDependencyResourceDefinition().getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/StackConfigurationDependencyDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
4bd764ed70d7b0b1ce5102cbf521fee0f27022ca
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetSubResourceDefinitions","TRUE","2","assertTrue","{
    org.apache.ambari.server.api.resources.ResourceDefinition resource = new org.apache.ambari.server.api.resources.StackConfigurationDependencyResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResources = resource.getSubResourceDefinitions();
    org.junit.Assert.assertTrue(subResources.isEmpty());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/StackConfigurationDependencyDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
4bd764ed70d7b0b1ce5102cbf521fee0f27022ca
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testDefinitionNames","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition def = new org.apache.ambari.server.api.resources.StackServiceResourceDefinition();
    junit.framework.Assert.assertEquals(""service"", def.getSingularName());
    junit.framework.Assert.assertEquals(""services"", def.getPluralName());
}","testDefinitionNames()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/StackServiceResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
eca979132c7da114e6a6e0537d92b024b0b45a9d
fd9649dd0083380b659894a79e486acfe0f4e0a3
631d913da909b3978f772678fdc458ba8ab0456f
d822bf34e13483e6ad53552647eea97756c76a56"
"testGetSubResourceDefinitions","TRUE","6","assertEquals
assertTrue","{
    org.apache.ambari.server.api.resources.ResourceDefinition def = new org.apache.ambari.server.api.resources.StackServiceResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResources = def.getSubResourceDefinitions();
    junit.framework.Assert.assertEquals(5, subResources.size());
    boolean configReturned = false;
    boolean componentReturned = false;
    boolean artifactReturned = false;
    boolean themesReturned = false;
    for (org.apache.ambari.server.api.resources.SubResourceDefinition subResource : subResources) {
        org.apache.ambari.server.controller.spi.Resource.Type type = subResource.getType();
        if (type.equals(org.apache.ambari.server.controller.spi.Resource.Type.StackConfiguration)) {
            configReturned = true;
        } else if (type.equals(org.apache.ambari.server.controller.spi.Resource.Type.StackServiceComponent)) {
            componentReturned = true;
        } else if (type.equals(org.apache.ambari.server.controller.spi.Resource.Type.StackArtifact)) {
            artifactReturned = true;
        } else if (type.equals(org.apache.ambari.server.controller.spi.Resource.Type.Theme)) {
            themesReturned = true;
        }
    }
    junit.framework.Assert.assertTrue(configReturned);
    junit.framework.Assert.assertTrue(componentReturned);
    junit.framework.Assert.assertTrue(artifactReturned);
    junit.framework.Assert.assertTrue(themesReturned);
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/StackServiceResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
eca979132c7da114e6a6e0537d92b024b0b45a9d
fd9649dd0083380b659894a79e486acfe0f4e0a3
631d913da909b3978f772678fdc458ba8ab0456f
d822bf34e13483e6ad53552647eea97756c76a56"
"testDefinitionNames","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition def = new org.apache.ambari.server.api.resources.StackVersionResourceDefinition();
    junit.framework.Assert.assertEquals(""version"", def.getSingularName());
    junit.framework.Assert.assertEquals(""versions"", def.getPluralName());
}","testDefinitionNames()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/StackVersionResourceDefinitionTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
c2409e740f84d6f051659b3b36d853902e698a60
43550a78dcffeec00888141995fa8103539dad43
d822bf34e13483e6ad53552647eea97756c76a56"
"testGetSubResourceDefinitions","TRUE","8","assertEquals
assertTrue","{
    org.apache.ambari.server.api.resources.ResourceDefinition def = new org.apache.ambari.server.api.resources.StackVersionResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResources = def.getSubResourceDefinitions();
    junit.framework.Assert.assertEquals(7, subResources.size());
    boolean operatingSystemFound = false;
    boolean serviceFound = false;
    boolean configFound = false;
    boolean repoFound = false;
    boolean artifactReturned = false;
    boolean compatibleFound = false;
    for (org.apache.ambari.server.api.resources.SubResourceDefinition subResource : subResources) {
        org.apache.ambari.server.controller.spi.Resource.Type type = subResource.getType();
        if (type.equals(org.apache.ambari.server.controller.spi.Resource.Type.OperatingSystem)) {
            operatingSystemFound = true;
        } else if (type.equals(org.apache.ambari.server.controller.spi.Resource.Type.StackService)) {
            serviceFound = true;
        } else if (type.equals(org.apache.ambari.server.controller.spi.Resource.Type.StackLevelConfiguration)) {
            configFound = true;
        } else if (type.equals(org.apache.ambari.server.controller.spi.Resource.Type.RepositoryVersion)) {
            repoFound = true;
        } else if (type.equals(org.apache.ambari.server.controller.spi.Resource.Type.StackArtifact)) {
            artifactReturned = true;
        } else if (type.equals(org.apache.ambari.server.controller.spi.Resource.Type.CompatibleRepositoryVersion)) {
            compatibleFound = true;
        }
    }
    junit.framework.Assert.assertTrue(operatingSystemFound);
    junit.framework.Assert.assertTrue(serviceFound);
    junit.framework.Assert.assertTrue(configFound);
    junit.framework.Assert.assertTrue(repoFound);
    junit.framework.Assert.assertTrue(artifactReturned);
    junit.framework.Assert.assertTrue(compatibleFound);
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/StackVersionResourceDefinitionTest.java","a0197938047d63a77c793ca85b7f35cd89ebbd60
c2409e740f84d6f051659b3b36d853902e698a60
43550a78dcffeec00888141995fa8103539dad43
d822bf34e13483e6ad53552647eea97756c76a56"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.TargetClusterResourceDefinition definition = new org.apache.ambari.server.api.resources.TargetClusterResourceDefinition();
    org.junit.Assert.assertEquals(""targets"", definition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/TargetClusterResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.TargetClusterResourceDefinition definition = new org.apache.ambari.server.api.resources.TargetClusterResourceDefinition();
    org.junit.Assert.assertEquals(""target"", definition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/TargetClusterResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","2","assertTrue","{
    org.apache.ambari.server.api.resources.TargetClusterResourceDefinition definition = new org.apache.ambari.server.api.resources.TargetClusterResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = definition.getSubResourceDefinitions();
    org.junit.Assert.assertTrue(subResourceDefinitions.isEmpty());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/TargetClusterResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.TaskAttemptResourceDefinition definition = new org.apache.ambari.server.api.resources.TaskAttemptResourceDefinition();
    org.junit.Assert.assertEquals(""taskattempts"", definition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/TaskAttemptResourceDefinitionTest.java","5db3355dd9289fd9a66dc227b9cf5089f5ebe0e3"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.TaskAttemptResourceDefinition definition = new org.apache.ambari.server.api.resources.TaskAttemptResourceDefinition();
    org.junit.Assert.assertEquals(""taskattempt"", definition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/TaskAttemptResourceDefinitionTest.java","5db3355dd9289fd9a66dc227b9cf5089f5ebe0e3"
"testGetSubResourceDefinitions","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.TaskAttemptResourceDefinition definition = new org.apache.ambari.server.api.resources.TaskAttemptResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = definition.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(0, subResourceDefinitions.size());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/TaskAttemptResourceDefinitionTest.java","5db3355dd9289fd9a66dc227b9cf5089f5ebe0e3"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.UpgradeResourceDefinition();
    org.junit.Assert.assertEquals(""upgrade"", resourceDefinition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/UpgradeResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
50cb77bb0b0e4b782107601497b083095fbd5221
e4db57093f4d17497366cdfbf02127f36399bf42
0898c7373c39247c413b806bb2f5ecc5ce6d1f66
d902509f755701285bda9bc23b51bd2e58064133
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.UpgradeResourceDefinition();
    org.junit.Assert.assertEquals(""upgrades"", resourceDefinition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/UpgradeResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
50cb77bb0b0e4b782107601497b083095fbd5221
e4db57093f4d17497366cdfbf02127f36399bf42
0898c7373c39247c413b806bb2f5ecc5ce6d1f66
d902509f755701285bda9bc23b51bd2e58064133
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetType","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.UpgradeResourceDefinition();
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Upgrade, resourceDefinition.getType());
}","testGetType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/UpgradeResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
50cb77bb0b0e4b782107601497b083095fbd5221
e4db57093f4d17497366cdfbf02127f36399bf42
0898c7373c39247c413b806bb2f5ecc5ce6d1f66
d902509f755701285bda9bc23b51bd2e58064133
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetCreateDirectives","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = new org.apache.ambari.server.api.resources.UpgradeResourceDefinition();
    org.junit.Assert.assertEquals(com.google.common.collect.Sets.newHashSet(org.apache.ambari.server.api.resources.UpgradeResourceDefinition.SKIP_SERVICE_CHECKS_DIRECTIVE), resourceDefinition.getCreateDirectives());
}","testGetCreateDirectives()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/UpgradeResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
50cb77bb0b0e4b782107601497b083095fbd5221
e4db57093f4d17497366cdfbf02127f36399bf42
0898c7373c39247c413b806bb2f5ecc5ce6d1f66
d902509f755701285bda9bc23b51bd2e58064133
2f00656c824390bbebb9a3441d3839c37427f3bc"
"testGetPluralName","TRUE","2","assertEquals","{
    final org.apache.ambari.server.api.resources.UserResourceDefinition userResourceDefinition = new org.apache.ambari.server.api.resources.UserResourceDefinition();
    org.junit.Assert.assertEquals(""users"", userResourceDefinition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/UserResourceDefinitionTest.java","317905e40e0b4b384809ad7d900a09d97827f599
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
958fd13ec71ccbb4b2ce86abb5b007c32e90cba8
4bbaf7f2a571ec7937954e3ca2ddaa226a168c0e
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    final org.apache.ambari.server.api.resources.UserResourceDefinition userResourceDefinition = new org.apache.ambari.server.api.resources.UserResourceDefinition();
    org.junit.Assert.assertEquals(""user"", userResourceDefinition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/UserResourceDefinitionTest.java","317905e40e0b4b384809ad7d900a09d97827f599
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
958fd13ec71ccbb4b2ce86abb5b007c32e90cba8
4bbaf7f2a571ec7937954e3ca2ddaa226a168c0e
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","3","assertEquals
assertTrue","{
    java.util.Set<org.apache.ambari.server.controller.spi.Resource.Type> expectedSubResourceDefinitionTypes = new java.util.HashSet<>();
    expectedSubResourceDefinitionTypes.add(org.apache.ambari.server.controller.spi.Resource.Type.UserAuthenticationSource);
    expectedSubResourceDefinitionTypes.add(org.apache.ambari.server.controller.spi.Resource.Type.UserPrivilege);
    expectedSubResourceDefinitionTypes.add(org.apache.ambari.server.controller.spi.Resource.Type.ActiveWidgetLayout);
    final org.apache.ambari.server.api.resources.UserResourceDefinition userResourceDefinition = new org.apache.ambari.server.api.resources.UserResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = userResourceDefinition.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(expectedSubResourceDefinitionTypes.size(), subResourceDefinitions.size());
    for (org.apache.ambari.server.api.resources.SubResourceDefinition subResourceDefinition : subResourceDefinitions) {
        org.junit.Assert.assertTrue(expectedSubResourceDefinitionTypes.contains(subResourceDefinition.getType()));
    }
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/UserResourceDefinitionTest.java","317905e40e0b4b384809ad7d900a09d97827f599
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
958fd13ec71ccbb4b2ce86abb5b007c32e90cba8
4bbaf7f2a571ec7937954e3ca2ddaa226a168c0e
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.controller.spi.Resource.Type type = new org.apache.ambari.server.controller.spi.Resource.Type(""resource"");
    org.apache.ambari.server.api.resources.ViewExternalSubResourceDefinition definition = new org.apache.ambari.server.api.resources.ViewExternalSubResourceDefinition(type);
    org.junit.Assert.assertEquals(""resources"", definition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewExternalSubResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
61618f73c6478c0e2a460c3b0a6ae7fcc0d33885
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.controller.spi.Resource.Type type = new org.apache.ambari.server.controller.spi.Resource.Type(""resource"");
    org.apache.ambari.server.api.resources.ViewExternalSubResourceDefinition definition = new org.apache.ambari.server.api.resources.ViewExternalSubResourceDefinition(type);
    org.junit.Assert.assertEquals(""resource"", definition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewExternalSubResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
61618f73c6478c0e2a460c3b0a6ae7fcc0d33885
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","2","assertEquals","{
    org.apache.ambari.server.controller.spi.Resource.Type type = new org.apache.ambari.server.controller.spi.Resource.Type(""resource"");
    org.apache.ambari.server.api.resources.ViewExternalSubResourceDefinition definition = new org.apache.ambari.server.api.resources.ViewExternalSubResourceDefinition(type);
    org.junit.Assert.assertEquals(java.util.Collections.emptySet(), definition.getSubResourceDefinitions());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewExternalSubResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
61618f73c6478c0e2a460c3b0a6ae7fcc0d33885
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ViewInstanceResourceDefinition viewInstanceResourceDefinition = org.apache.ambari.server.api.resources.ViewInstanceResourceDefinitionTest.getViewInstanceResourceDefinition();
    org.junit.Assert.assertEquals(""instances"", viewInstanceResourceDefinition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewInstanceResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
e19a719bd413ec937071ef610f52dae093175132
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ViewInstanceResourceDefinition viewInstanceResourceDefinition = org.apache.ambari.server.api.resources.ViewInstanceResourceDefinitionTest.getViewInstanceResourceDefinition();
    org.junit.Assert.assertEquals(""instance"", viewInstanceResourceDefinition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewInstanceResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
e19a719bd413ec937071ef610f52dae093175132
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e"
"testGetSubResourceDefinitions","TRUE","3","assertEquals
assertTrue","{
    org.apache.ambari.server.api.resources.ViewInstanceResourceDefinition viewInstanceResourceDefinition = org.apache.ambari.server.api.resources.ViewInstanceResourceDefinitionTest.getViewInstanceResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = viewInstanceResourceDefinition.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(3, subResourceDefinitions.size());
    for (org.apache.ambari.server.api.resources.SubResourceDefinition subResourceDefinition : subResourceDefinitions) {
        org.apache.ambari.server.controller.spi.Resource.Type type = subResourceDefinition.getType();
        org.junit.Assert.assertTrue((type.name().equals(""sub1"") || type.name().equals(""sub2"")) || type.equals(org.apache.ambari.server.controller.spi.Resource.Type.ViewPrivilege));
    }
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewInstanceResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
e19a719bd413ec937071ef610f52dae093175132
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ViewPermissionResourceDefinition ViewPermissionResourceDefinition = new org.apache.ambari.server.api.resources.ViewPermissionResourceDefinition();
    org.junit.Assert.assertEquals(""permissions"", ViewPermissionResourceDefinition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewPermissionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
11336361fa4b0e180961f29b95802bb51090c196
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ViewPermissionResourceDefinition ViewPermissionResourceDefinition = new org.apache.ambari.server.api.resources.ViewPermissionResourceDefinition();
    org.junit.Assert.assertEquals(""permission"", ViewPermissionResourceDefinition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewPermissionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
11336361fa4b0e180961f29b95802bb51090c196
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","2","assertTrue","{
    org.apache.ambari.server.api.resources.ViewPermissionResourceDefinition ViewPermissionResourceDefinition = new org.apache.ambari.server.api.resources.ViewPermissionResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = ViewPermissionResourceDefinition.getSubResourceDefinitions();
    org.junit.Assert.assertTrue(subResourceDefinitions.isEmpty());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewPermissionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
11336361fa4b0e180961f29b95802bb51090c196
e5d1fddb3102bd3a700903abbbe6b048b8879e84
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ViewResourceDefinition viewResourceDefinition = new org.apache.ambari.server.api.resources.ViewResourceDefinition();
    org.junit.Assert.assertEquals(""views"", viewResourceDefinition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ViewResourceDefinition viewResourceDefinition = new org.apache.ambari.server.api.resources.ViewResourceDefinition();
    org.junit.Assert.assertEquals(""view"", viewResourceDefinition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.resources.ViewResourceDefinition viewResourceDefinition = new org.apache.ambari.server.api.resources.ViewResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = viewResourceDefinition.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(1, subResourceDefinitions.size());
    org.junit.Assert.assertEquals(""ViewVersion"", subResourceDefinitions.iterator().next().getType().name());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ViewVersionResourceDefinition viewVersionResourceDefinition = new org.apache.ambari.server.api.resources.ViewVersionResourceDefinition();
    org.junit.Assert.assertEquals(""versions"", viewVersionResourceDefinition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewVersionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
11336361fa4b0e180961f29b95802bb51090c196
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ViewVersionResourceDefinition viewVersionResourceDefinition = new org.apache.ambari.server.api.resources.ViewVersionResourceDefinition();
    org.junit.Assert.assertEquals(""version"", viewVersionResourceDefinition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewVersionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
11336361fa4b0e180961f29b95802bb51090c196
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetSubResourceDefinitions","TRUE","3","assertEquals
assertTrue","{
    org.apache.ambari.server.api.resources.ViewVersionResourceDefinition viewVersionResourceDefinition = new org.apache.ambari.server.api.resources.ViewVersionResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = viewVersionResourceDefinition.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(2, subResourceDefinitions.size());
    for (org.apache.ambari.server.api.resources.SubResourceDefinition subResourceDefinition : subResourceDefinitions) {
        java.lang.String name = subResourceDefinition.getType().name();
        org.junit.Assert.assertTrue(name.equals(""ViewInstance"") || name.equals(""ViewPermission""));
    }
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/ViewVersionResourceDefinitionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
11336361fa4b0e180961f29b95802bb51090c196
6d33c324070206a188d456d37b4addb1607521ce
a0a10fc5a98e16b8aec4717dc28af32c9f860d0e
74937dd55694a8e154a52d25d0d25e10a9377c31"
"testGetPluralName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.WorkflowResourceDefinition definition = new org.apache.ambari.server.api.resources.WorkflowResourceDefinition();
    org.junit.Assert.assertEquals(""workflows"", definition.getPluralName());
}","testGetPluralName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/WorkflowResourceDefinitionTest.java","5db3355dd9289fd9a66dc227b9cf5089f5ebe0e3"
"testGetSingularName","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.WorkflowResourceDefinition definition = new org.apache.ambari.server.api.resources.WorkflowResourceDefinition();
    org.junit.Assert.assertEquals(""workflow"", definition.getSingularName());
}","testGetSingularName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/WorkflowResourceDefinitionTest.java","5db3355dd9289fd9a66dc227b9cf5089f5ebe0e3"
"testGetSubResourceDefinitions","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.resources.WorkflowResourceDefinition definition = new org.apache.ambari.server.api.resources.WorkflowResourceDefinition();
    java.util.Set<org.apache.ambari.server.api.resources.SubResourceDefinition> subResourceDefinitions = definition.getSubResourceDefinitions();
    org.junit.Assert.assertEquals(1, subResourceDefinitions.size());
    org.apache.ambari.server.api.resources.SubResourceDefinition subResourceDefinition = subResourceDefinitions.iterator().next();
    org.junit.Assert.assertEquals(org.apache.ambari.server.controller.spi.Resource.Type.Job, subResourceDefinition.getType());
}","testGetSubResourceDefinitions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/resources/WorkflowResourceDefinitionTest.java","5db3355dd9289fd9a66dc227b9cf5089f5ebe0e3"
"testValidate__Fail_InvalidPort","TRUE","2","assertFalse","{
    org.junit.Assert.assertFalse(new org.apache.ambari.server.KdcServerConnectionVerification(configuration).isKdcReachable(""test-host:abcd""));
}","testValidate__Fail_InvalidPort()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"testValidate__Success","TRUE","5","assertTrue
assertEquals","{
    org.apache.directory.kerberos.client.KdcConnection connection = EasyMock.createStrictMock(org.apache.directory.kerberos.client.KdcConnection.class);
    EasyMock.expect(connection.getTgt(""noUser@noRealm"", ""noPassword"")).andReturn(null).once();
    EasyMock.replay(connection);
    org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification kdcConnVerifier = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification(configuration, connection);
    boolean result = kdcConnVerifier.isKdcReachable(""test-host:11111"");
    org.junit.Assert.assertTrue(result);
    org.apache.directory.kerberos.client.KdcConfig kdcConfig = kdcConnVerifier.getConfigUsedInConnectionCreation();
    org.junit.Assert.assertEquals(""test-host"", kdcConfig.getHostName());
    org.junit.Assert.assertEquals(11111, kdcConfig.getKdcPort());
    org.junit.Assert.assertEquals(10 * 1000, kdcConfig.getTimeout());
    EasyMock.verify(connection);
}","testValidate__Success()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"testValidateTCP__Successful","TRUE","6","assertTrue
assertFalse
assertEquals","{
    org.apache.directory.kerberos.client.KdcConnection connection = EasyMock.createStrictMock(org.apache.directory.kerberos.client.KdcConnection.class);
    EasyMock.expect(connection.getTgt(""noUser@noRealm"", ""noPassword"")).andReturn(null).once();
    EasyMock.replay(connection);
    org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification kdcConnVerifier = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification(configuration, connection);
    boolean result = kdcConnVerifier.isKdcReachable(""test-host"", 11111, org.apache.ambari.server.KdcServerConnectionVerification.ConnectionProtocol.TCP);
    org.junit.Assert.assertTrue(result);
    org.apache.directory.kerberos.client.KdcConfig kdcConfig = kdcConnVerifier.getConfigUsedInConnectionCreation();
    org.junit.Assert.assertFalse(kdcConfig.isUseUdp());
    org.junit.Assert.assertEquals(""test-host"", kdcConfig.getHostName());
    org.junit.Assert.assertEquals(11111, kdcConfig.getKdcPort());
    org.junit.Assert.assertEquals(10 * 1000, kdcConfig.getTimeout());
    EasyMock.verify(connection);
}","testValidateTCP__Successful()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"testValidateTCP__Successful2","TRUE","6","assertTrue
assertFalse
assertEquals","{
    org.apache.directory.shared.kerberos.messages.KrbError error = EasyMock.createNiceMock(org.apache.directory.shared.kerberos.messages.KrbError.class);
    EasyMock.expect(error.getErrorCode()).andReturn(ErrorType.KDC_ERR_C_PRINCIPAL_UNKNOWN).once();
    EasyMock.expect(error.getMessageType()).andReturn(KerberosMessageType.KRB_ERROR).once();
    org.apache.directory.shared.kerberos.exceptions.KerberosException exception = EasyMock.createNiceMock(org.apache.directory.shared.kerberos.exceptions.KerberosException.class);
    EasyMock.expect(exception.getError()).andReturn(error).once();
    org.apache.directory.kerberos.client.KdcConnection connection = EasyMock.createStrictMock(org.apache.directory.kerberos.client.KdcConnection.class);
    EasyMock.expect(connection.getTgt(""noUser@noRealm"", ""noPassword"")).andThrow(exception);
    EasyMock.replay(connection, exception, error);
    org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification kdcConnVerifier = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification(configuration, connection);
    boolean result = kdcConnVerifier.isKdcReachable(""test-host"", 11111, org.apache.ambari.server.KdcServerConnectionVerification.ConnectionProtocol.TCP);
    org.junit.Assert.assertTrue(result);
    org.apache.directory.kerberos.client.KdcConfig kdcConfig = kdcConnVerifier.getConfigUsedInConnectionCreation();
    org.junit.Assert.assertFalse(kdcConfig.isUseUdp());
    org.junit.Assert.assertEquals(""test-host"", kdcConfig.getHostName());
    org.junit.Assert.assertEquals(11111, kdcConfig.getKdcPort());
    org.junit.Assert.assertEquals(10 * 1000, kdcConfig.getTimeout());
    EasyMock.verify(connection, exception);
}","testValidateTCP__Successful2()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"testValidateTCP__Fail_UnknownException","TRUE","6","assertFalse
assertEquals","{
    org.apache.directory.kerberos.client.KdcConnection connection = EasyMock.createStrictMock(org.apache.directory.kerberos.client.KdcConnection.class);
    EasyMock.expect(connection.getTgt(""noUser@noRealm"", ""noPassword"")).andThrow(new java.lang.RuntimeException(""This is a really bad exception""));
    EasyMock.replay(connection);
    org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification kdcConnVerifier = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification(configuration, connection);
    boolean result = kdcConnVerifier.isKdcReachable(""test-host"", 11111, org.apache.ambari.server.KdcServerConnectionVerification.ConnectionProtocol.TCP);
    org.junit.Assert.assertFalse(result);
    org.apache.directory.kerberos.client.KdcConfig kdcConfig = kdcConnVerifier.getConfigUsedInConnectionCreation();
    org.junit.Assert.assertFalse(kdcConfig.isUseUdp());
    org.junit.Assert.assertEquals(""test-host"", kdcConfig.getHostName());
    org.junit.Assert.assertEquals(11111, kdcConfig.getKdcPort());
    org.junit.Assert.assertEquals(10 * 1000, kdcConfig.getTimeout());
    EasyMock.verify(connection);
}","testValidateTCP__Fail_UnknownException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"testValidateTCP__Fail_Timeout","TRUE","6","assertFalse
assertEquals","{
    int timeout = 1;
    org.apache.directory.kerberos.client.KdcConnection connection = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.BlockingKdcConnection(null);
    org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification kdcConnVerifier = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification(configuration, connection);
    kdcConnVerifier.setConnectionTimeout(timeout);
    boolean result = kdcConnVerifier.isKdcReachable(""test-host"", 11111, org.apache.ambari.server.KdcServerConnectionVerification.ConnectionProtocol.TCP);
    org.junit.Assert.assertFalse(result);
    org.apache.directory.kerberos.client.KdcConfig kdcConfig = kdcConnVerifier.getConfigUsedInConnectionCreation();
    org.junit.Assert.assertFalse(kdcConfig.isUseUdp());
    org.junit.Assert.assertEquals(""test-host"", kdcConfig.getHostName());
    org.junit.Assert.assertEquals(11111, kdcConfig.getKdcPort());
    org.junit.Assert.assertEquals(timeout * 1000, kdcConfig.getTimeout());
}","testValidateTCP__Fail_Timeout()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"testValidateTCP__Fail_TimeoutErrorCode","TRUE","6","assertFalse
assertEquals","{
    org.apache.directory.kerberos.client.KdcConnection connection = EasyMock.createStrictMock(org.apache.directory.kerberos.client.KdcConnection.class);
    EasyMock.expect(connection.getTgt(""noUser@noRealm"", ""noPassword"")).andThrow(new org.apache.directory.shared.kerberos.exceptions.KerberosException(org.apache.directory.shared.kerberos.exceptions.ErrorType.KRB_ERR_GENERIC, ""TimeOut occurred""));
    EasyMock.replay(connection);
    org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification kdcConnVerifier = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification(configuration, connection);
    boolean result = kdcConnVerifier.isKdcReachable(""test-host"", 11111, org.apache.ambari.server.KdcServerConnectionVerification.ConnectionProtocol.TCP);
    org.junit.Assert.assertFalse(result);
    org.apache.directory.kerberos.client.KdcConfig kdcConfig = kdcConnVerifier.getConfigUsedInConnectionCreation();
    org.junit.Assert.assertFalse(kdcConfig.isUseUdp());
    org.junit.Assert.assertEquals(""test-host"", kdcConfig.getHostName());
    org.junit.Assert.assertEquals(11111, kdcConfig.getKdcPort());
    org.junit.Assert.assertEquals(10 * 1000, kdcConfig.getTimeout());
    EasyMock.verify(connection);
}","testValidateTCP__Fail_TimeoutErrorCode()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"testValidateTCP__Fail_GeneralErrorCode_NotTimeout","TRUE","6","assertTrue
assertFalse
assertEquals","{
    org.apache.directory.shared.kerberos.messages.KrbError error = EasyMock.createNiceMock(org.apache.directory.shared.kerberos.messages.KrbError.class);
    EasyMock.expect(error.getErrorCode()).andReturn(ErrorType.KRB_ERR_GENERIC).once();
    EasyMock.expect(error.getMessageType()).andReturn(KerberosMessageType.KRB_ERROR).once();
    org.apache.directory.shared.kerberos.exceptions.KerberosException exception = EasyMock.createNiceMock(org.apache.directory.shared.kerberos.exceptions.KerberosException.class);
    EasyMock.expect(exception.getError()).andReturn(error).once();
    org.apache.directory.kerberos.client.KdcConnection connection = EasyMock.createStrictMock(org.apache.directory.kerberos.client.KdcConnection.class);
    EasyMock.expect(connection.getTgt(""noUser@noRealm"", ""noPassword"")).andThrow(exception);
    EasyMock.replay(connection, exception, error);
    org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification kdcConnVerifier = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification(configuration, connection);
    boolean result = kdcConnVerifier.isKdcReachable(""test-host"", 11111, org.apache.ambari.server.KdcServerConnectionVerification.ConnectionProtocol.TCP);
    org.junit.Assert.assertTrue(result);
    org.apache.directory.kerberos.client.KdcConfig kdcConfig = kdcConnVerifier.getConfigUsedInConnectionCreation();
    org.junit.Assert.assertFalse(kdcConfig.isUseUdp());
    org.junit.Assert.assertEquals(""test-host"", kdcConfig.getHostName());
    org.junit.Assert.assertEquals(11111, kdcConfig.getKdcPort());
    org.junit.Assert.assertEquals(10 * 1000, kdcConfig.getTimeout());
    EasyMock.verify(connection, exception);
}","testValidateTCP__Fail_GeneralErrorCode_NotTimeout()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"testValidateUDP__Successful","TRUE","6","assertTrue
assertEquals","{
    org.apache.directory.kerberos.client.KdcConnection connection = EasyMock.createStrictMock(org.apache.directory.kerberos.client.KdcConnection.class);
    EasyMock.expect(connection.getTgt(""noUser@noRealm"", ""noPassword"")).andReturn(null).once();
    EasyMock.replay(connection);
    org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification kdcConnVerifier = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification(configuration, connection);
    boolean result = kdcConnVerifier.isKdcReachable(""test-host"", 11111, org.apache.ambari.server.KdcServerConnectionVerification.ConnectionProtocol.UDP);
    org.junit.Assert.assertTrue(result);
    org.apache.directory.kerberos.client.KdcConfig kdcConfig = kdcConnVerifier.getConfigUsedInConnectionCreation();
    org.junit.Assert.assertTrue(kdcConfig.isUseUdp());
    org.junit.Assert.assertEquals(""test-host"", kdcConfig.getHostName());
    org.junit.Assert.assertEquals(11111, kdcConfig.getKdcPort());
    org.junit.Assert.assertEquals(10 * 1000, kdcConfig.getTimeout());
    EasyMock.verify(connection);
}","testValidateUDP__Successful()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"testValidateUDP__Successful2","TRUE","6","assertTrue
assertEquals","{
    org.apache.directory.shared.kerberos.messages.KrbError error = EasyMock.createNiceMock(org.apache.directory.shared.kerberos.messages.KrbError.class);
    EasyMock.expect(error.getErrorCode()).andReturn(ErrorType.KDC_ERR_C_PRINCIPAL_UNKNOWN).once();
    EasyMock.expect(error.getMessageType()).andReturn(KerberosMessageType.KRB_ERROR).once();
    org.apache.directory.shared.kerberos.exceptions.KerberosException exception = EasyMock.createNiceMock(org.apache.directory.shared.kerberos.exceptions.KerberosException.class);
    EasyMock.expect(exception.getError()).andReturn(error).once();
    org.apache.directory.kerberos.client.KdcConnection connection = EasyMock.createStrictMock(org.apache.directory.kerberos.client.KdcConnection.class);
    EasyMock.expect(connection.getTgt(""noUser@noRealm"", ""noPassword"")).andThrow(exception);
    EasyMock.replay(connection, exception, error);
    org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification kdcConnVerifier = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification(configuration, connection);
    boolean result = kdcConnVerifier.isKdcReachable(""test-host"", 11111, org.apache.ambari.server.KdcServerConnectionVerification.ConnectionProtocol.UDP);
    org.junit.Assert.assertTrue(result);
    org.apache.directory.kerberos.client.KdcConfig kdcConfig = kdcConnVerifier.getConfigUsedInConnectionCreation();
    org.junit.Assert.assertTrue(kdcConfig.isUseUdp());
    org.junit.Assert.assertEquals(""test-host"", kdcConfig.getHostName());
    org.junit.Assert.assertEquals(11111, kdcConfig.getKdcPort());
    org.junit.Assert.assertEquals(10 * 1000, kdcConfig.getTimeout());
    EasyMock.verify(connection, exception);
}","testValidateUDP__Successful2()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"testValidateUDP__Fail_UnknownException","TRUE","6","assertFalse
assertTrue
assertEquals","{
    org.apache.directory.kerberos.client.KdcConnection connection = EasyMock.createStrictMock(org.apache.directory.kerberos.client.KdcConnection.class);
    EasyMock.expect(connection.getTgt(""noUser@noRealm"", ""noPassword"")).andThrow(new java.lang.RuntimeException(""This is a really bad exception""));
    EasyMock.replay(connection);
    org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification kdcConnVerifier = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification(configuration, connection);
    boolean result = kdcConnVerifier.isKdcReachable(""test-host"", 11111, org.apache.ambari.server.KdcServerConnectionVerification.ConnectionProtocol.UDP);
    org.junit.Assert.assertFalse(result);
    org.apache.directory.kerberos.client.KdcConfig kdcConfig = kdcConnVerifier.getConfigUsedInConnectionCreation();
    org.junit.Assert.assertTrue(kdcConfig.isUseUdp());
    org.junit.Assert.assertEquals(""test-host"", kdcConfig.getHostName());
    org.junit.Assert.assertEquals(11111, kdcConfig.getKdcPort());
    org.junit.Assert.assertEquals(10 * 1000, kdcConfig.getTimeout());
    EasyMock.verify(connection);
}","testValidateUDP__Fail_UnknownException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"testValidateUDP__Fail_Timeout","TRUE","6","assertFalse
assertTrue
assertEquals","{
    int timeout = 1;
    org.apache.directory.kerberos.client.KdcConnection connection = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.BlockingKdcConnection(null);
    org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification kdcConnVerifier = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification(configuration, connection);
    kdcConnVerifier.setConnectionTimeout(timeout);
    boolean result = kdcConnVerifier.isKdcReachable(""test-host"", 11111, org.apache.ambari.server.KdcServerConnectionVerification.ConnectionProtocol.UDP);
    org.junit.Assert.assertFalse(result);
    org.apache.directory.kerberos.client.KdcConfig kdcConfig = kdcConnVerifier.getConfigUsedInConnectionCreation();
    org.junit.Assert.assertTrue(kdcConfig.isUseUdp());
    org.junit.Assert.assertEquals(""test-host"", kdcConfig.getHostName());
    org.junit.Assert.assertEquals(11111, kdcConfig.getKdcPort());
    org.junit.Assert.assertEquals(timeout * 1000, kdcConfig.getTimeout());
}","testValidateUDP__Fail_Timeout()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"testValidateUDP__Fail_TimeoutErrorCode","TRUE","6","assertFalse
assertTrue
assertEquals","{
    org.apache.directory.kerberos.client.KdcConnection connection = EasyMock.createStrictMock(org.apache.directory.kerberos.client.KdcConnection.class);
    EasyMock.expect(connection.getTgt(""noUser@noRealm"", ""noPassword"")).andThrow(new org.apache.directory.shared.kerberos.exceptions.KerberosException(org.apache.directory.shared.kerberos.exceptions.ErrorType.KRB_ERR_GENERIC, ""TimeOut occurred""));
    EasyMock.replay(connection);
    org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification kdcConnVerifier = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification(configuration, connection);
    boolean result = kdcConnVerifier.isKdcReachable(""test-host"", 11111, org.apache.ambari.server.KdcServerConnectionVerification.ConnectionProtocol.UDP);
    org.junit.Assert.assertFalse(result);
    org.apache.directory.kerberos.client.KdcConfig kdcConfig = kdcConnVerifier.getConfigUsedInConnectionCreation();
    org.junit.Assert.assertTrue(kdcConfig.isUseUdp());
    org.junit.Assert.assertEquals(""test-host"", kdcConfig.getHostName());
    org.junit.Assert.assertEquals(11111, kdcConfig.getKdcPort());
    org.junit.Assert.assertEquals(10 * 1000, kdcConfig.getTimeout());
    EasyMock.verify(connection);
}","testValidateUDP__Fail_TimeoutErrorCode()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"testValidateUDP__Fail_GeneralErrorCode_NotTimeout","TRUE","6","assertTrue
assertEquals","{
    org.apache.directory.shared.kerberos.messages.KrbError error = EasyMock.createNiceMock(org.apache.directory.shared.kerberos.messages.KrbError.class);
    EasyMock.expect(error.getErrorCode()).andReturn(ErrorType.KRB_ERR_GENERIC).once();
    EasyMock.expect(error.getMessageType()).andReturn(KerberosMessageType.KRB_ERROR).once();
    org.apache.directory.shared.kerberos.exceptions.KerberosException exception = EasyMock.createNiceMock(org.apache.directory.shared.kerberos.exceptions.KerberosException.class);
    EasyMock.expect(exception.getError()).andReturn(error).once();
    org.apache.directory.kerberos.client.KdcConnection connection = EasyMock.createStrictMock(org.apache.directory.kerberos.client.KdcConnection.class);
    EasyMock.expect(connection.getTgt(""noUser@noRealm"", ""noPassword"")).andThrow(exception);
    EasyMock.replay(connection, exception, error);
    org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification kdcConnVerifier = new org.apache.ambari.server.api.rest.KdcServerConnectionVerificationTest.TestKdcServerConnectionVerification(configuration, connection);
    boolean result = kdcConnVerifier.isKdcReachable(""test-host"", 11111, org.apache.ambari.server.KdcServerConnectionVerification.ConnectionProtocol.UDP);
    org.junit.Assert.assertTrue(result);
    org.apache.directory.kerberos.client.KdcConfig kdcConfig = kdcConnVerifier.getConfigUsedInConnectionCreation();
    org.junit.Assert.assertTrue(kdcConfig.isUseUdp());
    org.junit.Assert.assertEquals(""test-host"", kdcConfig.getHostName());
    org.junit.Assert.assertEquals(11111, kdcConfig.getKdcPort());
    org.junit.Assert.assertEquals(10 * 1000, kdcConfig.getTimeout());
    EasyMock.verify(connection, exception);
}","testValidateUDP__Fail_GeneralErrorCode_NotTimeout()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"testValidate__Live","TRUE","2","assertTrue","{
    org.apache.ambari.server.KdcServerConnectionVerification kdcConnVerifier = new org.apache.ambari.server.KdcServerConnectionVerification(configuration);
    boolean result = kdcConnVerifier.isKdcReachable(""c6501:88"");
    org.junit.Assert.assertTrue(result);
}","testValidate__Live()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/rest/KdcServerConnectionVerificationTest.java","b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
1be4be17bdc3c180b664def7238e17a2a432815b
7ef244158b3bf896c717c1c9697b1ff29937c1d6
9e2e2b0d7429ad73c249813d84204c8c6845a87e
86d6589382ac0467640c2f286c950877387fd41a
e56c82998d5cc537a3360a03309a1122ff119ea6"
"getRestartRequiredServicesNames","TRUE","2","assertEquals","{
    java.util.Set<java.lang.String> res = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getRestartRequiredServicesNames(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"");
    org.junit.Assert.assertEquals(1, res.size());
}","getRestartRequiredServicesNames()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetRackSensitiveServicesNames","TRUE","3","assertEquals","{
    java.util.Set<java.lang.String> res = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getRackSensitiveServicesNames(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"");
    org.junit.Assert.assertEquals(1, res.size());
    org.junit.Assert.assertEquals(""HDFS"", res.iterator().next());
}","testGetRackSensitiveServicesNames()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"getComponentsByService","TRUE","3","assertNotNull
assertTrue","{
    java.util.List<org.apache.ambari.server.state.ComponentInfo> components = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponentsByService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS);
    org.junit.Assert.assertNotNull(components);
    org.junit.Assert.assertTrue(components.size() > 0);
}","getComponentsByService()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"getLogs","TRUE","16","assertNotNull
assertTrue
assertEquals
assertFalse","{
    org.apache.ambari.server.state.ComponentInfo component;
    component = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponent(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.1.1"", org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS, ""NAMENODE"");
    org.junit.Assert.assertNotNull(component);
    org.junit.Assert.assertNotNull(component.getLogs());
    org.junit.Assert.assertTrue(component.getLogs().size() == 2);
    org.junit.Assert.assertEquals(component.getLogs().get(0).getLogId(), ""hdfs_namenode"");
    org.junit.Assert.assertEquals(component.getLogs().get(1).getLogId(), ""hdfs_audit"");
    org.junit.Assert.assertTrue(component.getLogs().get(0).isPrimary());
    org.junit.Assert.assertFalse(component.getLogs().get(1).isPrimary());
    component = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponent(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.1.1"", org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS, ""DATANODE"");
    org.junit.Assert.assertNotNull(component);
    org.junit.Assert.assertNotNull(component.getLogs());
    org.junit.Assert.assertTrue(component.getLogs().size() == 1);
    org.junit.Assert.assertEquals(component.getLogs().get(0).getLogId(), ""hdfs_datanode"");
    org.junit.Assert.assertTrue(component.getLogs().get(0).isPrimary());
    component = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponent(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.1.1"", org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS, ""HDFS_CLIENT"");
    org.junit.Assert.assertNotNull(component);
    org.junit.Assert.assertNotNull(component.getLogs());
    org.junit.Assert.assertTrue(component.getLogs().isEmpty());
}","getLogs()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"getRepository","TRUE","4","assertNotNull
assertFalse","{
    java.util.Map<java.lang.String, java.util.List<org.apache.ambari.server.state.RepositoryInfo>> repository = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getRepository(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP);
    org.junit.Assert.assertNotNull(repository);
    org.junit.Assert.assertFalse(repository.get(""centos5"").isEmpty());
    org.junit.Assert.assertFalse(repository.get(""centos6"").isEmpty());
}","getRepository()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetRepositoryDefault","TRUE","3","assertNotNull
assertTrue","{
    java.lang.String buildDir = tmpFolder.getRoot().getAbsolutePath();
    org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo = setupTempAmbariMetaInfo(buildDir);
    ambariMetaInfo.init();
    org.apache.ambari.server.api.services.AmbariMetaInfoTest.waitForAllReposToBeResolved(ambariMetaInfo);
    java.util.List<org.apache.ambari.server.state.RepositoryInfo> redhat6Repo = ambariMetaInfo.getRepositories(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.1.1"", ""redhat6"");
    org.junit.Assert.assertNotNull(redhat6Repo);
    for (org.apache.ambari.server.state.RepositoryInfo ri : redhat6Repo) {
        if (org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP.equals(ri.getRepoName())) {
            org.junit.Assert.assertTrue(ri.getBaseUrl().equals(ri.getDefaultBaseUrl()));
        }
    }
}","testGetRepositoryDefault()","Test
Ignore","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetRepositoryNoInternetDefault","TRUE","4","assertTrue
assertNotNull
assertEquals","{
    java.lang.String buildDir = tmpFolder.getRoot().getAbsolutePath();
    setupTempAmbariMetaInfoDirs(buildDir);
    java.io.File latestUrlFile = new java.io.File(buildDir, ""ambari-metaInfo/HDP/2.1.1/repos/hdp.json"");
    if (java.lang.System.getProperty(""os.name"").contains(""Windows"")) {
        latestUrlFile.deleteOnExit();
    } else {
        org.apache.commons.io.FileUtils.deleteQuietly(latestUrlFile);
        org.junit.Assert.assertTrue(!latestUrlFile.exists());
    }
    org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo = setupTempAmbariMetaInfoExistingDirs(buildDir);
    java.util.List<org.apache.ambari.server.state.RepositoryInfo> redhat6Repo = ambariMetaInfo.getRepositories(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.1.1"", ""redhat6"");
    org.junit.Assert.assertNotNull(redhat6Repo);
    for (org.apache.ambari.server.state.RepositoryInfo ri : redhat6Repo) {
        if (org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP.equals(ri.getRepoName())) {
            org.junit.Assert.assertEquals(ri.getBaseUrl(), ri.getDefaultBaseUrl());
        }
    }
}","testGetRepositoryNoInternetDefault()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"isSupportedStack","TRUE","3","assertTrue
assertFalse","{
    boolean supportedStack = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isSupportedStack(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP);
    org.junit.Assert.assertTrue(supportedStack);
    boolean notSupportedStack = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isSupportedStack(org.apache.ambari.server.api.services.AmbariMetaInfoTest.NON_EXT_VALUE, org.apache.ambari.server.api.services.AmbariMetaInfoTest.NON_EXT_VALUE);
    org.junit.Assert.assertFalse(notSupportedStack);
}","isSupportedStack()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"isValidService","TRUE","3","assertTrue
assertFalse","{
    boolean valid = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isValidService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS);
    org.junit.Assert.assertTrue(valid);
    boolean invalid = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isValidService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.NON_EXT_VALUE);
    org.junit.Assert.assertFalse(invalid);
}","isValidService()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"isServiceWithNoConfigs","TRUE","4","assertTrue
assertFalse","{
    org.junit.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isServiceWithNoConfigs(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""SYSTEMML""));
    org.junit.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isServiceWithNoConfigs(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"", ""SYSTEMML""));
    org.junit.Assert.assertFalse(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isServiceWithNoConfigs(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""HIVE""));
}","isServiceWithNoConfigs()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testServiceNameUsingComponentName","TRUE","2","assertEquals","{
    java.lang.String serviceName = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponentToService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_COMPONENT_NAME);
    org.junit.Assert.assertEquals(""HDFS"", serviceName);
}","testServiceNameUsingComponentName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"getServices","TRUE","5","assertTrue
assertNotNull
assertFalse","{
    java.util.Map<java.lang.String, org.apache.ambari.server.state.ServiceInfo> services = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getServices(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP);
    org.apache.ambari.server.api.services.AmbariMetaInfoTest.LOG.info(""Getting all the services "");
    for (java.util.Map.Entry<java.lang.String, org.apache.ambari.server.state.ServiceInfo> entry : services.entrySet()) {
        org.apache.ambari.server.api.services.AmbariMetaInfoTest.LOG.info(((""Service Name "" + entry.getKey()) + "" values "") + entry.getValue());
    }
    org.junit.Assert.assertTrue(services.containsKey(""HDFS""));
    org.junit.Assert.assertTrue(services.containsKey(""MAPREDUCE""));
    org.junit.Assert.assertNotNull(services);
    org.junit.Assert.assertFalse(services.keySet().size() == 0);
}","getServices()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"getServiceInfo","TRUE","2","assertNotNull","{
    org.apache.ambari.server.state.ServiceInfo si = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS);
    org.junit.Assert.assertNotNull(si);
}","getServiceInfo()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testConfigDependencies","TRUE","3","assertNotNull
assertTrue","{
    org.apache.ambari.server.state.ServiceInfo serviceInfo = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.EXT_STACK_NAME, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_MAPRED2);
    org.junit.Assert.assertNotNull(serviceInfo);
    org.junit.Assert.assertTrue(!serviceInfo.getConfigDependencies().isEmpty());
}","testConfigDependencies()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetRepos","TRUE","9","assertFalse
assertNull
assertEquals","{
    java.util.Map<java.lang.String, java.util.List<org.apache.ambari.server.state.RepositoryInfo>> repos = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getRepository(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP);
    java.util.Set<java.lang.String> centos5Cnt = new java.util.HashSet<>();
    java.util.Set<java.lang.String> centos6Cnt = new java.util.HashSet<>();
    java.util.Set<java.lang.String> redhat6cnt = new java.util.HashSet<>();
    java.util.Set<java.lang.String> redhat5cnt = new java.util.HashSet<>();
    for (java.util.List<org.apache.ambari.server.state.RepositoryInfo> vals : repos.values()) {
        for (org.apache.ambari.server.state.RepositoryInfo repo : vals) {
            org.apache.ambari.server.api.services.AmbariMetaInfoTest.LOG.debug(""Dumping repo info : {}"", repo);
            if (repo.getOsType().equals(""centos5"")) {
                centos5Cnt.add(repo.getRepoId());
            } else if (repo.getOsType().equals(""centos6"")) {
                centos6Cnt.add(repo.getRepoId());
            } else if (repo.getOsType().equals(""redhat6"")) {
                redhat6cnt.add(repo.getRepoId());
            } else if (repo.getOsType().equals(""redhat5"")) {
                redhat5cnt.add(repo.getRepoId());
            } else {
                org.junit.Assert.fail(""Found invalid os "" + repo.getOsType());
            }
            if (repo.getRepoId().equals(""epel"")) {
                org.junit.Assert.assertFalse(repo.getMirrorsList().isEmpty());
                org.junit.Assert.assertNull(repo.getBaseUrl());
            } else {
                org.junit.Assert.assertNull(repo.getMirrorsList());
                org.junit.Assert.assertFalse(repo.getBaseUrl().isEmpty());
            }
        }
    }
    org.junit.Assert.assertEquals(3, centos5Cnt.size());
    org.junit.Assert.assertEquals(3, redhat6cnt.size());
    org.junit.Assert.assertEquals(3, redhat5cnt.size());
    org.junit.Assert.assertEquals(3, centos6Cnt.size());
}","testGetRepos()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGlobalMapping","TRUE","3","assertTrue","{
    org.apache.ambari.server.state.ServiceInfo sinfo = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(""HDP"", ""0.2"", ""HDFS"");
    java.util.List<org.apache.ambari.server.state.PropertyInfo> pinfo = sinfo.getProperties();
    boolean checkforglobal = false;
    for (org.apache.ambari.server.state.PropertyInfo pinfol : pinfo) {
        if (""global.xml"".equals(pinfol.getFilename())) {
            checkforglobal = true;
        }
    }
    junit.framework.Assert.assertTrue(checkforglobal);
    sinfo = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(""HDP"", ""0.2"", ""MAPREDUCE"");
    boolean checkforhadoopheapsize = false;
    pinfo = sinfo.getProperties();
    for (org.apache.ambari.server.state.PropertyInfo pinfol : pinfo) {
        if (""global.xml"".equals(pinfol.getFilename())) {
            if (""hadoop_heapsize"".equals(pinfol.getName())) {
                checkforhadoopheapsize = true;
            }
        }
    }
    junit.framework.Assert.assertTrue(checkforhadoopheapsize);
}","testGlobalMapping()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testMetaInfoFileFilter","TRUE","4","assertNotNull
assertFalse","{
    java.lang.String buildDir = tmpFolder.getRoot().getAbsolutePath();
    java.io.File stackRoot = new java.io.File(""src/test/resources/stacks"");
    java.io.File version = new java.io.File(""src/test/resources/version"");
    if (java.lang.System.getProperty(""os.name"").contains(""Windows"")) {
        stackRoot = new java.io.File(java.lang.ClassLoader.getSystemClassLoader().getResource(""stacks"").getPath());
        version = new java.io.File(new java.io.File(java.lang.ClassLoader.getSystemClassLoader().getResource("""").getPath()).getParent(), ""version"");
    }
    java.io.File stackRootTmp = getStackRootTmp(buildDir);
    stackRootTmp.mkdir();
    org.apache.commons.io.FileUtils.copyDirectory(stackRoot, stackRootTmp);
    java.io.File f1;
    java.io.File f2;
    java.io.File f3;
    f1 = new java.io.File(stackRootTmp.getAbsolutePath() + ""/001.svn"");
    f1.createNewFile();
    f2 = new java.io.File(stackRootTmp.getAbsolutePath() + ""/abcd.svn/001.svn"");
    f2.mkdirs();
    f2.createNewFile();
    f3 = new java.io.File(stackRootTmp.getAbsolutePath() + ""/.svn"");
    if (!f3.exists()) {
        f3.createNewFile();
    }
    org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo = org.apache.ambari.server.api.services.AmbariMetaInfoTest.createAmbariMetaInfo(stackRootTmp, version, new java.io.File(""""));
    getServices();
    getComponentsByService();
    junit.framework.Assert.assertNotNull(ambariMetaInfo.getStack(""abcd.svn"", ""001.svn""));
    junit.framework.Assert.assertFalse(ambariMetaInfo.isSupportedStack("".svn"", """"));
    junit.framework.Assert.assertFalse(ambariMetaInfo.isSupportedStack("".svn"", """"));
}","testMetaInfoFileFilter()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetComponent","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.ComponentInfo component = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponent(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_COMPONENT_NAME);
    junit.framework.Assert.assertEquals(component.getName(), org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_COMPONENT_NAME);
    try {
        org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponent(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS, org.apache.ambari.server.api.services.AmbariMetaInfoTest.NON_EXT_VALUE);
    } catch (org.apache.ambari.server.StackAccessException e) {
    }
}","testGetComponent()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetRepositories","TRUE","2","assertEquals","{
    java.util.List<org.apache.ambari.server.state.RepositoryInfo> repositories = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getRepositories(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.OS_TYPE);
    junit.framework.Assert.assertEquals(repositories.size(), org.apache.ambari.server.api.services.AmbariMetaInfoTest.REPOS_CNT);
}","testGetRepositories()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetRepository","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.RepositoryInfo repository = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getRepository(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.OS_TYPE, org.apache.ambari.server.api.services.AmbariMetaInfoTest.REPO_ID);
    junit.framework.Assert.assertEquals(repository.getRepoId(), org.apache.ambari.server.api.services.AmbariMetaInfoTest.REPO_ID);
    try {
        org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getRepository(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.OS_TYPE, org.apache.ambari.server.api.services.AmbariMetaInfoTest.NON_EXT_VALUE);
    } catch (org.apache.ambari.server.StackAccessException e) {
    }
}","testGetRepository()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetService","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS);
    junit.framework.Assert.assertEquals(service.getName(), org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS);
    try {
        org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.NON_EXT_VALUE);
    } catch (org.apache.ambari.server.StackAccessException e) {
    }
}","testGetService()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetStacks","FALSE","0","None","{
}","testGetStacks()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetStackInfo","TRUE","3","assertEquals","{
    org.apache.ambari.server.state.StackInfo stackInfo = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getStack(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP);
    junit.framework.Assert.assertEquals(stackInfo.getName(), org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP);
    junit.framework.Assert.assertEquals(stackInfo.getVersion(), org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP);
    try {
        org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getStack(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.NON_EXT_VALUE);
    } catch (org.apache.ambari.server.StackAccessException e) {
    }
}","testGetStackInfo()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetStackParentVersions","TRUE","5","assertEquals","{
    java.util.List<java.lang.String> parents = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getStackParentVersions(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"");
    junit.framework.Assert.assertEquals(3, parents.size());
    junit.framework.Assert.assertEquals(""2.0.7"", parents.get(0));
    junit.framework.Assert.assertEquals(""2.0.6"", parents.get(1));
    junit.framework.Assert.assertEquals(""2.0.5"", parents.get(2));
}","testGetStackParentVersions()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetProperties","TRUE","2","assertEquals","{
    java.util.Set<org.apache.ambari.server.state.PropertyInfo> properties = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getServiceProperties(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS);
    junit.framework.Assert.assertEquals(properties.size(), org.apache.ambari.server.api.services.AmbariMetaInfoTest.PROPERTIES_CNT);
}","testGetProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetPropertiesNoName","TRUE","4","assertEquals","{
    java.util.Set<org.apache.ambari.server.state.PropertyInfo> properties = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getPropertiesByName(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS, org.apache.ambari.server.api.services.AmbariMetaInfoTest.PROPERTY_NAME);
    junit.framework.Assert.assertEquals(1, properties.size());
    for (org.apache.ambari.server.state.PropertyInfo propertyInfo : properties) {
        junit.framework.Assert.assertEquals(org.apache.ambari.server.api.services.AmbariMetaInfoTest.PROPERTY_NAME, propertyInfo.getName());
        junit.framework.Assert.assertEquals(org.apache.ambari.server.api.services.AmbariMetaInfoTest.FILE_NAME, propertyInfo.getFilename());
    }
    try {
        org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getPropertiesByName(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS, org.apache.ambari.server.api.services.AmbariMetaInfoTest.NON_EXT_VALUE);
    } catch (org.apache.ambari.server.StackAccessException e) {
    }
}","testGetPropertiesNoName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetPropertiesSharedName","TRUE","4","assertEquals
assertTrue","{
    java.util.Set<org.apache.ambari.server.state.PropertyInfo> properties = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getPropertiesByName(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP_02, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SHARED_PROPERTY_NAME);
    junit.framework.Assert.assertEquals(2, properties.size());
    for (org.apache.ambari.server.state.PropertyInfo propertyInfo : properties) {
        junit.framework.Assert.assertEquals(org.apache.ambari.server.api.services.AmbariMetaInfoTest.SHARED_PROPERTY_NAME, propertyInfo.getName());
        junit.framework.Assert.assertTrue(propertyInfo.getFilename().equals(org.apache.ambari.server.api.services.AmbariMetaInfoTest.HADOOP_ENV_FILE_NAME) || propertyInfo.getFilename().equals(org.apache.ambari.server.api.services.AmbariMetaInfoTest.HDFS_LOG4J_FILE_NAME));
    }
}","testGetPropertiesSharedName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetOperatingSystems","TRUE","2","assertEquals","{
    java.util.Set<org.apache.ambari.server.state.OperatingSystemInfo> operatingSystems = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getOperatingSystems(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP);
    junit.framework.Assert.assertEquals(org.apache.ambari.server.api.services.AmbariMetaInfoTest.OS_CNT, operatingSystems.size());
}","testGetOperatingSystems()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetOperatingSystem","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.OperatingSystemInfo operatingSystem = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getOperatingSystem(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.OS_TYPE);
    junit.framework.Assert.assertEquals(operatingSystem.getOsType(), org.apache.ambari.server.api.services.AmbariMetaInfoTest.OS_TYPE);
    try {
        org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getOperatingSystem(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.NON_EXT_VALUE);
    } catch (org.apache.ambari.server.StackAccessException e) {
    }
}","testGetOperatingSystem()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"isOsSupported","TRUE","14","assertTrue","{
    junit.framework.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isOsSupported(""redhat5""));
    junit.framework.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isOsSupported(""centos5""));
    junit.framework.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isOsSupported(""oraclelinux5""));
    junit.framework.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isOsSupported(""redhat6""));
    junit.framework.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isOsSupported(""centos6""));
    junit.framework.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isOsSupported(""oraclelinux6""));
    junit.framework.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isOsSupported(""suse11""));
    junit.framework.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isOsSupported(""sles11""));
    junit.framework.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isOsSupported(""ubuntu12""));
    junit.framework.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isOsSupported(""win2008server6""));
    junit.framework.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isOsSupported(""win2008serverr26""));
    junit.framework.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isOsSupported(""win2012server6""));
    junit.framework.Assert.assertTrue(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.isOsSupported(""win2012serverr26""));
}","isOsSupported()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testExtendedStackDefinition","TRUE","51","assertTrue
assertFalse
assertNull
assertNotNull
assertEquals","{
    org.apache.ambari.server.state.StackInfo stackInfo = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getStack(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.EXT_STACK_NAME);
    junit.framework.Assert.assertTrue(stackInfo != null);
    java.util.Collection<org.apache.ambari.server.state.ServiceInfo> serviceInfos = stackInfo.getServices();
    junit.framework.Assert.assertFalse(serviceInfos.isEmpty());
    junit.framework.Assert.assertTrue(serviceInfos.size() > 1);
    org.apache.ambari.server.state.ServiceInfo deletedService = null;
    org.apache.ambari.server.state.ServiceInfo redefinedService = null;
    for (org.apache.ambari.server.state.ServiceInfo serviceInfo : serviceInfos) {
        if (serviceInfo.getName().equals(""SQOOP"")) {
            deletedService = serviceInfo;
        }
        if (serviceInfo.getName().equals(""YARN"")) {
            redefinedService = serviceInfo;
        }
    }
    junit.framework.Assert.assertNull(""SQOOP is a deleted service, should not be a part of "" + ""the extended stack."", deletedService);
    junit.framework.Assert.assertNotNull(redefinedService);
    junit.framework.Assert.assertEquals(""YARN service is expected to be defined with 4 active"" + "" components."", 4, redefinedService.getComponents().size());
    junit.framework.Assert.assertEquals(""TEZ is expected to be a part of extended stack "" + ""definition"", ""TEZ"", redefinedService.getClientComponent().getName());
    junit.framework.Assert.assertFalse(""YARN CLIENT is a deleted component."", redefinedService.getClientComponent().getName().equals(""YARN_CLIENT""));
    junit.framework.Assert.assertNotNull(redefinedService.getProperties());
    junit.framework.Assert.assertTrue(redefinedService.getProperties().size() > 4);
    org.apache.ambari.server.state.PropertyInfo deleteProperty1 = null;
    org.apache.ambari.server.state.PropertyInfo deleteProperty2 = null;
    org.apache.ambari.server.state.PropertyInfo redefinedProperty1 = null;
    org.apache.ambari.server.state.PropertyInfo redefinedProperty2 = null;
    org.apache.ambari.server.state.PropertyInfo redefinedProperty3 = null;
    org.apache.ambari.server.state.PropertyInfo inheritedProperty = null;
    org.apache.ambari.server.state.PropertyInfo newProperty = null;
    org.apache.ambari.server.state.PropertyInfo newEnhancedProperty = null;
    org.apache.ambari.server.state.PropertyInfo propertyWithExtraValueAttributes = null;
    org.apache.ambari.server.state.PropertyInfo originalProperty = null;
    org.apache.ambari.server.state.PropertyDependencyInfo propertyDependencyInfo = new org.apache.ambari.server.state.PropertyDependencyInfo(""yarn-site"", ""new-enhanced-yarn-property"");
    for (org.apache.ambari.server.state.PropertyInfo propertyInfo : redefinedService.getProperties()) {
        if (propertyInfo.getName().equals(""yarn.resourcemanager.resource-tracker.address"")) {
            deleteProperty1 = propertyInfo;
        } else if (propertyInfo.getName().equals(""yarn.resourcemanager.scheduler.address"")) {
            deleteProperty2 = propertyInfo;
        } else if (propertyInfo.getName().equals(""yarn.resourcemanager.address"")) {
            redefinedProperty1 = propertyInfo;
        } else if (propertyInfo.getName().equals(""yarn.resourcemanager.admin.address"")) {
            redefinedProperty2 = propertyInfo;
        } else if (propertyInfo.getName().equals(""yarn.nodemanager.health-checker.interval-ms"")) {
            redefinedProperty3 = propertyInfo;
        } else if (propertyInfo.getName().equals(""yarn.nodemanager.address"")) {
            inheritedProperty = propertyInfo;
        } else if (propertyInfo.getName().equals(""new-yarn-property"")) {
            newProperty = propertyInfo;
        } else if (propertyInfo.getName().equals(""new-enhanced-yarn-property"")) {
            newEnhancedProperty = propertyInfo;
        } else if (propertyInfo.getName().equals(""yarn.nodemanager.aux-services"")) {
            originalProperty = propertyInfo;
        } else if (propertyInfo.getName().equals(""property.with.extra.value.attributes"")) {
            propertyWithExtraValueAttributes = propertyInfo;
        }
    }
    junit.framework.Assert.assertNull(deleteProperty1);
    junit.framework.Assert.assertNull(deleteProperty2);
    junit.framework.Assert.assertNotNull(redefinedProperty1);
    junit.framework.Assert.assertNotNull(redefinedProperty2);
    junit.framework.Assert.assertNotNull(""yarn.nodemanager.address expected to be inherited "" + ""from parent"", inheritedProperty);
    junit.framework.Assert.assertEquals(""localhost:100009"", redefinedProperty1.getValue());
    junit.framework.Assert.assertNotNull(redefinedProperty3);
    junit.framework.Assert.assertEquals(""135000"", redefinedProperty3.getValue());
    junit.framework.Assert.assertEquals("""", redefinedProperty2.getValue());
    junit.framework.Assert.assertNotNull(newProperty);
    junit.framework.Assert.assertEquals(""some-value"", newProperty.getValue());
    junit.framework.Assert.assertEquals(""some description."", newProperty.getDescription());
    junit.framework.Assert.assertEquals(""yarn-site.xml"", newProperty.getFilename());
    junit.framework.Assert.assertEquals(1, newProperty.getDependedByProperties().size());
    junit.framework.Assert.assertTrue(newProperty.getDependedByProperties().contains(propertyDependencyInfo));
    junit.framework.Assert.assertNotNull(newEnhancedProperty);
    junit.framework.Assert.assertEquals(""1024"", newEnhancedProperty.getValue());
    junit.framework.Assert.assertEquals(""some enhanced description."", newEnhancedProperty.getDescription());
    junit.framework.Assert.assertEquals(""yarn-site.xml"", newEnhancedProperty.getFilename());
    junit.framework.Assert.assertEquals(2, newEnhancedProperty.getDependsOnProperties().size());
    junit.framework.Assert.assertTrue(newEnhancedProperty.getDependsOnProperties().contains(new org.apache.ambari.server.state.PropertyDependencyInfo(""yarn-site"", ""new-yarn-property"")));
    junit.framework.Assert.assertTrue(newEnhancedProperty.getDependsOnProperties().contains(new org.apache.ambari.server.state.PropertyDependencyInfo(""global"", ""yarn_heapsize"")));
    junit.framework.Assert.assertEquals(""MB"", newEnhancedProperty.getPropertyValueAttributes().getUnit());
    junit.framework.Assert.assertEquals(""int"", newEnhancedProperty.getPropertyValueAttributes().getType());
    junit.framework.Assert.assertEquals(""512"", newEnhancedProperty.getPropertyValueAttributes().getMinimum());
    junit.framework.Assert.assertEquals(""15360"", newEnhancedProperty.getPropertyValueAttributes().getMaximum());
    junit.framework.Assert.assertEquals(""256"", newEnhancedProperty.getPropertyValueAttributes().getIncrementStep());
    junit.framework.Assert.assertNull(newEnhancedProperty.getPropertyValueAttributes().getEntries());
    junit.framework.Assert.assertNull(newEnhancedProperty.getPropertyValueAttributes().getEntriesEditable());
    junit.framework.Assert.assertTrue(propertyWithExtraValueAttributes.getPropertyValueAttributes().getEmptyValueValid());
    junit.framework.Assert.assertTrue(propertyWithExtraValueAttributes.getPropertyValueAttributes().getVisible());
    junit.framework.Assert.assertTrue(propertyWithExtraValueAttributes.getPropertyValueAttributes().getReadOnly());
    junit.framework.Assert.assertEquals(java.lang.Boolean.FALSE, propertyWithExtraValueAttributes.getPropertyValueAttributes().getEditableOnlyAtInstall());
    junit.framework.Assert.assertEquals(java.lang.Boolean.FALSE, propertyWithExtraValueAttributes.getPropertyValueAttributes().getOverridable());
    junit.framework.Assert.assertEquals(java.lang.Boolean.FALSE, propertyWithExtraValueAttributes.getPropertyValueAttributes().getShowPropertyName());
    junit.framework.Assert.assertNotNull(originalProperty);
    junit.framework.Assert.assertEquals(""mapreduce.shuffle"", originalProperty.getValue());
    junit.framework.Assert.assertEquals(""Auxilliary services of NodeManager"", originalProperty.getDescription());
    junit.framework.Assert.assertEquals(6, redefinedService.getConfigDependencies().size());
    junit.framework.Assert.assertEquals(7, redefinedService.getConfigDependenciesWithComponents().size());
}","testExtendedStackDefinition()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testPropertyCount","TRUE","2","assertEquals","{
    java.util.Set<org.apache.ambari.server.state.PropertyInfo> properties = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getServiceProperties(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_VERSION_HDP_02, org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_NAME_HDFS);
    junit.framework.Assert.assertEquals(103, properties.size());
}","testPropertyCount()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testBadStack","TRUE","4","assertEquals","{
    java.io.File stackRoot = new java.io.File(""src/test/resources/bad-stacks"");
    java.io.File version = new java.io.File(""src/test/resources/version"");
    if (java.lang.System.getProperty(""os.name"").contains(""Windows"")) {
        stackRoot = new java.io.File(java.lang.ClassLoader.getSystemClassLoader().getResource(""bad-stacks"").getPath());
        version = new java.io.File(new java.io.File(java.lang.ClassLoader.getSystemClassLoader().getResource("""").getPath()).getParent(), ""version"");
    }
    org.apache.ambari.server.api.services.AmbariMetaInfoTest.LOG.info(""Stacks file "" + stackRoot.getAbsolutePath());
    org.apache.ambari.server.api.services.AmbariMetaInfoTest.TestAmbariMetaInfo ambariMetaInfo = org.apache.ambari.server.api.services.AmbariMetaInfoTest.createAmbariMetaInfo(stackRoot, version, new java.io.File(""""));
    junit.framework.Assert.assertEquals(1, ambariMetaInfo.getStackManager().getStacks().size());
    junit.framework.Assert.assertEquals(false, ambariMetaInfo.getStackManager().getStack(""HDP"", ""0.1"").isValid());
    junit.framework.Assert.assertEquals(2, ambariMetaInfo.getStackManager().getStack(""HDP"", ""0.1"").getErrors().size());
}","testBadStack()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testMetricsJson","TRUE","10","assertNotNull
assertNull
assertTrue","{
    org.apache.ambari.server.state.ServiceInfo svc = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.5"", ""HDFS"");
    junit.framework.Assert.assertNotNull(svc);
    junit.framework.Assert.assertNotNull(svc.getMetricsFile());
    svc = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.6"", ""HDFS"");
    junit.framework.Assert.assertNotNull(svc);
    junit.framework.Assert.assertNotNull(svc.getMetricsFile());
    java.util.List<org.apache.ambari.server.state.stack.MetricDefinition> list = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getMetrics(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.5"", ""HDFS"", org.apache.ambari.server.api.services.AmbariMetaInfoTest.SERVICE_COMPONENT_NAME, org.apache.ambari.server.controller.spi.Resource.Type.Component.name());
    junit.framework.Assert.assertNotNull(list);
    org.apache.ambari.server.api.services.AmbariMetaInfoTest.checkNoAggregatedFunctionsForJmx(list);
    list = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getMetrics(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.5"", ""HDFS"", ""DATANODE"", org.apache.ambari.server.controller.spi.Resource.Type.Component.name());
    junit.framework.Assert.assertNull(list);
    java.util.List<org.apache.ambari.server.state.stack.MetricDefinition> list0 = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getMetrics(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.5"", ""HDFS"", ""DATANODE"", org.apache.ambari.server.controller.spi.Resource.Type.Component.name());
    junit.framework.Assert.assertNull(list0);
    junit.framework.Assert.assertTrue(""Expecting subsequent calls to use a cached value for the definition"", list == list0);
    list = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getMetrics(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.6"", ""HDFS"", ""DATANODE"", org.apache.ambari.server.controller.spi.Resource.Type.Component.name());
    junit.framework.Assert.assertNull(list);
}","testMetricsJson()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testKerberosJson","TRUE","10","assertNotNull
assertTrue
assertEquals
assertNull","{
    org.apache.ambari.server.state.ServiceInfo svc;
    svc = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""HDFS"");
    junit.framework.Assert.assertNotNull(svc);
    java.io.File kerberosDescriptorFile1 = svc.getKerberosDescriptorFile();
    junit.framework.Assert.assertNotNull(kerberosDescriptorFile1);
    junit.framework.Assert.assertTrue(kerberosDescriptorFile1.exists());
    svc = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.1.1"", ""HDFS"");
    junit.framework.Assert.assertNotNull(svc);
    java.io.File kerberosDescriptorFile2 = svc.getKerberosDescriptorFile();
    junit.framework.Assert.assertNotNull(kerberosDescriptorFile1);
    junit.framework.Assert.assertTrue(kerberosDescriptorFile1.exists());
    junit.framework.Assert.assertEquals(kerberosDescriptorFile1, kerberosDescriptorFile2);
    svc = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"", ""HDFS"");
    junit.framework.Assert.assertNotNull(svc);
    java.io.File kerberosDescriptorFile3 = svc.getKerberosDescriptorFile();
    junit.framework.Assert.assertNull(kerberosDescriptorFile3);
}","testKerberosJson()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGanglia134Dependencies","TRUE","8","assertEquals
assertNull
assertTrue","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""1.3.4"", ""GANGLIA"");
    java.util.List<org.apache.ambari.server.state.ComponentInfo> componentList = service.getComponents();
    junit.framework.Assert.assertEquals(2, componentList.size());
    for (org.apache.ambari.server.state.ComponentInfo component : componentList) {
        java.lang.String name = component.getName();
        if (name.equals(""GANGLIA_SERVER"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""1"", component.getCardinality());
        }
        if (name.equals(""GANGLIA_MONITOR"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            junit.framework.Assert.assertTrue(component.getAutoDeploy().isEnabled());
            junit.framework.Assert.assertEquals(""ALL"", component.getCardinality());
        }
    }
}","testGanglia134Dependencies()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testHBase134Dependencies","TRUE","16","assertEquals
assertNull","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""1.3.4"", ""HBASE"");
    java.util.List<org.apache.ambari.server.state.ComponentInfo> componentList = service.getComponents();
    junit.framework.Assert.assertEquals(3, componentList.size());
    for (org.apache.ambari.server.state.ComponentInfo component : componentList) {
        java.lang.String name = component.getName();
        if (name.equals(""HBASE_MASTER"")) {
            java.util.List<org.apache.ambari.server.state.DependencyInfo> dependencyList = component.getDependencies();
            junit.framework.Assert.assertEquals(2, dependencyList.size());
            for (org.apache.ambari.server.state.DependencyInfo dependency : dependencyList) {
                if (dependency.getName().equals(""HDFS/HDFS_CLIENT"")) {
                    junit.framework.Assert.assertEquals(""host"", dependency.getScope());
                    junit.framework.Assert.assertEquals(true, dependency.getAutoDeploy().isEnabled());
                } else if (dependency.getName().equals(""ZOOKEEPER/ZOOKEEPER_SERVER"")) {
                    junit.framework.Assert.assertEquals(""cluster"", dependency.getScope());
                    org.apache.ambari.server.state.AutoDeployInfo autoDeploy = dependency.getAutoDeploy();
                    junit.framework.Assert.assertEquals(true, autoDeploy.isEnabled());
                    junit.framework.Assert.assertEquals(""HBASE/HBASE_MASTER"", autoDeploy.getCoLocate());
                } else {
                    junit.framework.Assert.fail(""Unexpected dependency"");
                }
            }
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""1"", component.getCardinality());
        }
        if (name.equals(""HBASE_REGIONSERVER"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""1+"", component.getCardinality());
        }
        if (name.equals(""HBASE_CLIENT"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""0+"", component.getCardinality());
        }
    }
}","testHBase134Dependencies()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testHDFS134Dependencies","TRUE","14","assertEquals
assertNull","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""1.3.4"", ""HDFS"");
    java.util.List<org.apache.ambari.server.state.ComponentInfo> componentList = service.getComponents();
    junit.framework.Assert.assertEquals(4, componentList.size());
    for (org.apache.ambari.server.state.ComponentInfo component : componentList) {
        java.lang.String name = component.getName();
        if (name.equals(""NAMENODE"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""1"", component.getCardinality());
        }
        if (name.equals(""DATANODE"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""1+"", component.getCardinality());
        }
        if (name.equals(""SECONDARY_NAMENODE"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""1"", component.getCardinality());
        }
        if (name.equals(""HDFS_CLIENT"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""0+"", component.getCardinality());
        }
    }
}","testHDFS134Dependencies()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testHive134Dependencies","TRUE","20","assertEquals
assertTrue
assertNull","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""1.3.4"", ""HIVE"");
    java.util.List<org.apache.ambari.server.state.ComponentInfo> componentList = service.getComponents();
    junit.framework.Assert.assertEquals(4, componentList.size());
    for (org.apache.ambari.server.state.ComponentInfo component : componentList) {
        java.lang.String name = component.getName();
        if (name.equals(""HIVE_METASTORE"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            org.apache.ambari.server.state.AutoDeployInfo autoDeploy = component.getAutoDeploy();
            junit.framework.Assert.assertTrue(autoDeploy.isEnabled());
            junit.framework.Assert.assertEquals(""HIVE/HIVE_SERVER"", autoDeploy.getCoLocate());
            junit.framework.Assert.assertEquals(""1"", component.getCardinality());
        }
        if (name.equals(""HIVE_SERVER"")) {
            java.util.List<org.apache.ambari.server.state.DependencyInfo> dependencyList = component.getDependencies();
            junit.framework.Assert.assertEquals(1, dependencyList.size());
            org.apache.ambari.server.state.DependencyInfo dependency = dependencyList.get(0);
            junit.framework.Assert.assertEquals(""ZOOKEEPER/ZOOKEEPER_SERVER"", dependency.getName());
            junit.framework.Assert.assertEquals(""cluster"", dependency.getScope());
            org.apache.ambari.server.state.AutoDeployInfo autoDeploy = dependency.getAutoDeploy();
            junit.framework.Assert.assertTrue(autoDeploy.isEnabled());
            junit.framework.Assert.assertEquals(""HIVE/HIVE_SERVER"", autoDeploy.getCoLocate());
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""1"", component.getCardinality());
        }
        if (name.equals(""MYSQL_SERVER"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            org.apache.ambari.server.state.AutoDeployInfo autoDeploy = component.getAutoDeploy();
            junit.framework.Assert.assertTrue(autoDeploy.isEnabled());
            junit.framework.Assert.assertEquals(""HIVE/HIVE_SERVER"", autoDeploy.getCoLocate());
            junit.framework.Assert.assertEquals(""1"", component.getCardinality());
        }
        if (name.equals(""HIVE_CLIENT"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""0+"", component.getCardinality());
        }
    }
}","testHive134Dependencies()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testHue134Dependencies","TRUE","6","assertEquals
assertNull","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""1.3.4"", ""HUE"");
    java.util.List<org.apache.ambari.server.state.ComponentInfo> componentList = service.getComponents();
    junit.framework.Assert.assertEquals(1, componentList.size());
    org.apache.ambari.server.state.ComponentInfo component = componentList.get(0);
    junit.framework.Assert.assertEquals(""HUE_SERVER"", component.getName());
    junit.framework.Assert.assertEquals(0, component.getDependencies().size());
    junit.framework.Assert.assertNull(component.getAutoDeploy());
    junit.framework.Assert.assertEquals(""1"", component.getCardinality());
}","testHue134Dependencies()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testMapReduce134Dependencies","TRUE","15","assertEquals
assertNull
assertTrue","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""1.3.4"", ""MAPREDUCE"");
    java.util.List<org.apache.ambari.server.state.ComponentInfo> componentList = service.getComponents();
    junit.framework.Assert.assertEquals(4, componentList.size());
    for (org.apache.ambari.server.state.ComponentInfo component : componentList) {
        java.lang.String name = component.getName();
        if (name.equals(""JOBTRACKER"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""1"", component.getCardinality());
        }
        if (name.equals(""TASKTRACKER"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""1+"", component.getCardinality());
        }
        if (name.equals(""HISTORYSERVER"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            org.apache.ambari.server.state.AutoDeployInfo autoDeploy = component.getAutoDeploy();
            junit.framework.Assert.assertTrue(autoDeploy.isEnabled());
            junit.framework.Assert.assertEquals(""MAPREDUCE/JOBTRACKER"", autoDeploy.getCoLocate());
            junit.framework.Assert.assertEquals(""1"", component.getCardinality());
        }
        if (name.equals(""MAPREDUCE_CLIENT"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""0+"", component.getCardinality());
        }
    }
}","testMapReduce134Dependencies()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testOozie134Dependencies","TRUE","16","assertEquals
assertNull","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""1.3.4"", ""OOZIE"");
    java.util.List<org.apache.ambari.server.state.ComponentInfo> componentList = service.getComponents();
    junit.framework.Assert.assertEquals(2, componentList.size());
    for (org.apache.ambari.server.state.ComponentInfo component : componentList) {
        java.lang.String name = component.getName();
        if (name.equals(""OOZIE_SERVER"")) {
            java.util.List<org.apache.ambari.server.state.DependencyInfo> dependencyList = component.getDependencies();
            junit.framework.Assert.assertEquals(2, dependencyList.size());
            for (org.apache.ambari.server.state.DependencyInfo dependency : dependencyList) {
                if (dependency.getName().equals(""HDFS/HDFS_CLIENT"")) {
                    junit.framework.Assert.assertEquals(""host"", dependency.getScope());
                    junit.framework.Assert.assertEquals(true, dependency.getAutoDeploy().isEnabled());
                } else if (dependency.getName().equals(""MAPREDUCE/MAPREDUCE_CLIENT"")) {
                    junit.framework.Assert.assertEquals(""host"", dependency.getScope());
                    junit.framework.Assert.assertEquals(true, dependency.getAutoDeploy().isEnabled());
                } else {
                    junit.framework.Assert.fail(""Unexpected dependency"");
                }
            }
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""1"", component.getCardinality());
        }
        if (name.equals(""OOZIE_CLIENT"")) {
            java.util.List<org.apache.ambari.server.state.DependencyInfo> dependencyList = component.getDependencies();
            junit.framework.Assert.assertEquals(2, dependencyList.size());
            for (org.apache.ambari.server.state.DependencyInfo dependency : dependencyList) {
                if (dependency.getName().equals(""HDFS/HDFS_CLIENT"")) {
                    junit.framework.Assert.assertEquals(""host"", dependency.getScope());
                    junit.framework.Assert.assertEquals(true, dependency.getAutoDeploy().isEnabled());
                } else if (dependency.getName().equals(""MAPREDUCE/MAPREDUCE_CLIENT"")) {
                    junit.framework.Assert.assertEquals(""host"", dependency.getScope());
                    junit.framework.Assert.assertEquals(true, dependency.getAutoDeploy().isEnabled());
                } else {
                    junit.framework.Assert.fail(""Unexpected dependency"");
                }
            }
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""0+"", component.getCardinality());
        }
    }
}","testOozie134Dependencies()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testPig134Dependencies","TRUE","6","assertEquals
assertNull","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""1.3.4"", ""PIG"");
    java.util.List<org.apache.ambari.server.state.ComponentInfo> componentList = service.getComponents();
    junit.framework.Assert.assertEquals(1, componentList.size());
    org.apache.ambari.server.state.ComponentInfo component = componentList.get(0);
    junit.framework.Assert.assertEquals(""PIG"", component.getName());
    junit.framework.Assert.assertEquals(0, component.getDependencies().size());
    junit.framework.Assert.assertNull(component.getAutoDeploy());
    junit.framework.Assert.assertEquals(""0+"", component.getCardinality());
}","testPig134Dependencies()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testSqoop134Dependencies","TRUE","10","assertEquals
assertNull","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""1.3.4"", ""SQOOP"");
    java.util.List<org.apache.ambari.server.state.ComponentInfo> componentList = service.getComponents();
    junit.framework.Assert.assertEquals(1, componentList.size());
    org.apache.ambari.server.state.ComponentInfo component = componentList.get(0);
    junit.framework.Assert.assertEquals(""SQOOP"", component.getName());
    java.util.List<org.apache.ambari.server.state.DependencyInfo> dependencyList = component.getDependencies();
    junit.framework.Assert.assertEquals(2, dependencyList.size());
    for (org.apache.ambari.server.state.DependencyInfo dependency : dependencyList) {
        if (dependency.getName().equals(""HDFS/HDFS_CLIENT"")) {
            junit.framework.Assert.assertEquals(""host"", dependency.getScope());
            junit.framework.Assert.assertEquals(true, dependency.getAutoDeploy().isEnabled());
        } else if (dependency.getName().equals(""MAPREDUCE/MAPREDUCE_CLIENT"")) {
            junit.framework.Assert.assertEquals(""host"", dependency.getScope());
            junit.framework.Assert.assertEquals(true, dependency.getAutoDeploy().isEnabled());
        } else {
            junit.framework.Assert.fail(""Unexpected dependency"");
        }
    }
    junit.framework.Assert.assertNull(component.getAutoDeploy());
    junit.framework.Assert.assertEquals(""0+"", component.getCardinality());
}","testSqoop134Dependencies()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testWebHCat134Dependencies","TRUE","15","assertEquals
assertNull","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""1.3.4"", ""WEBHCAT"");
    java.util.List<org.apache.ambari.server.state.ComponentInfo> componentList = service.getComponents();
    junit.framework.Assert.assertEquals(1, componentList.size());
    org.apache.ambari.server.state.ComponentInfo component = componentList.get(0);
    junit.framework.Assert.assertEquals(""WEBHCAT_SERVER"", component.getName());
    java.util.List<org.apache.ambari.server.state.DependencyInfo> dependencyList = component.getDependencies();
    junit.framework.Assert.assertEquals(4, dependencyList.size());
    for (org.apache.ambari.server.state.DependencyInfo dependency : dependencyList) {
        if (dependency.getName().equals(""HDFS/HDFS_CLIENT"")) {
            junit.framework.Assert.assertEquals(""host"", dependency.getScope());
            junit.framework.Assert.assertEquals(true, dependency.getAutoDeploy().isEnabled());
        } else if (dependency.getName().equals(""MAPREDUCE/MAPREDUCE_CLIENT"")) {
            junit.framework.Assert.assertEquals(""host"", dependency.getScope());
            junit.framework.Assert.assertEquals(true, dependency.getAutoDeploy().isEnabled());
        } else if (dependency.getName().equals(""ZOOKEEPER/ZOOKEEPER_SERVER"")) {
            junit.framework.Assert.assertEquals(""cluster"", dependency.getScope());
            org.apache.ambari.server.state.AutoDeployInfo autoDeploy = dependency.getAutoDeploy();
            junit.framework.Assert.assertEquals(true, autoDeploy.isEnabled());
            junit.framework.Assert.assertEquals(""WEBHCAT/WEBHCAT_SERVER"", autoDeploy.getCoLocate());
        } else if (dependency.getName().equals(""ZOOKEEPER/ZOOKEEPER_CLIENT"")) {
            junit.framework.Assert.assertEquals(""host"", dependency.getScope());
            junit.framework.Assert.assertEquals(true, dependency.getAutoDeploy().isEnabled());
        } else {
            junit.framework.Assert.fail(""Unexpected dependency"");
        }
    }
    junit.framework.Assert.assertNull(component.getAutoDeploy());
    junit.framework.Assert.assertEquals(""1"", component.getCardinality());
}","testWebHCat134Dependencies()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testZooKeeper134Dependencies","TRUE","8","assertEquals
assertNull","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""1.3.4"", ""ZOOKEEPER"");
    java.util.List<org.apache.ambari.server.state.ComponentInfo> componentList = service.getComponents();
    junit.framework.Assert.assertEquals(2, componentList.size());
    for (org.apache.ambari.server.state.ComponentInfo component : componentList) {
        java.lang.String name = component.getName();
        if (name.equals(""ZOOKEEPER_SERVER"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""1"", component.getCardinality());
        }
        if (name.equals(""ZOOKEEPER_CLIENT"")) {
            junit.framework.Assert.assertEquals(0, component.getDependencies().size());
            junit.framework.Assert.assertNull(component.getAutoDeploy());
            junit.framework.Assert.assertEquals(""0+"", component.getCardinality());
        }
    }
}","testZooKeeper134Dependencies()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testServicePackageDirInheritance","TRUE","5","assertEquals","{
    java.lang.String assertionTemplate07 = org.apache.commons.lang.StringUtils.join(new java.lang.String[]{ ""stacks"", ""HDP"", ""2.0.7"", ""services"", ""%s"", ""package"" }, java.io.File.separator);
    java.lang.String assertionTemplate08 = org.apache.commons.lang.StringUtils.join(new java.lang.String[]{ ""stacks"", ""HDP"", ""2.0.8"", ""services"", ""%s"", ""package"" }, java.io.File.separator);
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"", ""HBASE"");
    junit.framework.Assert.assertEquals(java.lang.String.format(assertionTemplate07, ""HBASE""), service.getServicePackageFolder());
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"", ""HDFS"");
    junit.framework.Assert.assertEquals(java.lang.String.format(assertionTemplate07, ""HDFS""), service.getServicePackageFolder());
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""HBASE"");
    junit.framework.Assert.assertEquals(java.lang.String.format(assertionTemplate07, ""HBASE""), service.getServicePackageFolder());
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""HDFS"");
    junit.framework.Assert.assertEquals(java.lang.String.format(assertionTemplate08, ""HDFS""), service.getServicePackageFolder());
}","testServicePackageDirInheritance()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testServiceCommandScriptInheritance","TRUE","5","assertEquals","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"", ""HDFS"");
    junit.framework.Assert.assertEquals(""scripts/service_check_1.py"", service.getCommandScript().getScript());
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"", ""HBASE"");
    junit.framework.Assert.assertEquals(""scripts/service_check.py"", service.getCommandScript().getScript());
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""HBASE"");
    junit.framework.Assert.assertEquals(""scripts/service_check.py"", service.getCommandScript().getScript());
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""HDFS"");
    junit.framework.Assert.assertEquals(""scripts/service_check_2.py"", service.getCommandScript().getScript());
}","testServiceCommandScriptInheritance()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testComponentCommandScriptInheritance","TRUE","5","assertEquals","{
    org.apache.ambari.server.state.ComponentInfo component = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponent(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"", ""HDFS"", ""HDFS_CLIENT"");
    junit.framework.Assert.assertEquals(""scripts/hdfs_client.py"", component.getCommandScript().getScript());
    component = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponent(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"", ""HBASE"", ""HBASE_MASTER"");
    junit.framework.Assert.assertEquals(""scripts/hbase_master.py"", component.getCommandScript().getScript());
    component = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponent(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""HBASE"", ""HBASE_MASTER"");
    junit.framework.Assert.assertEquals(""scripts/hbase_master.py"", component.getCommandScript().getScript());
    component = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponent(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""HDFS"", ""HDFS_CLIENT"");
    junit.framework.Assert.assertEquals(""scripts/hdfs_client_overridden.py"", component.getCommandScript().getScript());
}","testComponentCommandScriptInheritance()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testServiceCustomCommandScriptInheritance","TRUE","8","assertEquals","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"", ""HDFS"");
    org.apache.ambari.server.state.CustomCommandDefinition ccd = findCustomCommand(""RESTART"", service);
    junit.framework.Assert.assertEquals(""scripts/restart_parent.py"", ccd.getCommandScript().getScript());
    ccd = findCustomCommand(""YET_ANOTHER_PARENT_SRV_COMMAND"", service);
    junit.framework.Assert.assertEquals(""scripts/yet_another_parent_srv_command.py"", ccd.getCommandScript().getScript());
    junit.framework.Assert.assertEquals(2, service.getCustomCommands().size());
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""HDFS"");
    junit.framework.Assert.assertEquals(3, service.getCustomCommands().size());
    ccd = findCustomCommand(""YET_ANOTHER_PARENT_SRV_COMMAND"", service);
    junit.framework.Assert.assertEquals(""scripts/yet_another_parent_srv_command.py"", ccd.getCommandScript().getScript());
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""HDFS"");
    ccd = findCustomCommand(""RESTART"", service);
    junit.framework.Assert.assertEquals(""scripts/restart_child.py"", ccd.getCommandScript().getScript());
    ccd = findCustomCommand(""YET_ANOTHER_CHILD_SRV_COMMAND"", service);
    junit.framework.Assert.assertEquals(""scripts/yet_another_child_srv_command.py"", ccd.getCommandScript().getScript());
}","testServiceCustomCommandScriptInheritance()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testChildCustomCommandScriptInheritance","TRUE","10","assertEquals
assertTrue","{
    org.apache.ambari.server.state.ComponentInfo component = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponent(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"", ""HDFS"", ""NAMENODE"");
    org.apache.ambari.server.state.CustomCommandDefinition ccd = findCustomCommand(""DECOMMISSION"", component);
    junit.framework.Assert.assertEquals(""scripts/namenode_dec.py"", ccd.getCommandScript().getScript());
    ccd = findCustomCommand(""YET_ANOTHER_PARENT_COMMAND"", component);
    junit.framework.Assert.assertEquals(""scripts/yet_another_parent_command.py"", ccd.getCommandScript().getScript());
    ccd = findCustomCommand(""REBALANCEHDFS"", component);
    junit.framework.Assert.assertEquals(""scripts/namenode.py"", ccd.getCommandScript().getScript());
    junit.framework.Assert.assertTrue(ccd.isBackground());
    junit.framework.Assert.assertEquals(3, component.getCustomCommands().size());
    component = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponent(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""HDFS"", ""NAMENODE"");
    junit.framework.Assert.assertEquals(4, component.getCustomCommands().size());
    ccd = findCustomCommand(""YET_ANOTHER_PARENT_COMMAND"", component);
    junit.framework.Assert.assertEquals(""scripts/yet_another_parent_command.py"", ccd.getCommandScript().getScript());
    ccd = findCustomCommand(""DECOMMISSION"", component);
    junit.framework.Assert.assertEquals(""scripts/namenode_dec_overr.py"", ccd.getCommandScript().getScript());
    ccd = findCustomCommand(""YET_ANOTHER_CHILD_COMMAND"", component);
    junit.framework.Assert.assertEquals(""scripts/yet_another_child_command.py"", ccd.getCommandScript().getScript());
}","testChildCustomCommandScriptInheritance()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testServiceOsSpecificsInheritance","TRUE","5","assertEquals","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"", ""HDFS"");
    junit.framework.Assert.assertEquals(""parent-package-def"", service.getOsSpecifics().get(""any"").getPackages().get(0).getName());
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"", ""HBASE"");
    junit.framework.Assert.assertEquals(2, service.getOsSpecifics().keySet().size());
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""HBASE"");
    junit.framework.Assert.assertEquals(2, service.getOsSpecifics().keySet().size());
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""HDFS"");
    junit.framework.Assert.assertEquals(""child-package-def"", service.getOsSpecifics().get(""any"").getPackages().get(0).getName());
}","testServiceOsSpecificsInheritance()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testServiceSchemaVersionInheritance","TRUE","3","assertEquals","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"", ""SQOOP"");
    junit.framework.Assert.assertEquals(""2.0"", service.getSchemaVersion());
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""SQOOP"");
    junit.framework.Assert.assertEquals(""2.0"", service.getSchemaVersion());
}","testServiceSchemaVersionInheritance()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testCustomConfigDir","TRUE","3","assertEquals
assertTrue","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.7"", ""MAPREDUCE2"");
    boolean found = false;
    for (org.apache.ambari.server.state.PropertyInfo pi : service.getProperties()) {
        if (pi.getName().equals(""mr2-prop"")) {
            junit.framework.Assert.assertEquals(""some-mr2-value"", pi.getValue());
            found = true;
        }
    }
    junit.framework.Assert.assertTrue(found);
}","testCustomConfigDir()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testLatestRepo","TRUE","2","assertEquals","{
    org.apache.ambari.server.stack.StackManager sm = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getStackManager();
    int maxWait = 45000;
    int waitTime = 0;
    while ((waitTime < maxWait) && (!sm.haveAllRepoUrlsBeenResolved())) {
        java.lang.Thread.sleep(5);
        waitTime += 5;
    } 
    if (waitTime >= maxWait) {
        org.junit.Assert.fail(""Latest Repo tasks did not complete"");
    }
    for (org.apache.ambari.server.state.RepositoryInfo ri : org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getRepositories(""HDP"", ""2.1.1"", ""centos6"")) {
        junit.framework.Assert.assertEquals(""Expected the default URL to be the same as in the xml file"", ""http://public-repo-1.hortonworks.com/HDP/centos6/2.x/updates/2.0.6.0"", ri.getDefaultBaseUrl());
    }
}","testLatestRepo()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testLatestVdf","TRUE","5","assertNotNull
assertEquals","{
    org.apache.ambari.server.stack.StackManager sm = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getStackManager();
    int maxWait = 45000;
    int waitTime = 0;
    while ((waitTime < maxWait) && (!sm.haveAllRepoUrlsBeenResolved())) {
        java.lang.Thread.sleep(5);
        waitTime += 5;
    } 
    if (waitTime >= maxWait) {
        org.junit.Assert.fail(""Latest Repo tasks did not complete"");
    }
    org.apache.ambari.server.state.repository.VersionDefinitionXml vdf = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getVersionDefinition(""HDP-2.2.0"");
    org.junit.Assert.assertNotNull(vdf);
    org.junit.Assert.assertEquals(1, vdf.repositoryInfo.getOses().size());
    vdf = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getVersionDefinition(""HDP-2.2.1"");
    org.junit.Assert.assertNotNull(vdf);
    org.junit.Assert.assertEquals(2, vdf.repositoryInfo.getOses().size());
}","testLatestVdf()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetComponentDependency","TRUE","5","assertEquals","{
    org.apache.ambari.server.state.DependencyInfo dependency = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponentDependency(""HDP"", ""1.3.4"", ""HIVE"", ""HIVE_SERVER"", ""ZOOKEEPER_SERVER"");
    org.junit.Assert.assertEquals(""ZOOKEEPER/ZOOKEEPER_SERVER"", dependency.getName());
    org.junit.Assert.assertEquals(""ZOOKEEPER_SERVER"", dependency.getComponentName());
    org.junit.Assert.assertEquals(""ZOOKEEPER"", dependency.getServiceName());
    org.junit.Assert.assertEquals(""cluster"", dependency.getScope());
}","testGetComponentDependency()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetComponentDependencies","TRUE","10","assertEquals","{
    java.util.List<org.apache.ambari.server.state.DependencyInfo> dependencies = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getComponentDependencies(""HDP"", ""1.3.4"", ""HBASE"", ""HBASE_MASTER"");
    org.junit.Assert.assertEquals(2, dependencies.size());
    org.apache.ambari.server.state.DependencyInfo dependency = dependencies.get(0);
    org.junit.Assert.assertEquals(""HDFS/HDFS_CLIENT"", dependency.getName());
    org.junit.Assert.assertEquals(""HDFS_CLIENT"", dependency.getComponentName());
    org.junit.Assert.assertEquals(""HDFS"", dependency.getServiceName());
    org.junit.Assert.assertEquals(""host"", dependency.getScope());
    dependency = dependencies.get(1);
    org.junit.Assert.assertEquals(""ZOOKEEPER/ZOOKEEPER_SERVER"", dependency.getName());
    org.junit.Assert.assertEquals(""ZOOKEEPER_SERVER"", dependency.getComponentName());
    org.junit.Assert.assertEquals(""ZOOKEEPER"", dependency.getServiceName());
    org.junit.Assert.assertEquals(""cluster"", dependency.getScope());
}","testGetComponentDependencies()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testPasswordPropertyAttribute","TRUE","5","assertNotNull
assertTrue
assertEquals","{
    org.apache.ambari.server.state.ServiceInfo service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.1"", ""HIVE"");
    java.util.List<org.apache.ambari.server.state.PropertyInfo> propertyInfoList = service.getProperties();
    junit.framework.Assert.assertNotNull(propertyInfoList);
    org.apache.ambari.server.state.PropertyInfo passwordProperty = null;
    for (org.apache.ambari.server.state.PropertyInfo propertyInfo : propertyInfoList) {
        if (propertyInfo.isRequireInput() && propertyInfo.getPropertyTypes().contains(org.apache.ambari.server.state.PropertyInfo.PropertyType.PASSWORD)) {
            passwordProperty = propertyInfo;
        } else {
            junit.framework.Assert.assertTrue(propertyInfo.getPropertyTypes().isEmpty());
        }
    }
    junit.framework.Assert.assertNotNull(passwordProperty);
    junit.framework.Assert.assertEquals(""javax.jdo.option.ConnectionPassword"", passwordProperty.getName());
}","testPasswordPropertyAttribute()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testAlertsJson","TRUE","48","assertNotNull
assertNull
assertTrue
assertEquals
assertFalse","{
    org.apache.ambari.server.state.ServiceInfo svc = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.5"", ""HDFS"");
    junit.framework.Assert.assertNotNull(svc);
    junit.framework.Assert.assertNotNull(svc.getAlertsFile());
    svc = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.6"", ""HDFS"");
    junit.framework.Assert.assertNotNull(svc);
    junit.framework.Assert.assertNotNull(svc.getAlertsFile());
    svc = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""1.3.4"", ""HDFS"");
    junit.framework.Assert.assertNotNull(svc);
    junit.framework.Assert.assertNull(svc.getAlertsFile());
    java.util.Set<org.apache.ambari.server.state.alert.AlertDefinition> set = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getAlertDefinitions(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.5"", ""HDFS"");
    junit.framework.Assert.assertNotNull(set);
    junit.framework.Assert.assertTrue(set.size() > 0);
    org.apache.ambari.server.state.alert.AlertDefinition nameNodeProcess = null;
    org.apache.ambari.server.state.alert.AlertDefinition nameNodeCpu = null;
    org.apache.ambari.server.state.alert.AlertDefinition datanodeStorage = null;
    org.apache.ambari.server.state.alert.AlertDefinition ignoreHost = null;
    java.util.Iterator<org.apache.ambari.server.state.alert.AlertDefinition> iterator = set.iterator();
    while (iterator.hasNext()) {
        org.apache.ambari.server.state.alert.AlertDefinition definition = iterator.next();
        if (definition.getName().equals(""namenode_process"")) {
            nameNodeProcess = definition;
        }
        if (definition.getName().equals(""namenode_cpu"")) {
            nameNodeCpu = definition;
        }
        if (definition.getName().equals(""datanode_storage"")) {
            datanodeStorage = definition;
        }
        if (definition.getName().equals(""hdfs_ignore_host_test"")) {
            ignoreHost = definition;
        }
    } 
    org.junit.Assert.assertNotNull(nameNodeProcess);
    org.junit.Assert.assertNotNull(nameNodeCpu);
    org.junit.Assert.assertNotNull(ignoreHost);
    org.junit.Assert.assertEquals(""NameNode Host CPU Utilization"", nameNodeCpu.getLabel());
    org.junit.Assert.assertFalse(nameNodeProcess.isHostIgnored());
    org.junit.Assert.assertEquals(""A description of namenode_process"", nameNodeProcess.getDescription());
    org.apache.ambari.server.state.alert.Source source = nameNodeProcess.getSource();
    org.junit.Assert.assertNotNull(source);
    org.junit.Assert.assertNotNull(((org.apache.ambari.server.state.alert.PortSource) (source)).getPort());
    org.apache.ambari.server.state.alert.Reporting reporting = source.getReporting();
    org.junit.Assert.assertNotNull(reporting);
    org.junit.Assert.assertNotNull(reporting.getOk());
    org.junit.Assert.assertNotNull(reporting.getOk().getText());
    org.junit.Assert.assertNull(reporting.getOk().getValue());
    org.junit.Assert.assertNotNull(reporting.getCritical());
    org.junit.Assert.assertNotNull(reporting.getCritical().getText());
    org.junit.Assert.assertNull(reporting.getCritical().getValue());
    org.junit.Assert.assertNull(reporting.getWarning());
    org.junit.Assert.assertFalse(nameNodeCpu.isHostIgnored());
    org.junit.Assert.assertEquals(""A description of namenode_cpu"", nameNodeCpu.getDescription());
    source = nameNodeCpu.getSource();
    org.junit.Assert.assertNotNull(source);
    reporting = source.getReporting();
    org.junit.Assert.assertNotNull(reporting);
    org.junit.Assert.assertNotNull(reporting.getOk());
    org.junit.Assert.assertNotNull(reporting.getOk().getText());
    org.junit.Assert.assertNull(reporting.getOk().getValue());
    org.junit.Assert.assertNotNull(reporting.getCritical());
    org.junit.Assert.assertNotNull(reporting.getCritical().getText());
    org.junit.Assert.assertNotNull(reporting.getCritical().getValue());
    org.junit.Assert.assertNotNull(reporting.getWarning());
    org.junit.Assert.assertNotNull(reporting.getWarning().getText());
    org.junit.Assert.assertNotNull(reporting.getWarning().getValue());
    org.junit.Assert.assertNotNull(datanodeStorage);
    org.junit.Assert.assertEquals(""A description of datanode_storage"", datanodeStorage.getDescription());
    org.junit.Assert.assertFalse(datanodeStorage.isHostIgnored());
    org.apache.ambari.server.state.alert.MetricSource metricSource = ((org.apache.ambari.server.state.alert.MetricSource) (datanodeStorage.getSource()));
    org.junit.Assert.assertNotNull(metricSource.getUri());
    org.junit.Assert.assertNotNull(metricSource.getUri().getHttpsProperty());
    org.junit.Assert.assertNotNull(metricSource.getUri().getHttpsPropertyValue());
    org.junit.Assert.assertNotNull(metricSource.getUri().getHttpsUri());
    org.junit.Assert.assertNotNull(metricSource.getUri().getHttpUri());
    org.junit.Assert.assertEquals(12345, metricSource.getUri().getDefaultPort().intValue());
    org.junit.Assert.assertTrue(ignoreHost.isHostIgnored());
}","testAlertsJson()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testAlertDefinitionMerging","TRUE","11","assertEquals
assertFalse","{
    final java.lang.String stackVersion = ""2.0.6"";
    final java.lang.String repoVersion = ""2.0.6-1234"";
    com.google.inject.Injector injector = com.google.inject.Guice.createInjector(com.google.inject.util.Modules.override(new org.apache.ambari.server.orm.InMemoryDefaultTestModule()).with(new org.apache.ambari.server.api.services.AmbariMetaInfoTest.MockModule()));
    org.apache.ambari.server.utils.EventBusSynchronizer.synchronizeAmbariEventPublisher(injector);
    injector.getInstance(org.apache.ambari.server.orm.GuiceJpaInitializer.class);
    injector.getInstance(javax.persistence.EntityManager.class);
    org.apache.ambari.server.orm.OrmTestHelper ormHelper = injector.getInstance(org.apache.ambari.server.orm.OrmTestHelper.class);
    long clusterId = ormHelper.createCluster(""cluster"" + java.lang.System.currentTimeMillis());
    java.lang.Class<?> c = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getClass().getSuperclass();
    java.lang.reflect.Field f = c.getDeclaredField(""alertDefinitionDao"");
    f.setAccessible(true);
    f.set(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo, injector.getInstance(org.apache.ambari.server.orm.dao.AlertDefinitionDAO.class));
    f = c.getDeclaredField(""ambariServiceAlertDefinitions"");
    f.setAccessible(true);
    f.set(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo, injector.getInstance(org.apache.ambari.server.metadata.AmbariServiceAlertDefinitions.class));
    org.apache.ambari.server.state.Clusters clusters = injector.getInstance(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster cluster = clusters.getClusterById(clusterId);
    cluster.setDesiredStackVersion(new org.apache.ambari.server.state.StackId(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, stackVersion));
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion = ormHelper.getOrCreateRepositoryVersion(cluster.getCurrentStackVersion(), repoVersion);
    cluster.addService(""HDFS"", repositoryVersion);
    org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.reconcileAlertDefinitions(clusters, false);
    org.apache.ambari.server.orm.dao.AlertDefinitionDAO dao = injector.getInstance(org.apache.ambari.server.orm.dao.AlertDefinitionDAO.class);
    java.util.List<org.apache.ambari.server.orm.entities.AlertDefinitionEntity> definitions = dao.findAll(clusterId);
    org.junit.Assert.assertEquals(13, definitions.size());
    int hostAlertCount = 0;
    for (org.apache.ambari.server.orm.entities.AlertDefinitionEntity definition : definitions) {
        if (definition.getServiceName().equals(""AMBARI"") && definition.getComponentName().equals(""AMBARI_AGENT"")) {
            hostAlertCount++;
        }
    }
    org.junit.Assert.assertEquals(3, hostAlertCount);
    org.junit.Assert.assertEquals(10, definitions.size() - hostAlertCount);
    for (org.apache.ambari.server.orm.entities.AlertDefinitionEntity definition : definitions) {
        definition.setScheduleInterval(28);
        dao.merge(definition);
    }
    org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.reconcileAlertDefinitions(clusters, false);
    definitions = dao.findAll();
    org.junit.Assert.assertEquals(13, definitions.size());
    for (org.apache.ambari.server.orm.entities.AlertDefinitionEntity definition : definitions) {
        org.junit.Assert.assertEquals(28, definition.getScheduleInterval().intValue());
    }
    definitions = dao.findAllEnabled(cluster.getClusterId());
    org.junit.Assert.assertEquals(12, definitions.size());
    org.apache.ambari.server.orm.entities.AlertDefinitionEntity entity = new org.apache.ambari.server.orm.entities.AlertDefinitionEntity();
    entity.setClusterId(clusterId);
    entity.setDefinitionName(""bad_hdfs_alert"");
    entity.setLabel(""Bad HDFS Alert"");
    entity.setDescription(""A way to fake a component being removed"");
    entity.setEnabled(true);
    entity.setHash(java.util.UUID.randomUUID().toString());
    entity.setScheduleInterval(1);
    entity.setServiceName(""HDFS"");
    entity.setComponentName(""BAD_COMPONENT"");
    entity.setSourceType(org.apache.ambari.server.state.alert.SourceType.METRIC);
    entity.setSource(""{\""type\"" : \""METRIC\""}"");
    dao.create(entity);
    definitions = dao.findAllEnabled(cluster.getClusterId());
    org.junit.Assert.assertEquals(13, definitions.size());
    org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.reconcileAlertDefinitions(clusters, false);
    definitions = dao.findAllEnabled(cluster.getClusterId());
    org.junit.Assert.assertEquals(12, definitions.size());
    definitions = dao.findAll();
    org.junit.Assert.assertEquals(14, definitions.size());
    entity = dao.findById(entity.getDefinitionId());
    org.junit.Assert.assertFalse(entity.getEnabled());
}","testAlertDefinitionMerging()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testAlertDefinitionMergingRemoveScenario","TRUE","3","assertEquals","{
    final java.lang.String repoVersion = ""2.0.6-1234"";
    final java.lang.String stackVersion = ""2.0.6"";
    com.google.inject.Injector injector = com.google.inject.Guice.createInjector(com.google.inject.util.Modules.override(new org.apache.ambari.server.orm.InMemoryDefaultTestModule()).with(new org.apache.ambari.server.api.services.AmbariMetaInfoTest.MockModule()));
    org.apache.ambari.server.utils.EventBusSynchronizer.synchronizeAmbariEventPublisher(injector);
    injector.getInstance(org.apache.ambari.server.orm.GuiceJpaInitializer.class);
    injector.getInstance(javax.persistence.EntityManager.class);
    org.apache.ambari.server.orm.OrmTestHelper ormHelper = injector.getInstance(org.apache.ambari.server.orm.OrmTestHelper.class);
    long clusterId = ormHelper.createCluster(""cluster"" + java.lang.System.currentTimeMillis());
    java.lang.Class<?> c = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getClass().getSuperclass();
    java.lang.reflect.Field f = c.getDeclaredField(""alertDefinitionDao"");
    f.setAccessible(true);
    f.set(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo, injector.getInstance(org.apache.ambari.server.orm.dao.AlertDefinitionDAO.class));
    f = c.getDeclaredField(""ambariServiceAlertDefinitions"");
    f.setAccessible(true);
    f.set(org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo, injector.getInstance(org.apache.ambari.server.metadata.AmbariServiceAlertDefinitions.class));
    org.apache.ambari.server.state.Clusters clusters = injector.getInstance(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.Cluster cluster = clusters.getClusterById(clusterId);
    cluster.setDesiredStackVersion(new org.apache.ambari.server.state.StackId(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, stackVersion));
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion = ormHelper.getOrCreateRepositoryVersion(cluster.getCurrentStackVersion(), repoVersion);
    cluster.addService(""HDFS"", repositoryVersion);
    org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.reconcileAlertDefinitions(clusters, false);
    org.apache.ambari.server.orm.dao.AlertDefinitionDAO dao = injector.getInstance(org.apache.ambari.server.orm.dao.AlertDefinitionDAO.class);
    java.util.List<org.apache.ambari.server.orm.entities.AlertDefinitionEntity> definitions = dao.findAll(clusterId);
    org.junit.Assert.assertEquals(13, definitions.size());
    cluster.deleteService(""HDFS"", new org.apache.ambari.server.controller.internal.DeleteHostComponentStatusMetaData());
    org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.reconcileAlertDefinitions(clusters, false);
    java.util.List<org.apache.ambari.server.orm.entities.AlertDefinitionEntity> updatedDefinitions = dao.findAll(clusterId);
    org.junit.Assert.assertEquals(7, updatedDefinitions.size());
}","testAlertDefinitionMergingRemoveScenario()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testKerberosDescriptor","TRUE","9","assertNotNull
assertNull
assertEquals","{
    org.apache.ambari.server.state.ServiceInfo service;
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.1.1"", ""PIG"");
    junit.framework.Assert.assertNotNull(service);
    junit.framework.Assert.assertNull(service.getKerberosDescriptorFile());
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", ""HDFS"");
    junit.framework.Assert.assertNotNull(service);
    junit.framework.Assert.assertNotNull(service.getKerberosDescriptorFile());
    service = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getService(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.1.1"", ""HDFS"");
    junit.framework.Assert.assertNotNull(service);
    junit.framework.Assert.assertNotNull(service.getKerberosDescriptorFile());
    java.util.Map<?, ?> kerberosDescriptorData = new com.google.gson.Gson().fromJson(new java.io.FileReader(service.getKerberosDescriptorFile()), java.util.Map.class);
    junit.framework.Assert.assertNotNull(kerberosDescriptorData);
    junit.framework.Assert.assertEquals(1, kerberosDescriptorData.size());
}","testKerberosDescriptor()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testReadKerberosDescriptorFromFile","TRUE","12","assertNotNull
assertEquals
assertNull","{
    java.lang.String path = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getCommonKerberosDescriptorFileLocation();
    org.apache.ambari.server.state.kerberos.KerberosDescriptor descriptor = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.readKerberosDescriptorFromFile(path);
    junit.framework.Assert.assertNotNull(descriptor);
    junit.framework.Assert.assertNotNull(descriptor.getProperties());
    junit.framework.Assert.assertEquals(3, descriptor.getProperties().size());
    junit.framework.Assert.assertNotNull(descriptor.getIdentities());
    junit.framework.Assert.assertEquals(1, descriptor.getIdentities().size());
    junit.framework.Assert.assertEquals(""spnego"", descriptor.getIdentities().get(0).getName());
    junit.framework.Assert.assertNotNull(descriptor.getConfigurations());
    junit.framework.Assert.assertEquals(1, descriptor.getConfigurations().size());
    junit.framework.Assert.assertNotNull(descriptor.getConfigurations().get(""core-site""));
    junit.framework.Assert.assertNotNull(descriptor.getConfiguration(""core-site""));
    junit.framework.Assert.assertNull(descriptor.getServices());
}","testReadKerberosDescriptorFromFile()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetKerberosDescriptor","TRUE","16","assertNotNull
assertEquals
assertFalse","{
    org.apache.ambari.server.state.kerberos.KerberosDescriptor descriptor = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getKerberosDescriptor(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", false);
    junit.framework.Assert.assertNotNull(descriptor);
    junit.framework.Assert.assertNotNull(descriptor.getProperties());
    junit.framework.Assert.assertEquals(3, descriptor.getProperties().size());
    junit.framework.Assert.assertNotNull(descriptor.getIdentities());
    junit.framework.Assert.assertEquals(1, descriptor.getIdentities().size());
    junit.framework.Assert.assertEquals(""spnego"", descriptor.getIdentities().get(0).getName());
    junit.framework.Assert.assertNotNull(descriptor.getConfigurations());
    junit.framework.Assert.assertEquals(1, descriptor.getConfigurations().size());
    junit.framework.Assert.assertNotNull(descriptor.getConfigurations().get(""core-site""));
    junit.framework.Assert.assertNotNull(descriptor.getConfiguration(""core-site""));
    junit.framework.Assert.assertNotNull(descriptor.getServices());
    junit.framework.Assert.assertEquals(1, descriptor.getServices().size());
    junit.framework.Assert.assertNotNull(descriptor.getServices().get(""HDFS""));
    junit.framework.Assert.assertNotNull(descriptor.getService(""HDFS""));
    junit.framework.Assert.assertFalse(descriptor.getService(""HDFS"").shouldPreconfigure());
}","testGetKerberosDescriptor()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetKerberosDescriptorWithPreconfigure","TRUE","22","assertNotNull
assertEquals
assertTrue","{
    org.apache.ambari.server.state.kerberos.KerberosDescriptor descriptor = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getKerberosDescriptor(org.apache.ambari.server.api.services.AmbariMetaInfoTest.STACK_NAME_HDP, ""2.0.8"", true);
    junit.framework.Assert.assertNotNull(descriptor);
    junit.framework.Assert.assertNotNull(descriptor.getProperties());
    junit.framework.Assert.assertEquals(3, descriptor.getProperties().size());
    junit.framework.Assert.assertNotNull(descriptor.getIdentities());
    junit.framework.Assert.assertEquals(1, descriptor.getIdentities().size());
    junit.framework.Assert.assertEquals(""spnego"", descriptor.getIdentities().get(0).getName());
    junit.framework.Assert.assertNotNull(descriptor.getConfigurations());
    junit.framework.Assert.assertEquals(1, descriptor.getConfigurations().size());
    junit.framework.Assert.assertNotNull(descriptor.getConfigurations().get(""core-site""));
    junit.framework.Assert.assertNotNull(descriptor.getConfiguration(""core-site""));
    junit.framework.Assert.assertNotNull(descriptor.getServices());
    junit.framework.Assert.assertEquals(2, descriptor.getServices().size());
    junit.framework.Assert.assertNotNull(descriptor.getServices().get(""HDFS""));
    junit.framework.Assert.assertNotNull(descriptor.getService(""HDFS""));
    junit.framework.Assert.assertTrue(descriptor.getService(""HDFS"").shouldPreconfigure());
    junit.framework.Assert.assertNotNull(descriptor.getServices().get(""HDFS""));
    junit.framework.Assert.assertNotNull(descriptor.getService(""HDFS""));
    junit.framework.Assert.assertTrue(descriptor.getService(""HDFS"").shouldPreconfigure());
    junit.framework.Assert.assertNotNull(descriptor.getServices().get(""NEW_SERVICE""));
    junit.framework.Assert.assertNotNull(descriptor.getService(""NEW_SERVICE""));
    junit.framework.Assert.assertTrue(descriptor.getService(""NEW_SERVICE"").shouldPreconfigure());
}","testGetKerberosDescriptorWithPreconfigure()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetCommonWidgetsFile","TRUE","3","assertNotNull
assertEquals","{
    java.io.File widgetsFile = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getCommonWidgetsDescriptorFile();
    junit.framework.Assert.assertNotNull(widgetsFile);
    junit.framework.Assert.assertEquals(""src/test/resources/widgets.json"", widgetsFile.getPath());
}","testGetCommonWidgetsFile()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetVersionDefinitionsForDisabledStack","TRUE","4","assertNotNull
assertNull","{
    java.util.Map<java.lang.String, org.apache.ambari.server.state.repository.VersionDefinitionXml> versionDefinitions = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getVersionDefinitions();
    junit.framework.Assert.assertNotNull(versionDefinitions);
    java.util.Map.Entry<java.lang.String, org.apache.ambari.server.state.repository.VersionDefinitionXml> vdfEntry = null;
    for (java.util.Map.Entry<java.lang.String, org.apache.ambari.server.state.repository.VersionDefinitionXml> entry : versionDefinitions.entrySet()) {
        if (entry.getKey().equals(""HDP-2.2.1"")) {
            vdfEntry = entry;
        }
    }
    junit.framework.Assert.assertNotNull(""Candidate stack and vdf for test case."", vdfEntry);
    org.apache.ambari.server.state.StackInfo stackInfo = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getStack(""HDP"", ""2.2.1"");
    stackInfo.setActive(false);
    org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.versionDefinitions = null;
    versionDefinitions = org.apache.ambari.server.api.services.AmbariMetaInfoTest.metaInfo.getVersionDefinitions();
    vdfEntry = null;
    for (java.util.Map.Entry<java.lang.String, org.apache.ambari.server.state.repository.VersionDefinitionXml> entry : versionDefinitions.entrySet()) {
        if (entry.getKey().equals(""HDP-2.2.1"")) {
            vdfEntry = entry;
        }
    }
    junit.framework.Assert.assertNull(""Disabled stack should not be returned by the API"", vdfEntry);
}","testGetVersionDefinitionsForDisabledStack()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/AmbariMetaInfoTest.java","26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
a0197938047d63a77c793ca85b7f35cd89ebbd60
a6536f3c6fb0fa5415b42b63ff994fd2bc78c621
cf2b52a10f0988602cfc331ee5bc2a3f4fab1593
d680af8057a40ab38ab2866799eb9150283c6a4c
021462339cc4eb4b6c49e7dfbdba29ce77f94a6d
f62e103ceda822b5a461f58402b817af965c7776
d6f26fb1c7d79fa6ba9a289daf51f6151c6bb3de
217620b0a2d13e1ac8432d6dcb38ae27316d1aab
e404100b99ffac8f14e36b46770466deeb5760d7
2fb4649e2a9381b98c4867ac4a550f7c3ff7ed23
388cb4180b3ea08e25d95aaf67bac68e8283a518
b358ee20e857d31017e54c1bde6f3c1aac084030
7172655ff269fbb7e0d29ba93197aa5a804749c0
32bf39e7d276d825b5874e6a55a54bc69e24e294
b609fb43fe6d77adb7606436d9772414bf002b6b
5b36cdfd87b756eba922dfd1ac5419552f4d375f
4bce57823da7d972df9e422e3f920ebbc60362f3
15aa0375e8c79bbaab237a28c1f0b78275f551f6
0a9f6fa943e07164be0166981d0d65814068d34e
9bf9bbc849f4c615be855b2be741cd7d7875755a
eb17e4c6983fab93b5c1db8ff6868286b0f09f31
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
dcbd826c96b91c718caa519f44663b9a73f17da6
6a0b2a0e2be6901b13db0787fa70ff98905b19da
9433038b1446c66c0ae704657c62b97839c3877a
e8080350f531f30abc129545e5ade90550d45bff
25bfb9ec62a44d525a19340d25276f3358f672e5
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
be9df631100276c8ea5469137e4a1d0cdc05941a
f18fad36821e148b69138ec2be6b5cd70ba207cc
42d3305db3fbf090eb19ab538a462305df88cbc2
3a7906c84737511475e718a0da50397b31ef7b52
edce0b1173b6629e50b053be140490fa288ec361
0de69e10b30a1dadf6f508170548cd347095193a
98f0cfc3d9397c6c834291611a0655fc691b0ac2
536bf049a52a3433a2a990286d9e5c3d387c3224
26b4299e7105c540fa2ab3dcf34e5abdc76025c6
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
fc5870779dc13e4fd24c616ef8549149edf77358
1d4effce606a0ec434032cb2ae56211ab7b86cfa
3691090923d141ea57a8d13931692d0e4b441f37
28f1a958d09216e7a69d42ef3b0796c90cdcc0c4
b5aa1d34a1c259dcfc4ebf3b9bce233bd8cdfbc6
7bc68e1626c8ea82820cbea391a3026d8824c586
922828e95be49263741a76fddaa8a2c216db4d87
9b6d33d0cb8635ca13f23b468c32bb31c30bd966
70ca85005b49a93970164af9a047bebd2b290427
f41ed7f1e67b21b4463d4330da8ed8090f222e29
bca624057e9a359c35d20a4600ceae3b486d6353
f8b83e2f699848ba1d4d913859af9fff3e405f53
8b9637611516f628a0502edd8ef6023125f2f236
ad8e9ea8cc85f3ccc1aca23a5935eed2939904fe
19ce4a6ca8ff20ab08e67d53d1c4fe06b2745e7e
69197e6302f28e69ccfc11b1e31d77d9dcf61a97
e508a5fbf8209ca119e56167c6269b1b6cb0f898
d7fcd258d9788923a03d0d121320e0d39636a2cd
cf094a7e5f5dfc88c5496aa504ca895a01cb58b3
5746ee6d99c4a71b1c1c87e5aabeb966dfe47e87
77f223215cac59305e0718727c33f003ea3b884d
00da270d1f9fd4a8247791672534bbcf24141aee
6d90466f656b087f64055be247f8b9d86c3b59b3
d6c389c115194e6055f5e21fefdf389a4b5c586f
72386bf020d7831a8c7278eb7927120e25fbecbf
d03662aedc5bb1ade5897cdc84f6cd340f13898d
f85260bed2d2c67bbbab7fa2a6505ca961829b90
b62846d25f4a3d65ee3e01a9d1b03697548a96bc
14c869961a4bc5cb9ffa041d8ef79ade3ffff3bb
a5c6834d6a51e8efe8a7ca4698242e33bc88a8d0
498a13bab6f38ffa529da1a5cdd7cc400728ca01
a098ddd49697442a33b38f106232a66c66201e3c
8de3425f3fe106edddd54261927b44481685b1cc
e4ededeb69dde413b35a6400197b23a889b3963d
2fc7adecea03ec70141f41e98f1aa2d089c3b364
90478a89df1f6b49eb7f7123b3dcb6a3188cccb8
17b05b23633b8fa055de4b619a1c98ae4145716f
d2b8f3e96e3b84033c738f1620e1624bbba46ff0
463dae91a1daca97c82a92866a520ff7d985ea00
b340f9a9519cd999862e205199ebe9ed44afe45d
a42b727260fde066429347f640c4cb1958f712e3
b82ac7abf4e9979a8c9d5a244565e2e3e58c2374
380fc2c70c24a6fd719cfd6843043b1189243f70
348d918a91cd12688ea43b08931b419a7325ac9d
179290e0fc5370b9d46a18d5ba9d187d6c1112c8
a940986517cbfeb2ef889f0d8a45579b27adad1c
df34b3a7a707cdb4e1ab6838971441425bd1fa22
d87cf7f8d0fee68210296085954a7a1e6ce484c4
4c5ed4c0cf7eb305fcdfbfd110476a015afbd5e1
40e3f0fc5d34b4d96a95e0e568e8754b042dc6f5
fb1e0ca5260d35938df2c10cd75ee5a594873c30
3da10f6ef2ba674061094f2036cac1fa33017fb8
0ac9cb3facaff211c5c679d609f59aaca633d267
72ebd2633bb10b611978cedf81dc34eeb3c9f4eb
8e48128648f0a74942b9e3bcc88261bd2728427e
b208f6715f0a63e2a35bcdc4148f912525213959
cb662f494f27b0ffc2058151f550b0cb08572db1
3a02f603991f7894d9ea05cbb5ae9b8be1da28f7
d7c0d8ae60c595891e038e3aa2ec77b6d1f50ffa
39a92eb492833ace0b997b2cc4c9523c61832cc0
02a46f7d1fd4b2e7a7b45f158e82da9f2b4345ea
76be68182b3665c63157d182d0c880fa5cd5724e
8394825be9f410a26c9f35d983ae270fdf46fc49
414e628b764f2bb05f50877d3b5292979f800b10
602d6d7bb5f548571e2d2cc291696a6049c2bf30
8835bf993b921ca835f0926bdb4eaff46968825a
d3f45041f70b7fb25f35b84646b3f91714efcc74
c9e181d25f57f5ea56770a080e6d3b09dbda82b1
386199a713e8fe65438be26405e952d020e28ac8
01bd864f1cbe8f497e309469f3ec776419b98269
bb4a19672e0e74a2126e3edf9f4d9ab9e480b433
14f369426e1e1a7e537a595eec5f59a25760f970
8bf325f20cbf89145c149b3f0786d43aeae01305
3289ea060ef4a4249bf5501e95bbe38461e12b9d
37f11ebda45eeac550ecacb78a25b40cd563825f
2e29777a59795aededda156b36088db7fa6f1ea2
cc49fb9e651cb647e20c7187d66b674d81d2c185
a1058b555c5ee7537f749a447f20a416795f80b5
86fed01eb14df077cd36e641695196ee81275349
99e0e02a0af1eb787f7c80e432c53f0d2d928a8c
29012b4aaaf1545f842d8d8b6c26c7e97f4f27b6
883d33eb9b0f911b0b24d48acdb675dea55da8df
38a780791831907732669592d4c1fc76a7a9df74
980918e0e925f28494e33419e98117eef9a7d5e2
9496abdd25f5c93afd9d866d4f1626d6c547d2c2
8d0d34dbb6e13212f750b4a5ad9eee90e2b9e4bf
15b3c65c907936adbe4e839f31644189f58dcedb
09ec93ea84c398ad23f3640649df3195d510113e
f4f27333b8efec7f160607174cfe02bcd7dd1404
f3e2e0c68d1761ff01f6a56198dbe6af3d16aee6
dc1039911a2d348ffd20baa1cd583c68c236eccb
64d7b50d1c1948a891263bb88ddbf5db0bd0cb17
a32f1465b3359f017b67dc7fc0a6f0206a8cc331
3ee9956386f55c45ab333618569e254a13350dbd
5e495c75d20c1ece1ad4b36f624fdbaddca93fd5
b2fae8cb54d2e4929437d941e831dcb584c5f645
9120b394d5f36806b1f1aeeecd84a281010311b8
8a58721d871fe26f45c3944205a5258eccb8c7ff
9ce06975f09a92c6a0bf5b7a06bf940496a43a52
2b0b8d0457b0cc1b16097a20dd17cdbadba51e71
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414"
"testGetBody","TRUE","2","assertSame","{
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.services.Request request = getTestRequest(null, body, null, null, null, null, null);
    org.junit.Assert.assertSame(body, request.getBody());
}","testGetBody()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testGetResource","TRUE","2","assertSame","{
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.services.Request request = getTestRequest(null, null, null, null, null, null, resource);
    org.junit.Assert.assertSame(resource, request.getResource());
}","testGetResource()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testGetApiVersion","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.services.Request request = getTestRequest(null, null, null, null, null, null, null);
    org.junit.Assert.assertEquals(1, request.getAPIVersion());
}","testGetApiVersion()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testGetHttpHeaders","TRUE","2","assertSame","{
    javax.ws.rs.core.HttpHeaders headers = EasyMock.createNiceMock(javax.ws.rs.core.HttpHeaders.class);
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> mapHeaders = new com.sun.jersey.core.util.MultivaluedMapImpl();
    org.apache.ambari.server.api.services.Request request = getTestRequest(headers, null, null, null, null, null, null);
    EasyMock.expect(headers.getRequestHeaders()).andReturn(mapHeaders);
    EasyMock.replay(headers);
    org.junit.Assert.assertSame(mapHeaders, request.getHttpHeaders());
    EasyMock.verify(headers);
}","testGetHttpHeaders()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testProcess_noBody","TRUE","3","assertSame
assertNull","{
    java.lang.String uriString = ""http://localhost.com:8080/api/v1/clusters/c1"";
    java.net.URI uri = new java.net.URI(java.net.URLEncoder.encode(uriString, ""UTF-8""));
    org.apache.ambari.server.api.predicate.PredicateCompiler compiler = EasyMock.createStrictMock(org.apache.ambari.server.api.predicate.PredicateCompiler.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> queryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    org.apache.ambari.server.api.handlers.RequestHandler handler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = EasyMock.createMock(org.apache.ambari.server.api.services.ResultStatus.class);
    org.apache.ambari.server.api.services.ResultPostProcessor processor = EasyMock.createStrictMock(org.apache.ambari.server.api.services.ResultPostProcessor.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    org.apache.ambari.server.api.services.Request request = getTestRequest(null, body, uriInfo, compiler, handler, processor, resource);
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(queryParams).anyTimes();
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_MINIMAL)).andReturn(null);
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_FORMAT)).andReturn(null);
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition);
    EasyMock.expect(resourceDefinition.getRenderer(null)).andReturn(renderer);
    EasyMock.expect(uriInfo.getRequestUri()).andReturn(uri).anyTimes();
    EasyMock.expect(handler.handleRequest(request)).andReturn(result);
    EasyMock.expect(result.getStatus()).andReturn(resultStatus).anyTimes();
    EasyMock.expect(resultStatus.isErrorState()).andReturn(false).anyTimes();
    processor.process(result);
    EasyMock.replay(compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, body);
    org.apache.ambari.server.api.services.Result processResult = request.process();
    EasyMock.verify(compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, body);
    org.junit.Assert.assertSame(result, processResult);
    org.junit.Assert.assertNull(request.getQueryPredicate());
}","testProcess_noBody()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testProcess_withDirectives","TRUE","3","assertSame","{
    javax.ws.rs.core.HttpHeaders headers = EasyMock.createNiceMock(javax.ws.rs.core.HttpHeaders.class);
    java.lang.String path = java.net.URLEncoder.encode(""http://localhost.com:8080/api/v1/clusters/c1"", ""UTF-8"");
    java.lang.String query = java.net.URLEncoder.encode(""foo=foo-value&bar=bar-value"", ""UTF-8"");
    java.net.URI uri = new java.net.URI((path + ""?"") + query);
    org.apache.ambari.server.api.predicate.PredicateCompiler compiler = EasyMock.createStrictMock(org.apache.ambari.server.api.predicate.PredicateCompiler.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Predicate.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> queryParams = new com.sun.jersey.core.util.MultivaluedMapImpl();
    org.apache.ambari.server.api.handlers.RequestHandler handler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = EasyMock.createMock(org.apache.ambari.server.api.services.ResultStatus.class);
    org.apache.ambari.server.api.services.ResultPostProcessor processor = EasyMock.createStrictMock(org.apache.ambari.server.api.services.ResultPostProcessor.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    java.util.Set<java.lang.String> directives = java.util.Collections.singleton(""my_directive"");
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    org.apache.ambari.server.api.services.Request request = getTestRequest(headers, body, uriInfo, compiler, handler, processor, resource);
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(queryParams).anyTimes();
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getUpdateDirectives()).andReturn(directives).anyTimes();
    EasyMock.expect(resourceDefinition.getCreateDirectives()).andReturn(directives).anyTimes();
    EasyMock.expect(resourceDefinition.getDeleteDirectives()).andReturn(directives).anyTimes();
    EasyMock.expect(resourceDefinition.getRenderer(null)).andReturn(renderer);
    EasyMock.expect(uriInfo.getRequestUri()).andReturn(uri).anyTimes();
    EasyMock.expect(body.getQueryString()).andReturn(null);
    if (((request.getRequestType() == org.apache.ambari.server.api.services.Request.Type.POST) || (request.getRequestType() == org.apache.ambari.server.api.services.Request.Type.PUT)) || (request.getRequestType() == org.apache.ambari.server.api.services.Request.Type.DELETE)) {
        EasyMock.expect(compiler.compile(""foo=foo-value&bar=bar-value"", directives)).andReturn(predicate);
    } else {
        EasyMock.expect(compiler.compile(""foo=foo-value&bar=bar-value"")).andReturn(predicate);
    }
    EasyMock.expect(handler.handleRequest(request)).andReturn(result);
    EasyMock.expect(result.getStatus()).andReturn(resultStatus).anyTimes();
    EasyMock.expect(resultStatus.isErrorState()).andReturn(false).anyTimes();
    processor.process(result);
    EasyMock.replay(headers, compiler, uriInfo, handler, resource, resourceDefinition, result, resultStatus, processor, predicate, body);
    org.apache.ambari.server.api.services.Result processResult = request.process();
    EasyMock.verify(headers, compiler, uriInfo, handler, resource, resourceDefinition, result, resultStatus, processor, predicate, body);
    org.junit.Assert.assertSame(processResult, result);
    org.junit.Assert.assertSame(predicate, request.getQueryPredicate());
}","testProcess_withDirectives()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testProcess_WithBody","TRUE","3","assertSame
assertNull","{
    java.lang.String uriString = ""http://localhost.com:8080/api/v1/clusters/c1"";
    java.net.URI uri = new java.net.URI(java.net.URLEncoder.encode(uriString, ""UTF-8""));
    org.apache.ambari.server.api.predicate.PredicateCompiler compiler = EasyMock.createStrictMock(org.apache.ambari.server.api.predicate.PredicateCompiler.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> queryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    org.apache.ambari.server.api.handlers.RequestHandler handler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = EasyMock.createMock(org.apache.ambari.server.api.services.ResultStatus.class);
    org.apache.ambari.server.api.services.ResultPostProcessor processor = EasyMock.createStrictMock(org.apache.ambari.server.api.services.ResultPostProcessor.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    org.apache.ambari.server.api.services.Request request = getTestRequest(null, body, uriInfo, compiler, handler, processor, resource);
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(queryParams).anyTimes();
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_MINIMAL)).andReturn(null);
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_FORMAT)).andReturn(null);
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition);
    EasyMock.expect(resourceDefinition.getRenderer(null)).andReturn(renderer);
    EasyMock.expect(uriInfo.getRequestUri()).andReturn(uri).anyTimes();
    EasyMock.expect(handler.handleRequest(request)).andReturn(result);
    EasyMock.expect(result.getStatus()).andReturn(resultStatus).anyTimes();
    EasyMock.expect(resultStatus.isErrorState()).andReturn(false).anyTimes();
    processor.process(result);
    EasyMock.expect(body.getQueryString()).andReturn(null);
    EasyMock.replay(compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, body);
    org.apache.ambari.server.api.services.Result processResult = request.process();
    EasyMock.verify(compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, body);
    org.junit.Assert.assertSame(result, processResult);
    org.junit.Assert.assertNull(request.getQueryPredicate());
}","testProcess_WithBody()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testProcess_QueryInURI","TRUE","3","assertSame","{
    javax.ws.rs.core.HttpHeaders headers = EasyMock.createNiceMock(javax.ws.rs.core.HttpHeaders.class);
    java.lang.String path = java.net.URLEncoder.encode(""http://localhost.com:8080/api/v1/clusters/c1"", ""UTF-8"");
    java.lang.String query = java.net.URLEncoder.encode(""foo=foo-value&bar=bar-value"", ""UTF-8"");
    java.net.URI uri = new java.net.URI((path + ""?"") + query);
    org.apache.ambari.server.api.predicate.PredicateCompiler compiler = EasyMock.createStrictMock(org.apache.ambari.server.api.predicate.PredicateCompiler.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Predicate.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> queryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    org.apache.ambari.server.api.handlers.RequestHandler handler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = EasyMock.createMock(org.apache.ambari.server.api.services.ResultStatus.class);
    org.apache.ambari.server.api.services.ResultPostProcessor processor = EasyMock.createStrictMock(org.apache.ambari.server.api.services.ResultPostProcessor.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    org.apache.ambari.server.api.services.Request request = getTestRequest(headers, body, uriInfo, compiler, handler, processor, resource);
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(queryParams).anyTimes();
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_MINIMAL)).andReturn(null);
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_FORMAT)).andReturn(null);
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getRenderer(null)).andReturn(renderer);
    EasyMock.expect(uriInfo.getRequestUri()).andReturn(uri).anyTimes();
    EasyMock.expect(body.getQueryString()).andReturn(null);
    EasyMock.expect(compiler.compile(""foo=foo-value&bar=bar-value"")).andReturn(predicate);
    EasyMock.expect(handler.handleRequest(request)).andReturn(result);
    EasyMock.expect(result.getStatus()).andReturn(resultStatus).anyTimes();
    EasyMock.expect(resultStatus.isErrorState()).andReturn(false).anyTimes();
    processor.process(result);
    EasyMock.replay(headers, compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, predicate, body);
    org.apache.ambari.server.api.services.Result processResult = request.process();
    EasyMock.verify(headers, compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, predicate, body);
    org.junit.Assert.assertSame(processResult, result);
    org.junit.Assert.assertSame(predicate, request.getQueryPredicate());
}","testProcess_QueryInURI()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testProcess_QueryInBody","TRUE","3","assertSame","{
    javax.ws.rs.core.HttpHeaders headers = EasyMock.createNiceMock(javax.ws.rs.core.HttpHeaders.class);
    java.lang.String uriString = ""http://localhost.com:8080/api/v1/clusters/c1"";
    java.net.URI uri = new java.net.URI(java.net.URLEncoder.encode(uriString, ""UTF-8""));
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> queryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    org.apache.ambari.server.api.predicate.PredicateCompiler compiler = EasyMock.createStrictMock(org.apache.ambari.server.api.predicate.PredicateCompiler.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Predicate.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.api.handlers.RequestHandler handler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = EasyMock.createMock(org.apache.ambari.server.api.services.ResultStatus.class);
    org.apache.ambari.server.api.services.ResultPostProcessor processor = EasyMock.createStrictMock(org.apache.ambari.server.api.services.ResultPostProcessor.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    org.apache.ambari.server.api.services.Request request = getTestRequest(headers, body, uriInfo, compiler, handler, processor, resource);
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(queryParams).anyTimes();
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_MINIMAL)).andReturn(null);
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_FORMAT)).andReturn(null);
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getRenderer(null)).andReturn(renderer);
    EasyMock.expect(uriInfo.getRequestUri()).andReturn(uri).anyTimes();
    EasyMock.expect(body.getQueryString()).andReturn(""foo=bar"");
    EasyMock.expect(compiler.compile(""foo=bar"")).andReturn(predicate);
    EasyMock.expect(handler.handleRequest(request)).andReturn(result);
    EasyMock.expect(result.getStatus()).andReturn(resultStatus).anyTimes();
    EasyMock.expect(resultStatus.isErrorState()).andReturn(false).anyTimes();
    processor.process(result);
    EasyMock.replay(headers, compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, predicate, body);
    org.apache.ambari.server.api.services.Result processResult = request.process();
    EasyMock.verify(headers, compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, predicate, body);
    org.junit.Assert.assertSame(processResult, result);
    org.junit.Assert.assertSame(predicate, request.getQueryPredicate());
}","testProcess_QueryInBody()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testProcess_QueryInBodyAndURI","TRUE","3","assertSame","{
    javax.ws.rs.core.HttpHeaders headers = EasyMock.createNiceMock(javax.ws.rs.core.HttpHeaders.class);
    java.lang.String uriString = ""http://localhost.com:8080/api/v1/clusters/c1?bar=value"";
    java.net.URI uri = new java.net.URI(java.net.URLEncoder.encode(uriString, ""UTF-8""));
    org.apache.ambari.server.api.predicate.PredicateCompiler compiler = EasyMock.createStrictMock(org.apache.ambari.server.api.predicate.PredicateCompiler.class);
    org.apache.ambari.server.controller.spi.Predicate predicate = EasyMock.createNiceMock(org.apache.ambari.server.controller.spi.Predicate.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> queryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    org.apache.ambari.server.api.handlers.RequestHandler handler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = EasyMock.createMock(org.apache.ambari.server.api.services.ResultStatus.class);
    org.apache.ambari.server.api.services.ResultPostProcessor processor = EasyMock.createStrictMock(org.apache.ambari.server.api.services.ResultPostProcessor.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    org.apache.ambari.server.api.services.Request request = getTestRequest(headers, body, uriInfo, compiler, handler, processor, resource);
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(queryParams).anyTimes();
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_MINIMAL)).andReturn(null);
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_FORMAT)).andReturn(null);
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getRenderer(null)).andReturn(renderer);
    EasyMock.expect(uriInfo.getRequestUri()).andReturn(uri).anyTimes();
    EasyMock.expect(body.getQueryString()).andReturn(""foo=bar"");
    EasyMock.expect(compiler.compile(""foo=bar"")).andReturn(predicate);
    EasyMock.expect(handler.handleRequest(request)).andReturn(result);
    EasyMock.expect(result.getStatus()).andReturn(resultStatus).anyTimes();
    EasyMock.expect(resultStatus.isErrorState()).andReturn(false).anyTimes();
    processor.process(result);
    EasyMock.replay(headers, compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, predicate, body);
    org.apache.ambari.server.api.services.Result processResult = request.process();
    EasyMock.verify(headers, compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, predicate, body);
    org.junit.Assert.assertSame(processResult, result);
    org.junit.Assert.assertSame(predicate, request.getQueryPredicate());
}","testProcess_QueryInBodyAndURI()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testProcess_WithBody_InvalidQuery","TRUE","4","assertEquals
assertTrue","{
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    java.lang.String uriString = ""http://localhost.com:8080/api/v1/clusters/c1"";
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> queryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    java.net.URI uri = new java.net.URI(java.net.URLEncoder.encode(uriString, ""UTF-8""));
    org.apache.ambari.server.api.predicate.PredicateCompiler compiler = EasyMock.createStrictMock(org.apache.ambari.server.api.predicate.PredicateCompiler.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    java.lang.Exception exception = new org.apache.ambari.server.api.predicate.InvalidQueryException(""test"");
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    org.apache.ambari.server.api.services.Request request = getTestRequest(null, body, uriInfo, compiler, null, null, resource);
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(queryParams).anyTimes();
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_MINIMAL)).andReturn(null);
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_FORMAT)).andReturn(null);
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getRenderer(null)).andReturn(renderer);
    EasyMock.expect(uriInfo.getRequestUri()).andReturn(uri).anyTimes();
    EasyMock.expect(body.getQueryString()).andReturn(""blahblahblah"");
    EasyMock.expect(compiler.compile(""blahblahblah"")).andThrow(exception);
    EasyMock.replay(compiler, uriInfo, queryParams, resource, resourceDefinition, body);
    org.apache.ambari.server.api.services.Result processResult = request.process();
    EasyMock.verify(compiler, uriInfo, queryParams, resource, resourceDefinition, body);
    org.junit.Assert.assertEquals(400, processResult.getStatus().getStatusCode());
    org.junit.Assert.assertTrue(processResult.getStatus().isErrorState());
    org.junit.Assert.assertEquals(""Unable to compile query predicate: test"", processResult.getStatus().getMessage());
}","testProcess_WithBody_InvalidQuery()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testProcess_noBody_ErrorStateResult","TRUE","3","assertSame
assertNull","{
    java.lang.String uriString = ""http://localhost.com:8080/api/v1/clusters/c1"";
    java.net.URI uri = new java.net.URI(java.net.URLEncoder.encode(uriString, ""UTF-8""));
    org.apache.ambari.server.api.predicate.PredicateCompiler compiler = EasyMock.createStrictMock(org.apache.ambari.server.api.predicate.PredicateCompiler.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> queryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    org.apache.ambari.server.api.handlers.RequestHandler handler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = EasyMock.createMock(org.apache.ambari.server.api.services.ResultStatus.class);
    org.apache.ambari.server.api.services.ResultPostProcessor processor = EasyMock.createStrictMock(org.apache.ambari.server.api.services.ResultPostProcessor.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    org.apache.ambari.server.api.services.Request request = getTestRequest(null, body, uriInfo, compiler, handler, processor, resource);
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(queryParams).anyTimes();
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_MINIMAL)).andReturn(null);
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_FORMAT)).andReturn(null);
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getRenderer(null)).andReturn(renderer);
    EasyMock.expect(uriInfo.getRequestUri()).andReturn(uri).anyTimes();
    EasyMock.expect(handler.handleRequest(request)).andReturn(result);
    EasyMock.expect(result.getStatus()).andReturn(resultStatus).anyTimes();
    EasyMock.expect(resultStatus.isErrorState()).andReturn(true).anyTimes();
    EasyMock.replay(compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, body);
    org.apache.ambari.server.api.services.Result processResult = request.process();
    EasyMock.verify(compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, body);
    org.junit.Assert.assertSame(result, processResult);
    org.junit.Assert.assertNull(request.getQueryPredicate());
}","testProcess_noBody_ErrorStateResult()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testGetFields","TRUE","16","assertEquals
assertTrue
assertNull","{
    java.lang.String fields = ""prop,category/prop1,category2/category3/prop2[1,2,3],prop3[4,5,6],category4[7,8,9],sub-resource/*[10,11,12],finalProp"";
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> mapQueryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(mapQueryParams);
    EasyMock.expect(mapQueryParams.getFirst(""fields"")).andReturn(fields);
    EasyMock.replay(uriInfo, mapQueryParams);
    org.apache.ambari.server.api.services.Request request = getTestRequest(null, null, uriInfo, null, null, null, null);
    java.util.Map<java.lang.String, org.apache.ambari.server.controller.spi.TemporalInfo> mapFields = request.getFields();
    org.junit.Assert.assertEquals(7, mapFields.size());
    java.lang.String prop = ""prop"";
    org.junit.Assert.assertTrue(mapFields.containsKey(prop));
    org.junit.Assert.assertNull(mapFields.get(prop));
    java.lang.String prop1 = org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""category"", ""prop1"");
    org.junit.Assert.assertTrue(mapFields.containsKey(prop1));
    org.junit.Assert.assertNull(mapFields.get(prop1));
    java.lang.String prop2 = org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""category2/category3"", ""prop2"");
    org.junit.Assert.assertTrue(mapFields.containsKey(prop2));
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.internal.TemporalInfoImpl(1, 2, 3), mapFields.get(prop2));
    java.lang.String prop3 = ""prop3"";
    org.junit.Assert.assertTrue(mapFields.containsKey(prop3));
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.internal.TemporalInfoImpl(4, 5, 6), mapFields.get(prop3));
    java.lang.String category4 = ""category4"";
    org.junit.Assert.assertTrue(mapFields.containsKey(category4));
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.internal.TemporalInfoImpl(7, 8, 9), mapFields.get(category4));
    java.lang.String subResource = org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""sub-resource"", ""*"");
    org.junit.Assert.assertTrue(mapFields.containsKey(subResource));
    org.junit.Assert.assertEquals(new org.apache.ambari.server.controller.internal.TemporalInfoImpl(10, 11, 12), mapFields.get(subResource));
    java.lang.String finalProp = ""finalProp"";
    org.junit.Assert.assertTrue(mapFields.containsKey(finalProp));
    org.junit.Assert.assertNull(mapFields.get(finalProp));
    EasyMock.verify(uriInfo, mapQueryParams);
}","testGetFields()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testParseRenderer_minimalResponse","TRUE","2","assertSame","{
    java.lang.String uriString = ""http://localhost.com:8080/api/v1/clusters/c1"";
    java.net.URI uri = new java.net.URI(java.net.URLEncoder.encode(uriString, ""UTF-8""));
    org.apache.ambari.server.api.predicate.PredicateCompiler compiler = EasyMock.createStrictMock(org.apache.ambari.server.api.predicate.PredicateCompiler.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> queryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    org.apache.ambari.server.api.handlers.RequestHandler handler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = EasyMock.createMock(org.apache.ambari.server.api.services.ResultStatus.class);
    org.apache.ambari.server.api.services.ResultPostProcessor processor = EasyMock.createStrictMock(org.apache.ambari.server.api.services.ResultPostProcessor.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.MinimalRenderer();
    org.apache.ambari.server.api.services.Request request = getTestRequest(null, body, uriInfo, compiler, handler, processor, resource);
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(queryParams).anyTimes();
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_MINIMAL)).andReturn(""true"");
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getRenderer(""minimal"")).andReturn(renderer);
    EasyMock.expect(uriInfo.getRequestUri()).andReturn(uri).anyTimes();
    EasyMock.expect(handler.handleRequest(request)).andReturn(result);
    EasyMock.expect(result.getStatus()).andReturn(resultStatus).anyTimes();
    EasyMock.expect(resultStatus.isErrorState()).andReturn(false).anyTimes();
    processor.process(result);
    EasyMock.replay(compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, body);
    request.process();
    EasyMock.verify(compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, body);
    org.junit.Assert.assertSame(renderer, request.getRenderer());
}","testParseRenderer_minimalResponse()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testParseRenderer_formatSpecified","TRUE","2","assertSame","{
    java.lang.String uriString = ""http://localhost.com:8080/api/v1/clusters/c1"";
    java.net.URI uri = new java.net.URI(java.net.URLEncoder.encode(uriString, ""UTF-8""));
    org.apache.ambari.server.api.predicate.PredicateCompiler compiler = EasyMock.createStrictMock(org.apache.ambari.server.api.predicate.PredicateCompiler.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> queryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    org.apache.ambari.server.api.handlers.RequestHandler handler = EasyMock.createStrictMock(org.apache.ambari.server.api.handlers.RequestHandler.class);
    org.apache.ambari.server.api.services.Result result = EasyMock.createMock(org.apache.ambari.server.api.services.Result.class);
    org.apache.ambari.server.api.services.ResultStatus resultStatus = EasyMock.createMock(org.apache.ambari.server.api.services.ResultStatus.class);
    org.apache.ambari.server.api.services.ResultPostProcessor processor = EasyMock.createStrictMock(org.apache.ambari.server.api.services.ResultPostProcessor.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    org.apache.ambari.server.api.query.render.Renderer renderer = new org.apache.ambari.server.api.query.render.DefaultRenderer();
    org.apache.ambari.server.api.services.Request request = getTestRequest(null, body, uriInfo, compiler, handler, processor, resource);
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(queryParams).anyTimes();
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_MINIMAL)).andReturn(null);
    EasyMock.expect(queryParams.getFirst(org.apache.ambari.server.api.predicate.QueryLexer.QUERY_FORMAT)).andReturn(""default"");
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getRenderer(""default"")).andReturn(renderer);
    EasyMock.expect(uriInfo.getRequestUri()).andReturn(uri).anyTimes();
    EasyMock.expect(handler.handleRequest(request)).andReturn(result);
    EasyMock.expect(result.getStatus()).andReturn(resultStatus).anyTimes();
    EasyMock.expect(resultStatus.isErrorState()).andReturn(false).anyTimes();
    processor.process(result);
    EasyMock.replay(compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, body);
    request.process();
    EasyMock.verify(compiler, uriInfo, handler, queryParams, resource, resourceDefinition, result, resultStatus, processor, body);
    org.junit.Assert.assertSame(renderer, request.getRenderer());
}","testParseRenderer_formatSpecified()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
90855a0dba130b387b193d825f76684028ac0c43
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea
4235a3db92b61c6d82491e2bffaf6207c5f203ae
b41d25189fd21aa1a12ff398d75e7273f5b40d61"
"testService","FALSE","0","None","{
    java.util.List<org.apache.ambari.server.api.services.BaseServiceTest.ServiceTestInvocation> listTestInvocations = getTestInvocations();
    for (org.apache.ambari.server.api.services.BaseServiceTest.ServiceTestInvocation testInvocation : listTestInvocations) {
        testMethod(testInvocation);
        testMethod_bodyParseException(testInvocation);
        testMethod_resultInErrorState(testInvocation);
    }
}","testService()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/BaseServiceTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
3cbd29f919ee6657bdf0a16b01a85fc4aa6d785e
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
6b2412da23c368ea4f5163c3ea5bc2e5463dc3d0
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
dd535bcf81398132f973faf3a58e71c9aa66e51b
c54950323689a85d8723e978b74e2b8e88482948
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
bb45951281054e6e3643251733182dffc26a03ca"
"testGetRepositoryVersionService","TRUE","2","assertNotNull","{
    org.apache.ambari.server.api.services.ClusterStackVersionService clusterStackVersionService = new org.apache.ambari.server.api.services.ClusterStackVersionServiceTest.TestClusterStackVersionService(""cluster"");
    org.apache.ambari.server.api.services.RepositoryVersionService rvs = clusterStackVersionService.getRepositoryVersionService(org.easymock.EasyMock.createMock(javax.ws.rs.core.Request.class), ""1"");
    junit.framework.TestCase.assertNotNull(rvs);
}","testGetRepositoryVersionService()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/ClusterStackVersionServiceTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
eaa65facf817aedbfd0ae55e74281ab04974aaba
2f00656c824390bbebb9a3441d3839c37427f3bc
1f7dbd5df4b624a083cc8f8fe4141e6289ecf46e
48f97d39975b005aaf3b3a262c7a1cdc2c8f86f1
e19a719bd413ec937071ef610f52dae093175132
8cc5cabcb3cb7a34b5fa4a0ff016f8dd82268d89
16911c85e18dfc337fa2be88b37214a1d5074e22
8b0e64c5121ee14acdafa624681c9f291a390bb1
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea"
"testRequestType","TRUE","2","assertSame","{
    org.apache.ambari.server.api.services.Request r = new org.apache.ambari.server.api.services.DeleteRequest(null, new org.apache.ambari.server.api.services.RequestBody(), null, null);
    org.junit.Assert.assertSame(org.apache.ambari.server.api.services.Request.Type.DELETE, r.getRequestType());
}","testRequestType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/DeleteRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
561c1649ad579869687bf19dbaca2e9c923d6dc9
be60c7ca2f99111dbe076aec54a335ed28976960
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testDeletedKeys","TRUE","3","assertTrue","{
    java.lang.String key1 = ""key1"";
    java.lang.String key2 = ""key2"";
    org.apache.ambari.server.api.services.DeleteResultMetadata metadata = new org.apache.ambari.server.api.services.DeleteResultMetadata();
    metadata.addDeletedKey(key1);
    metadata.addDeletedKey(key2);
    org.junit.Assert.assertTrue(org.apache.commons.collections.CollectionUtils.isEqualCollection(com.google.common.collect.Sets.newHashSet(key1, key2), metadata.getDeletedKeys()));
    org.junit.Assert.assertTrue(metadata.getExcptions().isEmpty());
}","testDeletedKeys()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/DeleteResultMetaDataTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
5af48693efa2dad3b702f64f87e6daaec253c869"
"testException","TRUE","7","assertTrue
assertEquals","{
    java.lang.String key1 = ""key1"";
    java.lang.String key2 = ""key2"";
    java.lang.String key3 = ""key3"";
    java.lang.String key4 = ""key4"";
    java.lang.String key5 = ""key5"";
    org.apache.ambari.server.api.services.DeleteResultMetadata metadata = new org.apache.ambari.server.api.services.DeleteResultMetadata();
    metadata.addException(key1, new org.apache.ambari.server.security.authorization.AuthorizationException(""Exception""));
    metadata.addException(key2, new org.apache.ambari.server.controller.spi.SystemException(""Exception""));
    metadata.addException(key3, new org.apache.ambari.server.HostNotFoundException(""Exception""));
    metadata.addException(key4, new org.apache.ambari.server.controller.spi.UnsupportedPropertyException(org.apache.ambari.server.controller.spi.Resource.Type.Action, java.util.Collections.emptySet()));
    metadata.addException(key5, new java.lang.NullPointerException());
    org.junit.Assert.assertTrue(metadata.getDeletedKeys().isEmpty());
    java.util.Map<java.lang.String, org.apache.ambari.server.api.services.ResultStatus> resultStatusMap = metadata.getExcptions();
    org.junit.Assert.assertEquals(resultStatusMap.get(key1).getStatus(), org.apache.ambari.server.api.services.ResultStatus.STATUS.FORBIDDEN);
    org.junit.Assert.assertEquals(resultStatusMap.get(key2).getStatus(), org.apache.ambari.server.api.services.ResultStatus.STATUS.SERVER_ERROR);
    org.junit.Assert.assertEquals(resultStatusMap.get(key3).getStatus(), org.apache.ambari.server.api.services.ResultStatus.STATUS.NOT_FOUND);
    org.junit.Assert.assertEquals(resultStatusMap.get(key4).getStatus(), org.apache.ambari.server.api.services.ResultStatus.STATUS.BAD_REQUEST);
    org.junit.Assert.assertEquals(resultStatusMap.get(key5).getStatus(), org.apache.ambari.server.api.services.ResultStatus.STATUS.SERVER_ERROR);
}","testException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/DeleteResultMetaDataTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
5af48693efa2dad3b702f64f87e6daaec253c869"
"testRequestType","TRUE","2","assertSame","{
    org.apache.ambari.server.api.services.Request r = new org.apache.ambari.server.api.services.GetRequest(null, new org.apache.ambari.server.api.services.RequestBody(), null, null);
    org.junit.Assert.assertSame(org.apache.ambari.server.api.services.Request.Type.GET, r.getRequestType());
}","testRequestType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/GetRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
561c1649ad579869687bf19dbaca2e9c923d6dc9
be60c7ca2f99111dbe076aec54a335ed28976960
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testGetSearchEngineWhenLogSearchNotRunningAsAdministrator","FALSE","0","None","{
    testGetSearchEngineWhenLogSearchNotRunning(org.apache.ambari.server.security.TestAuthenticationFactory.createAdministrator(), true);
}","testGetSearchEngineWhenLogSearchNotRunningAsAdministrator()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/LoggingServiceTest.java","c2409e740f84d6f051659b3b36d853902e698a60
af6aba67bbb26d4116532d45f3ea0117aa3cb6a8
e4db57093f4d17497366cdfbf02127f36399bf42
dc0722265bb7f6438807bafa8c9edbb96ab50559
b38cdb9b77e489f28f656e89964c04e65f9b326f
e2636c725b12f32ea929746a82e0ebaea8bf9bbe"
"testGetSearchEngineWhenLogSearchNotRunningAsClusterAdministrator","FALSE","0","None","{
    testGetSearchEngineWhenLogSearchNotRunning(org.apache.ambari.server.security.TestAuthenticationFactory.createClusterAdministrator(), true);
}","testGetSearchEngineWhenLogSearchNotRunningAsClusterAdministrator()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/LoggingServiceTest.java","c2409e740f84d6f051659b3b36d853902e698a60
af6aba67bbb26d4116532d45f3ea0117aa3cb6a8
e4db57093f4d17497366cdfbf02127f36399bf42
dc0722265bb7f6438807bafa8c9edbb96ab50559
b38cdb9b77e489f28f656e89964c04e65f9b326f
e2636c725b12f32ea929746a82e0ebaea8bf9bbe"
"testGetSearchEngineWhenLogSearchNotRunningAsClusterOperator","FALSE","0","None","{
    testGetSearchEngineWhenLogSearchNotRunning(org.apache.ambari.server.security.TestAuthenticationFactory.createClusterOperator(), true);
}","testGetSearchEngineWhenLogSearchNotRunningAsClusterOperator()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/LoggingServiceTest.java","c2409e740f84d6f051659b3b36d853902e698a60
af6aba67bbb26d4116532d45f3ea0117aa3cb6a8
e4db57093f4d17497366cdfbf02127f36399bf42
dc0722265bb7f6438807bafa8c9edbb96ab50559
b38cdb9b77e489f28f656e89964c04e65f9b326f
e2636c725b12f32ea929746a82e0ebaea8bf9bbe"
"testGetSearchEngineWhenLogSearchNotRunningAsServiceAdministrator","FALSE","0","None","{
    testGetSearchEngineWhenLogSearchNotRunning(org.apache.ambari.server.security.TestAuthenticationFactory.createServiceAdministrator(), true);
}","testGetSearchEngineWhenLogSearchNotRunningAsServiceAdministrator()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/LoggingServiceTest.java","c2409e740f84d6f051659b3b36d853902e698a60
af6aba67bbb26d4116532d45f3ea0117aa3cb6a8
e4db57093f4d17497366cdfbf02127f36399bf42
dc0722265bb7f6438807bafa8c9edbb96ab50559
b38cdb9b77e489f28f656e89964c04e65f9b326f
e2636c725b12f32ea929746a82e0ebaea8bf9bbe"
"testGetSearchEngineWhenLogSearchNotRunningAsServiceOperator","FALSE","0","None","{
    testGetSearchEngineWhenLogSearchNotRunning(org.apache.ambari.server.security.TestAuthenticationFactory.createServiceOperator(), false);
}","testGetSearchEngineWhenLogSearchNotRunningAsServiceOperator()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/LoggingServiceTest.java","c2409e740f84d6f051659b3b36d853902e698a60
af6aba67bbb26d4116532d45f3ea0117aa3cb6a8
e4db57093f4d17497366cdfbf02127f36399bf42
dc0722265bb7f6438807bafa8c9edbb96ab50559
b38cdb9b77e489f28f656e89964c04e65f9b326f
e2636c725b12f32ea929746a82e0ebaea8bf9bbe"
"testGetSearchEngineWhenLogSearchNotRunningAsClusterUser","FALSE","0","None","{
    testGetSearchEngineWhenLogSearchNotRunning(org.apache.ambari.server.security.TestAuthenticationFactory.createClusterUser(), false);
}","testGetSearchEngineWhenLogSearchNotRunningAsClusterUser()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/LoggingServiceTest.java","c2409e740f84d6f051659b3b36d853902e698a60
af6aba67bbb26d4116532d45f3ea0117aa3cb6a8
e4db57093f4d17497366cdfbf02127f36399bf42
dc0722265bb7f6438807bafa8c9edbb96ab50559
b38cdb9b77e489f28f656e89964c04e65f9b326f
e2636c725b12f32ea929746a82e0ebaea8bf9bbe"
"testGetters","TRUE","3","assertEquals","{
    java.util.Map<java.lang.String, java.lang.Object> mapProps = new java.util.HashMap<>();
    mapProps.put(""foo"", ""bar"");
    org.apache.ambari.server.api.services.NamedPropertySet propertySet = new org.apache.ambari.server.api.services.NamedPropertySet(""foo"", mapProps);
    org.junit.Assert.assertEquals(""foo"", propertySet.getName());
    org.junit.Assert.assertEquals(mapProps, propertySet.getProperties());
}","testGetters()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/NamedPropertySetTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testEquals","TRUE","4","assertEquals
assertFalse","{
    java.util.Map<java.lang.String, java.lang.Object> mapProps = new java.util.HashMap<>();
    mapProps.put(""foo"", ""bar"");
    org.apache.ambari.server.api.services.NamedPropertySet propertySet = new org.apache.ambari.server.api.services.NamedPropertySet(""foo"", mapProps);
    org.apache.ambari.server.api.services.NamedPropertySet propertySet2 = new org.apache.ambari.server.api.services.NamedPropertySet(""foo"", mapProps);
    org.junit.Assert.assertEquals(propertySet, propertySet2);
    org.apache.ambari.server.api.services.NamedPropertySet propertySet3 = new org.apache.ambari.server.api.services.NamedPropertySet(""bar"", mapProps);
    org.junit.Assert.assertFalse(propertySet.equals(propertySet3));
    org.apache.ambari.server.api.services.NamedPropertySet propertySet4 = new org.apache.ambari.server.api.services.NamedPropertySet(""foo"", new java.util.HashMap<>());
    org.junit.Assert.assertFalse(propertySet.equals(propertySet4));
}","testEquals()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/NamedPropertySetTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testHashCode","TRUE","2","assertEquals","{
    java.util.Map<java.lang.String, java.lang.Object> mapProps = new java.util.HashMap<>();
    org.apache.ambari.server.api.services.NamedPropertySet propertySet = new org.apache.ambari.server.api.services.NamedPropertySet(""foo"", mapProps);
    org.apache.ambari.server.api.services.NamedPropertySet propertySet2 = new org.apache.ambari.server.api.services.NamedPropertySet(""foo"", mapProps);
    org.junit.Assert.assertEquals(propertySet.hashCode(), propertySet2.hashCode());
}","testHashCode()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/NamedPropertySetTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testStore","TRUE","9","assertEquals","{
    org.apache.ambari.server.api.services.PersistKeyValueImpl impl = injector.getInstance(org.apache.ambari.server.api.services.PersistKeyValueImpl.class);
    java.util.Map<java.lang.String, java.lang.String> map = impl.getAllKeyValues();
    org.junit.Assert.assertEquals(0, map.size());
    impl.put(""key1"", ""value1"");
    impl.put(""key2"", ""value2"");
    map = impl.getAllKeyValues();
    org.junit.Assert.assertEquals(2, map.size());
    org.junit.Assert.assertEquals(""value1"", impl.getValue(""key1""));
    org.junit.Assert.assertEquals(""value2"", impl.getValue(""key2""));
    org.junit.Assert.assertEquals(map.get(""key1""), impl.getValue(""key1""));
    impl.put(""key1"", ""value1-2"");
    org.junit.Assert.assertEquals(""value1-2"", impl.getValue(""key1""));
    org.junit.Assert.assertEquals(2, map.size());
    java.lang.StringBuilder largeValueBuilder = new java.lang.StringBuilder();
    for (int i = 0; i < 320; i++) {
        largeValueBuilder.append(""0123456789"");
    }
    java.lang.String largeValue = largeValueBuilder.toString();
    impl.put(""key3"", largeValue);
    org.junit.Assert.assertEquals(largeValue, impl.getValue(""key3""));
}","testStore()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/PersistKeyValueImplTest.java","3a7906c84737511475e718a0da50397b31ef7b52
e4db57093f4d17497366cdfbf02127f36399bf42
114e9a490e1fa9bb4494e1f198751825ec3bd64e
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86"
"testMultiThreaded","FALSE","0","None","{
    final org.apache.ambari.server.api.services.PersistKeyValueImpl impl = injector.getInstance(org.apache.ambari.server.api.services.PersistKeyValueImpl.class);
    java.lang.Thread[] threads = new java.lang.Thread[org.apache.ambari.server.api.services.PersistKeyValueImplTest.NUMB_THREADS];
    for (int i = 0; i < org.apache.ambari.server.api.services.PersistKeyValueImplTest.NUMB_THREADS; ++i) {
        threads[i] = new java.lang.Thread() {
            @java.lang.Override
            public void run() {
                for (int i = 0; i < 100; ++i) {
                    impl.put(""key1"", ""value1"");
                    impl.put(""key2"", ""value2"");
                    impl.put(""key3"", ""value3"");
                    impl.put(""key4"", ""value4"");
                }
            }
        };
    }
    for (int i = 0; i < org.apache.ambari.server.api.services.PersistKeyValueImplTest.NUMB_THREADS; ++i) {
        threads[i].start();
    }
    for (int i = 0; i < org.apache.ambari.server.api.services.PersistKeyValueImplTest.NUMB_THREADS; ++i) {
        threads[i].join();
    }
}","testMultiThreaded()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/PersistKeyValueImplTest.java","3a7906c84737511475e718a0da50397b31ef7b52
e4db57093f4d17497366cdfbf02127f36399bf42
114e9a490e1fa9bb4494e1f198751825ec3bd64e
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86"
"testPersist","TRUE","3","assertEquals","{
    com.sun.jersey.api.client.config.ClientConfig clientConfig = new com.sun.jersey.api.client.config.DefaultClientConfig();
    clientConfig.getFeatures().put(JSONConfiguration.FEATURE_POJO_MAPPING, java.lang.Boolean.TRUE);
    client = com.sun.jersey.api.client.Client.create(clientConfig);
    com.sun.jersey.api.client.WebResource webResource = client.resource(java.lang.String.format(""http://localhost:%d/persist"", getTestPort()));
    webResource.post(""{\""xyx\"" : \""t\""}"");
    org.apache.ambari.server.api.services.PersistServiceTest.LOG.info(""Done posting to the server"");
    java.lang.String output = webResource.get(java.lang.String.class);
    org.apache.ambari.server.api.services.PersistServiceTest.LOG.info(""All key values "" + output);
    java.util.Map<java.lang.String, java.lang.String> jsonOutput = org.apache.ambari.server.utils.StageUtils.fromJson(output, java.util.Map.class);
    java.lang.String value = jsonOutput.get(""xyx"");
    junit.framework.Assert.assertEquals(""t"", value);
    webResource = client.resource(java.lang.String.format(""http://localhost:%d/persist/xyx"", getTestPort()));
    output = webResource.get(java.lang.String.class);
    junit.framework.Assert.assertEquals(""t"", output);
    org.apache.ambari.server.api.services.PersistServiceTest.LOG.info(""Value for xyx "" + output);
}","testPersist()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/PersistServiceTest.java","219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
3a7906c84737511475e718a0da50397b31ef7b52
e4db57093f4d17497366cdfbf02127f36399bf42
deb15171388ae965fdda92467378908ca09c0f8d
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
a12bb10131ca66e48e524500092695ecdcc86fea"
"testPersistenceManagerImplAsClusterAdministrator","FALSE","0","None","{
    org.springframework.security.core.context.SecurityContextHolder.getContext().setAuthentication(org.apache.ambari.server.security.TestAuthenticationFactory.createClusterAdministrator(""ClusterAdmin"", 2L));
    testCreate();
    testCreate___NoBodyProps();
    testCreate__MultipleResources();
    testUpdate();
    testDelete();
}","testPersistenceManagerImplAsClusterAdministrator()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/PersistenceManagerImplTest.java","cbd628460a186991f8cf2c391657eb5891c2ab82
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
36d2b0c91fb365448ba140015f48616ff9c4426f
5b89dc7525357268e862e27eb1e99c007cf074ea
d156c0ee9d676bd128b3793b872c2253663cba5c
be6c3bdd7fb4471f0e23b53739c71c0c0ecec03f
1b1678ee390d53955fa1a2297086e9d17507e076
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
f0ea8b7c52676b4941be0bf173f0205aff88f309
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testPersistenceManagerImplAsServiceAdministrator","FALSE","0","None","{
    org.springframework.security.core.context.SecurityContextHolder.getContext().setAuthentication(org.apache.ambari.server.security.TestAuthenticationFactory.createServiceAdministrator(""ServiceAdmin"", 2L));
    testCreate();
    testCreate___NoBodyProps();
    testCreate__MultipleResources();
    testUpdate();
    testDelete();
}","testPersistenceManagerImplAsServiceAdministrator()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/PersistenceManagerImplTest.java","cbd628460a186991f8cf2c391657eb5891c2ab82
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
36d2b0c91fb365448ba140015f48616ff9c4426f
5b89dc7525357268e862e27eb1e99c007cf074ea
d156c0ee9d676bd128b3793b872c2253663cba5c
be6c3bdd7fb4471f0e23b53739c71c0c0ecec03f
1b1678ee390d53955fa1a2297086e9d17507e076
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
f0ea8b7c52676b4941be0bf173f0205aff88f309
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testPersistenceManagerImplAsServiceOperator","FALSE","0","None","{
    org.springframework.security.core.context.SecurityContextHolder.getContext().setAuthentication(org.apache.ambari.server.security.TestAuthenticationFactory.createServiceOperator(""ServiceOperator"", 2L));
    testCreate();
    testCreate___NoBodyProps();
    testCreate__MultipleResources();
    testUpdate();
    testDelete();
}","testPersistenceManagerImplAsServiceOperator()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/PersistenceManagerImplTest.java","cbd628460a186991f8cf2c391657eb5891c2ab82
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
36d2b0c91fb365448ba140015f48616ff9c4426f
5b89dc7525357268e862e27eb1e99c007cf074ea
d156c0ee9d676bd128b3793b872c2253663cba5c
be6c3bdd7fb4471f0e23b53739c71c0c0ecec03f
1b1678ee390d53955fa1a2297086e9d17507e076
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
f0ea8b7c52676b4941be0bf173f0205aff88f309
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testPersistenceManagerImplAsClusterUser","FALSE","0","None","{
    org.springframework.security.core.context.SecurityContextHolder.getContext().setAuthentication(org.apache.ambari.server.security.TestAuthenticationFactory.createClusterUser(""ClusterUser"", 2L));
    testCreate();
    testCreate___NoBodyProps();
    testCreate__MultipleResources();
    testUpdate();
    testDelete();
}","testPersistenceManagerImplAsClusterUser()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/PersistenceManagerImplTest.java","cbd628460a186991f8cf2c391657eb5891c2ab82
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
36d2b0c91fb365448ba140015f48616ff9c4426f
5b89dc7525357268e862e27eb1e99c007cf074ea
d156c0ee9d676bd128b3793b872c2253663cba5c
be6c3bdd7fb4471f0e23b53739c71c0c0ecec03f
1b1678ee390d53955fa1a2297086e9d17507e076
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
f0ea8b7c52676b4941be0bf173f0205aff88f309
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testPersistenceManagerImplAsViewUser","FALSE","0","None","{
    org.springframework.security.core.context.SecurityContextHolder.getContext().setAuthentication(org.apache.ambari.server.security.TestAuthenticationFactory.createViewUser(""ViewUser"", 2L));
    testCreate();
    testCreate___NoBodyProps();
    testCreate__MultipleResources();
    testUpdate();
    testDelete();
}","testPersistenceManagerImplAsViewUser()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/PersistenceManagerImplTest.java","cbd628460a186991f8cf2c391657eb5891c2ab82
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
36d2b0c91fb365448ba140015f48616ff9c4426f
5b89dc7525357268e862e27eb1e99c007cf074ea
d156c0ee9d676bd128b3793b872c2253663cba5c
be6c3bdd7fb4471f0e23b53739c71c0c0ecec03f
1b1678ee390d53955fa1a2297086e9d17507e076
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
29ded1af8304ab51f46cf2f7cb0edb6a44226a3a
a12bb10131ca66e48e524500092695ecdcc86fea
f0ea8b7c52676b4941be0bf173f0205aff88f309
052abb79b5def58a552350d5d9043ec02de98ffc
416190a44e294d85f0b62cfe97d0c88fcfb8fdca
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72"
"testRequestType","TRUE","2","assertSame","{
    org.apache.ambari.server.api.services.Request r = new org.apache.ambari.server.api.services.PostRequest(null, new org.apache.ambari.server.api.services.RequestBody(), null, null);
    org.junit.Assert.assertSame(org.apache.ambari.server.api.services.Request.Type.POST, r.getRequestType());
}","testRequestType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/PostRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
561c1649ad579869687bf19dbaca2e9c923d6dc9
be60c7ca2f99111dbe076aec54a335ed28976960
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testRequestType","TRUE","2","assertSame","{
    org.apache.ambari.server.api.services.Request r = new org.apache.ambari.server.api.services.PutRequest(null, new org.apache.ambari.server.api.services.RequestBody(), null, null);
    org.junit.Assert.assertSame(org.apache.ambari.server.api.services.Request.Type.PUT, r.getRequestType());
}","testRequestType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/PutRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
30b292bfdaa3dd881555c9326a4351279600a6e6
bb45951281054e6e3643251733182dffc26a03ca
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
052abb79b5def58a552350d5d9043ec02de98ffc
5b4ff7542c6d75680999a7b5b41276e4e9c3ae72
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
561c1649ad579869687bf19dbaca2e9c923d6dc9
be60c7ca2f99111dbe076aec54a335ed28976960
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testRequestType","TRUE","2","assertSame","{
    org.apache.ambari.server.api.services.Request r = new org.apache.ambari.server.api.services.QueryPostRequest(null, new org.apache.ambari.server.api.services.RequestBody(), null, null);
    org.junit.Assert.assertSame(org.apache.ambari.server.api.services.Request.Type.QUERY_POST, r.getRequestType());
}","testRequestType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/QueryPostRequestTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testSetGetQueryString","TRUE","3","assertNull
assertEquals","{
    org.apache.ambari.server.api.services.RequestBody body = new org.apache.ambari.server.api.services.RequestBody();
    org.junit.Assert.assertNull(body.getQueryString());
    body.setQueryString(""foo=bar"");
    org.junit.Assert.assertEquals(""foo=bar"", body.getQueryString());
}","testSetGetQueryString()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/RequestBodyTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testSetGetPartialResponseFields","TRUE","3","assertNull
assertEquals","{
    org.apache.ambari.server.api.services.RequestBody body = new org.apache.ambari.server.api.services.RequestBody();
    org.junit.Assert.assertNull(body.getPartialResponseFields());
    body.setPartialResponseFields(""foo,bar"");
    org.junit.Assert.assertEquals(""foo,bar"", body.getPartialResponseFields());
}","testSetGetPartialResponseFields()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/RequestBodyTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testAddGetPropertySets","TRUE","4","assertEquals
assertSame","{
    org.apache.ambari.server.api.services.RequestBody body = new org.apache.ambari.server.api.services.RequestBody();
    org.junit.Assert.assertEquals(0, body.getNamedPropertySets().size());
    org.apache.ambari.server.api.services.NamedPropertySet ps = new org.apache.ambari.server.api.services.NamedPropertySet(""foo"", new java.util.HashMap<>());
    body.addPropertySet(ps);
    org.junit.Assert.assertEquals(1, body.getNamedPropertySets().size());
    org.junit.Assert.assertSame(ps, body.getNamedPropertySets().iterator().next());
}","testAddGetPropertySets()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/RequestBodyTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testSetGetBody","TRUE","3","assertNull
assertEquals","{
    org.apache.ambari.server.api.services.RequestBody body = new org.apache.ambari.server.api.services.RequestBody();
    org.junit.Assert.assertNull(body.getBody());
    body.setBody(""{\""foo\"" : \""value\"" }"");
    org.junit.Assert.assertEquals(""{\""foo\"" : \""value\"" }"", body.getBody());
}","testSetGetBody()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/RequestBodyTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testCreate_Post__NoQueryParams","TRUE","4","assertEquals","{
    javax.ws.rs.core.HttpHeaders headers = EasyMock.createNiceMock(javax.ws.rs.core.HttpHeaders.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createNiceMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createStrictMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> mapQueryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(mapQueryParams).anyTimes();
    EasyMock.expect(mapQueryParams.entrySet()).andReturn(java.util.Collections.emptySet()).anyTimes();
    EasyMock.expect(body.getQueryString()).andReturn(null);
    EasyMock.replay(headers, uriInfo, body, resource, mapQueryParams);
    org.apache.ambari.server.api.services.RequestFactory factory = new org.apache.ambari.server.api.services.RequestFactory();
    org.apache.ambari.server.api.services.Request request = factory.createRequest(headers, body, uriInfo, org.apache.ambari.server.api.services.Request.Type.POST, resource);
    org.junit.Assert.assertEquals(resource, request.getResource());
    org.junit.Assert.assertEquals(body, request.getBody());
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.Request.Type.POST, request.getRequestType());
    EasyMock.verify(headers, uriInfo, body, resource, mapQueryParams);
}","testCreate_Post__NoQueryParams()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/RequestFactoryTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
945f355065fab011b747568d8b78deaf02301574"
"testCreate_Post__UriQueryParams","TRUE","4","assertEquals","{
    javax.ws.rs.core.HttpHeaders headers = EasyMock.createNiceMock(javax.ws.rs.core.HttpHeaders.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createNiceMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> mapQueryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    java.util.Map<java.lang.String, java.util.List<java.lang.String>> mapProps = new java.util.HashMap<>();
    mapProps.put(""foo"", java.util.Collections.singletonList(""bar""));
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(mapQueryParams).anyTimes();
    EasyMock.expect(mapQueryParams.entrySet()).andReturn(mapProps.entrySet()).anyTimes();
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getCreateDirectives()).andReturn(java.util.Collections.emptySet());
    EasyMock.expect(body.getQueryString()).andReturn(null);
    EasyMock.replay(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
    org.apache.ambari.server.api.services.RequestFactory factory = new org.apache.ambari.server.api.services.RequestFactory();
    org.apache.ambari.server.api.services.Request request = factory.createRequest(headers, body, uriInfo, org.apache.ambari.server.api.services.Request.Type.POST, resource);
    org.junit.Assert.assertEquals(resource, request.getResource());
    org.junit.Assert.assertEquals(body, request.getBody());
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.Request.Type.QUERY_POST, request.getRequestType());
    EasyMock.verify(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
}","testCreate_Post__UriQueryParams()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/RequestFactoryTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
945f355065fab011b747568d8b78deaf02301574"
"testCreate_Post__WithUriDirective","TRUE","5","assertEquals","{
    javax.ws.rs.core.HttpHeaders headers = EasyMock.createNiceMock(javax.ws.rs.core.HttpHeaders.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createNiceMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> mapQueryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    java.util.Map<java.lang.String, java.util.List<java.lang.String>> mapProps = new java.util.HashMap<>();
    mapProps.put(""foo"", java.util.Collections.singletonList(""bar""));
    java.util.Map<java.lang.String, java.lang.String> requestInfoMap = new java.util.HashMap<>();
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(mapQueryParams).anyTimes();
    EasyMock.expect(mapQueryParams.entrySet()).andReturn(mapProps.entrySet()).anyTimes();
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getCreateDirectives()).andReturn(java.util.Collections.singleton(""foo""));
    EasyMock.expect(body.getQueryString()).andReturn(null);
    EasyMock.expect(body.getRequestInfoProperties()).andReturn(requestInfoMap).anyTimes();
    EasyMock.replay(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
    org.apache.ambari.server.api.services.RequestFactory factory = new org.apache.ambari.server.api.services.RequestFactory();
    org.apache.ambari.server.api.services.Request request = factory.createRequest(headers, body, uriInfo, org.apache.ambari.server.api.services.Request.Type.POST, resource);
    org.junit.Assert.assertEquals(resource, request.getResource());
    org.junit.Assert.assertEquals(body, request.getBody());
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.Request.Type.POST, request.getRequestType());
    org.junit.Assert.assertEquals(""bar"", requestInfoMap.get(""foo""));
    EasyMock.verify(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
}","testCreate_Post__WithUriDirective()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/RequestFactoryTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
945f355065fab011b747568d8b78deaf02301574"
"testCreate_Put__WithUriDirective","TRUE","5","assertEquals","{
    javax.ws.rs.core.HttpHeaders headers = EasyMock.createNiceMock(javax.ws.rs.core.HttpHeaders.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createNiceMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> mapQueryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    java.util.Map<java.lang.String, java.util.List<java.lang.String>> mapProps = new java.util.HashMap<>();
    mapProps.put(""foo"", java.util.Collections.singletonList(""bar""));
    java.util.Map<java.lang.String, java.lang.String> requestInfoMap = new java.util.HashMap<>();
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(mapQueryParams).anyTimes();
    EasyMock.expect(mapQueryParams.entrySet()).andReturn(mapProps.entrySet()).anyTimes();
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getUpdateDirectives()).andReturn(java.util.Collections.singleton(""foo""));
    EasyMock.expect(body.getQueryString()).andReturn(null);
    EasyMock.expect(body.getRequestInfoProperties()).andReturn(requestInfoMap).anyTimes();
    EasyMock.replay(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
    org.apache.ambari.server.api.services.RequestFactory factory = new org.apache.ambari.server.api.services.RequestFactory();
    org.apache.ambari.server.api.services.Request request = factory.createRequest(headers, body, uriInfo, org.apache.ambari.server.api.services.Request.Type.PUT, resource);
    org.junit.Assert.assertEquals(resource, request.getResource());
    org.junit.Assert.assertEquals(body, request.getBody());
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.Request.Type.PUT, request.getRequestType());
    org.junit.Assert.assertEquals(""bar"", requestInfoMap.get(""foo""));
    EasyMock.verify(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
}","testCreate_Put__WithUriDirective()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/RequestFactoryTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
945f355065fab011b747568d8b78deaf02301574"
"testCreate_Delete__WithUriDirective","TRUE","5","assertEquals","{
    javax.ws.rs.core.HttpHeaders headers = EasyMock.createNiceMock(javax.ws.rs.core.HttpHeaders.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createNiceMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> mapQueryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    java.util.Map<java.lang.String, java.util.List<java.lang.String>> mapProps = new java.util.HashMap<>();
    mapProps.put(""foo"", java.util.Collections.singletonList(""bar""));
    java.util.Map<java.lang.String, java.lang.String> requestInfoMap = new java.util.HashMap<>();
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(mapQueryParams).anyTimes();
    EasyMock.expect(mapQueryParams.entrySet()).andReturn(mapProps.entrySet()).anyTimes();
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getDeleteDirectives()).andReturn(java.util.Collections.singleton(""foo""));
    EasyMock.expect(body.getQueryString()).andReturn(null);
    EasyMock.expect(body.getRequestInfoProperties()).andReturn(requestInfoMap).anyTimes();
    EasyMock.replay(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
    org.apache.ambari.server.api.services.RequestFactory factory = new org.apache.ambari.server.api.services.RequestFactory();
    org.apache.ambari.server.api.services.Request request = factory.createRequest(headers, body, uriInfo, org.apache.ambari.server.api.services.Request.Type.DELETE, resource);
    org.junit.Assert.assertEquals(resource, request.getResource());
    org.junit.Assert.assertEquals(body, request.getBody());
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.Request.Type.DELETE, request.getRequestType());
    org.junit.Assert.assertEquals(""bar"", requestInfoMap.get(""foo""));
    EasyMock.verify(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
}","testCreate_Delete__WithUriDirective()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/RequestFactoryTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
945f355065fab011b747568d8b78deaf02301574"
"testCreate_Delete__WithoutUriDirective","TRUE","5","assertEquals","{
    javax.ws.rs.core.HttpHeaders headers = EasyMock.createNiceMock(javax.ws.rs.core.HttpHeaders.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createNiceMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> mapQueryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    java.util.Map<java.lang.String, java.util.List<java.lang.String>> mapProps = new java.util.HashMap<>();
    mapProps.put(""foo"", java.util.Collections.singletonList(""bar""));
    java.util.Map<java.lang.String, java.lang.String> requestInfoMap = new java.util.HashMap<>();
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(mapQueryParams).anyTimes();
    EasyMock.expect(mapQueryParams.entrySet()).andReturn(mapProps.entrySet()).anyTimes();
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getDeleteDirectives()).andReturn(java.util.Collections.emptySet());
    EasyMock.expect(body.getQueryString()).andReturn(null);
    EasyMock.expect(body.getRequestInfoProperties()).andReturn(requestInfoMap).anyTimes();
    EasyMock.replay(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
    org.apache.ambari.server.api.services.RequestFactory factory = new org.apache.ambari.server.api.services.RequestFactory();
    org.apache.ambari.server.api.services.Request request = factory.createRequest(headers, body, uriInfo, org.apache.ambari.server.api.services.Request.Type.DELETE, resource);
    org.junit.Assert.assertEquals(resource, request.getResource());
    org.junit.Assert.assertEquals(body, request.getBody());
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.Request.Type.DELETE, request.getRequestType());
    org.junit.Assert.assertEquals(null, requestInfoMap.get(""foo""));
    EasyMock.verify(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
}","testCreate_Delete__WithoutUriDirective()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/RequestFactoryTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
945f355065fab011b747568d8b78deaf02301574"
"testCreate_Post__BodyQueryParams","TRUE","4","assertEquals","{
    javax.ws.rs.core.HttpHeaders headers = EasyMock.createNiceMock(javax.ws.rs.core.HttpHeaders.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createNiceMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> mapQueryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(mapQueryParams).anyTimes();
    EasyMock.expect(mapQueryParams.entrySet()).andReturn(java.util.Collections.emptySet()).anyTimes();
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getCreateDirectives()).andReturn(java.util.Collections.emptySet());
    EasyMock.expect(body.getQueryString()).andReturn(""foo=bar"");
    EasyMock.replay(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
    org.apache.ambari.server.api.services.RequestFactory factory = new org.apache.ambari.server.api.services.RequestFactory();
    org.apache.ambari.server.api.services.Request request = factory.createRequest(headers, body, uriInfo, org.apache.ambari.server.api.services.Request.Type.POST, resource);
    org.junit.Assert.assertEquals(resource, request.getResource());
    org.junit.Assert.assertEquals(body, request.getBody());
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.Request.Type.QUERY_POST, request.getRequestType());
    EasyMock.verify(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
}","testCreate_Post__BodyQueryParams()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/RequestFactoryTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
945f355065fab011b747568d8b78deaf02301574"
"testCreate_Post__WithBodyDirective","TRUE","5","assertEquals","{
    javax.ws.rs.core.HttpHeaders headers = EasyMock.createNiceMock(javax.ws.rs.core.HttpHeaders.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createNiceMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createNiceMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createNiceMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> mapQueryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    java.util.Map<java.lang.String, java.util.List<java.lang.String>> mapProps = new java.util.HashMap<>();
    mapProps.put(""foo"", java.util.Collections.singletonList(""bar""));
    java.util.Map<java.lang.String, java.lang.String> requestInfoMap = new java.util.HashMap<>();
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(mapQueryParams).anyTimes();
    EasyMock.expect(mapQueryParams.entrySet()).andReturn(java.util.Collections.emptySet()).anyTimes();
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getCreateDirectives()).andReturn(java.util.Collections.singleton(""foo""));
    EasyMock.expect(body.getQueryString()).andReturn(""foo=bar"");
    EasyMock.expect(body.getRequestInfoProperties()).andReturn(requestInfoMap).anyTimes();
    EasyMock.replay(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
    org.apache.ambari.server.api.services.RequestFactory factory = new org.apache.ambari.server.api.services.RequestFactory();
    org.apache.ambari.server.api.services.Request request = factory.createRequest(headers, body, uriInfo, org.apache.ambari.server.api.services.Request.Type.POST, resource);
    org.junit.Assert.assertEquals(resource, request.getResource());
    org.junit.Assert.assertEquals(body, request.getBody());
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.Request.Type.POST, request.getRequestType());
    org.junit.Assert.assertEquals(""bar"", requestInfoMap.get(""foo""));
    EasyMock.verify(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
}","testCreate_Post__WithBodyDirective()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/RequestFactoryTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
945f355065fab011b747568d8b78deaf02301574"
"testCreate_Get__WithUriDirective","TRUE","5","assertEquals","{
    javax.ws.rs.core.HttpHeaders headers = EasyMock.createMock(javax.ws.rs.core.HttpHeaders.class);
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.api.services.RequestBody body = EasyMock.createMock(org.apache.ambari.server.api.services.RequestBody.class);
    org.apache.ambari.server.api.resources.ResourceInstance resource = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceInstance.class);
    org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition = EasyMock.createMock(org.apache.ambari.server.api.resources.ResourceDefinition.class);
    @java.lang.SuppressWarnings(""unchecked"")
    javax.ws.rs.core.MultivaluedMap<java.lang.String, java.lang.String> mapQueryParams = EasyMock.createMock(javax.ws.rs.core.MultivaluedMap.class);
    java.util.Map<java.lang.String, java.util.List<java.lang.String>> mapProps = new java.util.HashMap<>();
    mapProps.put(""foo"", java.util.Collections.singletonList(""bar""));
    java.util.Map<java.lang.String, java.lang.String> requestInfoMap = new java.util.HashMap<>();
    EasyMock.expect(uriInfo.getQueryParameters()).andReturn(mapQueryParams).anyTimes();
    EasyMock.expect(mapQueryParams.entrySet()).andReturn(mapProps.entrySet()).anyTimes();
    EasyMock.expect(resource.getResourceDefinition()).andReturn(resourceDefinition).anyTimes();
    EasyMock.expect(resourceDefinition.getReadDirectives()).andReturn(java.util.Collections.singleton(""foo""));
    EasyMock.expect(body.getQueryString()).andReturn(null);
    EasyMock.expect(body.getRequestInfoProperties()).andReturn(requestInfoMap).anyTimes();
    EasyMock.replay(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
    org.apache.ambari.server.api.services.RequestFactory factory = new org.apache.ambari.server.api.services.RequestFactory();
    org.apache.ambari.server.api.services.Request request = factory.createRequest(headers, body, uriInfo, org.apache.ambari.server.api.services.Request.Type.GET, resource);
    org.junit.Assert.assertEquals(resource, request.getResource());
    org.junit.Assert.assertEquals(body, request.getBody());
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.Request.Type.GET, request.getRequestType());
    org.junit.Assert.assertEquals(""bar"", requestInfoMap.get(""foo""));
    EasyMock.verify(headers, uriInfo, body, resource, mapQueryParams, resourceDefinition);
}","testCreate_Get__WithUriDirective()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/RequestFactoryTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
91be58862583047d74604f440d85a9fe64914169
80f1beaac13812a5c0f743242247f6b8e6b0aea2
46b23d40b4397de7b7a81086b183d3aad638f7d5
945f355065fab011b747568d8b78deaf02301574"
"testGetResultSerializer_Text","TRUE","2","assertEquals","{
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.controller.spi.Resource resource = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(true);
    result.setResultStatus(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> child = tree.addChild(resource, ""resource1"");
    child.setProperty(""href"", ""this is an href"");
    java.util.Map<java.lang.String, java.lang.Object> mapRootProps = new java.util.LinkedHashMap<>();
    mapRootProps.put(""prop2"", ""value2"");
    mapRootProps.put(""prop1"", ""value1"");
    java.util.Map<java.lang.String, java.lang.Object> mapCategoryProps = new java.util.LinkedHashMap<>();
    mapCategoryProps.put(""catProp1"", ""catValue1"");
    mapCategoryProps.put(""catProp2"", ""catValue2"");
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> propertyMap = new java.util.LinkedHashMap<>();
    propertyMap.put(null, mapRootProps);
    propertyMap.put(""category"", mapCategoryProps);
    EasyMock.expect(resource.getPropertiesMap()).andReturn(propertyMap).anyTimes();
    EasyMock.expect(resource.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.replay(uriInfo, resource);
    org.apache.ambari.server.orm.entities.ViewInstanceEntity viewInstanceEntity = org.apache.ambari.server.orm.entities.ViewInstanceEntityTest.getViewInstanceEntity();
    org.apache.ambari.server.controller.spi.Resource.Type type = new org.apache.ambari.server.controller.spi.Resource.Type(""subResource"");
    org.apache.ambari.server.api.services.views.ViewSubResourceService service = new org.apache.ambari.server.api.services.views.ViewSubResourceService(type, viewInstanceEntity);
    org.apache.ambari.server.api.services.serializers.ResultSerializer serializer = service.getResultSerializer(MediaType.TEXT_PLAIN_TYPE);
    java.lang.Object o = serializer.serialize(result);
    java.lang.String expected = ""{\n"" + (((((((""  \""href\"" : \""this is an href\"",\n"" + ""  \""prop2\"" : \""value2\"",\n"") + ""  \""prop1\"" : \""value1\"",\n"") + ""  \""category\"" : {\n"") + ""    \""catProp1\"" : \""catValue1\"",\n"") + ""    \""catProp2\"" : \""catValue2\""\n"") + ""  }\n"") + ""}"");
    org.junit.Assert.assertEquals(expected, o.toString().replace(""\r"", """"));
    EasyMock.verify(uriInfo, resource);
}","testGetResultSerializer_Text()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/ViewSubResourceServiceTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
fb86fb3bafa1479651836db3197f1b2023b08a2f
e4db57093f4d17497366cdfbf02127f36399bf42
2b539ef17d21c42690a3c98bf9e3198d31354b50
498a13bab6f38ffa529da1a5cdd7cc400728ca01
81b755c6065230ec7ee064e95371f7f1928caf03
6f416e39e44b40c54baff8864d4720bb853ad123"
"testGetResultSerializer_Json","TRUE","11","assertTrue
assertEquals
assertNotNull","{
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.controller.spi.Resource resource = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(true);
    result.setResultStatus(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> child = tree.addChild(resource, ""resource1"");
    child.setProperty(""href"", ""this is an href"");
    java.util.HashMap<java.lang.String, java.lang.Object> mapRootProps = new java.util.HashMap<>();
    mapRootProps.put(""prop1"", ""value1"");
    mapRootProps.put(""prop2"", ""value2"");
    java.util.HashMap<java.lang.String, java.lang.Object> mapCategoryProps = new java.util.HashMap<>();
    mapCategoryProps.put(""catProp1"", ""catValue1"");
    mapCategoryProps.put(""catProp2"", ""catValue2"");
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> propertyMap = new java.util.HashMap<>();
    propertyMap.put(null, mapRootProps);
    propertyMap.put(""category"", mapCategoryProps);
    EasyMock.expect(resource.getPropertiesMap()).andReturn(propertyMap).anyTimes();
    EasyMock.expect(resource.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.replay(uriInfo, resource);
    org.apache.ambari.server.orm.entities.ViewInstanceEntity viewInstanceEntity = org.apache.ambari.server.orm.entities.ViewInstanceEntityTest.getViewInstanceEntity();
    org.apache.ambari.server.controller.spi.Resource.Type type = new org.apache.ambari.server.controller.spi.Resource.Type(""subResource"");
    org.apache.ambari.server.api.services.views.ViewSubResourceService service = new org.apache.ambari.server.api.services.views.ViewSubResourceService(type, viewInstanceEntity);
    org.apache.ambari.server.api.services.serializers.ResultSerializer serializer = service.getResultSerializer(MediaType.APPLICATION_JSON_TYPE);
    java.lang.Object o = serializer.serialize(result);
    org.junit.Assert.assertTrue(o instanceof java.util.Map);
    java.util.Map map = ((java.util.Map) (o));
    org.junit.Assert.assertEquals(4, map.size());
    org.junit.Assert.assertEquals(""value1"", map.get(""prop1""));
    org.junit.Assert.assertEquals(""value2"", map.get(""prop2""));
    org.junit.Assert.assertEquals(""this is an href"", map.get(""href""));
    java.lang.Object o2 = map.get(""category"");
    org.junit.Assert.assertNotNull(o2);
    org.junit.Assert.assertTrue(o2 instanceof java.util.Map);
    java.util.Map subMap = ((java.util.Map) (o2));
    org.junit.Assert.assertEquals(2, subMap.size());
    org.junit.Assert.assertEquals(""catValue1"", subMap.get(""catProp1""));
    org.junit.Assert.assertEquals(""catValue2"", subMap.get(""catProp2""));
    EasyMock.verify(uriInfo, resource);
}","testGetResultSerializer_Json()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/ViewSubResourceServiceTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
fb86fb3bafa1479651836db3197f1b2023b08a2f
e4db57093f4d17497366cdfbf02127f36399bf42
2b539ef17d21c42690a3c98bf9e3198d31354b50
498a13bab6f38ffa529da1a5cdd7cc400728ca01
81b755c6065230ec7ee064e95371f7f1928caf03
6f416e39e44b40c54baff8864d4720bb853ad123"
"testCreateFromString","TRUE","2","assertEquals","{
    java.lang.String msg = ""some msg"";
    org.apache.ambari.server.api.services.parsers.BodyParseException e = new org.apache.ambari.server.api.services.parsers.BodyParseException(msg);
    org.junit.Assert.assertEquals(msg, e.getMessage());
}","testCreateFromString()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/BodyParseExceptionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
96f197ad1ee2c3d418f2428931e8af130f932707
9a525ef0227c763fdfdb8822a9796be5c5e80355
0c5f8d21dc935bad434fd54f918b47e828f5a397
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testCreateFromException","TRUE","2","assertEquals","{
    java.lang.Exception e = new java.lang.Exception(""test error msg"");
    org.apache.ambari.server.api.services.parsers.BodyParseException bpe = new org.apache.ambari.server.api.services.parsers.BodyParseException(e);
    org.junit.Assert.assertEquals(""Invalid Request: Malformed Request Body.  An exception occurred parsing the request body: "" + e.getMessage(), bpe.getMessage());
}","testCreateFromException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/BodyParseExceptionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
96f197ad1ee2c3d418f2428931e8af130f932707
9a525ef0227c763fdfdb8822a9796be5c5e80355
0c5f8d21dc935bad434fd54f918b47e828f5a397
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testParse","TRUE","4","assertEquals","{
    org.apache.ambari.server.api.services.parsers.RequestBodyParser parser = new org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser();
    org.apache.ambari.server.api.services.RequestBody body = parser.parse(serviceJson).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(1, setProps.size());
    java.util.Map<java.lang.String, java.lang.Object> mapExpected = new java.util.HashMap<>();
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Services"", ""service_name""), ""HDFS"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Services"", ""display_name""), ""HDFS"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceInfo"", ""cluster_name""), ""tbmetrictest"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Services"", ""description""), ""Apache Hadoop Distributed File System"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceInfo"", ""state""), ""STARTED"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""OuterCategory"", ""propName""), ""100"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""OuterCategory/nested1/nested2"", ""innerPropName""), ""innerPropValue"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(null, ""topLevelProp""), ""value"");
    org.junit.Assert.assertEquals(mapExpected, setProps.iterator().next().getProperties());
    java.lang.String b = body.getBody();
    body = parser.parse(b).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps2 = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(mapExpected, setProps2.iterator().next().getProperties());
}","testParse()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParserTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
fcc6a4ccf7bd4e49e5ad0d6062c0ce727183b4b2
99a24d8c32ad0cc2b8df650b536f1a153c7b97fc
5da0039823cf108f7fe5361d56ce558477f9619b
c54950323689a85d8723e978b74e2b8e88482948
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testParse_NullBody","TRUE","6","assertNotNull
assertEquals
assertNull","{
    org.apache.ambari.server.api.services.parsers.RequestBodyParser parser = new org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser();
    org.apache.ambari.server.api.services.RequestBody body = parser.parse(null).iterator().next();
    org.junit.Assert.assertNotNull(body.getNamedPropertySets());
    org.junit.Assert.assertEquals(0, body.getNamedPropertySets().size());
    org.junit.Assert.assertNull(body.getQueryString());
    org.junit.Assert.assertNull(body.getPartialResponseFields());
    org.junit.Assert.assertNull(body.getBody());
}","testParse_NullBody()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParserTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
fcc6a4ccf7bd4e49e5ad0d6062c0ce727183b4b2
99a24d8c32ad0cc2b8df650b536f1a153c7b97fc
5da0039823cf108f7fe5361d56ce558477f9619b
c54950323689a85d8723e978b74e2b8e88482948
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testParse_EmptyBody","TRUE","6","assertNotNull
assertEquals
assertNull","{
    org.apache.ambari.server.api.services.parsers.RequestBodyParser parser = new org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser();
    org.apache.ambari.server.api.services.RequestBody body = parser.parse("""").iterator().next();
    org.junit.Assert.assertNotNull(body.getNamedPropertySets());
    org.junit.Assert.assertEquals(0, body.getNamedPropertySets().size());
    org.junit.Assert.assertNull(body.getQueryString());
    org.junit.Assert.assertNull(body.getPartialResponseFields());
    org.junit.Assert.assertNull(body.getBody());
}","testParse_EmptyBody()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParserTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
fcc6a4ccf7bd4e49e5ad0d6062c0ce727183b4b2
99a24d8c32ad0cc2b8df650b536f1a153c7b97fc
5da0039823cf108f7fe5361d56ce558477f9619b
c54950323689a85d8723e978b74e2b8e88482948
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testParse_MultiBody","TRUE","5","assertEquals","{
    org.apache.ambari.server.api.services.parsers.RequestBodyParser parser = new org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser();
    java.util.Set<org.apache.ambari.server.api.services.RequestBody> bodySet = parser.parse(multiBody);
    org.junit.Assert.assertEquals(2, bodySet.size());
    for (org.apache.ambari.server.api.services.RequestBody body : bodySet) {
        java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps = body.getNamedPropertySets();
        org.junit.Assert.assertEquals(1, setProps.size());
        java.util.Map<java.lang.String, java.lang.Object> mapProps = setProps.iterator().next().getProperties();
        org.junit.Assert.assertEquals(4, mapProps.size());
        org.junit.Assert.assertEquals(""global"", mapProps.get(""Hosts/desired_config/type""));
    }
}","testParse_MultiBody()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParserTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
fcc6a4ccf7bd4e49e5ad0d6062c0ce727183b4b2
99a24d8c32ad0cc2b8df650b536f1a153c7b97fc
5da0039823cf108f7fe5361d56ce558477f9619b
c54950323689a85d8723e978b74e2b8e88482948
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testParse_Array","TRUE","8","assertEquals
assertTrue","{
    org.apache.ambari.server.api.services.parsers.RequestBodyParser parser = new org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser();
    org.apache.ambari.server.api.services.RequestBody body = parser.parse(arrayJson).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(3, setProps.size());
    boolean cluster1Matches = false;
    boolean cluster2Matches = false;
    boolean cluster3Matches = false;
    java.util.Map<java.lang.String, java.lang.String> mapCluster1 = new java.util.HashMap<>();
    mapCluster1.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Clusters"", ""cluster_name""), ""unitTestCluster1"");
    java.util.Map<java.lang.String, java.lang.String> mapCluster2 = new java.util.HashMap<>();
    mapCluster2.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Clusters"", ""cluster_name""), ""unitTestCluster2"");
    mapCluster2.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Clusters"", ""property1""), ""prop1Value"");
    java.util.Map<java.lang.String, java.lang.String> mapCluster3 = new java.util.HashMap<>();
    mapCluster3.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Clusters"", ""cluster_name""), ""unitTestCluster3"");
    mapCluster3.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Clusters/Category"", ""property2""), null);
    for (org.apache.ambari.server.api.services.NamedPropertySet propertySet : setProps) {
        org.junit.Assert.assertEquals("""", propertySet.getName());
        java.util.Map<java.lang.String, java.lang.Object> mapProps = propertySet.getProperties();
        if (mapProps.equals(mapCluster1)) {
            cluster1Matches = true;
        } else if (mapProps.equals(mapCluster2)) {
            cluster2Matches = true;
        } else if (mapProps.equals(mapCluster3)) {
            cluster3Matches = true;
        }
    }
    org.junit.Assert.assertTrue(cluster1Matches);
    org.junit.Assert.assertTrue(cluster2Matches);
    org.junit.Assert.assertTrue(cluster3Matches);
    java.lang.String b = body.getBody();
    body = parser.parse(b).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps2 = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(3, setProps2.size());
    org.junit.Assert.assertEquals(setProps, setProps2);
}","testParse_Array()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParserTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
fcc6a4ccf7bd4e49e5ad0d6062c0ce727183b4b2
99a24d8c32ad0cc2b8df650b536f1a153c7b97fc
5da0039823cf108f7fe5361d56ce558477f9619b
c54950323689a85d8723e978b74e2b8e88482948
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testParse___Array_NoArrayBrackets","TRUE","7","assertEquals
assertTrue","{
    org.apache.ambari.server.api.services.parsers.RequestBodyParser parser = new org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser();
    org.apache.ambari.server.api.services.RequestBody body = parser.parse(arrayJson2).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(3, setProps.size());
    boolean cluster1Matches = false;
    boolean cluster2Matches = false;
    boolean cluster3Matches = false;
    java.util.Map<java.lang.String, java.lang.String> mapCluster1 = new java.util.HashMap<>();
    mapCluster1.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Clusters"", ""cluster_name""), ""unitTestCluster1"");
    java.util.Map<java.lang.String, java.lang.String> mapCluster2 = new java.util.HashMap<>();
    mapCluster2.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Clusters"", ""cluster_name""), ""unitTestCluster2"");
    mapCluster2.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Clusters"", ""property1""), ""prop1Value"");
    java.util.Map<java.lang.String, java.lang.String> mapCluster3 = new java.util.HashMap<>();
    mapCluster3.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Clusters"", ""cluster_name""), ""unitTestCluster3"");
    mapCluster3.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Clusters/Category"", ""property2""), ""prop2Value"");
    for (org.apache.ambari.server.api.services.NamedPropertySet propertySet : setProps) {
        java.util.Map<java.lang.String, java.lang.Object> mapProps = propertySet.getProperties();
        if (mapProps.equals(mapCluster1)) {
            cluster1Matches = true;
        } else if (mapProps.equals(mapCluster2)) {
            cluster2Matches = true;
        } else if (mapProps.equals(mapCluster3)) {
            cluster3Matches = true;
        }
    }
    org.junit.Assert.assertTrue(cluster1Matches);
    org.junit.Assert.assertTrue(cluster2Matches);
    org.junit.Assert.assertTrue(cluster3Matches);
    java.lang.String b = body.getBody();
    body = parser.parse(b).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps2 = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(3, setProps2.size());
    org.junit.Assert.assertEquals(setProps, setProps2);
}","testParse___Array_NoArrayBrackets()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParserTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
fcc6a4ccf7bd4e49e5ad0d6062c0ce727183b4b2
99a24d8c32ad0cc2b8df650b536f1a153c7b97fc
5da0039823cf108f7fe5361d56ce558477f9619b
c54950323689a85d8723e978b74e2b8e88482948
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testParse_QueryInBody","TRUE","5","assertEquals","{
    org.apache.ambari.server.api.services.parsers.RequestBodyParser parser = new org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser();
    org.apache.ambari.server.api.services.RequestBody body = parser.parse(serviceJsonWithQuery).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(1, setProps.size());
    java.util.Map<java.lang.String, java.lang.Object> mapExpected = new java.util.HashMap<>();
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Services"", ""service_name""), ""HDFS"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Services"", ""display_name""), ""HDFS"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceInfo"", ""cluster_name""), ""tbmetrictest"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Services"", ""description""), ""Apache Hadoop Distributed File System"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceInfo"", ""state""), ""STARTED"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""OuterCategory"", ""propName""), ""100"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""OuterCategory/nested1/nested2"", ""innerPropName""), ""innerPropValue"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(null, ""topLevelProp""), ""value"");
    org.junit.Assert.assertEquals(mapExpected, setProps.iterator().next().getProperties());
    org.junit.Assert.assertEquals(""foo=bar"", body.getQueryString());
    java.lang.String b = body.getBody();
    body = parser.parse(b).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps2 = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(mapExpected, setProps2.iterator().next().getProperties());
}","testParse_QueryInBody()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParserTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
fcc6a4ccf7bd4e49e5ad0d6062c0ce727183b4b2
99a24d8c32ad0cc2b8df650b536f1a153c7b97fc
5da0039823cf108f7fe5361d56ce558477f9619b
c54950323689a85d8723e978b74e2b8e88482948
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testParse_QueryPost","TRUE","14","assertEquals
assertTrue","{
    org.apache.ambari.server.api.services.parsers.RequestBodyParser parser = new org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser();
    org.apache.ambari.server.api.services.RequestBody body = parser.parse(queryPostJson).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProperties = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(1, setProperties.size());
    boolean contains1 = false;
    boolean contains2 = false;
    boolean contains3 = false;
    for (org.apache.ambari.server.api.services.NamedPropertySet ps : setProperties) {
        java.util.Map<java.lang.String, java.lang.Object> mapProps = ps.getProperties();
        org.junit.Assert.assertEquals(1, mapProps.size());
        java.util.Set<java.util.Map<java.lang.String, java.lang.Object>> set = ((java.util.Set<java.util.Map<java.lang.String, java.lang.Object>>) (mapProps.get(""services"")));
        for (java.util.Map<java.lang.String, java.lang.Object> map : set) {
            java.lang.String serviceName = ((java.lang.String) (map.get(""ServiceInfo/service_name"")));
            if (serviceName.equals(""unitTestService1"")) {
                org.junit.Assert.assertEquals(1, map.size());
                contains1 = true;
            } else if (serviceName.equals(""unitTestService2"")) {
                org.junit.Assert.assertEquals(""prop1Value"", map.get(""ServiceInfo/property1""));
                org.junit.Assert.assertEquals(2, map.size());
                contains2 = true;
            } else if (serviceName.equals(""unitTestService3"")) {
                org.junit.Assert.assertEquals(""prop2Value"", map.get(""ServiceInfo/Category/property2""));
                org.junit.Assert.assertEquals(2, map.size());
                contains3 = true;
            } else {
                org.junit.Assert.fail(""Unexpected service name"");
            }
        }
    }
    org.junit.Assert.assertTrue(contains1);
    org.junit.Assert.assertTrue(contains2);
    org.junit.Assert.assertTrue(contains3);
    java.lang.String b = body.getBody();
    body = parser.parse(b).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps2 = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(1, setProps2.size());
    org.junit.Assert.assertEquals(setProperties, setProps2);
    org.junit.Assert.assertEquals(""java.util.LinkedHashSet"", body.getNamedPropertySets().iterator().next().getProperties().get(""services"").getClass().getName());
}","testParse_QueryPost()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParserTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
fcc6a4ccf7bd4e49e5ad0d6062c0ce727183b4b2
99a24d8c32ad0cc2b8df650b536f1a153c7b97fc
5da0039823cf108f7fe5361d56ce558477f9619b
c54950323689a85d8723e978b74e2b8e88482948
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testParse___QueryPost_multipleSubResTypes","TRUE","11","assertEquals
assertTrue","{
    org.apache.ambari.server.api.services.parsers.RequestBodyParser parser = new org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser();
    org.apache.ambari.server.api.services.RequestBody body = parser.parse(queryPostMultipleSubResourcesJson).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProperties = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(1, setProperties.size());
    boolean contains1 = false;
    boolean contains2 = false;
    for (org.apache.ambari.server.api.services.NamedPropertySet ps : setProperties) {
        java.util.Map<java.lang.String, java.lang.Object> mapProps = ps.getProperties();
        for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : mapProps.entrySet()) {
            java.util.Set<java.util.Map<java.lang.String, java.lang.Object>> set = ((java.util.Set<java.util.Map<java.lang.String, java.lang.Object>>) (entry.getValue()));
            for (java.util.Map<java.lang.String, java.lang.Object> map : set) {
                java.lang.String serviceName = ((java.lang.String) (map.get(""ServiceInfo/service_name"")));
                if (serviceName.equals(""unitTestService1"")) {
                    org.junit.Assert.assertEquals(""foo"", entry.getKey());
                    org.junit.Assert.assertEquals(1, map.size());
                    contains1 = true;
                } else if (serviceName.equals(""unitTestService2"")) {
                    org.junit.Assert.assertEquals(""bar"", entry.getKey());
                    org.junit.Assert.assertEquals(""prop2Value"", map.get(""ServiceInfo/Category/property2""));
                    org.junit.Assert.assertEquals(2, map.size());
                    contains2 = true;
                } else {
                    org.junit.Assert.fail(""Unexpected service name"");
                }
            }
        }
    }
    org.junit.Assert.assertTrue(contains1);
    org.junit.Assert.assertTrue(contains2);
    java.lang.String b = body.getBody();
    body = parser.parse(b).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps2 = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(1, setProps2.size());
    org.junit.Assert.assertEquals(setProperties, setProps2);
}","testParse___QueryPost_multipleSubResTypes()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParserTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
fcc6a4ccf7bd4e49e5ad0d6062c0ce727183b4b2
99a24d8c32ad0cc2b8df650b536f1a153c7b97fc
5da0039823cf108f7fe5361d56ce558477f9619b
c54950323689a85d8723e978b74e2b8e88482948
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testParse___QueryPost_QueryInBody","TRUE","15","assertEquals
assertTrue","{
    org.apache.ambari.server.api.services.parsers.RequestBodyParser parser = new org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser();
    org.apache.ambari.server.api.services.RequestBody body = parser.parse(queryPostJsonWithQuery).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProperties = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(""foo=bar"", body.getQueryString());
    org.junit.Assert.assertEquals(1, setProperties.size());
    boolean contains1 = false;
    boolean contains2 = false;
    boolean contains3 = false;
    for (org.apache.ambari.server.api.services.NamedPropertySet ps : setProperties) {
        org.junit.Assert.assertEquals("""", ps.getName());
        java.util.Map<java.lang.String, java.lang.Object> mapProps = ps.getProperties();
        for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : mapProps.entrySet()) {
            java.util.Set<java.util.Map<java.lang.String, java.lang.Object>> set = ((java.util.Set<java.util.Map<java.lang.String, java.lang.Object>>) (entry.getValue()));
            for (java.util.Map<java.lang.String, java.lang.Object> map : set) {
                java.lang.String serviceName = ((java.lang.String) (map.get(""ServiceInfo/service_name"")));
                if (serviceName.equals(""unitTestService1"")) {
                    org.junit.Assert.assertEquals(1, map.size());
                    contains1 = true;
                } else if (serviceName.equals(""unitTestService2"")) {
                    org.junit.Assert.assertEquals(""prop1Value"", map.get(""ServiceInfo/property1""));
                    org.junit.Assert.assertEquals(2, map.size());
                    contains2 = true;
                } else if (serviceName.equals(""unitTestService3"")) {
                    org.junit.Assert.assertEquals(""prop2Value"", map.get(""ServiceInfo/Category/property2""));
                    org.junit.Assert.assertEquals(2, map.size());
                    contains3 = true;
                } else {
                    org.junit.Assert.fail(""Unexpected service name"");
                }
            }
        }
    }
    org.junit.Assert.assertTrue(contains1);
    org.junit.Assert.assertTrue(contains2);
    org.junit.Assert.assertTrue(contains3);
    java.lang.String b = body.getBody();
    org.junit.Assert.assertEquals(queryPostJsonWithQuery, b);
    body = parser.parse(b).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps2 = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(1, setProps2.size());
    org.junit.Assert.assertEquals(setProperties, setProps2);
}","testParse___QueryPost_QueryInBody()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParserTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
fcc6a4ccf7bd4e49e5ad0d6062c0ce727183b4b2
99a24d8c32ad0cc2b8df650b536f1a153c7b97fc
5da0039823cf108f7fe5361d56ce558477f9619b
c54950323689a85d8723e978b74e2b8e88482948
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testParse_QueryOnlyInBody","TRUE","3","assertEquals","{
    org.apache.ambari.server.api.services.parsers.RequestBodyParser parser = new org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser();
    org.apache.ambari.server.api.services.RequestBody body = parser.parse(bodyQueryOnly).iterator().next();
    org.junit.Assert.assertEquals(""foo=bar"", body.getQueryString());
    org.junit.Assert.assertEquals(bodyQueryOnly, body.getBody());
}","testParse_QueryOnlyInBody()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParserTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
fcc6a4ccf7bd4e49e5ad0d6062c0ce727183b4b2
99a24d8c32ad0cc2b8df650b536f1a153c7b97fc
5da0039823cf108f7fe5361d56ce558477f9619b
c54950323689a85d8723e978b74e2b8e88482948
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testParse_malformedBody","FALSE","0","None","{
    org.apache.ambari.server.api.services.parsers.RequestBodyParser parser = new org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser();
    try {
        parser.parse(malformedJson);
        org.junit.Assert.fail(""Expected exception due to malformed body"");
    } catch (org.apache.ambari.server.api.services.parsers.BodyParseException e) {
    }
}","testParse_malformedBody()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParserTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
fcc6a4ccf7bd4e49e5ad0d6062c0ce727183b4b2
99a24d8c32ad0cc2b8df650b536f1a153c7b97fc
5da0039823cf108f7fe5361d56ce558477f9619b
c54950323689a85d8723e978b74e2b8e88482948
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testRequestInfoProps","TRUE","10","assertEquals","{
    org.apache.ambari.server.api.services.parsers.RequestBodyParser parser = new org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser();
    org.apache.ambari.server.api.services.RequestBody body = parser.parse(bodyWithRequestInfoProperties).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(1, setProps.size());
    java.util.Map<java.lang.String, java.lang.Object> mapExpected = new java.util.HashMap<>();
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Services"", ""service_name""), ""HDFS"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Services"", ""display_name""), ""HDFS"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceInfo"", ""cluster_name""), ""tbmetrictest"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Services"", ""description""), ""Apache Hadoop Distributed File System"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceInfo"", ""state""), ""STARTED"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""OuterCategory"", ""propName""), ""100"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""OuterCategory/nested1/nested2"", ""innerPropName""), ""innerPropValue"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(null, ""topLevelProp""), ""value"");
    org.junit.Assert.assertEquals(mapExpected, setProps.iterator().next().getProperties());
    org.junit.Assert.assertEquals(""foo=bar"", body.getQueryString());
    java.util.Map<java.lang.String, java.lang.String> mapRequestInfoProps = body.getRequestInfoProperties();
    org.junit.Assert.assertEquals(4, mapRequestInfoProps.size());
    org.junit.Assert.assertEquals(""val1"", mapRequestInfoProps.get(""prop1""));
    org.junit.Assert.assertEquals(""val2"", mapRequestInfoProps.get(""prop2""));
    org.junit.Assert.assertEquals(""foo=bar"", mapRequestInfoProps.get(""query""));
    org.junit.Assert.assertEquals(bodyWithRequestInfoProperties, mapRequestInfoProps.get(""RAW_REQUEST_BODY""));
    java.lang.String b = body.getBody();
    body = parser.parse(b).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps2 = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(mapExpected, setProps2.iterator().next().getProperties());
}","testRequestInfoProps()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParserTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
fcc6a4ccf7bd4e49e5ad0d6062c0ce727183b4b2
99a24d8c32ad0cc2b8df650b536f1a153c7b97fc
5da0039823cf108f7fe5361d56ce558477f9619b
c54950323689a85d8723e978b74e2b8e88482948
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testRequestBlobProperties","TRUE","5","assertEquals
assertNotNull","{
    org.apache.ambari.server.api.services.parsers.RequestBodyParser parser = new org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser();
    org.apache.ambari.server.api.services.RequestBody body = parser.parse(bodyWithRequestBlobProperties).iterator().next();
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(1, setProps.size());
    java.lang.String requestBlob = null;
    for (org.apache.ambari.server.api.services.NamedPropertySet ps : setProps) {
        org.junit.Assert.assertEquals("""", ps.getName());
        java.util.Map<java.lang.String, java.lang.Object> mapProps = ps.getProperties();
        for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : mapProps.entrySet()) {
            if (entry.getKey().equals(org.apache.ambari.server.api.services.parsers.JsonRequestBodyParser.REQUEST_BLOB_TITLE)) {
                requestBlob = ((java.lang.String) (entry.getValue()));
            }
        }
    }
    junit.framework.Assert.assertNotNull(requestBlob);
    body = parser.parse(requestBlob).iterator().next();
    java.util.Map<java.lang.String, java.lang.Object> mapExpected = new java.util.HashMap<>();
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Services"", ""service_name""), ""HDFS"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Services"", ""display_name""), ""HDFS"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceInfo"", ""cluster_name""), ""tbmetrictest"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Services"", ""description""), ""Apache Hadoop Distributed File System"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""ServiceInfo"", ""state""), ""STARTED"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""OuterCategory"", ""propName""), ""100"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""OuterCategory/nested1/nested2"", ""innerPropName""), ""innerPropValue"");
    mapExpected.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(null, ""topLevelProp""), ""value"");
    java.util.Set<org.apache.ambari.server.api.services.NamedPropertySet> setProps2 = body.getNamedPropertySets();
    org.junit.Assert.assertEquals(mapExpected, setProps2.iterator().next().getProperties());
}","testRequestBlobProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/parsers/JsonRequestBodyParserTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
4b3caee767a2dc2dbd0061021ebafff9156bcbd3
fcc6a4ccf7bd4e49e5ad0d6062c0ce727183b4b2
99a24d8c32ad0cc2b8df650b536f1a153c7b97fc
5da0039823cf108f7fe5361d56ce558477f9619b
c54950323689a85d8723e978b74e2b8e88482948
8782442de66f30f260d8be74d1be118c6cdd28c5
a39a15f7b7d9254c4ed2d42fc4c39f97699991f2
5357f3923946ab1940cb4eb047c8ca19a4ea75c7"
"testSerializeResources_NoColumnInfo","TRUE","6","assertNotNull
assertEquals
assertTrue","{
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(true);
    result.setResultStatus(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    java.util.List<java.util.TreeMap<java.lang.String, java.lang.Object>> data = new java.util.ArrayList<java.util.TreeMap<java.lang.String, java.lang.Object>>() {
        {
            add(new java.util.TreeMap<java.lang.String, java.lang.Object>() {
                {
                    put(""property1"", ""value1a"");
                    put(""property2"", ""value2a"");
                    put(""property3"", ""value3a"");
                    put(""property4"", ""value4a"");
                }
            });
            add(new java.util.TreeMap<java.lang.String, java.lang.Object>() {
                {
                    put(""property1"", ""value1'b"");
                    put(""property2"", ""value2'b"");
                    put(""property3"", ""value3'b"");
                    put(""property4"", ""value4'b"");
                }
            });
            add(new java.util.TreeMap<java.lang.String, java.lang.Object>() {
                {
                    put(""property1"", ""value1,c"");
                    put(""property2"", ""value2,c"");
                    put(""property3"", ""value3,c"");
                    put(""property4"", ""value4,c"");
                }
            });
        }
    };
    tree.setName(""items"");
    tree.setProperty(""isCollection"", ""true"");
    addChildResource(tree, ""resource"", 0, data.get(0));
    addChildResource(tree, ""resource"", 1, data.get(1));
    addChildResource(tree, ""resource"", 2, data.get(2));
    replayAll();
    java.lang.Object o = new org.apache.ambari.server.api.services.serializers.CsvSerializer().serialize(result).toString().replace(""\r"", """");
    verifyAll();
    org.junit.Assert.assertNotNull(o);
    java.io.StringReader reader = new java.io.StringReader(o.toString());
    org.apache.commons.csv.CSVParser csvParser = new org.apache.commons.csv.CSVParser(reader, org.apache.commons.csv.CSVFormat.DEFAULT);
    java.util.List<org.apache.commons.csv.CSVRecord> records = csvParser.getRecords();
    org.junit.Assert.assertNotNull(records);
    org.junit.Assert.assertEquals(3, records.size());
    int i = 0;
    for (org.apache.commons.csv.CSVRecord record : records) {
        java.util.TreeMap<java.lang.String, java.lang.Object> actualData = data.get(i++);
        org.junit.Assert.assertEquals(actualData.size(), record.size());
        for (java.lang.String item : record) {
            org.junit.Assert.assertTrue(actualData.containsValue(item));
        }
    }
    csvParser.close();
}","testSerializeResources_NoColumnInfo()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/serializers/CsvSerializerTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5"
"testSerializeResources_HeaderInfo","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(true);
    result.setResultStatus(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    tree.setName(""items"");
    tree.setProperty(""isCollection"", ""true"");
    tree.setProperty(org.apache.ambari.server.api.services.serializers.CsvSerializer.PROPERTY_COLUMN_MAP, new java.util.TreeMap<java.lang.String, java.lang.String>() {
        {
            put(""propertyD"", ""Property D"");
            put(""propertyC"", ""Property C"");
            put(""propertyB"", ""Property B"");
            put(""propertyA"", ""Property A"");
        }
    });
    java.util.List<java.util.Map<java.lang.String, java.lang.Object>> data = new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.Object>>() {
        {
            add(new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    put(""propertyD"", ""value1a"");
                    put(""propertyC"", ""value2a"");
                    put(""propertyB"", ""value3a"");
                    put(""propertyA"", ""value4a"");
                }
            });
            add(new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    put(""propertyD"", ""value1'b"");
                    put(""propertyC"", ""value2'b"");
                    put(""propertyB"", ""value3'b"");
                    put(""propertyA"", ""value4'b"");
                }
            });
            add(new java.util.HashMap<java.lang.String, java.lang.Object>() {
                {
                    put(""propertyD"", ""value1,c"");
                    put(""propertyC"", ""value2,c"");
                    put(""propertyB"", ""value3,c"");
                    put(""propertyA"", ""value4,c"");
                }
            });
        }
    };
    addChildResource(tree, ""resource"", 0, data.get(0));
    addChildResource(tree, ""resource"", 1, data.get(1));
    addChildResource(tree, ""resource"", 2, data.get(2));
    replayAll();
    java.lang.Object o = new org.apache.ambari.server.api.services.serializers.CsvSerializer().serialize(result).toString().replace(""\r"", """");
    verifyAll();
    java.lang.String expected = ""Property A,Property B,Property C,Property D\n"" + ((""value4a,value3a,value2a,value1a\n"" + ""value4\'b,value3\'b,value2\'b,value1\'b\n"") + ""\""value4,c\"",\""value3,c\"",\""value2,c\"",\""value1,c\""\n"");
    org.junit.Assert.assertEquals(expected, o);
}","testSerializeResources_HeaderInfo()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/serializers/CsvSerializerTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5"
"testSerializeResources_HeaderOrderInfo","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(true);
    result.setResultStatus(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    tree.setName(""items"");
    tree.setProperty(""isCollection"", ""true"");
    tree.setProperty(org.apache.ambari.server.api.services.serializers.CsvSerializer.PROPERTY_COLUMN_MAP, new java.util.HashMap<java.lang.String, java.lang.String>() {
        {
            put(""property1"", ""Property 1"");
            put(""property2"", ""Property 2"");
            put(""property3"", ""Property 3"");
            put(""property4"", ""Property 4"");
        }
    });
    tree.setProperty(org.apache.ambari.server.api.services.serializers.CsvSerializer.PROPERTY_COLUMN_ORDER, java.util.Arrays.asList(""property1"", ""property2"", ""property3"", ""property4""));
    addChildResource(tree, ""resource"", 0, new java.util.HashMap<java.lang.String, java.lang.Object>() {
        {
            put(""property1"", ""value1a"");
            put(""property2"", ""value2a"");
            put(""property3"", ""value3a"");
            put(""property4"", ""value4a"");
        }
    });
    addChildResource(tree, ""resource"", 1, new java.util.HashMap<java.lang.String, java.lang.Object>() {
        {
            put(""property1"", ""value1'b"");
            put(""property2"", ""value2'b"");
            put(""property3"", ""value3'b"");
            put(""property4"", ""value4'b"");
        }
    });
    addChildResource(tree, ""resource"", 2, new java.util.HashMap<java.lang.String, java.lang.Object>() {
        {
            put(""property1"", ""value1,c"");
            put(""property2"", ""value2,c"");
            put(""property3"", ""value3,c"");
            put(""property4"", ""value4,c"");
        }
    });
    replayAll();
    java.lang.Object o = new org.apache.ambari.server.api.services.serializers.CsvSerializer().serialize(result).toString().replace(""\r"", """");
    java.lang.String expected = ""Property 1,Property 2,Property 3,Property 4\n"" + ((""value1a,value2a,value3a,value4a\n"" + ""value1\'b,value2\'b,value3\'b,value4\'b\n"") + ""\""value1,c\"",\""value2,c\"",\""value3,c\"",\""value4,c\""\n"");
    org.junit.Assert.assertEquals(expected, o);
    verifyAll();
}","testSerializeResources_HeaderOrderInfo()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/serializers/CsvSerializerTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
66e42cbab8a714eac49b4ae84eb238d0c08accb5"
"testSerialize","TRUE","2","assertEquals","{
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.controller.spi.Resource resource = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(true);
    result.setResultStatus(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> child = tree.addChild(resource, ""resource1"");
    child.setProperty(""href"", ""this is an href"");
    java.util.Map<java.lang.String, java.lang.Object> mapRootProps = new java.util.LinkedHashMap<>();
    mapRootProps.put(""prop2"", ""value2"");
    mapRootProps.put(""prop1"", ""value1"");
    java.util.Map<java.lang.String, java.lang.Object> mapCategoryProps = new java.util.LinkedHashMap<>();
    mapCategoryProps.put(""catProp1"", ""catValue1"");
    mapCategoryProps.put(""catProp2"", ""catValue2"");
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> propertyMap = new java.util.LinkedHashMap<>();
    propertyMap.put(null, mapRootProps);
    propertyMap.put(""category"", mapCategoryProps);
    EasyMock.expect(resource.getPropertiesMap()).andReturn(propertyMap).anyTimes();
    EasyMock.expect(resource.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.replay(uriInfo, resource);
    java.lang.Object o = new org.apache.ambari.server.api.services.serializers.JsonSerializer().serialize(result).toString().replace(""\r"", """");
    java.lang.String expected = ""{\n"" + (((((((""  \""href\"" : \""this is an href\"",\n"" + ""  \""prop2\"" : \""value2\"",\n"") + ""  \""prop1\"" : \""value1\"",\n"") + ""  \""category\"" : {\n"") + ""    \""catProp1\"" : \""catValue1\"",\n"") + ""    \""catProp2\"" : \""catValue2\""\n"") + ""  }\n"") + ""}"");
    org.junit.Assert.assertEquals(expected, o);
    EasyMock.verify(uriInfo, resource);
}","testSerialize()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/serializers/JsonSerializerTest.java","5af6e562c26da91417e4d6d8407eb0cb72e2d9a4
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
5af48693efa2dad3b702f64f87e6daaec253c869
2b539ef17d21c42690a3c98bf9e3198d31354b50
498a13bab6f38ffa529da1a5cdd7cc400728ca01
760e9b7504aa7927ea78e6eb02c97b14fa98b1a2
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
dd535bcf81398132f973faf3a58e71c9aa66e51b
00484f9c9da0653a4f840643ac2575f792f098e9
34b7929db75bd2ceabf2d6a8438e60a25190cf1d
bb45951281054e6e3643251733182dffc26a03ca
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
4235a3db92b61c6d82491e2bffaf6207c5f203ae
052abb79b5def58a552350d5d9043ec02de98ffc
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
9a525ef0227c763fdfdb8822a9796be5c5e80355
8d9a423e44630fb73ce70857069db7dc26eefbb1
e3e237a088626235d518087a25069115ea905bd4
0c5f8d21dc935bad434fd54f918b47e828f5a397
53fc74b27397be7251fc84a53bf20096e9b3eb3b
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testSerializeResources","TRUE","2","assertEquals","{
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.controller.spi.Resource resource = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(true);
    result.setResultStatus(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resourcesNode = tree.addChild(null, ""resources"");
    resourcesNode.addChild(resource, ""resource1"");
    java.util.Map<java.lang.String, java.lang.Object> mapRootProps = new java.util.LinkedHashMap<>();
    mapRootProps.put(""prop2"", ""value2"");
    mapRootProps.put(""prop1"", ""value1"");
    java.util.Map<java.lang.String, java.lang.Object> mapCategoryProps = new java.util.LinkedHashMap<>();
    mapCategoryProps.put(""catProp1"", ""catValue1"");
    mapCategoryProps.put(""catProp2"", ""catValue2"");
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> propertyMap = new java.util.LinkedHashMap<>();
    propertyMap.put(null, mapRootProps);
    propertyMap.put(""category"", mapCategoryProps);
    EasyMock.expect(resource.getPropertiesMap()).andReturn(propertyMap).anyTimes();
    EasyMock.expect(resource.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.replay(uriInfo, resource);
    java.lang.Object o = new org.apache.ambari.server.api.services.serializers.JsonSerializer().serialize(result).toString().replace(""\r"", """");
    java.lang.String expected = ""{\n"" + ((((((((((""  \""resources\"" : [\n"" + ""    {\n"") + ""      \""prop2\"" : \""value2\"",\n"") + ""      \""prop1\"" : \""value1\"",\n"") + ""      \""category\"" : {\n"") + ""        \""catProp1\"" : \""catValue1\"",\n"") + ""        \""catProp2\"" : \""catValue2\""\n"") + ""      }\n"") + ""    }\n"") + ""  ]\n"") + ""}"");
    org.junit.Assert.assertEquals(expected, o);
    EasyMock.verify(uriInfo, resource);
}","testSerializeResources()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/serializers/JsonSerializerTest.java","5af6e562c26da91417e4d6d8407eb0cb72e2d9a4
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
5af48693efa2dad3b702f64f87e6daaec253c869
2b539ef17d21c42690a3c98bf9e3198d31354b50
498a13bab6f38ffa529da1a5cdd7cc400728ca01
760e9b7504aa7927ea78e6eb02c97b14fa98b1a2
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
dd535bcf81398132f973faf3a58e71c9aa66e51b
00484f9c9da0653a4f840643ac2575f792f098e9
34b7929db75bd2ceabf2d6a8438e60a25190cf1d
bb45951281054e6e3643251733182dffc26a03ca
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
4235a3db92b61c6d82491e2bffaf6207c5f203ae
052abb79b5def58a552350d5d9043ec02de98ffc
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
9a525ef0227c763fdfdb8822a9796be5c5e80355
8d9a423e44630fb73ce70857069db7dc26eefbb1
e3e237a088626235d518087a25069115ea905bd4
0c5f8d21dc935bad434fd54f918b47e828f5a397
53fc74b27397be7251fc84a53bf20096e9b3eb3b
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testSerializeResourcesAsArray","TRUE","2","assertEquals","{
    javax.ws.rs.core.UriInfo uriInfo = EasyMock.createMock(javax.ws.rs.core.UriInfo.class);
    org.apache.ambari.server.controller.spi.Resource resource = EasyMock.createMock(org.apache.ambari.server.controller.spi.Resource.class);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(true);
    result.setResultStatus(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> tree = result.getResultTree();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> child = tree.addChild(resource, ""resource1"");
    child.setProperty(""href"", ""this is an href"");
    tree.addChild(resource, ""resource2"");
    java.util.Map<java.lang.String, java.lang.Object> mapRootProps = new java.util.LinkedHashMap<>();
    mapRootProps.put(""prop2"", ""value2"");
    mapRootProps.put(""prop1"", ""value1"");
    java.util.Map<java.lang.String, java.lang.Object> mapCategoryProps = new java.util.LinkedHashMap<>();
    mapCategoryProps.put(""catProp1"", ""catValue1"");
    mapCategoryProps.put(""catProp2"", ""catValue2"");
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> propertyMap = new java.util.LinkedHashMap<>();
    propertyMap.put(null, mapRootProps);
    propertyMap.put(""category"", mapCategoryProps);
    EasyMock.expect(resource.getPropertiesMap()).andReturn(propertyMap).anyTimes();
    EasyMock.expect(resource.getType()).andReturn(org.apache.ambari.server.controller.spi.Resource.Type.Cluster).anyTimes();
    EasyMock.replay(uriInfo, resource);
    java.lang.Object o = new org.apache.ambari.server.api.services.serializers.JsonSerializer().serialize(result).toString().replace(""\r"", """");
    java.lang.String expected = ""[\n"" + (((((((((((((((((""  {\n"" + ""    \""href\"" : \""this is an href\"",\n"") + ""    \""prop2\"" : \""value2\"",\n"") + ""    \""prop1\"" : \""value1\"",\n"") + ""    \""category\"" : {\n"") + ""      \""catProp1\"" : \""catValue1\"",\n"") + ""      \""catProp2\"" : \""catValue2\""\n"") + ""    }\n"") + ""  },\n"") + ""  {\n"") + ""    \""prop2\"" : \""value2\"",\n"") + ""    \""prop1\"" : \""value1\"",\n"") + ""    \""category\"" : {\n"") + ""      \""catProp1\"" : \""catValue1\"",\n"") + ""      \""catProp2\"" : \""catValue2\""\n"") + ""    }\n"") + ""  }\n"") + ""]"");
    org.junit.Assert.assertEquals(expected, o);
    EasyMock.verify(uriInfo, resource);
}","testSerializeResourcesAsArray()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/serializers/JsonSerializerTest.java","5af6e562c26da91417e4d6d8407eb0cb72e2d9a4
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
5af48693efa2dad3b702f64f87e6daaec253c869
2b539ef17d21c42690a3c98bf9e3198d31354b50
498a13bab6f38ffa529da1a5cdd7cc400728ca01
760e9b7504aa7927ea78e6eb02c97b14fa98b1a2
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
dd535bcf81398132f973faf3a58e71c9aa66e51b
00484f9c9da0653a4f840643ac2575f792f098e9
34b7929db75bd2ceabf2d6a8438e60a25190cf1d
bb45951281054e6e3643251733182dffc26a03ca
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
4235a3db92b61c6d82491e2bffaf6207c5f203ae
052abb79b5def58a552350d5d9043ec02de98ffc
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
9a525ef0227c763fdfdb8822a9796be5c5e80355
8d9a423e44630fb73ce70857069db7dc26eefbb1
e3e237a088626235d518087a25069115ea905bd4
0c5f8d21dc935bad434fd54f918b47e828f5a397
53fc74b27397be7251fc84a53bf20096e9b3eb3b
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testDeleteResultMetadata","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(true);
    result.setResultStatus(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.api.services.DeleteResultMetadata metadata = new org.apache.ambari.server.api.services.DeleteResultMetadata();
    metadata.addDeletedKey(""key1"");
    metadata.addException(""key2"", new org.apache.ambari.server.security.authorization.AuthorizationException());
    result.setResultMetadata(metadata);
    java.lang.String expected = ""{\n"" + ((((((((((((((""  \""deleteResult\"" : [\n"" + ""    {\n"") + ""      \""deleted\"" : {\n"") + ""        \""key\"" : \""key1\""\n"") + ""      }\n"") + ""    },\n"") + ""    {\n"") + ""      \""error\"" : {\n"") + ""        \""key\"" : \""key2\"",\n"") + ""        \""code\"" : 403,\n"") + ""        \""message\"" : \""The authenticated user is not authorized to perform the requested operation\""\n"") + ""      }\n"") + ""    }\n"") + ""  ]\n"") + ""}"");
    java.lang.String json = new org.apache.ambari.server.api.services.serializers.JsonSerializer().serialize(result).toString().replace(""\r"", """");
    org.junit.Assert.assertEquals(expected, json);
}","testDeleteResultMetadata()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/serializers/JsonSerializerTest.java","5af6e562c26da91417e4d6d8407eb0cb72e2d9a4
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
5af48693efa2dad3b702f64f87e6daaec253c869
2b539ef17d21c42690a3c98bf9e3198d31354b50
498a13bab6f38ffa529da1a5cdd7cc400728ca01
760e9b7504aa7927ea78e6eb02c97b14fa98b1a2
7eb4bc6b9905cc6df6aee2cfce662e7b53fe6d85
dd535bcf81398132f973faf3a58e71c9aa66e51b
00484f9c9da0653a4f840643ac2575f792f098e9
34b7929db75bd2ceabf2d6a8438e60a25190cf1d
bb45951281054e6e3643251733182dffc26a03ca
a12bb10131ca66e48e524500092695ecdcc86fea
76849482eef70ae3180deee2707d6cdfd1789414
4235a3db92b61c6d82491e2bffaf6207c5f203ae
052abb79b5def58a552350d5d9043ec02de98ffc
0179792b0c265d6b0d074792e6a04846a090ae74
8386243721f62021580e136be20d576e2e51ed64
9a525ef0227c763fdfdb8822a9796be5c5e80355
8d9a423e44630fb73ce70857069db7dc26eefbb1
e3e237a088626235d518087a25069115ea905bd4
0c5f8d21dc935bad434fd54f918b47e828f5a397
53fc74b27397be7251fc84a53bf20096e9b3eb3b
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testAdviseConfiguration","TRUE","7","assertTrue
assertEquals","{
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> props = createProps();
    java.util.Map<java.lang.String, org.apache.ambari.server.topology.AdvisedConfiguration> advisedConfigurations = new java.util.HashMap<>();
    EasyMock.expect(clusterTopology.getBlueprint()).andReturn(blueprint).anyTimes();
    EasyMock.expect(clusterTopology.getHostGroupInfo()).andReturn(createHostGroupInfo()).anyTimes();
    EasyMock.expect(clusterTopology.getAdvisedConfigurations()).andReturn(advisedConfigurations).anyTimes();
    EasyMock.expect(clusterTopology.getConfiguration()).andReturn(configuration).anyTimes();
    EasyMock.expect(clusterTopology.isClusterKerberosEnabled()).andReturn(false).anyTimes();
    EasyMock.expect(clusterTopology.getConfigRecommendationStrategy()).andReturn(org.apache.ambari.server.topology.ConfigRecommendationStrategy.ALWAYS_APPLY).anyTimes();
    EasyMock.expect(blueprint.getStack()).andReturn(stack).anyTimes();
    EasyMock.expect(stack.getVersion()).andReturn(""2.3"").anyTimes();
    EasyMock.expect(stack.getName()).andReturn(""HDP"").anyTimes();
    EasyMock.expect(stack.getConfiguration(java.util.Arrays.asList(""HDFS"", ""YARN"", ""HIVE""))).andReturn(createStackDefaults()).anyTimes();
    EasyMock.expect(blueprint.getServices()).andReturn(java.util.Arrays.asList(""HDFS"", ""YARN"", ""HIVE"")).anyTimes();
    EasyMock.expect(blueprint.getHostGroups()).andReturn(createHostGroupMap()).anyTimes();
    EasyMock.expect(blueprint.isValidConfigType(""core-site"")).andReturn(true).anyTimes();
    EasyMock.expect(hostGroup.getComponentNames()).andReturn(java.util.Arrays.asList(""comp1"", ""comp2"")).anyTimes();
    EasyMock.expect(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessorTest.stackAdvisorHelper.recommend(EasyMock.anyObject(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.class))).andReturn(createRecommendationResponse());
    EasyMock.expect(configuration.getFullProperties()).andReturn(props).anyTimes();
    EasyMock.replay(clusterTopology, blueprint, stack, hostGroup, configuration, org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessorTest.stackAdvisorHelper);
    underTest.adviseConfiguration(clusterTopology, props);
    org.junit.Assert.assertTrue(advisedConfigurations.get(""core-site"").getProperties().containsKey(""dummyKey1""));
    org.junit.Assert.assertTrue(advisedConfigurations.get(""core-site"").getProperties().containsKey(""dummyKey3""));
    org.junit.Assert.assertTrue(advisedConfigurations.get(""core-site"").getPropertyValueAttributes().containsKey(""dummyKey2""));
    org.junit.Assert.assertTrue(advisedConfigurations.get(""core-site"").getPropertyValueAttributes().containsKey(""dummyKey3""));
    org.junit.Assert.assertEquals(""dummyValue"", advisedConfigurations.get(""core-site"").getProperties().get(""dummyKey1""));
    org.junit.Assert.assertEquals(java.lang.Boolean.toString(true), advisedConfigurations.get(""core-site"").getPropertyValueAttributes().get(""dummyKey2"").getDelete());
}","testAdviseConfiguration()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessorTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
64c9ef8a58717f00251e57ebc61870b39d63c692
9c4bb4cb319f001615a2c97da52dcb1e3e34c1bf
d7eadd078c68bf0b4ccb3c54eaba47400f41280a
bf637950901f2b0f213c1cc149f5e49b8a8d0968
ef34cb4ee57c58687ba7db7adfbb5960c0b267da
ebfc8486463004714d69cf985f37ea6c02ed8bb9
9741236f3c8b4a8a293fa0b7db5c64c0e7aa704d
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
6bd2de218e6def935f7a7e0d68a84f81669776c7
9991ad88b8a226fe6fce8b28b17feec314112fa0
f3ffe0c2094bd619cffbdd2daf4a0aa7e033f128
6d06814f729d45db11d63465d0e9d640c49d2b23
fe690bfdc71ecfb0d66285a13ab2b3babccb0b8d
c8e138d98fcfbd25a7d8c46726c956fa50f30fac"
"testAdviseConfigurationWithOnlyStackDefaultsApply","TRUE","7","assertTrue
assertFalse
assertEquals","{
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> props = createProps();
    java.util.Map<java.lang.String, org.apache.ambari.server.topology.AdvisedConfiguration> advisedConfigurations = new java.util.HashMap<>();
    EasyMock.expect(clusterTopology.getBlueprint()).andReturn(blueprint).anyTimes();
    EasyMock.expect(clusterTopology.getHostGroupInfo()).andReturn(createHostGroupInfo()).anyTimes();
    EasyMock.expect(clusterTopology.getAdvisedConfigurations()).andReturn(advisedConfigurations).anyTimes();
    EasyMock.expect(clusterTopology.getConfiguration()).andReturn(configuration).anyTimes();
    EasyMock.expect(clusterTopology.isClusterKerberosEnabled()).andReturn(false).anyTimes();
    EasyMock.expect(clusterTopology.getConfigRecommendationStrategy()).andReturn(org.apache.ambari.server.topology.ConfigRecommendationStrategy.ONLY_STACK_DEFAULTS_APPLY);
    EasyMock.expect(blueprint.getStack()).andReturn(stack).anyTimes();
    EasyMock.expect(stack.getVersion()).andReturn(""2.3"").anyTimes();
    EasyMock.expect(stack.getName()).andReturn(""HDP"").anyTimes();
    EasyMock.expect(stack.getConfiguration(java.util.Arrays.asList(""HDFS"", ""YARN"", ""HIVE""))).andReturn(createStackDefaults()).anyTimes();
    EasyMock.expect(blueprint.getServices()).andReturn(java.util.Arrays.asList(""HDFS"", ""YARN"", ""HIVE"")).anyTimes();
    EasyMock.expect(blueprint.getHostGroups()).andReturn(createHostGroupMap()).anyTimes();
    EasyMock.expect(blueprint.isValidConfigType(""core-site"")).andReturn(true).anyTimes();
    EasyMock.expect(hostGroup.getComponentNames()).andReturn(java.util.Arrays.asList(""comp1"", ""comp2"")).anyTimes();
    EasyMock.expect(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessorTest.stackAdvisorHelper.recommend(EasyMock.anyObject(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.class))).andReturn(createRecommendationResponse());
    EasyMock.expect(configuration.getFullProperties()).andReturn(props).anyTimes();
    EasyMock.replay(clusterTopology, blueprint, stack, hostGroup, configuration, org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessorTest.stackAdvisorHelper);
    underTest.adviseConfiguration(clusterTopology, props);
    org.junit.Assert.assertTrue(advisedConfigurations.get(""core-site"").getProperties().containsKey(""dummyKey1""));
    org.junit.Assert.assertFalse(advisedConfigurations.get(""core-site"").getProperties().containsKey(""dummyKey3""));
    org.junit.Assert.assertTrue(advisedConfigurations.get(""core-site"").getPropertyValueAttributes().containsKey(""dummyKey2""));
    org.junit.Assert.assertFalse(advisedConfigurations.get(""core-site"").getPropertyValueAttributes().containsKey(""dummyKey3""));
    org.junit.Assert.assertEquals(""dummyValue"", advisedConfigurations.get(""core-site"").getProperties().get(""dummyKey1""));
    org.junit.Assert.assertEquals(java.lang.Boolean.toString(true), advisedConfigurations.get(""core-site"").getPropertyValueAttributes().get(""dummyKey2"").getDelete());
}","testAdviseConfigurationWithOnlyStackDefaultsApply()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessorTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
64c9ef8a58717f00251e57ebc61870b39d63c692
9c4bb4cb319f001615a2c97da52dcb1e3e34c1bf
d7eadd078c68bf0b4ccb3c54eaba47400f41280a
bf637950901f2b0f213c1cc149f5e49b8a8d0968
ef34cb4ee57c58687ba7db7adfbb5960c0b267da
ebfc8486463004714d69cf985f37ea6c02ed8bb9
9741236f3c8b4a8a293fa0b7db5c64c0e7aa704d
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
6bd2de218e6def935f7a7e0d68a84f81669776c7
9991ad88b8a226fe6fce8b28b17feec314112fa0
f3ffe0c2094bd619cffbdd2daf4a0aa7e033f128
6d06814f729d45db11d63465d0e9d640c49d2b23
fe690bfdc71ecfb0d66285a13ab2b3babccb0b8d
c8e138d98fcfbd25a7d8c46726c956fa50f30fac"
"testAdviseConfigurationWithOnlyStackDefaultsApplyWhenNoUserInputForDefault","TRUE","5","assertTrue
assertEquals","{
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> props = createProps();
    props.get(""core-site"").put(""dummyKey3"", ""stackDefaultValue"");
    java.util.Map<java.lang.String, org.apache.ambari.server.topology.AdvisedConfiguration> advisedConfigurations = new java.util.HashMap<>();
    EasyMock.expect(clusterTopology.getBlueprint()).andReturn(blueprint).anyTimes();
    EasyMock.expect(clusterTopology.getHostGroupInfo()).andReturn(createHostGroupInfo()).anyTimes();
    EasyMock.expect(clusterTopology.getAdvisedConfigurations()).andReturn(advisedConfigurations).anyTimes();
    EasyMock.expect(clusterTopology.getConfiguration()).andReturn(configuration).anyTimes();
    EasyMock.expect(clusterTopology.isClusterKerberosEnabled()).andReturn(false).anyTimes();
    EasyMock.expect(clusterTopology.getConfigRecommendationStrategy()).andReturn(org.apache.ambari.server.topology.ConfigRecommendationStrategy.ONLY_STACK_DEFAULTS_APPLY);
    EasyMock.expect(blueprint.getStack()).andReturn(stack).anyTimes();
    EasyMock.expect(stack.getVersion()).andReturn(""2.3"").anyTimes();
    EasyMock.expect(stack.getName()).andReturn(""HDP"").anyTimes();
    EasyMock.expect(stack.getConfiguration(java.util.Arrays.asList(""HDFS"", ""YARN"", ""HIVE""))).andReturn(createStackDefaults()).anyTimes();
    EasyMock.expect(blueprint.getServices()).andReturn(java.util.Arrays.asList(""HDFS"", ""YARN"", ""HIVE"")).anyTimes();
    EasyMock.expect(blueprint.getHostGroups()).andReturn(createHostGroupMap()).anyTimes();
    EasyMock.expect(blueprint.isValidConfigType(""core-site"")).andReturn(true).anyTimes();
    EasyMock.expect(hostGroup.getComponentNames()).andReturn(java.util.Arrays.asList(""comp1"", ""comp2"")).anyTimes();
    EasyMock.expect(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessorTest.stackAdvisorHelper.recommend(EasyMock.anyObject(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.class))).andReturn(createRecommendationResponse());
    EasyMock.expect(configuration.getFullProperties()).andReturn(props).anyTimes();
    EasyMock.replay(clusterTopology, blueprint, stack, hostGroup, configuration, org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessorTest.stackAdvisorHelper);
    underTest.adviseConfiguration(clusterTopology, props);
    org.junit.Assert.assertTrue(advisedConfigurations.get(""core-site"").getProperties().containsKey(""dummyKey1""));
    org.junit.Assert.assertTrue(advisedConfigurations.get(""core-site"").getPropertyValueAttributes().containsKey(""dummyKey2""));
    org.junit.Assert.assertEquals(""dummyValue"", advisedConfigurations.get(""core-site"").getProperties().get(""dummyKey1""));
    org.junit.Assert.assertEquals(java.lang.Boolean.toString(true), advisedConfigurations.get(""core-site"").getPropertyValueAttributes().get(""dummyKey2"").getDelete());
}","testAdviseConfigurationWithOnlyStackDefaultsApplyWhenNoUserInputForDefault()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessorTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
64c9ef8a58717f00251e57ebc61870b39d63c692
9c4bb4cb319f001615a2c97da52dcb1e3e34c1bf
d7eadd078c68bf0b4ccb3c54eaba47400f41280a
bf637950901f2b0f213c1cc149f5e49b8a8d0968
ef34cb4ee57c58687ba7db7adfbb5960c0b267da
ebfc8486463004714d69cf985f37ea6c02ed8bb9
9741236f3c8b4a8a293fa0b7db5c64c0e7aa704d
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
6bd2de218e6def935f7a7e0d68a84f81669776c7
9991ad88b8a226fe6fce8b28b17feec314112fa0
f3ffe0c2094bd619cffbdd2daf4a0aa7e033f128
6d06814f729d45db11d63465d0e9d640c49d2b23
fe690bfdc71ecfb0d66285a13ab2b3babccb0b8d
c8e138d98fcfbd25a7d8c46726c956fa50f30fac"
"testAdviseConfigurationWith_ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES","TRUE","5","assertTrue
assertEquals","{
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> props = createProps();
    java.util.Map<java.lang.String, org.apache.ambari.server.topology.AdvisedConfiguration> advisedConfigurations = new java.util.HashMap<>();
    EasyMock.expect(clusterTopology.getBlueprint()).andReturn(blueprint).anyTimes();
    EasyMock.expect(clusterTopology.getHostGroupInfo()).andReturn(createHostGroupInfo()).anyTimes();
    EasyMock.expect(clusterTopology.getAdvisedConfigurations()).andReturn(advisedConfigurations).anyTimes();
    EasyMock.expect(clusterTopology.getConfiguration()).andReturn(configuration).anyTimes();
    EasyMock.expect(clusterTopology.isClusterKerberosEnabled()).andReturn(false).anyTimes();
    EasyMock.expect(clusterTopology.getConfigRecommendationStrategy()).andReturn(org.apache.ambari.server.topology.ConfigRecommendationStrategy.ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES).anyTimes();
    EasyMock.expect(blueprint.getStack()).andReturn(stack).anyTimes();
    EasyMock.expect(stack.getVersion()).andReturn(""2.3"").anyTimes();
    EasyMock.expect(stack.getName()).andReturn(""HDP"").anyTimes();
    EasyMock.expect(stack.getConfiguration(java.util.Arrays.asList(""HDFS"", ""YARN"", ""HIVE""))).andReturn(createStackDefaults()).anyTimes();
    EasyMock.expect(blueprint.getServices()).andReturn(java.util.Arrays.asList(""HDFS"", ""YARN"", ""HIVE"")).anyTimes();
    EasyMock.expect(blueprint.getHostGroups()).andReturn(createHostGroupMap()).anyTimes();
    EasyMock.expect(blueprint.isValidConfigType(""core-site"")).andReturn(true).anyTimes();
    EasyMock.expect(hostGroup.getComponentNames()).andReturn(java.util.Arrays.asList(""comp1"", ""comp2"")).anyTimes();
    EasyMock.expect(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessorTest.stackAdvisorHelper.recommend(EasyMock.anyObject(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.class))).andReturn(createRecommendationResponse());
    EasyMock.expect(configuration.getFullProperties()).andReturn(props).anyTimes();
    EasyMock.replay(clusterTopology, blueprint, stack, hostGroup, configuration, org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessorTest.stackAdvisorHelper);
    underTest.adviseConfiguration(clusterTopology, props);
    org.junit.Assert.assertTrue(advisedConfigurations.get(""core-site"").getProperties().containsKey(""dummyKey1""));
    org.junit.Assert.assertTrue(advisedConfigurations.get(""core-site"").getPropertyValueAttributes().containsKey(""dummyKey2""));
    org.junit.Assert.assertEquals(""dummyValue"", advisedConfigurations.get(""core-site"").getProperties().get(""dummyKey1""));
    org.junit.Assert.assertEquals(java.lang.Boolean.toString(true), advisedConfigurations.get(""core-site"").getPropertyValueAttributes().get(""dummyKey2"").getDelete());
}","testAdviseConfigurationWith_ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessorTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
64c9ef8a58717f00251e57ebc61870b39d63c692
9c4bb4cb319f001615a2c97da52dcb1e3e34c1bf
d7eadd078c68bf0b4ccb3c54eaba47400f41280a
bf637950901f2b0f213c1cc149f5e49b8a8d0968
ef34cb4ee57c58687ba7db7adfbb5960c0b267da
ebfc8486463004714d69cf985f37ea6c02ed8bb9
9741236f3c8b4a8a293fa0b7db5c64c0e7aa704d
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
6bd2de218e6def935f7a7e0d68a84f81669776c7
9991ad88b8a226fe6fce8b28b17feec314112fa0
f3ffe0c2094bd619cffbdd2daf4a0aa7e033f128
6d06814f729d45db11d63465d0e9d640c49d2b23
fe690bfdc71ecfb0d66285a13ab2b3babccb0b8d
c8e138d98fcfbd25a7d8c46726c956fa50f30fac"
"testAdviseConfigurationWhenConfigurationRecommendFails","TRUE","2","assertEquals","{
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> props = createProps();
    java.util.Map<java.lang.String, org.apache.ambari.server.topology.AdvisedConfiguration> advisedConfigurations = new java.util.HashMap<>();
    EasyMock.expect(clusterTopology.getBlueprint()).andReturn(blueprint).anyTimes();
    EasyMock.expect(clusterTopology.getHostGroupInfo()).andReturn(createHostGroupInfo()).anyTimes();
    EasyMock.expect(clusterTopology.getAdvisedConfigurations()).andReturn(advisedConfigurations).anyTimes();
    EasyMock.expect(clusterTopology.getConfiguration()).andReturn(configuration).anyTimes();
    EasyMock.expect(clusterTopology.isClusterKerberosEnabled()).andReturn(false).anyTimes();
    EasyMock.expect(blueprint.getStack()).andReturn(stack).anyTimes();
    EasyMock.expect(stack.getVersion()).andReturn(""2.3"").anyTimes();
    EasyMock.expect(stack.getName()).andReturn(""HDP"").anyTimes();
    EasyMock.expect(blueprint.getHostGroups()).andReturn(createHostGroupMap()).anyTimes();
    EasyMock.expect(hostGroup.getComponentNames()).andReturn(java.util.Arrays.asList(""comp1"", ""comp2"")).anyTimes();
    EasyMock.expect(blueprint.getServices()).andReturn(java.util.Arrays.asList(""HDFS"", ""YARN"", ""HIVE"")).anyTimes();
    EasyMock.expect(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessorTest.stackAdvisorHelper.recommend(EasyMock.anyObject(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.class))).andThrow(new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorException(""ex""));
    EasyMock.expect(configuration.getFullProperties()).andReturn(props);
    EasyMock.replay(clusterTopology, blueprint, stack, hostGroup, configuration, org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessorTest.stackAdvisorHelper);
    try {
        underTest.adviseConfiguration(clusterTopology, props);
        org.junit.Assert.fail(""Invalid state"");
    } catch (org.apache.ambari.server.controller.internal.ConfigurationTopologyException e) {
        org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessor.RECOMMENDATION_FAILED, e.getMessage());
    }
}","testAdviseConfigurationWhenConfigurationRecommendFails()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessorTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
64c9ef8a58717f00251e57ebc61870b39d63c692
9c4bb4cb319f001615a2c97da52dcb1e3e34c1bf
d7eadd078c68bf0b4ccb3c54eaba47400f41280a
bf637950901f2b0f213c1cc149f5e49b8a8d0968
ef34cb4ee57c58687ba7db7adfbb5960c0b267da
ebfc8486463004714d69cf985f37ea6c02ed8bb9
9741236f3c8b4a8a293fa0b7db5c64c0e7aa704d
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
6bd2de218e6def935f7a7e0d68a84f81669776c7
9991ad88b8a226fe6fce8b28b17feec314112fa0
f3ffe0c2094bd619cffbdd2daf4a0aa7e033f128
6d06814f729d45db11d63465d0e9d640c49d2b23
fe690bfdc71ecfb0d66285a13ab2b3babccb0b8d
c8e138d98fcfbd25a7d8c46726c956fa50f30fac"
"testAdviseConfigurationWhenConfigurationRecommendHasInvalidResponse","TRUE","2","assertEquals","{
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> props = createProps();
    java.util.Map<java.lang.String, org.apache.ambari.server.topology.AdvisedConfiguration> advisedConfigurations = new java.util.HashMap<>();
    EasyMock.expect(clusterTopology.getBlueprint()).andReturn(blueprint).anyTimes();
    EasyMock.expect(clusterTopology.getHostGroupInfo()).andReturn(createHostGroupInfo()).anyTimes();
    EasyMock.expect(clusterTopology.getAdvisedConfigurations()).andReturn(advisedConfigurations).anyTimes();
    EasyMock.expect(clusterTopology.getConfiguration()).andReturn(configuration).anyTimes();
    EasyMock.expect(clusterTopology.isClusterKerberosEnabled()).andReturn(false).anyTimes();
    EasyMock.expect(blueprint.getStack()).andReturn(stack).anyTimes();
    EasyMock.expect(stack.getVersion()).andReturn(""2.3"").anyTimes();
    EasyMock.expect(stack.getName()).andReturn(""HDP"").anyTimes();
    EasyMock.expect(blueprint.getServices()).andReturn(java.util.Arrays.asList(""HDFS"", ""YARN"", ""HIVE"")).anyTimes();
    EasyMock.expect(blueprint.getHostGroups()).andReturn(createHostGroupMap()).anyTimes();
    EasyMock.expect(hostGroup.getComponentNames()).andReturn(java.util.Arrays.asList(""comp1"", ""comp2"")).anyTimes();
    EasyMock.expect(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessorTest.stackAdvisorHelper.recommend(EasyMock.anyObject(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.class))).andReturn(new org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse());
    EasyMock.expect(configuration.getFullProperties()).andReturn(props);
    EasyMock.replay(clusterTopology, blueprint, stack, hostGroup, configuration, org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessorTest.stackAdvisorHelper);
    try {
        underTest.adviseConfiguration(clusterTopology, props);
        org.junit.Assert.fail(""Invalid state"");
    } catch (org.apache.ambari.server.controller.internal.ConfigurationTopologyException e) {
        org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorBlueprintProcessor.INVALID_RESPONSE, e.getMessage());
    }
}","testAdviseConfigurationWhenConfigurationRecommendHasInvalidResponse()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessorTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
64c9ef8a58717f00251e57ebc61870b39d63c692
9c4bb4cb319f001615a2c97da52dcb1e3e34c1bf
d7eadd078c68bf0b4ccb3c54eaba47400f41280a
bf637950901f2b0f213c1cc149f5e49b8a8d0968
ef34cb4ee57c58687ba7db7adfbb5960c0b267da
ebfc8486463004714d69cf985f37ea6c02ed8bb9
9741236f3c8b4a8a293fa0b7db5c64c0e7aa704d
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
6bd2de218e6def935f7a7e0d68a84f81669776c7
9991ad88b8a226fe6fce8b28b17feec314112fa0
f3ffe0c2094bd619cffbdd2daf4a0aa7e033f128
6d06814f729d45db11d63465d0e9d640c49d2b23
fe690bfdc71ecfb0d66285a13ab2b3babccb0b8d
c8e138d98fcfbd25a7d8c46726c956fa50f30fac"
"testCreateFromString","TRUE","2","assertEquals","{
    java.lang.String message = ""message"";
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorException e = new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorException(message);
    org.junit.Assert.assertEquals(message, e.getMessage());
}","testCreateFromString()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorExceptionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
9f74a44a1d27597259912c0c2141e43907536223
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
96f197ad1ee2c3d418f2428931e8af130f932707
9a525ef0227c763fdfdb8822a9796be5c5e80355
0c5f8d21dc935bad434fd54f918b47e828f5a397
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testCreateFromException","TRUE","2","assertEquals","{
    java.lang.String message = ""message"";
    java.lang.Exception e = new java.lang.Exception(""another message"");
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorException sae = new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorException(message, e);
    org.junit.Assert.assertEquals(message, sae.getMessage());
}","testCreateFromException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorExceptionTest.java","c2409e740f84d6f051659b3b36d853902e698a60
9f74a44a1d27597259912c0c2141e43907536223
5357f3923946ab1940cb4eb047c8ca19a4ea75c7
ff096b56b547df4a43f57045d1e501ba4976adb3
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
0179792b0c265d6b0d074792e6a04846a090ae74
69dd21254e051a1cdf8dcbb8fd3b909a31fd8926
96f197ad1ee2c3d418f2428931e8af130f932707
9a525ef0227c763fdfdb8822a9796be5c5e80355
0c5f8d21dc935bad434fd54f918b47e828f5a397
2e2a012ae6ef509c2e9de50859702e9a57c4e61f
92aa6d537a1d2e73580634b2f693411dcab81360
c104d29e1526ee22dab4ad4fe255d1cc1cf0c5de
e654c60844caca7c1b627ce0584f0452c4e9500a"
"testValidate_returnsCommandResult","TRUE","2","assertEquals","{
    org.apache.ambari.server.configuration.Configuration configuration = Mockito.mock(org.apache.ambari.server.configuration.Configuration.class);
    Mockito.when(configuration.getRecommendationsArtifactsRolloverMax()).thenReturn(100);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo metaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    org.apache.ambari.server.state.ServiceInfo service = Mockito.mock(org.apache.ambari.server.state.ServiceInfo.class);
    Mockito.when(metaInfo.getService(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenReturn(service);
    Mockito.when(service.getServiceAdvisorType()).thenReturn(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper helper = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelperTest.stackAdvisorHelperSpy(configuration, saRunner, metaInfo);
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.validations.ValidationResponse> command = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand.class);
    org.apache.ambari.server.api.services.stackadvisor.validations.ValidationResponse expected = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.validations.ValidationResponse.class);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType requestType = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.HOST_GROUPS;
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(""stackName"", ""stackVersion"").ofType(requestType).build();
    Mockito.when(command.invoke(request, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON)).thenReturn(expected);
    Mockito.doReturn(command).when(helper).createValidationCommand(""ZOOKEEPER"", request);
    org.apache.ambari.server.api.services.stackadvisor.validations.ValidationResponse response = helper.validate(request);
    org.junit.Assert.assertEquals(expected, response);
}","testValidate_returnsCommandResult()","Test
SuppressWarnings","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testValidate_commandThrowsException_throwsException","FALSE","0","None","{
    org.apache.ambari.server.configuration.Configuration configuration = Mockito.mock(org.apache.ambari.server.configuration.Configuration.class);
    Mockito.when(configuration.getRecommendationsArtifactsRolloverMax()).thenReturn(100);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo metaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    org.apache.ambari.server.state.ServiceInfo service = Mockito.mock(org.apache.ambari.server.state.ServiceInfo.class);
    Mockito.when(metaInfo.getService(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenReturn(service);
    Mockito.when(service.getServiceAdvisorType()).thenReturn(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper helper = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelperTest.stackAdvisorHelperSpy(configuration, saRunner, metaInfo);
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.validations.ValidationResponse> command = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand.class);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType requestType = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.HOST_GROUPS;
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(""stackName"", ""stackVersion"").ofType(requestType).build();
    Mockito.when(command.invoke(request, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON)).thenThrow(new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorException(""message""));
    Mockito.doReturn(command).when(helper).createValidationCommand(""ZOOKEEPER"", request);
    helper.validate(request);
    org.junit.Assert.fail();
}","testValidate_commandThrowsException_throwsException()","Test
SuppressWarnings","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testRecommend_returnsCommandResult","TRUE","2","assertEquals","{
    org.apache.ambari.server.configuration.Configuration configuration = Mockito.mock(org.apache.ambari.server.configuration.Configuration.class);
    Mockito.when(configuration.getRecommendationsArtifactsRolloverMax()).thenReturn(100);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo metaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    org.apache.ambari.server.state.ServiceInfo service = Mockito.mock(org.apache.ambari.server.state.ServiceInfo.class);
    Mockito.when(metaInfo.getService(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenReturn(service);
    Mockito.when(service.getServiceAdvisorType()).thenReturn(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper helper = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelperTest.stackAdvisorHelperSpy(configuration, saRunner, metaInfo);
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse> command = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand.class);
    org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse expected = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse.class);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType requestType = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.HOST_GROUPS;
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(""stackName"", ""stackVersion"").ofType(requestType).build();
    Mockito.when(command.invoke(request, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON)).thenReturn(expected);
    Mockito.doReturn(command).when(helper).createRecommendationCommand(""ZOOKEEPER"", request);
    org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse response = helper.recommend(request);
    org.junit.Assert.assertEquals(expected, response);
}","testRecommend_returnsCommandResult()","Test
SuppressWarnings","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testRecommend_commandThrowsException_throwsException","FALSE","0","None","{
    org.apache.ambari.server.configuration.Configuration configuration = Mockito.mock(org.apache.ambari.server.configuration.Configuration.class);
    Mockito.when(configuration.getRecommendationsArtifactsRolloverMax()).thenReturn(100);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo metaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    org.apache.ambari.server.state.ServiceInfo service = Mockito.mock(org.apache.ambari.server.state.ServiceInfo.class);
    Mockito.when(metaInfo.getService(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenReturn(service);
    Mockito.when(service.getServiceAdvisorType()).thenReturn(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper helper = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelperTest.stackAdvisorHelperSpy(configuration, saRunner, metaInfo);
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse> command = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand.class);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType requestType = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.HOST_GROUPS;
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(""stackName"", ""stackVersion"").ofType(requestType).build();
    Mockito.when(command.invoke(request, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON)).thenThrow(new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorException(""message""));
    Mockito.doReturn(command).when(helper).createRecommendationCommand(""ZOOKEEPER"", request);
    helper.recommend(request);
    org.junit.Assert.fail(""Expected StackAdvisorException to be thrown"");
}","testRecommend_commandThrowsException_throwsException()","Test
SuppressWarnings","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testCreateRecommendationCommand_returnsComponentLayoutRecommendationCommand","TRUE","2","assertEquals","{
    org.apache.ambari.server.configuration.Configuration configuration = Mockito.mock(org.apache.ambari.server.configuration.Configuration.class);
    Mockito.when(configuration.getRecommendationsArtifactsRolloverMax()).thenReturn(100);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo metaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    org.apache.ambari.server.state.ServiceInfo service = Mockito.mock(org.apache.ambari.server.state.ServiceInfo.class);
    Mockito.when(metaInfo.getService(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenReturn(service);
    Mockito.when(service.getServiceAdvisorType()).thenReturn(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper helper = new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper(configuration, saRunner, metaInfo, null, null);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType requestType = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.HOST_GROUPS;
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(""stackName"", ""stackVersion"").ofType(requestType).build();
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse> command = helper.createRecommendationCommand(""ZOOKEEPER"", request);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.stackadvisor.commands.ComponentLayoutRecommendationCommand.class, command.getClass());
}","testCreateRecommendationCommand_returnsComponentLayoutRecommendationCommand()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testCreateRecommendationCommand_returnsConfigurationRecommendationCommand","FALSE","0","None","{
    testCreateConfigurationRecommendationCommand(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.CONFIGURATIONS, org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType.RECOMMEND_CONFIGURATIONS);
}","testCreateRecommendationCommand_returnsConfigurationRecommendationCommand()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testCreateRecommendationCommand_returnsSingleSignOnConfigurationRecommendationCommand","FALSE","0","None","{
    testCreateConfigurationRecommendationCommand(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.SSO_CONFIGURATIONS, org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType.RECOMMEND_CONFIGURATIONS_FOR_SSO);
}","testCreateRecommendationCommand_returnsSingleSignOnConfigurationRecommendationCommand()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testCreateRecommendationCommand_returnsLDAPConfigurationRecommendationCommand","FALSE","0","None","{
    testCreateConfigurationRecommendationCommand(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.LDAP_CONFIGURATIONS, org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType.RECOMMEND_CONFIGURATIONS_FOR_LDAP);
}","testCreateRecommendationCommand_returnsLDAPConfigurationRecommendationCommand()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testCreateRecommendationCommand_returnsKerberosConfigurationRecommendationCommand","FALSE","0","None","{
    testCreateConfigurationRecommendationCommand(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.KERBEROS_CONFIGURATIONS, org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType.RECOMMEND_CONFIGURATIONS_FOR_KERBEROS);
}","testCreateRecommendationCommand_returnsKerberosConfigurationRecommendationCommand()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testCreateValidationCommand_returnsComponentLayoutValidationCommand","TRUE","2","assertEquals","{
    org.apache.ambari.server.configuration.Configuration configuration = Mockito.mock(org.apache.ambari.server.configuration.Configuration.class);
    Mockito.when(configuration.getRecommendationsArtifactsRolloverMax()).thenReturn(100);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo metaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    org.apache.ambari.server.state.ServiceInfo service = Mockito.mock(org.apache.ambari.server.state.ServiceInfo.class);
    Mockito.when(metaInfo.getService(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenReturn(service);
    Mockito.when(service.getServiceAdvisorType()).thenReturn(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper helper = new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper(configuration, saRunner, metaInfo, null, null);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType requestType = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.HOST_GROUPS;
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(""stackName"", ""stackVersion"").ofType(requestType).build();
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.validations.ValidationResponse> command = helper.createValidationCommand(""ZOOKEEPER"", request);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.stackadvisor.commands.ComponentLayoutValidationCommand.class, command.getClass());
}","testCreateValidationCommand_returnsComponentLayoutValidationCommand()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testCreateValidationCommand_returnsConfigurationValidationCommand","TRUE","2","assertEquals","{
    org.apache.ambari.server.configuration.Configuration configuration = Mockito.mock(org.apache.ambari.server.configuration.Configuration.class);
    Mockito.when(configuration.getRecommendationsArtifactsRolloverMax()).thenReturn(100);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo metaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    org.apache.ambari.server.state.ServiceInfo service = Mockito.mock(org.apache.ambari.server.state.ServiceInfo.class);
    Mockito.when(metaInfo.getService(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenReturn(service);
    Mockito.when(service.getServiceAdvisorType()).thenReturn(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper helper = new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper(configuration, saRunner, metaInfo, null, null);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType requestType = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.CONFIGURATIONS;
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(""stackName"", ""stackVersion"").ofType(requestType).build();
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.validations.ValidationResponse> command = helper.createValidationCommand(""ZOOKEEPER"", request);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.stackadvisor.commands.ConfigurationValidationCommand.class, command.getClass());
}","testCreateValidationCommand_returnsConfigurationValidationCommand()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testCreateRecommendationDependencyCommand_returnsConfigurationDependencyRecommendationCommand","TRUE","2","assertEquals","{
    org.apache.ambari.server.configuration.Configuration configuration = Mockito.mock(org.apache.ambari.server.configuration.Configuration.class);
    Mockito.when(configuration.getRecommendationsArtifactsRolloverMax()).thenReturn(100);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo metaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    org.apache.ambari.server.state.ServiceInfo service = Mockito.mock(org.apache.ambari.server.state.ServiceInfo.class);
    Mockito.when(metaInfo.getService(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenReturn(service);
    Mockito.when(service.getServiceAdvisorType()).thenReturn(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper helper = new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper(configuration, saRunner, metaInfo, null, null);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType requestType = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.CONFIGURATION_DEPENDENCIES;
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(""stackName"", ""stackVersion"").ofType(requestType).build();
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse> command = helper.createRecommendationCommand(""ZOOKEEPER"", request);
    org.junit.Assert.assertEquals(org.apache.ambari.server.api.services.stackadvisor.commands.ConfigurationDependenciesRecommendationCommand.class, command.getClass());
}","testCreateRecommendationDependencyCommand_returnsConfigurationDependencyRecommendationCommand()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testClearCacheAndHost","TRUE","5","assertEquals
assertTrue","{
    java.lang.reflect.Field hostInfoCacheField = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper.class.getDeclaredField(""hostInfoCache"");
    java.lang.reflect.Field configsRecommendationResponseField = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper.class.getDeclaredField(""configsRecommendationResponse"");
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper helper = testClearCachesSetup(hostInfoCacheField, configsRecommendationResponseField);
    helper.clearCaches(""hostName1"");
    java.util.Map<java.lang.String, org.codehaus.jackson.JsonNode> hostInfoCache = ((java.util.Map<java.lang.String, org.codehaus.jackson.JsonNode>) (hostInfoCacheField.get(helper)));
    java.util.Map<java.lang.String, org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse> configsRecommendationResponse = ((java.util.Map<java.lang.String, org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse>) (configsRecommendationResponseField.get(helper)));
    org.junit.Assert.assertEquals(2, hostInfoCache.size());
    org.junit.Assert.assertTrue(hostInfoCache.containsKey(""hostName2""));
    org.junit.Assert.assertTrue(hostInfoCache.containsKey(""hostName3""));
    org.junit.Assert.assertTrue(configsRecommendationResponse.isEmpty());
}","testClearCacheAndHost()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testClearCacheAndHosts","TRUE","4","assertEquals
assertTrue","{
    java.lang.reflect.Field hostInfoCacheField = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper.class.getDeclaredField(""hostInfoCache"");
    java.lang.reflect.Field configsRecommendationResponseField = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper.class.getDeclaredField(""configsRecommendationResponse"");
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper helper = testClearCachesSetup(hostInfoCacheField, configsRecommendationResponseField);
    helper.clearCaches(new java.util.HashSet<>(java.util.Arrays.asList(new java.lang.String[]{ ""hostName1"", ""hostName2"" })));
    java.util.Map<java.lang.String, org.codehaus.jackson.JsonNode> hostInfoCache = ((java.util.Map<java.lang.String, org.codehaus.jackson.JsonNode>) (hostInfoCacheField.get(helper)));
    java.util.Map<java.lang.String, org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse> configsRecommendationResponse = ((java.util.Map<java.lang.String, org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse>) (configsRecommendationResponseField.get(helper)));
    org.junit.Assert.assertEquals(1, hostInfoCache.size());
    org.junit.Assert.assertTrue(hostInfoCache.containsKey(""hostName3""));
    org.junit.Assert.assertTrue(configsRecommendationResponse.isEmpty());
}","testClearCacheAndHosts()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testCacheRecommendations","TRUE","3","assertEquals","{
    org.apache.ambari.server.configuration.Configuration configuration = EasyMock.createNiceMock(org.apache.ambari.server.configuration.Configuration.class);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner stackAdvisorRunner = EasyMock.createNiceMock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo = EasyMock.createNiceMock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    org.apache.ambari.server.controller.internal.AmbariServerConfigurationHandler ambariServerConfigurationHandler = EasyMock.createNiceMock(org.apache.ambari.server.controller.internal.AmbariServerConfigurationHandler.class);
    EasyMock.expect(configuration.getRecommendationsArtifactsRolloverMax()).andReturn(1);
    EasyMock.replay(configuration, stackAdvisorRunner, ambariMetaInfo, ambariServerConfigurationHandler);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper helper = EasyMock.partialMockBuilder(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorHelper.class).withConstructor(org.apache.ambari.server.configuration.Configuration.class, org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class, org.apache.ambari.server.api.services.AmbariMetaInfo.class, org.apache.ambari.server.controller.internal.AmbariServerConfigurationHandler.class, com.google.gson.Gson.class).withArgs(configuration, stackAdvisorRunner, ambariMetaInfo, ambariServerConfigurationHandler, new com.google.gson.Gson()).addMockedMethod(""createRecommendationCommand"").createMock();
    EasyMock.verify(configuration, stackAdvisorRunner, ambariMetaInfo, ambariServerConfigurationHandler);
    EasyMock.reset(ambariMetaInfo);
    org.apache.ambari.server.state.ServiceInfo serviceInfo = new org.apache.ambari.server.state.ServiceInfo();
    serviceInfo.setServiceAdvisorType(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON);
    EasyMock.expect(ambariMetaInfo.getService(EasyMock.anyString(), EasyMock.anyString(), EasyMock.anyString())).andReturn(serviceInfo).atLeastOnce();
    org.apache.ambari.server.api.services.stackadvisor.commands.ConfigurationRecommendationCommand command = EasyMock.createMock(org.apache.ambari.server.api.services.stackadvisor.commands.ConfigurationRecommendationCommand.class);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(null, null).ofType(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.CONFIGURATIONS).build();
    EasyMock.expect(helper.createRecommendationCommand(EasyMock.eq(""ZOOKEEPER""), EasyMock.eq(request))).andReturn(command).times(2);
    org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse response = new org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse();
    response.setServices(new java.util.HashSet<java.lang.String>() {
        {
            add(""service1"");
            add(""service2"");
            add(""service3"");
        }
    });
    EasyMock.expect(command.invoke(EasyMock.eq(request), EasyMock.eq(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON))).andReturn(response).once();
    EasyMock.replay(ambariMetaInfo, helper, command);
    org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse calculatedResponse = helper.recommend(request);
    org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse cachedResponse = helper.recommend(request);
    EasyMock.verify(ambariMetaInfo, helper, command);
    org.junit.Assert.assertEquals(response.getServices(), calculatedResponse.getServices());
    org.junit.Assert.assertEquals(response.getServices(), cachedResponse.getServices());
}","testCacheRecommendations()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorHelperTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
8c3ad1d6469fbe9c095fcc563f1c1a536892a727
d7fcd258d9788923a03d0d121320e0d39636a2cd
fb1e0ca5260d35938df2c10cd75ee5a594873c30
f825ccaec685d1400042c9a42ce03bcd94130e81
9f74a44a1d27597259912c0c2141e43907536223"
"testFromString_returnsHostGroupType","FALSE","0","None","{
    testFromString(""host_groups"", org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.HOST_GROUPS);
}","testFromString_returnsHostGroupType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRequestTypeTest.java","4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
c2409e740f84d6f051659b3b36d853902e698a60
9f74a44a1d27597259912c0c2141e43907536223"
"testFromString_returnsConfigurationsType","FALSE","0","None","{
    testFromString(""configurations"", org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.CONFIGURATIONS);
}","testFromString_returnsConfigurationsType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRequestTypeTest.java","4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
c2409e740f84d6f051659b3b36d853902e698a60
9f74a44a1d27597259912c0c2141e43907536223"
"testFromString_returnsSingleSignOnConfigurationsType","FALSE","0","None","{
    testFromString(""sso-configurations"", org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.SSO_CONFIGURATIONS);
}","testFromString_returnsSingleSignOnConfigurationsType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRequestTypeTest.java","4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
c2409e740f84d6f051659b3b36d853902e698a60
9f74a44a1d27597259912c0c2141e43907536223"
"testFromString_returnsLDAPConfigurationsType","FALSE","0","None","{
    testFromString(""ldap-configurations"", org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.LDAP_CONFIGURATIONS);
}","testFromString_returnsLDAPConfigurationsType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRequestTypeTest.java","4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
c2409e740f84d6f051659b3b36d853902e698a60
9f74a44a1d27597259912c0c2141e43907536223"
"testFromString_returnsKerberosConfigurationsType","FALSE","0","None","{
    testFromString(""kerberos-configurations"", org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.KERBEROS_CONFIGURATIONS);
}","testFromString_returnsKerberosConfigurationsType()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRequestTypeTest.java","4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
c2409e740f84d6f051659b3b36d853902e698a60
9f74a44a1d27597259912c0c2141e43907536223"
"testFromString_throwsException","FALSE","0","None","{
    java.lang.String text = ""unknown_type"";
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.fromString(text);
    org.junit.Assert.fail(""Expected StackAdvisorException"");
}","testFromString_throwsException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRequestTypeTest.java","4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
d27b4454544e98227219e1b7fc0a6c91d905f005
c2409e740f84d6f051659b3b36d853902e698a60
9f74a44a1d27597259912c0c2141e43907536223"
"testRunScript_processStartThrowsException_returnFalse","FALSE","0","None","{
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType saCommandType = org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType.RECOMMEND_COMPONENT_LAYOUT;
    java.io.File actionDirectory = temp.newFolder(""actionDir"");
    java.lang.ProcessBuilder processBuilder = createNiceMock(java.lang.ProcessBuilder.class);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner();
    org.apache.ambari.server.configuration.Configuration configMock = createNiceMock(org.apache.ambari.server.configuration.Configuration.class);
    saRunner.setConfigs(configMock);
    stub(org.powermock.api.easymock.PowerMock.method(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class, ""prepareShellCommand"")).toReturn(processBuilder);
    EasyMock.expect(processBuilder.environment()).andReturn(new java.util.HashMap<>()).times(3);
    EasyMock.expect(processBuilder.start()).andThrow(new java.io.IOException());
    replay(processBuilder, configMock);
    saRunner.runScript(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, saCommandType, actionDirectory);
}","testRunScript_processStartThrowsException_returnFalse()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRunnerTest.java","4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
844024779ccc2c4f31d4bf76bbc7fc113a212490
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
d49c19645d9ef134491b0c225a9235def1a5ac99
9f74a44a1d27597259912c0c2141e43907536223"
"testRunScript_processExitCode1_returnFalse","FALSE","0","None","{
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType saCommandType = org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType.RECOMMEND_COMPONENT_LAYOUT;
    java.io.File actionDirectory = temp.newFolder(""actionDir"");
    java.lang.ProcessBuilder processBuilder = createNiceMock(java.lang.ProcessBuilder.class);
    java.lang.Process process = createNiceMock(java.lang.Process.class);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner();
    org.apache.ambari.server.configuration.Configuration configMock = createNiceMock(org.apache.ambari.server.configuration.Configuration.class);
    saRunner.setConfigs(configMock);
    stub(org.powermock.api.easymock.PowerMock.method(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class, ""prepareShellCommand"")).toReturn(processBuilder);
    EasyMock.expect(processBuilder.environment()).andReturn(new java.util.HashMap<>()).times(3);
    EasyMock.expect(processBuilder.start()).andReturn(process);
    EasyMock.expect(process.waitFor()).andReturn(1);
    replay(processBuilder, process, configMock);
    saRunner.runScript(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, saCommandType, actionDirectory);
}","testRunScript_processExitCode1_returnFalse()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRunnerTest.java","4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
844024779ccc2c4f31d4bf76bbc7fc113a212490
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
d49c19645d9ef134491b0c225a9235def1a5ac99
9f74a44a1d27597259912c0c2141e43907536223"
"testRunScript_processExitCode2_returnFalse","FALSE","0","None","{
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType saCommandType = org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType.RECOMMEND_COMPONENT_LAYOUT;
    java.io.File actionDirectory = temp.newFolder(""actionDir"");
    java.lang.ProcessBuilder processBuilder = createNiceMock(java.lang.ProcessBuilder.class);
    java.lang.Process process = createNiceMock(java.lang.Process.class);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner();
    org.apache.ambari.server.configuration.Configuration configMock = createNiceMock(org.apache.ambari.server.configuration.Configuration.class);
    saRunner.setConfigs(configMock);
    stub(org.powermock.api.easymock.PowerMock.method(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class, ""prepareShellCommand"")).toReturn(processBuilder);
    EasyMock.expect(processBuilder.environment()).andReturn(new java.util.HashMap<>()).times(3);
    EasyMock.expect(processBuilder.start()).andReturn(process);
    EasyMock.expect(process.waitFor()).andReturn(2);
    replay(processBuilder, process, configMock);
    saRunner.runScript(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, saCommandType, actionDirectory);
}","testRunScript_processExitCode2_returnFalse()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRunnerTest.java","4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
844024779ccc2c4f31d4bf76bbc7fc113a212490
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
d49c19645d9ef134491b0c225a9235def1a5ac99
9f74a44a1d27597259912c0c2141e43907536223"
"testRunScript_processExitCodeZero_returnTrue","FALSE","0","None","{
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType saCommandType = org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType.RECOMMEND_COMPONENT_LAYOUT;
    java.io.File actionDirectory = temp.newFolder(""actionDir"");
    java.lang.ProcessBuilder processBuilder = createNiceMock(java.lang.ProcessBuilder.class);
    java.lang.Process process = createNiceMock(java.lang.Process.class);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner();
    org.apache.ambari.server.configuration.Configuration configMock = createNiceMock(org.apache.ambari.server.configuration.Configuration.class);
    saRunner.setConfigs(configMock);
    stub(org.powermock.api.easymock.PowerMock.method(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class, ""prepareShellCommand"")).toReturn(processBuilder);
    EasyMock.expect(processBuilder.environment()).andReturn(new java.util.HashMap<>()).times(3);
    EasyMock.expect(processBuilder.start()).andReturn(process);
    EasyMock.expect(process.waitFor()).andReturn(0);
    replay(processBuilder, process, configMock);
    try {
        saRunner.runScript(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, saCommandType, actionDirectory);
    } catch (org.apache.ambari.server.api.services.stackadvisor.StackAdvisorException ex) {
        org.junit.Assert.fail(""Should not fail with StackAdvisorException"");
    }
}","testRunScript_processExitCodeZero_returnTrue()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorRunnerTest.java","4eee0f56d2fbfdfb0caace955339bc0c46a85a3c
844024779ccc2c4f31d4bf76bbc7fc113a212490
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
d49c19645d9ef134491b0c225a9235def1a5ac99
9f74a44a1d27597259912c0c2141e43907536223"
"testProcessHostGroups","TRUE","22","assertNotNull
assertEquals
assertTrue","{
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    java.io.File file = Mockito.mock(java.io.File.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo metaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    org.apache.ambari.server.api.services.stackadvisor.commands.ConfigurationRecommendationCommand command = new org.apache.ambari.server.api.services.stackadvisor.commands.ConfigurationRecommendationCommand(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType.RECOMMEND_CONFIGURATIONS, file, ""1w"", org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, 1, saRunner, metaInfo, null, null);
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.class);
    java.util.SortedMap<java.lang.String, java.util.SortedSet<java.lang.String>> componentHostGroupMap = new java.util.TreeMap<>();
    java.util.SortedSet<java.lang.String> components1 = new java.util.TreeSet<>();
    components1.add(""component1"");
    components1.add(""component4"");
    components1.add(""component5"");
    componentHostGroupMap.put(""group1"", components1);
    java.util.SortedSet<java.lang.String> components2 = new java.util.TreeSet<>();
    components2.add(""component2"");
    components2.add(""component3"");
    componentHostGroupMap.put(""group2"", components2);
    Mockito.doReturn(componentHostGroupMap).when(request).getHostComponents();
    java.util.Set<org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse.HostGroup> hostGroups = command.processHostGroups(request);
    org.junit.Assert.assertNotNull(hostGroups);
    org.junit.Assert.assertEquals(2, hostGroups.size());
    java.util.Map<java.lang.String, org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse.HostGroup> hostGroupMap = new java.util.HashMap<>();
    for (org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse.HostGroup hostGroup : hostGroups) {
        hostGroupMap.put(hostGroup.getName(), hostGroup);
    }
    org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse.HostGroup hostGroup1 = hostGroupMap.get(""group1"");
    org.junit.Assert.assertNotNull(hostGroup1);
    java.util.Set<java.util.Map<java.lang.String, java.lang.String>> host1Components = hostGroup1.getComponents();
    org.junit.Assert.assertNotNull(host1Components);
    org.junit.Assert.assertEquals(3, host1Components.size());
    java.util.Set<java.lang.String> componentNames1 = new java.util.HashSet<>();
    for (java.util.Map<java.lang.String, java.lang.String> host1Component : host1Components) {
        org.junit.Assert.assertNotNull(host1Component);
        org.junit.Assert.assertEquals(1, host1Component.size());
        java.lang.String componentName = host1Component.get(""name"");
        org.junit.Assert.assertNotNull(componentName);
        componentNames1.add(componentName);
    }
    org.junit.Assert.assertEquals(3, componentNames1.size());
    org.junit.Assert.assertTrue(componentNames1.contains(""component1""));
    org.junit.Assert.assertTrue(componentNames1.contains(""component4""));
    org.junit.Assert.assertTrue(componentNames1.contains(""component5""));
    org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse.HostGroup hostGroup2 = hostGroupMap.get(""group2"");
    org.junit.Assert.assertNotNull(hostGroup2);
    java.util.Set<java.util.Map<java.lang.String, java.lang.String>> host2Components = hostGroup2.getComponents();
    org.junit.Assert.assertNotNull(host2Components);
    org.junit.Assert.assertEquals(2, host2Components.size());
    java.util.Set<java.lang.String> componentNames2 = new java.util.HashSet<>();
    for (java.util.Map<java.lang.String, java.lang.String> host2Component : host2Components) {
        org.junit.Assert.assertNotNull(host2Component);
        org.junit.Assert.assertEquals(1, host2Component.size());
        java.lang.String componentName = host2Component.get(""name"");
        org.junit.Assert.assertNotNull(componentName);
        componentNames2.add(componentName);
    }
    org.junit.Assert.assertEquals(2, componentNames2.size());
    org.junit.Assert.assertTrue(componentNames2.contains(""component2""));
    org.junit.Assert.assertTrue(componentNames2.contains(""component3""));
}","testProcessHostGroups()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/ConfigurationRecommendationCommandTest.java","4dde32c21251ad9485869f2976f0f4a95aa0e43d
d27b4454544e98227219e1b7fc0a6c91d905f005
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
33c8feede6b9ce30839f5961685842f3ff327b73
d7fcd258d9788923a03d0d121320e0d39636a2cd
336a63dac9436d35532135e1e719fa3f8b6ac12f"
"testInvoke_invalidRequest_throwsException","TRUE","2","assertTrue","{
    java.io.File recommendationsDir = temp.newFolder(""recommendationDir"");
    java.lang.String recommendationsArtifactsLifetime = ""1w"";
    int requestId = 0;
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo metaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    Mockito.doReturn(java.util.Collections.emptyList()).when(metaInfo).getStackParentVersions(Matchers.anyString(), Matchers.anyString());
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestResource> command = Mockito.spy(new org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand(recommendationsDir, recommendationsArtifactsLifetime, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, requestId, saRunner, metaInfo, null));
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(""stackName"", ""stackVersion"").build();
    Mockito.doThrow(new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorException(""message"")).when(command).validate(request);
    command.invoke(request, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON);
    org.junit.Assert.assertTrue(false);
}","testInvoke_invalidRequest_throwsException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java","c6db11c87f1cfd5bc9ace42de3616ea545490a9e
4dde32c21251ad9485869f2976f0f4a95aa0e43d
fbc59ede2538f66f55d9d6914d51a84635ba7ac2
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
62d14a016156719c1c873809adc2ca2601a0d10c
f5569daec76e3e089f88ef659bc2804cc398d32f
4240f8496175bf9fb369b9411e71ad1127e356ad
3f2743b58ba65c4bdc7d37df5348d17124bf305a
6b7a7a706d6e4d8c4a5e0300666e56f6704eb00a
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
40bdcb6480abfe6393bac9be961ae53654c1cb2f
b5b9493ff7da82f342a7b39c2c8d273d763c8eae
33c8feede6b9ce30839f5961685842f3ff327b73
614fd801fc489fe27cbb0ea6f1ac4a09ebd75477
d49c19645d9ef134491b0c225a9235def1a5ac99
a80066ae09dc3ccda574b014028a87136573a4c2
fb1e0ca5260d35938df2c10cd75ee5a594873c30
b13bb71dc27494f220f97f1b5c6ba8d05354a55e
9f74a44a1d27597259912c0c2141e43907536223"
"testInvoke_saRunnerNotSucceed_throwsException","TRUE","2","assertTrue","{
    java.io.File recommendationsDir = temp.newFolder(""recommendationDir"");
    java.lang.String recommendationsArtifactsLifetime = ""1w"";
    int requestId = 0;
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo metaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    Mockito.doReturn(java.util.Collections.emptyList()).when(metaInfo).getStackParentVersions(Matchers.anyString(), Matchers.anyString());
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestResource> command = Mockito.spy(new org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand(recommendationsDir, recommendationsArtifactsLifetime, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, requestId, saRunner, metaInfo, null));
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(""stackName"", ""stackVersion"").build();
    java.lang.String hostsJSON = ""{\""hosts\"" : \""localhost\"""";
    java.lang.String servicesJSON = ""{\""services\"" : \""HDFS\"""";
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand.StackAdvisorData data = new org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand.StackAdvisorData(hostsJSON, servicesJSON);
    Mockito.doReturn(hostsJSON).when(command).getHostsInformation(request);
    Mockito.doReturn(servicesJSON).when(command).getServicesInformation(request);
    Mockito.doReturn(data).when(command).adjust(Matchers.any(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand.StackAdvisorData.class), Matchers.any(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.class));
    Mockito.doThrow(new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequestException(""error"")).when(saRunner).runScript(Matchers.any(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.class), Matchers.any(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType.class), Matchers.any(java.io.File.class));
    command.invoke(request, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON);
    org.junit.Assert.assertTrue(false);
}","testInvoke_saRunnerNotSucceed_throwsException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java","c6db11c87f1cfd5bc9ace42de3616ea545490a9e
4dde32c21251ad9485869f2976f0f4a95aa0e43d
fbc59ede2538f66f55d9d6914d51a84635ba7ac2
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
62d14a016156719c1c873809adc2ca2601a0d10c
f5569daec76e3e089f88ef659bc2804cc398d32f
4240f8496175bf9fb369b9411e71ad1127e356ad
3f2743b58ba65c4bdc7d37df5348d17124bf305a
6b7a7a706d6e4d8c4a5e0300666e56f6704eb00a
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
40bdcb6480abfe6393bac9be961ae53654c1cb2f
b5b9493ff7da82f342a7b39c2c8d273d763c8eae
33c8feede6b9ce30839f5961685842f3ff327b73
614fd801fc489fe27cbb0ea6f1ac4a09ebd75477
d49c19645d9ef134491b0c225a9235def1a5ac99
a80066ae09dc3ccda574b014028a87136573a4c2
fb1e0ca5260d35938df2c10cd75ee5a594873c30
b13bb71dc27494f220f97f1b5c6ba8d05354a55e
9f74a44a1d27597259912c0c2141e43907536223"
"testInvoke_adjustThrowsException_throwsException","TRUE","2","assertTrue","{
    java.io.File recommendationsDir = temp.newFolder(""recommendationDir"");
    java.lang.String recommendationsArtifactsLifetime = ""1w"";
    int requestId = 0;
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo metaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    Mockito.doReturn(java.util.Collections.emptyList()).when(metaInfo).getStackParentVersions(Matchers.anyString(), Matchers.anyString());
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestResource> command = Mockito.spy(new org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand(recommendationsDir, recommendationsArtifactsLifetime, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, requestId, saRunner, metaInfo, null));
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(""stackName"", ""stackVersion"").build();
    Mockito.doReturn(""{\""hosts\"" : \""localhost\"""").when(command).getHostsInformation(request);
    Mockito.doReturn(""{\""services\"" : \""HDFS\"""").when(command).getServicesInformation(request);
    Mockito.doThrow(new javax.ws.rs.WebApplicationException()).when(command).adjust(Matchers.any(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand.StackAdvisorData.class), Matchers.any(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.class));
    Mockito.doThrow(new org.apache.ambari.server.api.services.stackadvisor.StackAdvisorException(""error"")).when(saRunner).runScript(Matchers.any(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.class), Matchers.any(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType.class), Matchers.any(java.io.File.class));
    command.invoke(request, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON);
    org.junit.Assert.assertTrue(false);
}","testInvoke_adjustThrowsException_throwsException()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java","c6db11c87f1cfd5bc9ace42de3616ea545490a9e
4dde32c21251ad9485869f2976f0f4a95aa0e43d
fbc59ede2538f66f55d9d6914d51a84635ba7ac2
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
62d14a016156719c1c873809adc2ca2601a0d10c
f5569daec76e3e089f88ef659bc2804cc398d32f
4240f8496175bf9fb369b9411e71ad1127e356ad
3f2743b58ba65c4bdc7d37df5348d17124bf305a
6b7a7a706d6e4d8c4a5e0300666e56f6704eb00a
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
40bdcb6480abfe6393bac9be961ae53654c1cb2f
b5b9493ff7da82f342a7b39c2c8d273d763c8eae
33c8feede6b9ce30839f5961685842f3ff327b73
614fd801fc489fe27cbb0ea6f1ac4a09ebd75477
d49c19645d9ef134491b0c225a9235def1a5ac99
a80066ae09dc3ccda574b014028a87136573a4c2
fb1e0ca5260d35938df2c10cd75ee5a594873c30
b13bb71dc27494f220f97f1b5c6ba8d05354a55e
9f74a44a1d27597259912c0c2141e43907536223"
"testInvoke_success","TRUE","3","assertEquals","{
    java.lang.String expected = ""success"";
    final java.lang.String testResourceString = java.lang.String.format(""{\""type\"": \""%s\""}"", expected);
    final java.io.File recommendationsDir = temp.newFolder(""recommendationDir"");
    java.lang.String recommendationsArtifactsLifetime = ""1w"";
    final int requestId = 2;
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner saRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo metaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    Mockito.doReturn(java.util.Collections.emptyList()).when(metaInfo).getStackParentVersions(Matchers.anyString(), Matchers.anyString());
    final org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestResource> command = Mockito.spy(new org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand(recommendationsDir, recommendationsArtifactsLifetime, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, requestId, saRunner, metaInfo, null));
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(""stackName"", ""stackVersion"").build();
    java.lang.String hostsJSON = ""{\""hosts\"" : \""localhost\"""";
    java.lang.String servicesJSON = ""{\""services\"" : \""HDFS\"""";
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand.StackAdvisorData data = new org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand.StackAdvisorData(hostsJSON, servicesJSON);
    Mockito.doReturn(hostsJSON).when(command).getHostsInformation(request);
    Mockito.doReturn(servicesJSON).when(command).getServicesInformation(request);
    Mockito.doReturn(data).when(command).adjust(Matchers.any(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand.StackAdvisorData.class), Matchers.any(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.class));
    Mockito.doAnswer(invocation -> {
        java.lang.String resultFilePath = java.lang.String.format(""%s/%s"", requestId, command.getResultFileName());
        java.io.File resultFile = new java.io.File(recommendationsDir, resultFilePath);
        resultFile.getParentFile().mkdirs();
        org.apache.commons.io.FileUtils.writeStringToFile(resultFile, testResourceString, java.nio.charset.Charset.defaultCharset());
        return null;
    }).when(saRunner).runScript(Matchers.any(org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.class), Matchers.any(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandType.class), Matchers.any(java.io.File.class));
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestResource result = command.invoke(request, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON);
    org.junit.Assert.assertEquals(expected, result.getType());
    org.junit.Assert.assertEquals(requestId, result.getId());
}","testInvoke_success()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java","c6db11c87f1cfd5bc9ace42de3616ea545490a9e
4dde32c21251ad9485869f2976f0f4a95aa0e43d
fbc59ede2538f66f55d9d6914d51a84635ba7ac2
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
62d14a016156719c1c873809adc2ca2601a0d10c
f5569daec76e3e089f88ef659bc2804cc398d32f
4240f8496175bf9fb369b9411e71ad1127e356ad
3f2743b58ba65c4bdc7d37df5348d17124bf305a
6b7a7a706d6e4d8c4a5e0300666e56f6704eb00a
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
40bdcb6480abfe6393bac9be961ae53654c1cb2f
b5b9493ff7da82f342a7b39c2c8d273d763c8eae
33c8feede6b9ce30839f5961685842f3ff327b73
614fd801fc489fe27cbb0ea6f1ac4a09ebd75477
d49c19645d9ef134491b0c225a9235def1a5ac99
a80066ae09dc3ccda574b014028a87136573a4c2
fb1e0ca5260d35938df2c10cd75ee5a594873c30
b13bb71dc27494f220f97f1b5c6ba8d05354a55e
9f74a44a1d27597259912c0c2141e43907536223"
"testPopulateStackHierarchy","TRUE","8","assertNotNull
assertEquals","{
    java.io.File file = Mockito.mock(java.io.File.class);
    java.lang.String recommendationsArtifactsLifetime = ""1w"";
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner stackAdvisorRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestResource> cmd = new org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand(file, recommendationsArtifactsLifetime, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, 1, stackAdvisorRunner, ambariMetaInfo, null);
    org.codehaus.jackson.node.ObjectNode objectNode = ((org.codehaus.jackson.node.ObjectNode) (cmd.mapper.readTree(""{\""Versions\"": "" + ""{\""stack_name\"": \""stack\"", \""stack_version\"":\""1.0.0\""}}"")));
    Mockito.doReturn(java.util.Arrays.asList(""0.9"", ""0.8"")).when(ambariMetaInfo).getStackParentVersions(""stack"", ""1.0.0"");
    cmd.populateStackHierarchy(objectNode);
    org.codehaus.jackson.JsonNode stackHierarchy = objectNode.get(""Versions"").get(""stack_hierarchy"");
    org.junit.Assert.assertNotNull(stackHierarchy);
    org.codehaus.jackson.JsonNode stackName = stackHierarchy.get(""stack_name"");
    org.junit.Assert.assertNotNull(stackName);
    org.junit.Assert.assertEquals(""stack"", stackName.asText());
    org.codehaus.jackson.node.ArrayNode stackVersions = ((org.codehaus.jackson.node.ArrayNode) (stackHierarchy.get(""stack_versions"")));
    org.junit.Assert.assertNotNull(stackVersions);
    org.junit.Assert.assertEquals(2, stackVersions.size());
    java.util.Iterator<org.codehaus.jackson.JsonNode> stackVersionsElements = stackVersions.getElements();
    org.junit.Assert.assertEquals(""0.9"", stackVersionsElements.next().asText());
    org.junit.Assert.assertEquals(""0.8"", stackVersionsElements.next().asText());
}","testPopulateStackHierarchy()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java","c6db11c87f1cfd5bc9ace42de3616ea545490a9e
4dde32c21251ad9485869f2976f0f4a95aa0e43d
fbc59ede2538f66f55d9d6914d51a84635ba7ac2
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
62d14a016156719c1c873809adc2ca2601a0d10c
f5569daec76e3e089f88ef659bc2804cc398d32f
4240f8496175bf9fb369b9411e71ad1127e356ad
3f2743b58ba65c4bdc7d37df5348d17124bf305a
6b7a7a706d6e4d8c4a5e0300666e56f6704eb00a
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
40bdcb6480abfe6393bac9be961ae53654c1cb2f
b5b9493ff7da82f342a7b39c2c8d273d763c8eae
33c8feede6b9ce30839f5961685842f3ff327b73
614fd801fc489fe27cbb0ea6f1ac4a09ebd75477
d49c19645d9ef134491b0c225a9235def1a5ac99
a80066ae09dc3ccda574b014028a87136573a4c2
fb1e0ca5260d35938df2c10cd75ee5a594873c30
b13bb71dc27494f220f97f1b5c6ba8d05354a55e
9f74a44a1d27597259912c0c2141e43907536223"
"testPopulateAmbariServerProperties","TRUE","3","assertNotNull
assertEquals","{
    java.io.File file = Mockito.mock(java.io.File.class);
    java.lang.String recommendationsArtifactsLifetime = ""1w"";
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner stackAdvisorRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestResource> cmd = new org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand(file, recommendationsArtifactsLifetime, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, 1, stackAdvisorRunner, ambariMetaInfo, null);
    org.codehaus.jackson.node.ObjectNode objectNode = ((org.codehaus.jackson.node.ObjectNode) (cmd.mapper.readTree(""{\""Versions\"": "" + ""{\""stack_name\"": \""stack\"", \""stack_version\"":\""1.0.0\""}}"")));
    java.util.Map<java.lang.String, java.lang.String> props = java.util.Collections.singletonMap(""a"", ""b"");
    Mockito.doReturn(props).when(ambariMetaInfo).getAmbariServerProperties();
    cmd.populateAmbariServerInfo(objectNode);
    org.codehaus.jackson.JsonNode serverProperties = objectNode.get(""ambari-server-properties"");
    org.junit.Assert.assertNotNull(serverProperties);
    org.junit.Assert.assertEquals(""b"", serverProperties.iterator().next().getTextValue());
}","testPopulateAmbariServerProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java","c6db11c87f1cfd5bc9ace42de3616ea545490a9e
4dde32c21251ad9485869f2976f0f4a95aa0e43d
fbc59ede2538f66f55d9d6914d51a84635ba7ac2
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
62d14a016156719c1c873809adc2ca2601a0d10c
f5569daec76e3e089f88ef659bc2804cc398d32f
4240f8496175bf9fb369b9411e71ad1127e356ad
3f2743b58ba65c4bdc7d37df5348d17124bf305a
6b7a7a706d6e4d8c4a5e0300666e56f6704eb00a
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
40bdcb6480abfe6393bac9be961ae53654c1cb2f
b5b9493ff7da82f342a7b39c2c8d273d763c8eae
33c8feede6b9ce30839f5961685842f3ff327b73
614fd801fc489fe27cbb0ea6f1ac4a09ebd75477
d49c19645d9ef134491b0c225a9235def1a5ac99
a80066ae09dc3ccda574b014028a87136573a4c2
fb1e0ca5260d35938df2c10cd75ee5a594873c30
b13bb71dc27494f220f97f1b5c6ba8d05354a55e
9f74a44a1d27597259912c0c2141e43907536223"
"testPopulateStackHierarchy_noParents","TRUE","6","assertNotNull
assertEquals","{
    java.io.File file = Mockito.mock(java.io.File.class);
    java.lang.String recommendationsArtifactsLifetime = ""1w"";
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner stackAdvisorRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommand<org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestResource> cmd = new org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand(file, recommendationsArtifactsLifetime, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, 1, stackAdvisorRunner, ambariMetaInfo, null);
    org.codehaus.jackson.node.ObjectNode objectNode = ((org.codehaus.jackson.node.ObjectNode) (cmd.mapper.readTree(""{\""Versions\"": "" + ""{\""stack_name\"": \""stack\"", \""stack_version\"":\""1.0.0\""}}"")));
    Mockito.doReturn(java.util.Collections.emptyList()).when(ambariMetaInfo).getStackParentVersions(""stack"", ""1.0.0"");
    cmd.populateStackHierarchy(objectNode);
    org.codehaus.jackson.JsonNode stackHierarchy = objectNode.get(""Versions"").get(""stack_hierarchy"");
    org.junit.Assert.assertNotNull(stackHierarchy);
    org.codehaus.jackson.JsonNode stackName = stackHierarchy.get(""stack_name"");
    org.junit.Assert.assertNotNull(stackName);
    org.junit.Assert.assertEquals(""stack"", stackName.asText());
    org.codehaus.jackson.node.ArrayNode stackVersions = ((org.codehaus.jackson.node.ArrayNode) (stackHierarchy.get(""stack_versions"")));
    org.junit.Assert.assertNotNull(stackVersions);
    org.junit.Assert.assertEquals(0, stackVersions.size());
}","testPopulateStackHierarchy_noParents()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java","c6db11c87f1cfd5bc9ace42de3616ea545490a9e
4dde32c21251ad9485869f2976f0f4a95aa0e43d
fbc59ede2538f66f55d9d6914d51a84635ba7ac2
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
62d14a016156719c1c873809adc2ca2601a0d10c
f5569daec76e3e089f88ef659bc2804cc398d32f
4240f8496175bf9fb369b9411e71ad1127e356ad
3f2743b58ba65c4bdc7d37df5348d17124bf305a
6b7a7a706d6e4d8c4a5e0300666e56f6704eb00a
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
40bdcb6480abfe6393bac9be961ae53654c1cb2f
b5b9493ff7da82f342a7b39c2c8d273d763c8eae
33c8feede6b9ce30839f5961685842f3ff327b73
614fd801fc489fe27cbb0ea6f1ac4a09ebd75477
d49c19645d9ef134491b0c225a9235def1a5ac99
a80066ae09dc3ccda574b014028a87136573a4c2
fb1e0ca5260d35938df2c10cd75ee5a594873c30
b13bb71dc27494f220f97f1b5c6ba8d05354a55e
9f74a44a1d27597259912c0c2141e43907536223"
"testPopulateLdapConfig","TRUE","2","assertEquals","{
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> storedConfig = java.util.Collections.singletonMap(""ldap-configuration"", java.util.Collections.singletonMap(""authentication.ldap.secondaryUrl"", ""localhost:333""));
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand command = new org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand(temp.newFolder(""recommendationDir""), ""1w"", org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, 0, Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class), Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class), null);
    Mockito.when(ambariServerConfigurationHandler.getConfigurations()).thenReturn(storedConfig);
    org.codehaus.jackson.JsonNode servicesRootNode = org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.json(""{}"");
    command.populateAmbariConfiguration(((org.codehaus.jackson.node.ObjectNode) (servicesRootNode)));
    org.codehaus.jackson.JsonNode expectedLdapConfig = org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.json(""{\""ambari-server-configuration\"":{\""ldap-configuration\"":{\""authentication.ldap.secondaryUrl\"":\""localhost:333\""}}}"");
    org.junit.Assert.assertEquals(expectedLdapConfig, servicesRootNode);
}","testPopulateLdapConfig()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java","c6db11c87f1cfd5bc9ace42de3616ea545490a9e
4dde32c21251ad9485869f2976f0f4a95aa0e43d
fbc59ede2538f66f55d9d6914d51a84635ba7ac2
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
62d14a016156719c1c873809adc2ca2601a0d10c
f5569daec76e3e089f88ef659bc2804cc398d32f
4240f8496175bf9fb369b9411e71ad1127e356ad
3f2743b58ba65c4bdc7d37df5348d17124bf305a
6b7a7a706d6e4d8c4a5e0300666e56f6704eb00a
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
40bdcb6480abfe6393bac9be961ae53654c1cb2f
b5b9493ff7da82f342a7b39c2c8d273d763c8eae
33c8feede6b9ce30839f5961685842f3ff327b73
614fd801fc489fe27cbb0ea6f1ac4a09ebd75477
d49c19645d9ef134491b0c225a9235def1a5ac99
a80066ae09dc3ccda574b014028a87136573a4c2
fb1e0ca5260d35938df2c10cd75ee5a594873c30
b13bb71dc27494f220f97f1b5c6ba8d05354a55e
9f74a44a1d27597259912c0c2141e43907536223"
"testPopulateLdapConfig_NoConfigs","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand command = new org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand(temp.newFolder(""recommendationDir""), ""1w"", org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, 0, Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class), Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class), null);
    Mockito.when(ambariServerConfigurationHandler.getConfigurations()).thenReturn(java.util.Collections.emptyMap());
    org.codehaus.jackson.JsonNode servicesRootNode = org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.json(""{}"");
    command.populateAmbariConfiguration(((org.codehaus.jackson.node.ObjectNode) (servicesRootNode)));
    org.codehaus.jackson.JsonNode expectedLdapConfig = org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.json(""{\""ambari-server-configuration\"":{}}"");
    org.junit.Assert.assertEquals(expectedLdapConfig, servicesRootNode);
}","testPopulateLdapConfig_NoConfigs()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java","c6db11c87f1cfd5bc9ace42de3616ea545490a9e
4dde32c21251ad9485869f2976f0f4a95aa0e43d
fbc59ede2538f66f55d9d6914d51a84635ba7ac2
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
62d14a016156719c1c873809adc2ca2601a0d10c
f5569daec76e3e089f88ef659bc2804cc398d32f
4240f8496175bf9fb369b9411e71ad1127e356ad
3f2743b58ba65c4bdc7d37df5348d17124bf305a
6b7a7a706d6e4d8c4a5e0300666e56f6704eb00a
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
40bdcb6480abfe6393bac9be961ae53654c1cb2f
b5b9493ff7da82f342a7b39c2c8d273d763c8eae
33c8feede6b9ce30839f5961685842f3ff327b73
614fd801fc489fe27cbb0ea6f1ac4a09ebd75477
d49c19645d9ef134491b0c225a9235def1a5ac99
a80066ae09dc3ccda574b014028a87136573a4c2
fb1e0ca5260d35938df2c10cd75ee5a594873c30
b13bb71dc27494f220f97f1b5c6ba8d05354a55e
9f74a44a1d27597259912c0c2141e43907536223"
"testHostInfoCachingSingleHost","TRUE","3","assertEquals","{
    java.io.File file = Mockito.mock(java.io.File.class);
    java.lang.String recommendationsArtifactsLifetime = ""1w"";
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner stackAdvisorRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    java.util.Map<java.lang.String, org.codehaus.jackson.JsonNode> hostInfoCache = new java.util.HashMap<>();
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand command = Mockito.spy(new org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand(file, recommendationsArtifactsLifetime, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, 1, stackAdvisorRunner, ambariMetaInfo, hostInfoCache));
    Mockito.doReturn(javax.ws.rs.core.Response.status(200).entity(java.lang.String.format(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.SINGLE_HOST_RESPONSE, ""hostName1"")).build()).doReturn(null).when(command).handleRequest(Matchers.any(javax.ws.rs.core.HttpHeaders.class), Matchers.any(java.lang.String.class), Matchers.any(javax.ws.rs.core.UriInfo.class), Matchers.any(org.apache.ambari.server.api.services.Request.Type.class), Matchers.any(javax.ws.rs.core.MediaType.class), Matchers.any(org.apache.ambari.server.api.resources.ResourceInstance.class));
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(null, null).ofType(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.CONFIGURATIONS).forHosts(java.util.Arrays.asList(new java.lang.String[]{ ""hostName1"" })).build();
    java.lang.String firstResponse = command.getHostsInformation(request);
    org.junit.Assert.assertEquals(java.lang.String.format(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.SINGLE_HOST_RESPONSE, ""hostName1""), firstResponse);
    java.lang.String secondResponse = command.getHostsInformation(request);
    org.junit.Assert.assertEquals(java.lang.String.format(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.SINGLE_HOST_RESPONSE, ""hostName1""), secondResponse);
}","testHostInfoCachingSingleHost()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java","c6db11c87f1cfd5bc9ace42de3616ea545490a9e
4dde32c21251ad9485869f2976f0f4a95aa0e43d
fbc59ede2538f66f55d9d6914d51a84635ba7ac2
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
62d14a016156719c1c873809adc2ca2601a0d10c
f5569daec76e3e089f88ef659bc2804cc398d32f
4240f8496175bf9fb369b9411e71ad1127e356ad
3f2743b58ba65c4bdc7d37df5348d17124bf305a
6b7a7a706d6e4d8c4a5e0300666e56f6704eb00a
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
40bdcb6480abfe6393bac9be961ae53654c1cb2f
b5b9493ff7da82f342a7b39c2c8d273d763c8eae
33c8feede6b9ce30839f5961685842f3ff327b73
614fd801fc489fe27cbb0ea6f1ac4a09ebd75477
d49c19645d9ef134491b0c225a9235def1a5ac99
a80066ae09dc3ccda574b014028a87136573a4c2
fb1e0ca5260d35938df2c10cd75ee5a594873c30
b13bb71dc27494f220f97f1b5c6ba8d05354a55e
9f74a44a1d27597259912c0c2141e43907536223"
"testHostInfoCachingTwoHost","TRUE","3","assertEquals","{
    java.io.File file = Mockito.mock(java.io.File.class);
    java.lang.String recommendationsArtifactsLifetime = ""1w"";
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner stackAdvisorRunner = Mockito.mock(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRunner.class);
    org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo = Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    java.util.Map<java.lang.String, org.codehaus.jackson.JsonNode> hostInfoCache = new java.util.HashMap<>();
    org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand command = Mockito.spy(new org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TestStackAdvisorCommand(file, recommendationsArtifactsLifetime, org.apache.ambari.server.state.ServiceInfo.ServiceAdvisorType.PYTHON, 1, stackAdvisorRunner, ambariMetaInfo, hostInfoCache));
    Mockito.doReturn(javax.ws.rs.core.Response.status(200).entity(java.lang.String.format(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.SINGLE_HOST_RESPONSE, ""hostName1"")).build()).doReturn(javax.ws.rs.core.Response.status(200).entity(java.lang.String.format(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.SINGLE_HOST_RESPONSE, ""hostName2"")).build()).doReturn(null).when(command).handleRequest(Matchers.any(javax.ws.rs.core.HttpHeaders.class), Matchers.any(java.lang.String.class), Matchers.any(javax.ws.rs.core.UriInfo.class), Matchers.any(org.apache.ambari.server.api.services.Request.Type.class), Matchers.any(javax.ws.rs.core.MediaType.class), Matchers.any(org.apache.ambari.server.api.resources.ResourceInstance.class));
    org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(null, null).ofType(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.CONFIGURATIONS).forHosts(java.util.Arrays.asList(new java.lang.String[]{ ""hostName1"" })).build();
    java.lang.String firstResponse = command.getHostsInformation(request);
    org.junit.Assert.assertEquals(java.lang.String.format(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.SINGLE_HOST_RESPONSE, ""hostName1""), firstResponse);
    request = org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestBuilder.forStack(null, null).ofType(org.apache.ambari.server.api.services.stackadvisor.StackAdvisorRequest.StackAdvisorRequestType.CONFIGURATIONS).forHosts(java.util.Arrays.asList(new java.lang.String[]{ ""hostName1"", ""hostName2"" })).build();
    java.lang.String secondResponse = command.getHostsInformation(request);
    org.junit.Assert.assertEquals(java.lang.String.format(org.apache.ambari.server.api.services.stackadvisor.commands.StackAdvisorCommandTest.TWO_HOST_RESPONSE, ""hostName1"", ""hostName2""), secondResponse);
}","testHostInfoCachingTwoHost()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/commands/StackAdvisorCommandTest.java","c6db11c87f1cfd5bc9ace42de3616ea545490a9e
4dde32c21251ad9485869f2976f0f4a95aa0e43d
fbc59ede2538f66f55d9d6914d51a84635ba7ac2
eee18a53a3e79179505d27b04b10a1ef7e3c5fab
62d14a016156719c1c873809adc2ca2601a0d10c
f5569daec76e3e089f88ef659bc2804cc398d32f
4240f8496175bf9fb369b9411e71ad1127e356ad
3f2743b58ba65c4bdc7d37df5348d17124bf305a
6b7a7a706d6e4d8c4a5e0300666e56f6704eb00a
f1ca09c03a2fe316129aa5623c675b62d3177112
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
40bdcb6480abfe6393bac9be961ae53654c1cb2f
b5b9493ff7da82f342a7b39c2c8d273d763c8eae
33c8feede6b9ce30839f5961685842f3ff327b73
614fd801fc489fe27cbb0ea6f1ac4a09ebd75477
d49c19645d9ef134491b0c225a9235def1a5ac99
a80066ae09dc3ccda574b014028a87136573a4c2
fb1e0ca5260d35938df2c10cd75ee5a594873c30
b13bb71dc27494f220f97f1b5c6ba8d05354a55e
9f74a44a1d27597259912c0c2141e43907536223"
"blueprint_getHostgroupComponentMap","TRUE","2","assertEquals","{
    com.google.common.collect.ImmutableMap<java.lang.String, java.util.Set<java.lang.String>> expected = com.google.common.collect.ImmutableMap.of(""host_group_1"", com.google.common.collect.ImmutableSet.of(""NAMENODE"", ""ZOOKEEPER_SERVER""), ""host_group_2"", com.google.common.collect.ImmutableSet.of(""DATANODE"", ""HDFS_CLIENT"", ""ZOOKEEPER_CLIENT""));
    org.junit.Assert.assertEquals(expected, response.getRecommendations().getBlueprint().getHostgroupComponentMap());
}","blueprint_getHostgroupComponentMap()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/recommendations/RecommendationResponseTest.java","799e487c960a567bd541322f5d544e3548eab0c9"
"hostgGroup_getComponentNames","TRUE","3","assertEquals","{
    java.util.Map<java.lang.String, org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse.HostGroup> hostGroups = response.getRecommendations().getBlueprint().getHostGroups().stream().collect(java.util.stream.Collectors.toMap(org.apache.ambari.server.api.services.stackadvisor.recommendations.RecommendationResponse.HostGroup::getName, java.util.function.Function.identity()));
    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(""NAMENODE"", ""ZOOKEEPER_SERVER""), hostGroups.get(""host_group_1"").getComponentNames());
    org.junit.Assert.assertEquals(com.google.common.collect.ImmutableSet.of(""DATANODE"", ""HDFS_CLIENT"", ""ZOOKEEPER_CLIENT""), hostGroups.get(""host_group_2"").getComponentNames());
}","hostgGroup_getComponentNames()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/recommendations/RecommendationResponseTest.java","799e487c960a567bd541322f5d544e3548eab0c9"
"blueprintClusterBinding_getHostgroupHostMap","TRUE","2","assertEquals","{
    com.google.common.collect.ImmutableMap<java.lang.String, java.util.Set<java.lang.String>> expected = com.google.common.collect.ImmutableMap.of(""host_group_1"", com.google.common.collect.ImmutableSet.of(""c7401"", ""c7402""), ""host_group_2"", com.google.common.collect.ImmutableSet.of(""c7403"", ""c7404"", ""c7405""));
    org.junit.Assert.assertEquals(expected, response.getRecommendations().getBlueprintClusterBinding().getHostgroupHostMap());
}","blueprintClusterBinding_getHostgroupHostMap()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/stackadvisor/recommendations/RecommendationResponseTest.java","799e487c960a567bd541322f5d544e3548eab0c9"
"testServiceMigrateCallAdmin","FALSE","0","None","{
    org.apache.ambari.server.view.ViewRegistry viewRegistry = EasyMock.createNiceMock(org.apache.ambari.server.view.ViewRegistry.class);
    EasyMock.expect(viewRegistry.checkAdmin()).andReturn(true).anyTimes();
    EasyMock.replay(viewRegistry);
    org.apache.ambari.server.view.ViewRegistry.initInstance(viewRegistry);
    org.apache.ambari.server.api.services.views.ViewDataMigrationService service = new org.apache.ambari.server.api.services.views.ViewDataMigrationService();
    org.apache.ambari.server.view.ViewDataMigrationUtility migrationUtility = EasyMock.createStrictMock(org.apache.ambari.server.view.ViewDataMigrationUtility.class);
    migrationUtility.migrateData(EasyMock.anyObject(org.apache.ambari.server.orm.entities.ViewInstanceEntity.class), EasyMock.anyObject(org.apache.ambari.server.orm.entities.ViewInstanceEntity.class), EasyMock.eq(false));
    EasyMock.replay(migrationUtility);
    service.setViewDataMigrationUtility(migrationUtility);
    service.migrateData(org.apache.ambari.server.api.services.views.ViewDataMigrationServiceTest.viewName, org.apache.ambari.server.api.services.views.ViewDataMigrationServiceTest.version1, org.apache.ambari.server.api.services.views.ViewDataMigrationServiceTest.instanceName, org.apache.ambari.server.api.services.views.ViewDataMigrationServiceTest.version2, org.apache.ambari.server.api.services.views.ViewDataMigrationServiceTest.instanceName);
    EasyMock.verify(migrationUtility);
}","testServiceMigrateCallAdmin()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/views/ViewDataMigrationServiceTest.java","c2409e740f84d6f051659b3b36d853902e698a60
fb86fb3bafa1479651836db3197f1b2023b08a2f
e4db57093f4d17497366cdfbf02127f36399bf42
ddb201f8ce8ecdc2a563a5ae69c071655e481b04
614b12fc382fee77b63f253926bab6aa359ae5df"
"testServiceMigrateCallNotAdmin","FALSE","0","None","{
    org.apache.ambari.server.view.ViewRegistry viewRegistry = EasyMock.createNiceMock(org.apache.ambari.server.view.ViewRegistry.class);
    EasyMock.expect(viewRegistry.checkAdmin()).andReturn(false).anyTimes();
    EasyMock.replay(viewRegistry);
    org.apache.ambari.server.view.ViewRegistry.initInstance(viewRegistry);
    org.apache.ambari.server.api.services.views.ViewDataMigrationService service = new org.apache.ambari.server.api.services.views.ViewDataMigrationService();
    thrown.expect(javax.ws.rs.WebApplicationException.class);
    service.migrateData(org.apache.ambari.server.api.services.views.ViewDataMigrationServiceTest.viewName, org.apache.ambari.server.api.services.views.ViewDataMigrationServiceTest.version1, org.apache.ambari.server.api.services.views.ViewDataMigrationServiceTest.instanceName, org.apache.ambari.server.api.services.views.ViewDataMigrationServiceTest.version2, org.apache.ambari.server.api.services.views.ViewDataMigrationServiceTest.instanceName);
}","testServiceMigrateCallNotAdmin()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/views/ViewDataMigrationServiceTest.java","c2409e740f84d6f051659b3b36d853902e698a60
fb86fb3bafa1479651836db3197f1b2023b08a2f
e4db57093f4d17497366cdfbf02127f36399bf42
ddb201f8ce8ecdc2a563a5ae69c071655e481b04
614b12fc382fee77b63f253926bab6aa359ae5df"
"testAddResourceService","TRUE","2","assertEquals","{
    org.apache.ambari.server.controller.spi.Resource.Type type = new org.apache.ambari.server.controller.spi.Resource.Type(""resource"");
    org.apache.ambari.server.orm.entities.ViewInstanceEntity definition = org.apache.ambari.server.orm.entities.ViewInstanceEntityTest.getViewInstanceEntity();
    org.apache.ambari.server.api.services.views.ViewExternalSubResourceService service = new org.apache.ambari.server.api.services.views.ViewExternalSubResourceService(type, definition);
    java.lang.Object fooService = new java.lang.Object();
    service.addResourceService(""foo"", fooService);
    org.junit.Assert.assertEquals(fooService, service.getResource(""foo""));
    try {
        service.getResource(""bar"");
        org.junit.Assert.fail(""Expected IllegalArgumentException for unknown service name."");
    } catch (java.lang.IllegalArgumentException e) {
    }
}","testAddResourceService()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/services/views/ViewExternalSubResourceServiceTest.java","c2409e740f84d6f051659b3b36d853902e698a60
fb86fb3bafa1479651836db3197f1b2023b08a2f
7c198ac3c847c876126158afafa5f46aef8e0392
61618f73c6478c0e2a460c3b0a6ae7fcc0d33885"
"setupTest","FALSE","0","None","{
    taskStatusListenerProvider = EasyMock.createMock(com.google.inject.Provider.class);
    taskStatusListener = EasyMock.createMock(org.apache.ambari.server.events.listeners.tasks.TaskStatusListener.class);
    java.util.Map<java.lang.Long, org.apache.ambari.server.actionmanager.HostRoleCommand> hostRoleCommands = new java.util.HashMap<>();
    org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand1 = EasyMock.createMock(org.apache.ambari.server.actionmanager.HostRoleCommand.class);
    org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand4 = EasyMock.createMock(org.apache.ambari.server.actionmanager.HostRoleCommand.class);
    org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand5 = EasyMock.createMock(org.apache.ambari.server.actionmanager.HostRoleCommand.class);
    EasyMock.expect(hostRoleCommand1.getStatus()).andReturn(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS).anyTimes();
    EasyMock.expect(hostRoleCommand4.getStatus()).andReturn(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS).anyTimes();
    EasyMock.expect(hostRoleCommand5.getStatus()).andReturn(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS).anyTimes();
    hostRoleCommands.put(1L, hostRoleCommand1);
    hostRoleCommands.put(4L, hostRoleCommand4);
    hostRoleCommands.put(5L, hostRoleCommand5);
    EasyMock.expect(taskStatusListener.getActiveTasksMap()).andReturn(hostRoleCommands).anyTimes();
    EasyMock.expect(taskStatusListenerProvider.get()).andReturn(taskStatusListener).anyTimes();
    EasyMock.replay(taskStatusListenerProvider, taskStatusListener, hostRoleCommand1, hostRoleCommand4, hostRoleCommand5);
    tasksSubscriptions = new org.apache.ambari.server.api.stomp.NamedTasksSubscriptions(taskStatusListenerProvider);
    tasksSubscriptions.addTaskId(org.apache.ambari.server.api.stomp.NamedTasksSubscriptionsTest.SESSION_ID_1, 1L, ""sub-1"");
    tasksSubscriptions.addTaskId(org.apache.ambari.server.api.stomp.NamedTasksSubscriptionsTest.SESSION_ID_1, 5L, ""sub-5"");
    tasksSubscriptions.addTaskId(org.apache.ambari.server.api.stomp.NamedTasksSubscriptionsTest.SESSION_ID_2, 1L, ""sub-1"");
    tasksSubscriptions.addTaskId(org.apache.ambari.server.api.stomp.NamedTasksSubscriptionsTest.SESSION_ID_2, 4L, ""sub-4"");
}","setupTest()","Before","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptionsTest.java","bde5e12fbff3343e4b2775e8df32c0c397b89c48
63df198782b4caba069efd0cee35ef875ab550b8"
"testMatching","TRUE","4","assertTrue
assertEquals
assertFalse","{
    java.util.Optional<java.lang.Long> taskIdOpt = tasksSubscriptions.matchDestination(""/events/tasks/1"");
    org.junit.Assert.assertTrue(taskIdOpt.isPresent());
    org.junit.Assert.assertEquals(1L, taskIdOpt.get().longValue());
    org.junit.Assert.assertFalse(tasksSubscriptions.matchDestination(""/events/topologies"").isPresent());
}","testMatching()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptionsTest.java","bde5e12fbff3343e4b2775e8df32c0c397b89c48
63df198782b4caba069efd0cee35ef875ab550b8"
"testCheckId","TRUE","5","assertTrue
assertFalse","{
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(1L));
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(4L));
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(5L));
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(2L));
}","testCheckId()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptionsTest.java","bde5e12fbff3343e4b2775e8df32c0c397b89c48
63df198782b4caba069efd0cee35ef875ab550b8"
"testRemoveBySessionId","TRUE","7","assertTrue
assertFalse","{
    tasksSubscriptions.removeSession(org.apache.ambari.server.api.stomp.NamedTasksSubscriptionsTest.SESSION_ID_1);
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(1L));
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(4L));
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(5L));
    tasksSubscriptions.removeSession(org.apache.ambari.server.api.stomp.NamedTasksSubscriptionsTest.SESSION_ID_2);
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(1L));
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(4L));
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(5L));
}","testRemoveBySessionId()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptionsTest.java","bde5e12fbff3343e4b2775e8df32c0c397b89c48
63df198782b4caba069efd0cee35ef875ab550b8"
"testRemoveById","TRUE","13","assertTrue
assertFalse","{
    tasksSubscriptions.removeId(org.apache.ambari.server.api.stomp.NamedTasksSubscriptionsTest.SESSION_ID_1, ""sub-1"");
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(1L));
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(4L));
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(5L));
    tasksSubscriptions.removeId(org.apache.ambari.server.api.stomp.NamedTasksSubscriptionsTest.SESSION_ID_1, ""sub-5"");
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(1L));
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(4L));
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(5L));
    tasksSubscriptions.removeId(org.apache.ambari.server.api.stomp.NamedTasksSubscriptionsTest.SESSION_ID_2, ""sub-1"");
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(1L));
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(4L));
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(5L));
    tasksSubscriptions.removeId(org.apache.ambari.server.api.stomp.NamedTasksSubscriptionsTest.SESSION_ID_2, ""sub-4"");
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(1L));
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(4L));
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(5L));
}","testRemoveById()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptionsTest.java","bde5e12fbff3343e4b2775e8df32c0c397b89c48
63df198782b4caba069efd0cee35ef875ab550b8"
"testAddDestination","TRUE","13","assertTrue
assertFalse","{
    tasksSubscriptions = new org.apache.ambari.server.api.stomp.NamedTasksSubscriptions(taskStatusListenerProvider);
    tasksSubscriptions.addDestination(org.apache.ambari.server.api.stomp.NamedTasksSubscriptionsTest.SESSION_ID_1, ""/events/tasks/1"", ""sub-1"");
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(1L));
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(4L));
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(5L));
    tasksSubscriptions.addDestination(org.apache.ambari.server.api.stomp.NamedTasksSubscriptionsTest.SESSION_ID_1, ""/events/tasks/5"", ""sub-5"");
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(1L));
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(4L));
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(5L));
    tasksSubscriptions.addDestination(org.apache.ambari.server.api.stomp.NamedTasksSubscriptionsTest.SESSION_ID_2, ""/events/tasks/1"", ""sub-1"");
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(1L));
    org.junit.Assert.assertFalse(tasksSubscriptions.checkTaskId(4L));
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(5L));
    tasksSubscriptions.addDestination(org.apache.ambari.server.api.stomp.NamedTasksSubscriptionsTest.SESSION_ID_2, ""/events/tasks/4"", ""sub-4"");
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(1L));
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(4L));
    org.junit.Assert.assertTrue(tasksSubscriptions.checkTaskId(5L));
}","testAddDestination()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/api/stomp/NamedTasksSubscriptionsTest.java","bde5e12fbff3343e4b2775e8df32c0c397b89c48
63df198782b4caba069efd0cee35ef875ab550b8"
"testAuditMessage","TRUE","3","assertThat","{
    java.lang.String testUserName = ""USER1"";
    java.lang.String testProxyUserName = ""PROXYUSER1"";
    java.lang.String testRemoteIp = ""127.0.0.1"";
    java.lang.String testHttpMethod = ""GET"";
    java.lang.String testResourcePath = ""/api/v1/hosts"";
    org.apache.ambari.server.audit.event.AccessUnauthorizedAuditEvent evnt = org.apache.ambari.server.audit.event.AccessUnauthorizedAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withRemoteIp(testRemoteIp).withUserName(testUserName).withProxyUserName(null).withHttpMethodName(testHttpMethod).withResourcePath(testResourcePath).build();
    java.lang.String actualAuditMessage = evnt.getAuditMessage();
    java.lang.String expectedAuditMessage = java.lang.String.format(""User(%s), RemoteIp(%s), Operation(%s), ResourcePath(%s), Status(Failed), Reason(Access not authorized)"", testUserName, testRemoteIp, testHttpMethod, testResourcePath);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
    evnt = org.apache.ambari.server.audit.event.AccessUnauthorizedAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withRemoteIp(testRemoteIp).withUserName(testUserName).withProxyUserName(testProxyUserName).withHttpMethodName(testHttpMethod).withResourcePath(testResourcePath).build();
    actualAuditMessage = evnt.getAuditMessage();
    expectedAuditMessage = java.lang.String.format(""User(%s), RemoteIp(%s), ProxyUser(PROXYUSER1), Operation(%s), ResourcePath(%s), Status(Failed), Reason(Access not authorized)"", testUserName, testRemoteIp, testHttpMethod, testResourcePath);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
}","testAuditMessage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/AccessUnauthorizedAuditEventTest.java","0717fb84a2034b2204b346edcc86d94796f67395
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testTimestamp","TRUE","2","assertThat","{
    long testTimestamp = java.lang.System.currentTimeMillis();
    org.apache.ambari.server.audit.event.AccessUnauthorizedAuditEvent evnt = org.apache.ambari.server.audit.event.AccessUnauthorizedAuditEvent.builder().withTimestamp(testTimestamp).build();
    long actualTimestamp = evnt.getTimestamp();
    org.junit.Assert.assertThat(actualTimestamp, org.hamcrest.core.IsEqual.equalTo(testTimestamp));
}","testTimestamp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/AccessUnauthorizedAuditEventTest.java","0717fb84a2034b2204b346edcc86d94796f67395
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testEquals","FALSE","0","None","{
    nl.jqno.equalsverifier.EqualsVerifier.forClass(org.apache.ambari.server.audit.event.AccessUnauthorizedAuditEvent.class).verify();
}","testEquals()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/AccessUnauthorizedAuditEventTest.java","0717fb84a2034b2204b346edcc86d94796f67395
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"equalsVerifierTest","FALSE","0","None","{
    java.lang.Class<?>[] innerClasses = org.apache.ambari.server.actionmanager.ActionDBAccessorImpl.class.getDeclaredClasses();
    for (java.lang.Class<?> clazz : innerClasses) {
        if (clazz.getSimpleName().contains(""RequestDetails"")) {
            java.lang.Class<?>[] innerClasses2 = clazz.getDeclaredClasses();
            for (java.lang.Class<?> clazz2 : innerClasses2) {
                if (clazz2.getSimpleName().contains(""Component"")) {
                    nl.jqno.equalsverifier.EqualsVerifier.forClass(clazz2).verify();
                }
            }
        }
    }
}","equalsVerifierTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/ActionDBAAccessorAuditlogTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
6320d589f942b41cdab34c1de241423ccb5b4752
b305aecaed28e721e20c5a45a6261f68e99b2ce3
8a58721d871fe26f45c3944205a5258eccb8c7ff
d6ce83acfd91a3adba828ce7655833369a50d823
4a2969dd2633200b0957b8da4088a20b7c618d68
b89aa88d76a144efd16b51a7ae3727b3854d7d48
0c5f8d21dc935bad434fd54f918b47e828f5a397
4cf83b9a7d42699a3b47d6f578299013fa6ab75f"
"testAuditMessage","TRUE","3","assertThat","{
    java.lang.String testUserName = ""USER1"";
    java.lang.String testRemoteIp = ""127.0.0.1"";
    java.lang.String testProxyUserName = ""PROXYUSER1"";
    java.util.Map<java.lang.String, java.util.List<java.lang.String>> roles = new java.util.HashMap<>();
    roles.put(""a"", java.util.Arrays.asList(""r1"", ""r2"", ""r3""));
    org.apache.ambari.server.audit.event.LoginAuditEvent evnt = org.apache.ambari.server.audit.event.LoginAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withRemoteIp(testRemoteIp).withUserName(testUserName).withProxyUserName(null).withRoles(roles).build();
    java.lang.String actualAuditMessage = evnt.getAuditMessage();
    java.lang.String roleMessage = ""a: r1, r2, r3"";
    java.lang.String expectedAuditMessage = java.lang.String.format(""User(%s), RemoteIp(%s), Operation(User login), Roles(%s), Status(Success)"", testUserName, testRemoteIp, roleMessage);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
    evnt = org.apache.ambari.server.audit.event.LoginAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withRemoteIp(testRemoteIp).withUserName(testUserName).withProxyUserName(testProxyUserName).withRoles(roles).build();
    actualAuditMessage = evnt.getAuditMessage();
    roleMessage = ""a: r1, r2, r3"";
    expectedAuditMessage = java.lang.String.format(""User(%s), RemoteIp(%s), ProxyUser(%s), Operation(User login), Roles(%s), Status(Success)"", testUserName, testRemoteIp, testProxyUserName, roleMessage);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
}","testAuditMessage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java","5fc20b85f72097ab30b04f39d482e85a8cf26534
0717fb84a2034b2204b346edcc86d94796f67395
f760516c24478b19d4e579cb67702d9d43251eaa
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testFailedAuditMessage","TRUE","3","assertThat","{
    java.lang.String testUserName = ""USER1"";
    java.lang.String testRemoteIp = ""127.0.0.1"";
    java.lang.String testProxyUserName = ""PROXYUSER1"";
    java.lang.String reason = ""Bad credentials"";
    java.lang.Integer consecutiveFailures = 1;
    java.util.Map<java.lang.String, java.util.List<java.lang.String>> roles = new java.util.HashMap<>();
    roles.put(""a"", java.util.Arrays.asList(""r1"", ""r2"", ""r3""));
    org.apache.ambari.server.audit.event.LoginAuditEvent evnt = org.apache.ambari.server.audit.event.LoginAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withRemoteIp(testRemoteIp).withUserName(testUserName).withProxyUserName(null).withRoles(roles).withReasonOfFailure(reason).withConsecutiveFailures(consecutiveFailures).build();
    java.lang.String actualAuditMessage = evnt.getAuditMessage();
    java.lang.String roleMessage = ""a: r1, r2, r3"";
    java.lang.String expectedAuditMessage = java.lang.String.format(""User(%s), RemoteIp(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(%d)"", testUserName, testRemoteIp, roleMessage, reason, consecutiveFailures);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
    evnt = org.apache.ambari.server.audit.event.LoginAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withRemoteIp(testRemoteIp).withUserName(testUserName).withProxyUserName(testProxyUserName).withRoles(roles).withReasonOfFailure(reason).withConsecutiveFailures(consecutiveFailures).build();
    actualAuditMessage = evnt.getAuditMessage();
    roleMessage = ""a: r1, r2, r3"";
    expectedAuditMessage = java.lang.String.format(""User(%s), RemoteIp(%s), ProxyUser(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(%d)"", testUserName, testRemoteIp, testProxyUserName, roleMessage, reason, consecutiveFailures);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
}","testFailedAuditMessage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java","5fc20b85f72097ab30b04f39d482e85a8cf26534
0717fb84a2034b2204b346edcc86d94796f67395
f760516c24478b19d4e579cb67702d9d43251eaa
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testFailedAuditMessageUnknownUser","TRUE","3","assertThat","{
    java.lang.String testUserName = ""USER1"";
    java.lang.String testRemoteIp = ""127.0.0.1"";
    java.lang.String reason = ""Bad credentials"";
    java.lang.String testProxyUserName = ""PROXYUSER1"";
    java.util.Map<java.lang.String, java.util.List<java.lang.String>> roles = new java.util.HashMap<>();
    roles.put(""a"", java.util.Arrays.asList(""r1"", ""r2"", ""r3""));
    org.apache.ambari.server.audit.event.LoginAuditEvent evnt = org.apache.ambari.server.audit.event.LoginAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withRemoteIp(testRemoteIp).withUserName(testUserName).withProxyUserName(null).withRoles(roles).withReasonOfFailure(reason).withConsecutiveFailures(null).build();
    java.lang.String actualAuditMessage = evnt.getAuditMessage();
    java.lang.String roleMessage = ""a: r1, r2, r3"";
    java.lang.String expectedAuditMessage = java.lang.String.format(""User(%s), RemoteIp(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(UNKNOWN USER)"", testUserName, testRemoteIp, roleMessage, reason);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
    evnt = org.apache.ambari.server.audit.event.LoginAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withRemoteIp(testRemoteIp).withUserName(testUserName).withProxyUserName(testProxyUserName).withRoles(roles).withReasonOfFailure(reason).withConsecutiveFailures(null).build();
    actualAuditMessage = evnt.getAuditMessage();
    roleMessage = ""a: r1, r2, r3"";
    expectedAuditMessage = java.lang.String.format(""User(%s), RemoteIp(%s), ProxyUser(%s), Operation(User login), Roles(%s), Status(Failed), Reason(%s), Consecutive failures(UNKNOWN USER)"", testUserName, testRemoteIp, testProxyUserName, roleMessage, reason);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
}","testFailedAuditMessageUnknownUser()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java","5fc20b85f72097ab30b04f39d482e85a8cf26534
0717fb84a2034b2204b346edcc86d94796f67395
f760516c24478b19d4e579cb67702d9d43251eaa
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testTimestamp","TRUE","2","assertThat","{
    long testTimestamp = java.lang.System.currentTimeMillis();
    org.apache.ambari.server.audit.event.LoginAuditEvent evnt = org.apache.ambari.server.audit.event.LoginAuditEvent.builder().withTimestamp(testTimestamp).build();
    long actualTimestamp = evnt.getTimestamp();
    org.junit.Assert.assertThat(actualTimestamp, org.hamcrest.core.IsEqual.equalTo(testTimestamp));
}","testTimestamp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java","5fc20b85f72097ab30b04f39d482e85a8cf26534
0717fb84a2034b2204b346edcc86d94796f67395
f760516c24478b19d4e579cb67702d9d43251eaa
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testEquals","FALSE","0","None","{
    nl.jqno.equalsverifier.EqualsVerifier.forClass(org.apache.ambari.server.audit.event.LoginAuditEvent.class).verify();
}","testEquals()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/LoginAuditEventTest.java","5fc20b85f72097ab30b04f39d482e85a8cf26534
0717fb84a2034b2204b346edcc86d94796f67395
f760516c24478b19d4e579cb67702d9d43251eaa
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testAuditMessage","TRUE","3","assertThat","{
    java.lang.String testUserName = ""USER1"";
    java.lang.String testRemoteIp = ""127.0.0.1"";
    java.lang.String testProxyUserName = ""PROXYUSER1"";
    org.apache.ambari.server.audit.event.LogoutAuditEvent evnt = org.apache.ambari.server.audit.event.LogoutAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withRemoteIp(testRemoteIp).withUserName(testUserName).withProxyUserName(null).build();
    java.lang.String actualAuditMessage = evnt.getAuditMessage();
    java.lang.String expectedAuditMessage = java.lang.String.format(""User(%s), RemoteIp(%s), Operation(Logout), Status(Success)"", testUserName, testRemoteIp);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
    evnt = org.apache.ambari.server.audit.event.LogoutAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withRemoteIp(testRemoteIp).withUserName(testUserName).withProxyUserName(testProxyUserName).build();
    actualAuditMessage = evnt.getAuditMessage();
    expectedAuditMessage = java.lang.String.format(""User(%s), RemoteIp(%s), ProxyUser(%s), Operation(Logout), Status(Success)"", testUserName, testRemoteIp, testProxyUserName);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
}","testAuditMessage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/LogoutAuditEventTest.java","0717fb84a2034b2204b346edcc86d94796f67395
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testTimestamp","TRUE","2","assertThat","{
    long testTimestamp = java.lang.System.currentTimeMillis();
    org.apache.ambari.server.audit.event.LogoutAuditEvent evnt = org.apache.ambari.server.audit.event.LogoutAuditEvent.builder().withTimestamp(testTimestamp).build();
    long actualTimestamp = evnt.getTimestamp();
    org.junit.Assert.assertThat(actualTimestamp, org.hamcrest.core.IsEqual.equalTo(testTimestamp));
}","testTimestamp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/LogoutAuditEventTest.java","0717fb84a2034b2204b346edcc86d94796f67395
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testEquals","FALSE","0","None","{
    nl.jqno.equalsverifier.EqualsVerifier.forClass(org.apache.ambari.server.audit.event.LogoutAuditEvent.class).verify();
}","testEquals()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/LogoutAuditEventTest.java","0717fb84a2034b2204b346edcc86d94796f67395
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testAuditMessage","TRUE","2","assertThat","{
    java.lang.Long testRequestId = 100L;
    java.lang.String testStatus = ""IN PROGRESS"";
    java.lang.String testRemoteIp = ""127.0.0.1"";
    org.apache.ambari.server.audit.event.OperationStatusAuditEvent evnt = org.apache.ambari.server.audit.event.OperationStatusAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withRequestId(testRequestId.toString()).withStatus(testStatus).withRemoteIp(testRemoteIp).withUserName(""testuser"").withRequestContext(""Start Service"").build();
    java.lang.String actualAuditMessage = evnt.getAuditMessage();
    java.lang.String expectedAuditMessage = java.lang.String.format(""User(testuser), RemoteIp(127.0.0.1), Operation(Start Service), Status(%s), RequestId(%s)"", testStatus, testRequestId);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
}","testAuditMessage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/OperationStatusAuditEventTest.java","0717fb84a2034b2204b346edcc86d94796f67395
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
6320d589f942b41cdab34c1de241423ccb5b4752
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testTimestamp","TRUE","2","assertThat","{
    long testTimestamp = java.lang.System.currentTimeMillis();
    org.apache.ambari.server.audit.event.OperationStatusAuditEvent evnt = org.apache.ambari.server.audit.event.OperationStatusAuditEvent.builder().withTimestamp(testTimestamp).build();
    long actualTimestamp = evnt.getTimestamp();
    org.junit.Assert.assertThat(actualTimestamp, org.hamcrest.core.IsEqual.equalTo(testTimestamp));
}","testTimestamp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/OperationStatusAuditEventTest.java","0717fb84a2034b2204b346edcc86d94796f67395
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
6320d589f942b41cdab34c1de241423ccb5b4752
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testEquals","FALSE","0","None","{
    nl.jqno.equalsverifier.EqualsVerifier.forClass(org.apache.ambari.server.audit.event.OperationStatusAuditEvent.class).verify();
}","testEquals()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/OperationStatusAuditEventTest.java","0717fb84a2034b2204b346edcc86d94796f67395
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
6320d589f942b41cdab34c1de241423ccb5b4752
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testAuditMessage","TRUE","3","assertThat","{
    java.lang.String testUserName = ""USER1"";
    java.lang.String testRemoteIp = ""127.0.0.1"";
    java.lang.String testRequestDetails = ""{ \""key\"": \""value\""}"";
    java.lang.Long testRequestId = 100L;
    java.lang.String testProxyUserName = ""PROXYUSER1"";
    org.apache.ambari.server.audit.event.request.StartOperationRequestAuditEvent evnt = org.apache.ambari.server.audit.event.request.StartOperationRequestAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withRemoteIp(testRemoteIp).withUserName(testUserName).withProxyUserName(null).withOperation(testRequestDetails).withRequestId(testRequestId.toString()).build();
    java.lang.String actualAuditMessage = evnt.getAuditMessage();
    java.lang.String expectedAuditMessage = java.lang.String.format(""User(%s), RemoteIp(%s), Operation(%s), RequestId(%d), Status(Successfully queued)"", testUserName, testRemoteIp, testRequestDetails, testRequestId);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
    evnt = org.apache.ambari.server.audit.event.request.StartOperationRequestAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withRemoteIp(testRemoteIp).withUserName(testUserName).withProxyUserName(testProxyUserName).withOperation(testRequestDetails).withRequestId(testRequestId.toString()).build();
    actualAuditMessage = evnt.getAuditMessage();
    expectedAuditMessage = java.lang.String.format(""User(%s), RemoteIp(%s), ProxyUser(%s), Operation(%s), RequestId(%d), Status(Successfully queued)"", testUserName, testRemoteIp, testProxyUserName, testRequestDetails, testRequestId);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
}","testAuditMessage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/StartOperationRequestAuditEventTest.java","0717fb84a2034b2204b346edcc86d94796f67395
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testTimestamp","TRUE","2","assertThat","{
    long testTimestamp = java.lang.System.currentTimeMillis();
    org.apache.ambari.server.audit.event.request.StartOperationRequestAuditEvent evnt = org.apache.ambari.server.audit.event.request.StartOperationRequestAuditEvent.builder().withTimestamp(testTimestamp).build();
    long actualTimestamp = evnt.getTimestamp();
    org.junit.Assert.assertThat(actualTimestamp, org.hamcrest.core.IsEqual.equalTo(testTimestamp));
}","testTimestamp()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/StartOperationRequestAuditEventTest.java","0717fb84a2034b2204b346edcc86d94796f67395
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testEquals","FALSE","0","None","{
    nl.jqno.equalsverifier.EqualsVerifier.forClass(org.apache.ambari.server.audit.event.LoginAuditEvent.class).verify();
}","testEquals()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/StartOperationRequestAuditEventTest.java","0717fb84a2034b2204b346edcc86d94796f67395
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testAuditMessage","TRUE","2","assertThat","{
    java.lang.String testUserName = ""USER1"";
    java.lang.String testRemoteIp = ""127.0.0.1"";
    java.lang.String testOperation = ""START MYCOMPONENT"";
    java.lang.String testRequestDetails = ""Start MyComponent"";
    java.lang.String testHostName = ""ambari.example.com"";
    org.apache.ambari.server.actionmanager.HostRoleStatus testStatus = org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS;
    java.lang.Long testRequestId = 100L;
    java.lang.Long testTaskId = 99L;
    org.apache.ambari.server.audit.event.TaskStatusAuditEvent event = org.apache.ambari.server.audit.event.TaskStatusAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withUserName(testUserName).withRemoteIp(testRemoteIp).withOperation(testOperation).withRequestId(testRequestId.toString()).withDetails(testRequestDetails).withHostName(testHostName).withStatus(testStatus.name()).withTaskId(testTaskId.toString()).build();
    java.lang.String actualAuditMessage = event.getAuditMessage();
    java.lang.String expectedAuditMessage = java.lang.String.format(""User(%s), RemoteIp(%s), Operation(%s), Details(%s), Status(%s), RequestId(%d), TaskId(%d), Hostname(%s)"", testUserName, testRemoteIp, testOperation, testRequestDetails, testStatus, testRequestId, testTaskId, testHostName);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
}","testAuditMessage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/TaskStatusAuditEventTest.java","0717fb84a2034b2204b346edcc86d94796f67395
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testAuditMessage","TRUE","2","assertThat","{
    java.lang.String testOperation = ""Change security state"";
    java.lang.String testHostName = ""testhost.example.com"";
    java.lang.String testService = ""MyService"";
    java.lang.String testComponent = ""MyComponent"";
    java.lang.String testState = ""MyState"";
    java.lang.Long testRequestId = 100L;
    java.lang.Long testTaskId = 99L;
    org.apache.ambari.server.audit.event.kerberos.ChangeSecurityStateKerberosAuditEvent event = org.apache.ambari.server.audit.event.kerberos.ChangeSecurityStateKerberosAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withOperation(testOperation).withRequestId(testRequestId).withTaskId(testTaskId).withHostName(testHostName).withComponent(testComponent).withService(testService).withState(testState).build();
    java.lang.String actualAuditMessage = event.getAuditMessage();
    java.lang.String expectedAuditMessage = java.lang.String.format(""Operation(%s), Status(Success), RequestId(%s), TaskId(%s), Hostname(%s), Service(%s), Component(%s), State(%s)"", testOperation, testRequestId, testTaskId, testHostName, testService, testComponent, testState);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
}","testAuditMessage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/kerberos/ChangeSecurityStateKerberosAuditEventTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testAuditMessage","TRUE","2","assertThat","{
    java.lang.String testOperation = ""Create keytab file"";
    java.lang.String testPrincipal = ""testPrincipal"";
    java.lang.String testHostName = ""testhost.example.com"";
    java.lang.String testKeyTabFile = ""/tmp/mykeytabfile.ktf"";
    java.lang.Long testRequestId = 100L;
    java.lang.Long testTaskId = 99L;
    org.apache.ambari.server.audit.event.kerberos.CreateKeyTabKerberosAuditEvent event = org.apache.ambari.server.audit.event.kerberos.CreateKeyTabKerberosAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withOperation(testOperation).withRequestId(testRequestId).withPrincipal(testPrincipal).withTaskId(testTaskId).withHostName(testHostName).withKeyTabFilePath(testKeyTabFile).build();
    java.lang.String actualAuditMessage = event.getAuditMessage();
    java.lang.String expectedAuditMessage = java.lang.String.format(""Operation(%s), Status(Success), RequestId(%s), TaskId(%s), Principal(%s), Hostname(%s), Keytab file(%s)"", testOperation, testRequestId, testTaskId, testPrincipal, testHostName, testKeyTabFile);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
}","testAuditMessage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/kerberos/CreateKeyTabKerberosAuditEventTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testAuditMessage","TRUE","2","assertThat","{
    java.lang.String testOperation = ""Create principal"";
    java.lang.String testPrincipal = ""testPrincipal"";
    java.lang.Long testRequestId = 100L;
    java.lang.Long testTaskId = 99L;
    org.apache.ambari.server.audit.event.kerberos.CreatePrincipalKerberosAuditEvent event = org.apache.ambari.server.audit.event.kerberos.CreatePrincipalKerberosAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withOperation(testOperation).withRequestId(testRequestId).withPrincipal(testPrincipal).withTaskId(testTaskId).build();
    java.lang.String actualAuditMessage = event.getAuditMessage();
    java.lang.String expectedAuditMessage = java.lang.String.format(""Operation(%s), Status(Success), RequestId(%d), TaskId(%d), Principal(%s)"", testOperation, testRequestId, testTaskId, testPrincipal);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
}","testAuditMessage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/kerberos/CreatePrincipalKerberosAuditEventTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"testAuditMessage","TRUE","2","assertThat","{
    java.lang.String testOperation = ""Destroy principal"";
    java.lang.String testPrincipal = ""testPrincipal"";
    java.lang.Long testRequestId = 100L;
    java.lang.Long testTaskId = 99L;
    org.apache.ambari.server.audit.event.kerberos.DestroyPrincipalKerberosAuditEvent event = org.apache.ambari.server.audit.event.kerberos.DestroyPrincipalKerberosAuditEvent.builder().withTimestamp(java.lang.System.currentTimeMillis()).withOperation(testOperation).withRequestId(testRequestId).withPrincipal(testPrincipal).withTaskId(testTaskId).build();
    java.lang.String actualAuditMessage = event.getAuditMessage();
    java.lang.String expectedAuditMessage = java.lang.String.format(""Operation(%s), Status(Success), RequestId(%d), TaskId(%d), Principal(%s)"", testOperation, testRequestId, testTaskId, testPrincipal);
    org.junit.Assert.assertThat(actualAuditMessage, org.hamcrest.core.IsEqual.equalTo(expectedAuditMessage));
}","testAuditMessage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/kerberos/DestroyPrincipalKerberosAuditEventTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"defaultEventCreatorTest__okWithMessage","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceInstance resource = new org.apache.ambari.server.api.query.QueryImpl(new java.util.HashMap<>(), new org.apache.ambari.server.api.resources.HostComponentResourceDefinition(), null);
    org.apache.ambari.server.api.services.Request request = requestFactory.createRequest(null, new org.apache.ambari.server.api.services.RequestBody(), new org.apache.ambari.server.api.services.LocalUriInfo(""http://apache.org""), org.apache.ambari.server.api.services.Request.Type.POST, resource);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK, ""message""));
    java.lang.String actual = defaultEventCreator.createAuditEvent(request, result).getAuditMessage();
    java.lang.String expected = ""User(testuser), RemoteIp(1.2.3.4), RequestType(POST), url(http://apache.org), ResultStatus(200 OK)"";
    junit.framework.Assert.assertEquals(expected, actual);
}","defaultEventCreatorTest__okWithMessage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/DefaultEventCreatorTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
5198b80af4ca24111d1c76dd705bf0f1495d9a4c
e0ee23f38b494bfa620fa1f78e493858371d431a
c03b6d4b01fbc336c296c9a1a92ca1308cba6ffc
836647a36966b1b534e1419b30d4b31858773478
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"defaultEventCreatorTest__errorWithMessage","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceInstance resource = new org.apache.ambari.server.api.query.QueryImpl(new java.util.HashMap<>(), new org.apache.ambari.server.api.resources.HostComponentResourceDefinition(), null);
    org.apache.ambari.server.api.services.Request request = requestFactory.createRequest(null, new org.apache.ambari.server.api.services.RequestBody(), new org.apache.ambari.server.api.services.LocalUriInfo(""http://apache.org""), org.apache.ambari.server.api.services.Request.Type.POST, resource);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.BAD_REQUEST, ""message""));
    java.lang.String actual = defaultEventCreator.createAuditEvent(request, result).getAuditMessage();
    java.lang.String expected = ""User(testuser), RemoteIp(1.2.3.4), RequestType(POST), url(http://apache.org), ResultStatus(400 Bad Request), Reason(message)"";
    junit.framework.Assert.assertEquals(expected, actual);
}","defaultEventCreatorTest__errorWithMessage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/DefaultEventCreatorTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
5198b80af4ca24111d1c76dd705bf0f1495d9a4c
e0ee23f38b494bfa620fa1f78e493858371d431a
c03b6d4b01fbc336c296c9a1a92ca1308cba6ffc
836647a36966b1b534e1419b30d4b31858773478
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"defaultEventCreatorTest__okWithoutMessage","TRUE","2","assertEquals","{
    org.apache.ambari.server.api.resources.ResourceInstance resource = new org.apache.ambari.server.api.query.QueryImpl(new java.util.HashMap<>(), new org.apache.ambari.server.api.resources.HostComponentResourceDefinition(), null);
    org.apache.ambari.server.api.services.Request request = requestFactory.createRequest(null, new org.apache.ambari.server.api.services.RequestBody(), new org.apache.ambari.server.api.services.LocalUriInfo(""http://apache.org""), org.apache.ambari.server.api.services.Request.Type.POST, resource);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    java.lang.String actual = defaultEventCreator.createAuditEvent(request, result).getAuditMessage();
    java.lang.String expected = ""User(testuser), RemoteIp(1.2.3.4), RequestType(POST), url(http://apache.org), ResultStatus(200 OK)"";
    junit.framework.Assert.assertEquals(expected, actual);
}","defaultEventCreatorTest__okWithoutMessage()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/DefaultEventCreatorTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
5198b80af4ca24111d1c76dd705bf0f1495d9a4c
e0ee23f38b494bfa620fa1f78e493858371d431a
c03b6d4b01fbc336c296c9a1a92ca1308cba6ffc
836647a36966b1b534e1419b30d4b31858773478
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"defaultEventCreatorPostTest","FALSE","0","None","{
    testCreator(org.apache.ambari.server.audit.request.AllPostAndPutCreator.class, org.apache.ambari.server.api.services.Request.Type.POST, new org.apache.ambari.server.api.resources.BlueprintResourceDefinition(), org.apache.ambari.server.api.services.ResultStatus.STATUS.OK, null);
}","defaultEventCreatorPostTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/RequestAuditLoggerTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"customEventCreatorPutTest","FALSE","0","None","{
    testCreator(org.apache.ambari.server.audit.request.PutHostComponentCreator.class, org.apache.ambari.server.api.services.Request.Type.PUT, new org.apache.ambari.server.api.resources.HostComponentResourceDefinition(), org.apache.ambari.server.api.services.ResultStatus.STATUS.OK, null);
}","customEventCreatorPutTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/RequestAuditLoggerTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"noCreatorForRequestTypeTest","FALSE","0","None","{
    org.apache.ambari.server.api.services.Request request = createRequest(new org.apache.ambari.server.api.resources.HostComponentResourceDefinition(), org.apache.ambari.server.api.services.Request.Type.GET);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    try {
        createCapture();
        org.apache.ambari.server.audit.request.RequestAuditLoggerTest.requestAuditLogger.log(request, result);
        org.easymock.EasyMock.verify(org.apache.ambari.server.audit.request.RequestAuditLoggerTest.mockAuditLogger);
        junit.framework.Assert.fail(""Exception is excepted to be thrown"");
    } catch (java.lang.AssertionError ae) {
        org.easymock.EasyMock.reset(org.apache.ambari.server.audit.request.RequestAuditLoggerTest.mockAuditLogger);
        org.easymock.EasyMock.replay(org.apache.ambari.server.audit.request.RequestAuditLoggerTest.mockAuditLogger);
    }
}","noCreatorForRequestTypeTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/RequestAuditLoggerTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"noRequestTypeTest","FALSE","0","None","{
    org.apache.ambari.server.api.services.Request request = createRequest(new org.apache.ambari.server.api.resources.BlueprintResourceDefinition(), org.apache.ambari.server.api.services.Request.Type.DELETE);
    org.apache.ambari.server.api.services.Result result = new org.apache.ambari.server.api.services.ResultImpl(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    try {
        createCapture();
        org.apache.ambari.server.audit.request.RequestAuditLoggerTest.requestAuditLogger.log(request, result);
        org.easymock.EasyMock.verify(org.apache.ambari.server.audit.request.RequestAuditLoggerTest.mockAuditLogger);
        junit.framework.Assert.fail(""Exception is excepted to be thrown"");
    } catch (java.lang.AssertionError ae) {
        org.easymock.EasyMock.reset(org.apache.ambari.server.audit.request.RequestAuditLoggerTest.mockAuditLogger);
        org.easymock.EasyMock.replay(org.apache.ambari.server.audit.request.RequestAuditLoggerTest.mockAuditLogger);
    }
}","noRequestTypeTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/RequestAuditLoggerTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"noGetCreatorForResourceTypeTest__defaultGetCreatorUsed","FALSE","0","None","{
    testCreator(org.apache.ambari.server.audit.request.AllGetCreator.class, org.apache.ambari.server.api.services.Request.Type.GET, new org.apache.ambari.server.api.resources.HostComponentResourceDefinition(), org.apache.ambari.server.api.services.ResultStatus.STATUS.ACCEPTED, null);
}","noGetCreatorForResourceTypeTest__defaultGetCreatorUsed()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/RequestAuditLoggerTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
46a34ccdeeeeabe0ad4172e94a63c9b077e17861"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.AlertGroupEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.AlertGroupEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.AlertGroupResourceProvider.ALERT_GROUP_NAME, ""GroupName"");
    properties.put(org.apache.ambari.server.controller.internal.AlertGroupResourceProvider.ALERT_GROUP_DEFINITIONS, java.util.Arrays.asList(""D"", ""E"", ""F"", ""S""));
    properties.put(org.apache.ambari.server.controller.internal.AlertGroupResourceProvider.ALERT_GROUP_TARGETS, java.util.Arrays.asList(""T"", ""G"", ""T"", ""S""));
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.AlertGroup, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Alert group addition), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Alert group name(GroupName), Definition IDs(D, E, F, S), Notification IDs(T, G, T, S)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.AddAlertGroupRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/AlertGroupEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"putTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.AlertGroupEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.AlertGroupEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.AlertGroupResourceProvider.ALERT_GROUP_NAME, ""GroupName"");
    properties.put(org.apache.ambari.server.controller.internal.AlertGroupResourceProvider.ALERT_GROUP_DEFINITIONS, java.util.Arrays.asList(""D"", ""E"", ""F"", ""S""));
    properties.put(org.apache.ambari.server.controller.internal.AlertGroupResourceProvider.ALERT_GROUP_TARGETS, java.util.Arrays.asList(""T"", ""G"", ""T"", ""S""));
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.AlertGroup, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Alert group change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Alert group name(GroupName), Definition IDs(D, E, F, S), Notification IDs(T, G, T, S)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.ChangeAlertGroupRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","putTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/AlertGroupEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"deleteTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.AlertGroupEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.AlertGroupEventCreator();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.AlertGroup, ""999"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.DELETE, org.apache.ambari.server.controller.spi.Resource.Type.AlertGroup, null, resource);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Alert group removal), RequestType(DELETE), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Alert group ID(999)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.DeleteAlertGroupRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","deleteTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/AlertGroupEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.AlertTargetEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.AlertTargetEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.AlertTargetResourceProvider.ALERT_TARGET_DESCRIPTION, ""Target description"");
    properties.put(org.apache.ambari.server.controller.internal.AlertTargetResourceProvider.ALERT_TARGET_NAME, ""Target name"");
    properties.put(org.apache.ambari.server.controller.internal.AlertTargetResourceProvider.ALERT_TARGET_NOTIFICATION_TYPE, ""NotifType"");
    properties.put((org.apache.ambari.server.controller.internal.AlertTargetResourceProvider.ALERT_TARGET_PROPERTIES + ""/"") + org.apache.ambari.server.notifications.dispatchers.EmailDispatcher.JAVAMAIL_FROM_PROPERTY, ""email"");
    properties.put(org.apache.ambari.server.controller.internal.AlertTargetResourceProvider.ALERT_TARGET_STATES, java.util.Arrays.asList(""S"", ""T"", ""A"", ""T"", ""E"", ""S""));
    properties.put(org.apache.ambari.server.controller.internal.AlertTargetResourceProvider.ALERT_TARGET_GROUPS, java.util.Arrays.asList(""G"", ""R"", ""P"", ""S""));
    properties.put((org.apache.ambari.server.controller.internal.AlertTargetResourceProvider.ALERT_TARGET_PROPERTIES + ""/"") + org.apache.ambari.server.state.services.AlertNoticeDispatchService.AMBARI_DISPATCH_RECIPIENTS, java.util.Arrays.asList(""a@a.com"", ""b@b.com"", ""c@c.com""));
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.AlertTarget, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Notification addition), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Notification name(Target name), Description(Target description), Notification type(NotifType), Group IDs(G, R, P, S), Email from(email), Email to(a@a.com, b@b.com, c@c.com), Alert states(S, T, A, T, E, S)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.AddAlertTargetRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/AlertTargetEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"putTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.AlertTargetEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.AlertTargetEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.AlertTargetResourceProvider.ALERT_TARGET_DESCRIPTION, ""Target description"");
    properties.put(org.apache.ambari.server.controller.internal.AlertTargetResourceProvider.ALERT_TARGET_NAME, ""Target name"");
    properties.put(org.apache.ambari.server.controller.internal.AlertTargetResourceProvider.ALERT_TARGET_NOTIFICATION_TYPE, ""NotifType"");
    properties.put((org.apache.ambari.server.controller.internal.AlertTargetResourceProvider.ALERT_TARGET_PROPERTIES + ""/"") + org.apache.ambari.server.notifications.dispatchers.EmailDispatcher.JAVAMAIL_FROM_PROPERTY, ""email"");
    properties.put(org.apache.ambari.server.controller.internal.AlertTargetResourceProvider.ALERT_TARGET_STATES, java.util.Arrays.asList(""S"", ""T"", ""A"", ""T"", ""E"", ""S""));
    properties.put(org.apache.ambari.server.controller.internal.AlertTargetResourceProvider.ALERT_TARGET_GROUPS, java.util.Arrays.asList(""G"", ""R"", ""P"", ""S""));
    properties.put((org.apache.ambari.server.controller.internal.AlertTargetResourceProvider.ALERT_TARGET_PROPERTIES + ""/"") + org.apache.ambari.server.state.services.AlertNoticeDispatchService.AMBARI_DISPATCH_RECIPIENTS, java.util.Arrays.asList(""a@a.com"", ""b@b.com"", ""c@c.com""));
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.AlertTarget, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Notification change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Notification name(Target name), Description(Target description), Notification type(NotifType), Group IDs(G, R, P, S), Email from(email), Email to(a@a.com, b@b.com, c@c.com), Alert states(S, T, A, T, E, S)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.ChangeAlertTargetRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","putTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/AlertTargetEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"deleteTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.AlertTargetEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.AlertTargetEventCreator();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.AlertTarget, ""888"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.DELETE, org.apache.ambari.server.controller.spi.Resource.Type.AlertTarget, null, resource);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Notification removal), RequestType(DELETE), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Notification ID(888)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.DeleteAlertTargetRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","deleteTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/AlertTargetEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.BlueprintEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.BlueprintEventCreator();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.Blueprint, ""myBluePrint"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.Blueprint, null, resource);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Upload blueprint), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Blueprint name(myBluePrint)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.AddBlueprintRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/BlueprintEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"deleteTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.BlueprintEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.BlueprintEventCreator();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.Blueprint, ""myBluePrint"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.DELETE, org.apache.ambari.server.controller.spi.Resource.Type.Blueprint, null, resource);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Delete blueprint), RequestType(DELETE), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Blueprint name(myBluePrint)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.DeleteBlueprintRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","deleteTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/BlueprintEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"getTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.BlueprintExportEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.BlueprintExportEventCreator();
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.GET, org.apache.ambari.server.controller.spi.Resource.Type.Cluster, null, null, ""?format=blueprint"");
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Blueprint export), RequestType(GET), url(http://example.com:8080/api/v1/test?format=blueprint), ResultStatus(200 OK)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.BlueprintExportRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","getTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/BlueprintExportEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"deleteTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ComponentEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ComponentEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.HOST_NAME, ""ambari1.example.com"");
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.HostComponent, ""MyComponent"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.DELETE, org.apache.ambari.server.controller.spi.Resource.Type.HostComponent, properties, resource);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, null);
    addRequestId(resultTree, 1L);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK), resultTree);
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Delete component MyComponent), Host name(ambari1.example.com), RequestId(1), Status(Successfully queued)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.StartOperationRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","deleteTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ComponentEventCreatorTest.java","5df06c19d6bcb5ceb398d5aa9f040567c466790d
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"putForAllHostsTest","FALSE","0","None","{
    allHostsTest(org.apache.ambari.server.api.services.Request.Type.PUT);
}","putForAllHostsTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ComponentEventCreatorTest.java","5df06c19d6bcb5ceb398d5aa9f040567c466790d
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postForAllHostsTest","FALSE","0","None","{
    allHostsTest(org.apache.ambari.server.api.services.Request.Type.POST);
}","postForAllHostsTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ComponentEventCreatorTest.java","5df06c19d6bcb5ceb398d5aa9f040567c466790d
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"hostTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ComponentEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ComponentEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.HOST_NAME, ""ambari1.example.com"");
    properties.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.CLUSTER_NAME, ""mycluster"");
    properties.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.STATE, ""STARTED"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.HostComponent, properties, null);
    request.getBody().addRequestInfoProperty(org.apache.ambari.server.controller.internal.RequestOperationLevel.OPERATION_LEVEL_ID, ""HOST"");
    request.getBody().addRequestInfoProperty(org.apache.ambari.server.controller.internal.RequestOperationLevel.OPERATION_HOST_NAME, ""ambari1.example.com"");
    request.getBody().addRequestInfoProperty(org.apache.ambari.server.controller.internal.RequestOperationLevel.OPERATION_CLUSTER_ID, ""mycluster"");
    request.getBody().addRequestInfoProperty(""query"", ""host_component.in(MYCOMPONENT,MYCOMPONENT2)"");
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, null);
    addRequestId(resultTree, 1L);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK), resultTree);
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(STARTED: MYCOMPONENT,MYCOMPONENT2 on ambari1.example.com (mycluster)), Host name(ambari1.example.com), RequestId(1), Status(Successfully queued)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.StartOperationRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","hostTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ComponentEventCreatorTest.java","5df06c19d6bcb5ceb398d5aa9f040567c466790d
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"hostComponentTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ComponentEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ComponentEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.HOST_NAME, ""ambari1.example.com"");
    properties.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.CLUSTER_NAME, ""mycluster"");
    properties.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.STATE, ""STARTED"");
    properties.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.COMPONENT_NAME, ""MYCOMPONENT"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.HostComponent, properties, null);
    request.getBody().addRequestInfoProperty(org.apache.ambari.server.controller.internal.RequestOperationLevel.OPERATION_LEVEL_ID, ""HOST_COMPONENT"");
    request.getBody().addRequestInfoProperty(org.apache.ambari.server.controller.internal.RequestOperationLevel.OPERATION_SERVICE_ID, ""MYSERVICE"");
    request.getBody().addRequestInfoProperty(org.apache.ambari.server.controller.internal.RequestOperationLevel.OPERATION_HOST_NAME, ""ambari1.example.com"");
    request.getBody().addRequestInfoProperty(org.apache.ambari.server.controller.internal.RequestOperationLevel.OPERATION_CLUSTER_ID, ""mycluster"");
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, null);
    addRequestId(resultTree, 1L);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK), resultTree);
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(STARTED: MYCOMPONENT/MYSERVICE on ambari1.example.com (mycluster)), Host name(ambari1.example.com), RequestId(1), Status(Successfully queued)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.StartOperationRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","hostComponentTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ComponentEventCreatorTest.java","5df06c19d6bcb5ceb398d5aa9f040567c466790d
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"maintenanceModeTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ComponentEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ComponentEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.HOST_NAME, ""ambari1.example.com"");
    properties.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.MAINTENANCE_STATE, ""ON"");
    properties.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.COMPONENT_NAME, ""MYCOMPONENT"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.HostComponent, properties, null);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, null);
    addRequestId(resultTree, 1L);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK), resultTree);
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Turn ON Maintenance Mode for MYCOMPONENT), Host name(ambari1.example.com), RequestId(1), Status(Successfully queued)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.StartOperationRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","maintenanceModeTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ComponentEventCreatorTest.java","5df06c19d6bcb5ceb398d5aa9f040567c466790d
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"failureTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ComponentEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ComponentEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.HOST_NAME, ""ambari1.example.com"");
    properties.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.MAINTENANCE_STATE, ""ON"");
    properties.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.COMPONENT_NAME, ""MYCOMPONENT"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.HostComponent, properties, null);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, null);
    addRequestId(resultTree, 1L);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.BAD_REQUEST, ""Failed for testing""), resultTree);
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Turn ON Maintenance Mode for MYCOMPONENT), Host name(ambari1.example.com), RequestId(1), Status(Failed to queue), Reason(Failed for testing)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.StartOperationRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","failureTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ComponentEventCreatorTest.java","5df06c19d6bcb5ceb398d5aa9f040567c466790d
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"clusterNameChangeTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ConfigurationChangeEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ConfigurationChangeEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.ClusterResourceProvider.CLUSTER_NAME_PROPERTY_ID, ""newname"");
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.Cluster, ""oldname"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.Cluster, properties, resource);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Cluster name change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Old name(oldname), New name(newname)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.ClusterNameChangeRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","clusterNameChangeTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ConfigurationChangeEventCreatorTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"configurationChangeTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ConfigurationChangeEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ConfigurationChangeEventCreator();
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, null);
    org.apache.ambari.server.controller.spi.Resource resource = new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.Cluster);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resourceNode = new org.apache.ambari.server.api.util.TreeNodeImpl<>(resultTree, resource, ""resources"");
    org.apache.ambari.server.controller.spi.Resource version = new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.Cluster);
    version.setProperty(org.apache.ambari.server.controller.internal.ServiceConfigVersionResourceProvider.SERVICE_CONFIG_VERSION_PROPERTY_ID, ""1"");
    version.setProperty(org.apache.ambari.server.controller.internal.ServiceConfigVersionResourceProvider.SERVICE_CONFIG_VERSION_NOTE_PROPERTY_ID, ""note"");
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> versionNode = new org.apache.ambari.server.api.util.TreeNodeImpl<>(resourceNode, version, """");
    resourceNode.addChild(versionNode);
    resultTree.addChild(resourceNode);
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.Cluster, new java.util.HashMap<>(), null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK), resultTree);
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Configuration change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), VersionNumber(V1), VersionNote(note)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.ConfigurationChangeRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","configurationChangeTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ConfigurationChangeEventCreatorTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.CredentialEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.CredentialEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.CredentialResourceProvider.CREDENTIAL_CLUSTER_NAME_PROPERTY_ID, ""mycluster"");
    properties.put(org.apache.ambari.server.controller.internal.CredentialResourceProvider.CREDENTIAL_TYPE_PROPERTY_ID, ""USER"");
    properties.put(org.apache.ambari.server.controller.internal.CredentialResourceProvider.CREDENTIAL_ALIAS_PROPERTY_ID, ""Alias"");
    properties.put(org.apache.ambari.server.controller.internal.CredentialResourceProvider.CREDENTIAL_PRINCIPAL_PROPERTY_ID, ""newuser"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.Credential, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Credential addition), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Type(USER), Principal(newuser), Alias(Alias), Cluster name(mycluster)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.AddCredentialRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/CredentialEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.DefaultEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.DefaultEventCreator();
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.Credential, null, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.request.RequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/DefaultEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.GroupEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.GroupEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.GroupResourceProvider.GROUP_GROUPNAME_PROPERTY_ID, ""GroupName"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.Group, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Group creation), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Group(GroupName)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.CreateGroupRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/GroupEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"deleteTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.GroupEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.GroupEventCreator();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.Group, ""GroupName"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.DELETE, org.apache.ambari.server.controller.spi.Resource.Type.Group, null, resource);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Group delete), RequestType(DELETE), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Group(GroupName)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.DeleteGroupRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","deleteTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/GroupEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.HostEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.HostEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.HostResourceProvider.HOST_HOST_NAME_PROPERTY_ID, ""ambari1.example.com"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.Host, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Host addition), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Hostname(ambari1.example.com)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.AddHostRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/HostEventCreatorTest.java","5df06c19d6bcb5ceb398d5aa9f040567c466790d
0e13b01849f1b13010a83b01861102a5febb5e7c
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"queryPostTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.HostEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.HostEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    java.util.Set<java.util.Map<java.lang.String, java.lang.String>> set = new java.util.HashSet<>();
    java.util.Map<java.lang.String, java.lang.String> map = new java.util.HashMap<>();
    map.put(org.apache.ambari.server.controller.internal.HostComponentResourceProvider.COMPONENT_NAME, ""MYCOMPONENT"");
    set.add(map);
    properties.put(""host_components"", set);
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.QUERY_POST, org.apache.ambari.server.controller.spi.Resource.Type.Host, properties, null, org.apache.ambari.server.controller.internal.HostResourceProvider.HOST_HOST_NAME_PROPERTY_ID + ""=ambari1.example.com"");
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Component addition to host), RequestType(QUERY_POST), url(http://example.com:8080/api/v1/testHosts/host_name=ambari1.example.com), ResultStatus(200 OK), Hostname(ambari1.example.com), Component(MYCOMPONENT)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.AddComponentToHostRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","queryPostTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/HostEventCreatorTest.java","5df06c19d6bcb5ceb398d5aa9f040567c466790d
0e13b01849f1b13010a83b01861102a5febb5e7c
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"deleteTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.HostEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.HostEventCreator();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.Host, ""ambari1.example.com"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.DELETE, org.apache.ambari.server.controller.spi.Resource.Type.Host, null, resource);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Host deletion), RequestType(DELETE), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Hostname(ambari1.example.com)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.DeleteHostRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","deleteTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/HostEventCreatorTest.java","5df06c19d6bcb5ceb398d5aa9f040567c466790d
0e13b01849f1b13010a83b01861102a5febb5e7c
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.MemberEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.MemberEventCreator();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.Group, ""GroupName"");
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.Member, ""MemberName"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.Member, null, resource);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(User addition to group), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Group(GroupName), Affected username(MemberName)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.AddUserToGroupRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/MemberEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"putTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.MemberEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.MemberEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.MemberResourceProvider.MEMBER_GROUP_NAME_PROPERTY_ID, ""GroupName"");
    properties.put(org.apache.ambari.server.controller.internal.MemberResourceProvider.MEMBER_USER_NAME_PROPERTY_ID, ""MemberName"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.Member, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Membership change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Group(GroupName), Members(MemberName)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.MembershipChangeRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","putTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/MemberEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"deleteTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.MemberEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.MemberEventCreator();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.Group, ""GroupName"");
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.Member, ""MemberName"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.DELETE, org.apache.ambari.server.controller.spi.Resource.Type.Member, null, resource);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(User removal from group), RequestType(DELETE), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Group(GroupName), Affected username(MemberName)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.RemoveUserFromGroupRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","deleteTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/MemberEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.PrivilegeEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.PrivilegeEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.PrivilegeResourceProvider.PRINCIPAL_TYPE, ""USER"");
    properties.put(org.apache.ambari.server.controller.internal.PrivilegeResourceProvider.PERMISSION_NAME, ""Permission2"");
    properties.put(org.apache.ambari.server.controller.internal.PrivilegeResourceProvider.PRINCIPAL_NAME, org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName + ""2"");
    org.apache.ambari.server.api.services.NamedPropertySet nps = new org.apache.ambari.server.api.services.NamedPropertySet(""1"", properties);
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.ClusterPrivilege, null, null);
    request.getBody().addPropertySet(nps);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (((""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(User role change), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Role(Permission2), User("") + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""2)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.PrivilegeChangeRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java","5fc20b85f72097ab30b04f39d482e85a8cf26534
4727a7445138cac216442424b73ad0d490cbaed2
e4db57093f4d17497366cdfbf02127f36399bf42
6576c8460239824e948c099856eaa53007489796
5754b682687425913af5119f27d41fc2f9dd3cfd
32890b5542dee84de30d127896fe2426af1926ee
af13ef73931bf672536199b944d4c3e26ad24ac4"
"putTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.PrivilegeEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.PrivilegeEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.PrivilegeResourceProvider.PRINCIPAL_TYPE, ""USER"");
    properties.put(org.apache.ambari.server.controller.internal.PrivilegeResourceProvider.PERMISSION_NAME, ""Permission1"");
    properties.put(org.apache.ambari.server.controller.internal.PrivilegeResourceProvider.PRINCIPAL_NAME, org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName);
    java.util.Map<java.lang.String, java.lang.Object> properties2 = new java.util.HashMap<>();
    properties2.put(org.apache.ambari.server.controller.internal.PrivilegeResourceProvider.PRINCIPAL_TYPE, ""USER"");
    properties2.put(org.apache.ambari.server.controller.internal.PrivilegeResourceProvider.PERMISSION_NAME, ""Permission2"");
    properties2.put(org.apache.ambari.server.controller.internal.PrivilegeResourceProvider.PRINCIPAL_NAME, org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName + ""2"");
    java.util.Map<java.lang.String, java.lang.Object> properties3 = new java.util.HashMap<>();
    properties3.put(org.apache.ambari.server.controller.internal.PrivilegeResourceProvider.PRINCIPAL_TYPE, ""GROUP"");
    properties3.put(org.apache.ambari.server.controller.internal.PrivilegeResourceProvider.PERMISSION_NAME, ""Permission1"");
    properties3.put(org.apache.ambari.server.controller.internal.PrivilegeResourceProvider.PRINCIPAL_NAME, ""testgroup"");
    org.apache.ambari.server.api.services.NamedPropertySet nps = new org.apache.ambari.server.api.services.NamedPropertySet(""1"", properties);
    org.apache.ambari.server.api.services.NamedPropertySet nps2 = new org.apache.ambari.server.api.services.NamedPropertySet(""2"", properties2);
    org.apache.ambari.server.api.services.NamedPropertySet nps3 = new org.apache.ambari.server.api.services.NamedPropertySet(""3"", properties3);
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.ClusterPrivilege, null, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    request.getBody().addPropertySet(nps);
    request.getBody().addPropertySet(nps2);
    request.getBody().addPropertySet(nps3);
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = ((((((((((""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Role change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Roles("") + ""Permission1: ["") + ""Users: "") + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + "";"") + ""Groups: testgroup]"") + "" Permission2: ["") + ""Users: "") + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""2] )"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.ClusterPrivilegeChangeRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","putTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/PrivilegeEventCreatorTest.java","5fc20b85f72097ab30b04f39d482e85a8cf26534
4727a7445138cac216442424b73ad0d490cbaed2
e4db57093f4d17497366cdfbf02127f36399bf42
6576c8460239824e948c099856eaa53007489796
5754b682687425913af5119f27d41fc2f9dd3cfd
32890b5542dee84de30d127896fe2426af1926ee
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","FALSE","0","None","{
    org.apache.ambari.server.audit.request.eventcreator.RecommendationIgnoreEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.RecommendationIgnoreEventCreator();
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.Recommendation, null, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RecomendationIgnoreEventCreatorTest.java","af13ef73931bf672536199b944d4c3e26ad24ac4
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
00a4991eecb205f7936929e7010856661f0ba59e
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
c2264fedc1ca9ed27ba56513823fc52fea400230
a12bb10131ca66e48e524500092695ecdcc86fea"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.RepositoryEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.RepositoryEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.RepositoryResourceProvider.REPOSITORY_REPO_ID_PROPERTY_ID, ""Repo1"");
    properties.put(org.apache.ambari.server.controller.internal.RepositoryResourceProvider.REPOSITORY_STACK_NAME_PROPERTY_ID, ""StackName"");
    properties.put(org.apache.ambari.server.controller.internal.RepositoryResourceProvider.REPOSITORY_STACK_VERSION_PROPERTY_ID, ""1.2-56"");
    properties.put(org.apache.ambari.server.controller.internal.RepositoryResourceProvider.REPOSITORY_OS_TYPE_PROPERTY_ID, ""redhat7"");
    properties.put(org.apache.ambari.server.controller.internal.RepositoryResourceProvider.REPOSITORY_BASE_URL_PROPERTY_ID, ""http://example.com"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.Repository, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Repository addition), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Stack(StackName), Stack version(1.2-56), OS(redhat7), Repo id(Repo1), Base URL(http://example.com)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.AddRepositoryRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"putTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.RepositoryEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.RepositoryEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.RepositoryResourceProvider.REPOSITORY_REPO_ID_PROPERTY_ID, ""Repo1"");
    properties.put(org.apache.ambari.server.controller.internal.RepositoryResourceProvider.REPOSITORY_STACK_NAME_PROPERTY_ID, ""StackName"");
    properties.put(org.apache.ambari.server.controller.internal.RepositoryResourceProvider.REPOSITORY_STACK_VERSION_PROPERTY_ID, ""1.2-56"");
    properties.put(org.apache.ambari.server.controller.internal.RepositoryResourceProvider.REPOSITORY_OS_TYPE_PROPERTY_ID, ""redhat7"");
    properties.put(org.apache.ambari.server.controller.internal.RepositoryResourceProvider.REPOSITORY_BASE_URL_PROPERTY_ID, ""http://example.com"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.Repository, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Repository update), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Stack(StackName), Stack version(1.2-56), OS(redhat7), Repo id(Repo1), Base URL(http://example.com)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.UpdateRepositoryRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","putTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.RepositoryVersionEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.RepositoryVersionEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID, ""StackName"");
    properties.put(org.apache.ambari.server.controller.internal.RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID, ""1.9"");
    properties.put(org.apache.ambari.server.controller.internal.RepositoryVersionResourceProvider.REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID, ""MyStack"");
    properties.put(org.apache.ambari.server.controller.internal.RepositoryVersionResourceProvider.REPOSITORY_VERSION_REPOSITORY_VERSION_PROPERTY_ID, ""1.2-56"");
    properties.put(""operating_systems"", createOperatingSystems());
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.RepositoryVersion, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = ((((((""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Repository version addition), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Stack(StackName), Stack version(1.9), Display name(MyStack), Repo version(1.2-56), Repositories("") + ""Operating system: redhat6("") + ""Repository ID(2), Repository name(MyRepo6), Base url(http://example6.com))"") + ""Operating system: redhat7("") + ""Repository ID(1), Repository name(MyRepo), Base url(http://example.com))"") + "")"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.AddRepositoryVersionRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java","5fc20b85f72097ab30b04f39d482e85a8cf26534
f8b29df9685b443d4a5c06c6e1725e4428c95b49
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"putTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.RepositoryVersionEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.RepositoryVersionEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_NAME_PROPERTY_ID, ""StackName"");
    properties.put(org.apache.ambari.server.controller.internal.RepositoryVersionResourceProvider.REPOSITORY_VERSION_STACK_VERSION_PROPERTY_ID, ""1.9"");
    properties.put(org.apache.ambari.server.controller.internal.RepositoryVersionResourceProvider.REPOSITORY_VERSION_DISPLAY_NAME_PROPERTY_ID, ""MyStack"");
    properties.put(org.apache.ambari.server.controller.internal.RepositoryVersionResourceProvider.REPOSITORY_VERSION_REPOSITORY_VERSION_PROPERTY_ID, ""1.2-56"");
    properties.put(""operating_systems"", createOperatingSystems());
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.RepositoryVersion, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = ((((((""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Repository version change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Stack(StackName), Stack version(1.9), Display name(MyStack), Repo version(1.2-56), Repositories("") + ""Operating system: redhat6("") + ""Repository ID(2), Repository name(MyRepo6), Base url(http://example6.com))"") + ""Operating system: redhat7("") + ""Repository ID(1), Repository name(MyRepo), Base url(http://example.com))"") + "")"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.ChangeRepositoryVersionRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","putTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java","5fc20b85f72097ab30b04f39d482e85a8cf26534
f8b29df9685b443d4a5c06c6e1725e4428c95b49
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"deleteTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.RepositoryVersionEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.RepositoryVersionEventCreator();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.Stack, ""HDP"");
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.StackVersion, ""1.9"");
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.RepositoryVersion, ""1.2-56"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.DELETE, org.apache.ambari.server.controller.spi.Resource.Type.RepositoryVersion, null, resource);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Repository version removal), RequestType(DELETE), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Stack(HDP), Stack version(1.9), Repo version ID(1.2-56)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.DeleteRepositoryVersionRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","deleteTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RepositoryVersionEventCreatorTest.java","5fc20b85f72097ab30b04f39d482e85a8cf26534
f8b29df9685b443d4a5c06c6e1725e4428c95b49
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.RequestEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.RequestEventCreator();
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.Request, null, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    request.getBody().addRequestInfoProperty(""command"", ""MyCommand"");
    request.getBody().addRequestInfoProperty(org.apache.ambari.server.controller.internal.RequestOperationLevel.OPERATION_CLUSTER_ID, ""mycluster"");
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Request from server), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Command(MyCommand), Cluster name(mycluster)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.AddRequestRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RequestEventCreatorTest.java","e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
fd02688f27afa6e4607f3694dee5e5643e8e2b72
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postScheduleTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.RequestEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.RequestEventCreator();
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.Request, null, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    request.getBody().addRequestInfoProperty(""command"", ""MyCommand"");
    java.util.Map<java.lang.String, java.lang.Object> mapProperties = new java.util.HashMap<>();
    mapProperties.put(org.apache.ambari.server.controller.internal.RequestResourceProvider.REQUEST_CLUSTER_NAME_PROPERTY_ID, ""mycluster"");
    org.apache.ambari.server.api.services.NamedPropertySet namedPropSet = new org.apache.ambari.server.api.services.NamedPropertySet("""", mapProperties);
    request.getBody().addPropertySet(namedPropSet);
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Request from server), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Command(MyCommand), Cluster name(mycluster)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.AddRequestRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postScheduleTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/RequestEventCreatorTest.java","e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
fd02688f27afa6e4607f3694dee5e5643e8e2b72
af13ef73931bf672536199b944d4c3e26ad24ac4"
"getTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ServiceConfigDownloadEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ServiceConfigDownloadEventCreator();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.Service, ""MYSERVICE"");
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.Component, ""MYCOMPONENT"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.GET, org.apache.ambari.server.controller.spi.Resource.Type.ClientConfig, null, resource);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Client config download), RequestType(GET), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Service(MYSERVICE), Component(MYCOMPONENT)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.ClientConfigDownloadRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","getTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ServiceConfigDownloadEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"deleteTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ServiceEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ServiceEventCreator();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.Service, ""MyService"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.DELETE, org.apache.ambari.server.controller.spi.Resource.Type.Service, null, resource);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Service deletion), RequestType(DELETE), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Service(MyService)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.DeleteServiceRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","deleteTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ServiceEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"putForAllHostsTest","FALSE","0","None","{
    clusterTest(org.apache.ambari.server.api.services.Request.Type.PUT);
}","putForAllHostsTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ServiceEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postForAllHostsTest","FALSE","0","None","{
    clusterTest(org.apache.ambari.server.api.services.Request.Type.POST);
}","postForAllHostsTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ServiceEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"serviceTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ServiceEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ServiceEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.ServiceResourceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID, ""STARTED"");
    properties.put(org.apache.ambari.server.controller.internal.ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID, ""MyService"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.Service, properties, null);
    request.getBody().addRequestInfoProperty(org.apache.ambari.server.controller.internal.RequestOperationLevel.OPERATION_LEVEL_ID, ""SERVICE"");
    request.getBody().addRequestInfoProperty(org.apache.ambari.server.controller.internal.RequestOperationLevel.OPERATION_CLUSTER_ID, ""mycluster"");
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, null);
    addRequestId(resultTree, 1L);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK), resultTree);
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(STARTED: MyService (mycluster)), RequestId(1), Status(Successfully queued)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.StartOperationRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","serviceTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ServiceEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"maintenanceModeTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ServiceEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ServiceEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.ServiceResourceProvider.SERVICE_MAINTENANCE_STATE_PROPERTY_ID, ""ON"");
    properties.put(org.apache.ambari.server.controller.internal.ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID, ""MyService"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.Service, properties, null);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, null);
    addRequestId(resultTree, 1L);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK), resultTree);
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Turn ON Maintenance Mode for MyService), RequestId(1), Status(Successfully queued)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.StartOperationRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","maintenanceModeTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ServiceEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"failureTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ServiceEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ServiceEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.ServiceResourceProvider.SERVICE_MAINTENANCE_STATE_PROPERTY_ID, ""ON"");
    properties.put(org.apache.ambari.server.controller.internal.ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID, ""MyService"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.Service, properties, null);
    org.apache.ambari.server.api.util.TreeNode<org.apache.ambari.server.controller.spi.Resource> resultTree = new org.apache.ambari.server.api.util.TreeNodeImpl<>(null, null, null);
    addRequestId(resultTree, 1L);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.BAD_REQUEST, ""Failed for testing""), resultTree);
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Turn ON Maintenance Mode for MyService), RequestId(1), Status(Failed to queue), Reason(Failed for testing)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.StartOperationRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","failureTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ServiceEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"unauthorizedTest","FALSE","0","None","{
    unauthorizedTest(org.apache.ambari.server.api.services.ResultStatus.STATUS.UNAUTHORIZED);
}","unauthorizedTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/UnauthorizedEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"forbiddenTest","FALSE","0","None","{
    unauthorizedTest(org.apache.ambari.server.api.services.ResultStatus.STATUS.FORBIDDEN);
}","forbiddenTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/UnauthorizedEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.UpgradeEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.UpgradeEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.UpgradeResourceProvider.UPGRADE_REPO_VERSION_ID, ""1234"");
    properties.put(org.apache.ambari.server.controller.internal.UpgradeResourceProvider.UPGRADE_TYPE, ""ROLLING"");
    properties.put(org.apache.ambari.server.controller.internal.UpgradeResourceProvider.UPGRADE_CLUSTER_NAME, ""mycluster"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.Upgrade, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Upgrade addition), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Repository version ID(1234), Upgrade type(ROLLING), Cluster name(mycluster)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.AddUpgradeRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/UpgradeEventCreatorTest.java","522039ebd3f259c2a54db5102108209b94d5d004
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.UpgradeItemEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.UpgradeItemEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.UpgradeItemResourceProvider.UPGRADE_ITEM_STAGE_ID, ""1"");
    properties.put(org.apache.ambari.server.controller.internal.UpgradeItemResourceProvider.UPGRADE_REQUEST_ID, ""9"");
    properties.put(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""UpgradeItem"", ""status""), ""Status"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.UpgradeItem, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Action confirmation by the user), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Stage id(1), Status(Status), Request id(9)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.UpdateUpgradeItemRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/UpgradeItemEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.UserEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.UserEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.UserResourceProvider.USER_ADMIN_PROPERTY_ID, ""false"");
    properties.put(org.apache.ambari.server.controller.internal.UserResourceProvider.USER_ACTIVE_PROPERTY_ID, ""true"");
    properties.put(org.apache.ambari.server.controller.internal.UserResourceProvider.USER_USERNAME_PROPERTY_ID, ""myUser"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.User, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(User creation), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Created Username(myUser), Active(yes), Administrator(no)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.CreateUserRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/UserEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"deleteTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.UserEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.UserEventCreator();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.User, ""userToDelete"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.DELETE, org.apache.ambari.server.controller.spi.Resource.Type.User, null, resource);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(User delete), RequestType(DELETE), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Deleted Username(userToDelete)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.DeleteUserRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","deleteTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/UserEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"activeTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.UserEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.UserEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.UserResourceProvider.USER_ACTIVE_PROPERTY_ID, ""true"");
    properties.put(org.apache.ambari.server.controller.internal.UserResourceProvider.USER_USERNAME_PROPERTY_ID, ""myUser"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.User, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Set user active/inactive), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Affected username(myUser), Active(yes)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.ActivateUserRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","activeTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/UserEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"adminTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.UserEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.UserEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.UserResourceProvider.USER_ADMIN_PROPERTY_ID, ""false"");
    properties.put(org.apache.ambari.server.controller.internal.UserResourceProvider.USER_USERNAME_PROPERTY_ID, ""myUser"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.User, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Set user admin), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Affeted username(myUser), Administrator(no)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.AdminUserRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","adminTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/UserEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"passwordChangeTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.UserEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.UserEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.UserResourceProvider.USER_OLD_PASSWORD_PROPERTY_ID, ""oldPassword"");
    properties.put(org.apache.ambari.server.controller.internal.UserResourceProvider.USER_USERNAME_PROPERTY_ID, ""myUser"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.User, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(Password change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Affected username(myUser)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.UserPasswordChangeRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","passwordChangeTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/UserEventCreatorTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"postTest","FALSE","0","None","{
    org.apache.ambari.server.audit.request.eventcreator.ValidationIgnoreEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ValidationIgnoreEventCreator();
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.Validation, null, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ValidationIgnoreEventCreatorTest.java","af13ef73931bf672536199b944d4c3e26ad24ac4
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
74937dd55694a8e154a52d25d0d25e10a9377c31
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
c2264fedc1ca9ed27ba56513823fc52fea400230
a12bb10131ca66e48e524500092695ecdcc86fea"
"postTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ViewInstanceEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ViewInstanceEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.ViewInstanceResourceProvider.VIEW_NAME, ""MyView"");
    properties.put(org.apache.ambari.server.controller.internal.ViewInstanceResourceProvider.VERSION, ""1.9"");
    properties.put(org.apache.ambari.server.controller.internal.ViewInstanceResourceProvider.INSTANCE_NAME, ""MyViewInstance"");
    properties.put(org.apache.ambari.server.controller.internal.ViewInstanceResourceProvider.LABEL, ""MyViewLabel"");
    properties.put(org.apache.ambari.server.controller.internal.ViewInstanceResourceProvider.DESCRIPTION, ""Test view"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.POST, org.apache.ambari.server.controller.spi.Resource.Type.ViewInstance, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(View addition), RequestType(POST), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Type(MyView), Version(1.9), Name(MyViewInstance), Display name(MyViewLabel), Description(Test view)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.AddViewInstanceRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","postTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewInstanceEventCreatorTest.java","4727a7445138cac216442424b73ad0d490cbaed2
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"putTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ViewInstanceEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ViewInstanceEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.ViewInstanceResourceProvider.VIEW_NAME, ""MyView"");
    properties.put(org.apache.ambari.server.controller.internal.ViewInstanceResourceProvider.VERSION, ""1.9"");
    properties.put(org.apache.ambari.server.controller.internal.ViewInstanceResourceProvider.INSTANCE_NAME, ""MyViewInstance"");
    properties.put(org.apache.ambari.server.controller.internal.ViewInstanceResourceProvider.LABEL, ""MyViewLabel"");
    properties.put(org.apache.ambari.server.controller.internal.ViewInstanceResourceProvider.DESCRIPTION, ""Test view"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.ViewInstance, properties, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(View change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Type(MyView), Version(1.9), Name(MyViewInstance), Display name(MyViewLabel), Description(Test view)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.ChangeViewInstanceRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","putTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewInstanceEventCreatorTest.java","4727a7445138cac216442424b73ad0d490cbaed2
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"deleteTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ViewInstanceEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ViewInstanceEventCreator();
    java.util.Map<org.apache.ambari.server.controller.spi.Resource.Type, java.lang.String> resource = new java.util.HashMap<>();
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.View, ""MyView"");
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.ViewVersion, ""1.2"");
    resource.put(org.apache.ambari.server.controller.spi.Resource.Type.ViewInstance, ""MyViewInstance"");
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.DELETE, org.apache.ambari.server.controller.spi.Resource.Type.ViewInstance, null, resource);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = (""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(View deletion), RequestType(DELETE), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Type(MyView), Version(1.2), Name(MyViewInstance)"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.DeleteViewInstanceRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","deleteTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewInstanceEventCreatorTest.java","4727a7445138cac216442424b73ad0d490cbaed2
e4db57093f4d17497366cdfbf02127f36399bf42
af13ef73931bf672536199b944d4c3e26ad24ac4"
"putTest","TRUE","4","assertTrue
assertEquals","{
    org.apache.ambari.server.audit.request.eventcreator.ViewPrivilegeEventCreator creator = new org.apache.ambari.server.audit.request.eventcreator.ViewPrivilegeEventCreator();
    java.util.Map<java.lang.String, java.lang.Object> props = new java.util.HashMap<>();
    props.put(org.apache.ambari.server.controller.internal.ViewPrivilegeResourceProvider.VIEW_NAME, ""MyView"");
    props.put(org.apache.ambari.server.controller.internal.ViewPrivilegeResourceProvider.VERSION, ""MyView"");
    props.put(org.apache.ambari.server.controller.internal.ViewPrivilegeResourceProvider.INSTANCE_NAME, ""MyView"");
    java.util.Map<java.lang.String, java.lang.Object> properties = new java.util.HashMap<>();
    properties.put(org.apache.ambari.server.controller.internal.ViewPrivilegeResourceProvider.PRINCIPAL_TYPE, ""USER"");
    properties.put(org.apache.ambari.server.controller.internal.ViewPrivilegeResourceProvider.PERMISSION_NAME, ""Permission1"");
    properties.put(org.apache.ambari.server.controller.internal.ViewPrivilegeResourceProvider.PRINCIPAL_NAME, org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName);
    java.util.Map<java.lang.String, java.lang.Object> properties2 = new java.util.HashMap<>();
    properties2.put(org.apache.ambari.server.controller.internal.ViewPrivilegeResourceProvider.PRINCIPAL_TYPE, ""USER"");
    properties2.put(org.apache.ambari.server.controller.internal.ViewPrivilegeResourceProvider.PERMISSION_NAME, ""Permission2"");
    properties2.put(org.apache.ambari.server.controller.internal.ViewPrivilegeResourceProvider.PRINCIPAL_NAME, org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName + ""2"");
    java.util.Map<java.lang.String, java.lang.Object> properties3 = new java.util.HashMap<>();
    properties3.put(org.apache.ambari.server.controller.internal.ViewPrivilegeResourceProvider.PRINCIPAL_TYPE, ""GROUP"");
    properties3.put(org.apache.ambari.server.controller.internal.ViewPrivilegeResourceProvider.PERMISSION_NAME, ""Permission1"");
    properties3.put(org.apache.ambari.server.controller.internal.ViewPrivilegeResourceProvider.PRINCIPAL_NAME, ""testgroup"");
    org.apache.ambari.server.api.services.NamedPropertySet nps = new org.apache.ambari.server.api.services.NamedPropertySet(""1"", properties);
    org.apache.ambari.server.api.services.NamedPropertySet nps2 = new org.apache.ambari.server.api.services.NamedPropertySet(""2"", properties2);
    org.apache.ambari.server.api.services.NamedPropertySet nps3 = new org.apache.ambari.server.api.services.NamedPropertySet(""3"", properties3);
    org.apache.ambari.server.api.services.Request request = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createRequest(org.apache.ambari.server.api.services.Request.Type.PUT, org.apache.ambari.server.controller.spi.Resource.Type.ViewPrivilege, props, null);
    org.apache.ambari.server.api.services.Result result = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.createResult(new org.apache.ambari.server.api.services.ResultStatus(org.apache.ambari.server.api.services.ResultStatus.STATUS.OK));
    request.getBody().addPropertySet(nps);
    request.getBody().addPropertySet(nps2);
    request.getBody().addPropertySet(nps3);
    org.apache.ambari.server.audit.event.AuditEvent event = org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestHelper.getEvent(creator, request, result);
    java.lang.String actual = event.getAuditMessage();
    java.lang.String expected = ((((((""User("" + org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName) + ""), RemoteIp(1.2.3.4), Operation(View permission change), RequestType(PUT), url(http://example.com:8080/api/v1/test), ResultStatus(200 OK), Type(MyView), Version(MyView), Name(MyView), Permissions("") + ""Permission1: ["") + ""Users: testuser;"") + ""Groups: testgroup]"") + "" Permission2: ["") + ""Users: testuser2] )"";
    junit.framework.Assert.assertTrue(""Class mismatch"", event instanceof org.apache.ambari.server.audit.event.request.ViewPrivilegeChangeRequestAuditEvent);
    junit.framework.Assert.assertEquals(expected, actual);
    junit.framework.Assert.assertTrue(actual.contains(org.apache.ambari.server.audit.request.creator.AuditEventCreatorTestBase.userName));
}","putTest()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/audit/request/creator/ViewPrivilegeEventCreatorTest.java","5fc20b85f72097ab30b04f39d482e85a8cf26534
4727a7445138cac216442424b73ad0d490cbaed2
e4db57093f4d17497366cdfbf02127f36399bf42
6576c8460239824e948c099856eaa53007489796
5754b682687425913af5119f27d41fc2f9dd3cfd
32890b5542dee84de30d127896fe2426af1926ee
af13ef73931bf672536199b944d4c3e26ad24ac4"
"bootStrapGet","TRUE","2","assertEquals","{
    com.sun.jersey.api.client.WebResource webResource = resource();
    org.apache.ambari.server.bootstrap.BootStrapStatus status = webResource.path(""/bootstrap/0"").type(MediaType.APPLICATION_JSON).get(org.apache.ambari.server.bootstrap.BootStrapStatus.class);
    org.apache.ambari.server.bootstrap.BootStrapResourceTest.LOG.info(((""GET Response from the API "" + status.getLog()) + "" "") + status.getStatus());
    junit.framework.Assert.assertEquals(status.getStatus(), org.apache.ambari.server.bootstrap.BootStrapStatus.BSStat.ERROR);
}","bootStrapGet()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/bootstrap/BootStrapResourceTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
10a07da8febd0b0c19956aba63096e63c04e8f48
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
6cd090344849557de6409f033a1b7262675f4bdd
47d1386ffb4c2b96f8d6b37607f5dae7cab268cb"
"bootStrapPost","TRUE","2","assertEquals","{
    com.sun.jersey.api.client.WebResource webResource = resource();
    org.codehaus.jettison.json.JSONObject object = webResource.path(""/bootstrap"").type(MediaType.APPLICATION_JSON).post(org.codehaus.jettison.json.JSONObject.class, createDummySshInfo());
    junit.framework.Assert.assertEquals(""OK"", object.get(""status""));
}","bootStrapPost()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/bootstrap/BootStrapResourceTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
10a07da8febd0b0c19956aba63096e63c04e8f48
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
6cd090344849557de6409f033a1b7262675f4bdd
47d1386ffb4c2b96f8d6b37607f5dae7cab268cb"
"testRun","TRUE","5","assertTrue
assertEquals
assertFalse","{
    java.util.Properties properties = new java.util.Properties();
    java.lang.String bootdir = temp.newFolder(""bootdir"").toString();
    java.lang.String metadetadir = temp.newFolder(""metadetadir"").toString();
    java.lang.String serverVersionFilePath = temp.newFolder(""serverVersionFilePath"").toString();
    org.apache.ambari.server.bootstrap.BootStrapTest.LOG.info(""Bootdir is "" + bootdir);
    org.apache.ambari.server.bootstrap.BootStrapTest.LOG.info(""Metadetadir is "" + metadetadir);
    org.apache.ambari.server.bootstrap.BootStrapTest.LOG.info(""ServerVersionFilePath is "" + serverVersionFilePath);
    java.lang.String sharedResourcesDir = ""src/test/resources/"";
    if (java.lang.System.getProperty(""os.name"").contains(""Windows"")) {
        sharedResourcesDir = java.lang.ClassLoader.getSystemClassLoader().getResource("""").getPath();
    }
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.BOOTSTRAP_DIRECTORY.getKey(), bootdir);
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.BOOTSTRAP_SCRIPT.getKey(), org.apache.ambari.server.bootstrap.BootStrapTest.prepareEchoCommand(bootdir));
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.SRVR_KSTR_DIR.getKey(), (""target"" + java.io.File.separator) + ""classes"");
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.METADATA_DIR_PATH.getKey(), metadetadir);
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_VERSION_FILE.getKey(), serverVersionFilePath);
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.SHARED_RESOURCES_DIR.getKey(), sharedResourcesDir);
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.MPACKS_V2_STAGING_DIR_PATH.getKey(), ""src/main/resources/mpacks-v2"");
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo = new org.apache.ambari.server.api.services.AmbariMetaInfo(conf);
    org.apache.ambari.server.bootstrap.BootStrapImpl impl = new org.apache.ambari.server.bootstrap.BootStrapImpl(conf, ambariMetaInfo);
    impl.init();
    org.apache.ambari.server.bootstrap.SshHostInfo info = new org.apache.ambari.server.bootstrap.SshHostInfo();
    info.setSshKey(""xyz"");
    java.util.ArrayList<java.lang.String> hosts = new java.util.ArrayList<>();
    hosts.add(""host1"");
    hosts.add(""host2"");
    info.setUserRunAs(""root"");
    info.setHosts(hosts);
    info.setUser(""user"");
    info.setPassword(""passwd"");
    org.apache.ambari.server.bootstrap.BSResponse response = impl.runBootStrap(info);
    org.apache.ambari.server.bootstrap.BootStrapTest.LOG.info(""Response id from bootstrap "" + response.getRequestId());
    org.apache.ambari.server.bootstrap.BootStrapStatus status = impl.getStatus(response.getRequestId());
    org.apache.ambari.server.bootstrap.BootStrapTest.LOG.info(""Status "" + status.getStatus());
    int num = 0;
    while ((status.getStatus() == org.apache.ambari.server.bootstrap.BootStrapStatus.BSStat.RUNNING) && (num < 50)) {
        status = impl.getStatus(response.getRequestId());
        java.lang.Thread.sleep(1000);
        num++;
    } 
    java.lang.Thread.sleep(5000);
    org.apache.ambari.server.bootstrap.BootStrapTest.LOG.info(((""Status: log "" + status.getLog()) + "" status="") + status.getStatus());
    junit.framework.Assert.assertTrue(status.getLog().contains(""host1,host2""));
    junit.framework.Assert.assertEquals(org.apache.ambari.server.bootstrap.BootStrapStatus.BSStat.SUCCESS, status.getStatus());
    junit.framework.Assert.assertFalse(new java.io.File((((bootdir + java.io.File.separator) + ""1"") + java.io.File.separator) + ""sshKey"").exists());
    junit.framework.Assert.assertFalse(new java.io.File((((bootdir + java.io.File.separator) + ""1"") + java.io.File.separator) + ""host_pass"").exists());
}","testRun()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/bootstrap/BootStrapTest.java","c6db11c87f1cfd5bc9ace42de3616ea545490a9e
a0197938047d63a77c793ca85b7f35cd89ebbd60
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d4adc1a9fb2c28ca516f3c9911540db2eb5f2d78
922828e95be49263741a76fddaa8a2c216db4d87
03a927ddb2fca9c2984e554361ff98cd0fc1f8b0
e9c8b2660910c8f07ac78c4e60ef517a7d02f1c7
498a13bab6f38ffa529da1a5cdd7cc400728ca01
32187893edabcfc29f1cfb4961146566c2215433
e3c7dd2c8b507b287ae91910ce65c8aead1bd80f
b0740f535e4dee688468e29fc2b70a5572595d31
a1f4bb42d88e7163914caf95a688b626d6e61151
b64a4a8a0fb4ffeb8b2bc18f95f66fb7a0315446
eac4d558313ed34b1752bdf056f3ffa6ec70184b
01891a909bb01e0f45780d4c4d97c001c5241ec9
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
6cd090344849557de6409f033a1b7262675f4bdd
d5e552df33db9c6883ffd0db5d390b326e652c57
561c1649ad579869687bf19dbaca2e9c923d6dc9
47d1386ffb4c2b96f8d6b37607f5dae7cab268cb
897e5fd8b82d23cbb08304337fca34fac774c012
8d9a423e44630fb73ce70857069db7dc26eefbb1
e3e237a088626235d518087a25069115ea905bd4
0c5f8d21dc935bad434fd54f918b47e828f5a397
42118f0e8e56f41f4450c754d4066a58011dd778"
"testHostFailure","TRUE","5","assertTrue
assertEquals","{
    java.util.Properties properties = new java.util.Properties();
    java.lang.String bootdir = temp.newFolder(""bootdir"").toString();
    java.lang.String metadetadir = temp.newFolder(""metadetadir"").toString();
    java.lang.String serverVersionFilePath = temp.newFolder(""serverVersionFilePath"").toString();
    org.apache.ambari.server.bootstrap.BootStrapTest.LOG.info(""Bootdir is "" + bootdir);
    org.apache.ambari.server.bootstrap.BootStrapTest.LOG.info(""Metadetadir is "" + metadetadir);
    org.apache.ambari.server.bootstrap.BootStrapTest.LOG.info(""ServerVersionFilePath is "" + serverVersionFilePath);
    java.lang.String sharedResourcesDir = ""src/test/resources/"";
    java.lang.String serverKSTRDir = (""target"" + java.io.File.separator) + ""classes"";
    java.lang.String mpacksv2staging = ""src/main/resources/mpacks-v2"";
    if (java.lang.System.getProperty(""os.name"").contains(""Windows"")) {
        sharedResourcesDir = java.lang.ClassLoader.getSystemClassLoader().getResource("""").getPath();
        serverKSTRDir = new java.io.File(new java.io.File(java.lang.ClassLoader.getSystemClassLoader().getResource("""").getPath()).getParent(), ""classes"").getPath();
    }
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.BOOTSTRAP_DIRECTORY.getKey(), bootdir);
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.BOOTSTRAP_SCRIPT.getKey(), org.apache.ambari.server.bootstrap.BootStrapTest.prepareEchoCommand(bootdir));
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.SRVR_KSTR_DIR.getKey(), serverKSTRDir);
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.METADATA_DIR_PATH.getKey(), metadetadir);
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_VERSION_FILE.getKey(), serverVersionFilePath);
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.SHARED_RESOURCES_DIR.getKey(), sharedResourcesDir);
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.MPACKS_V2_STAGING_DIR_PATH.getKey(), mpacksv2staging);
    org.apache.ambari.server.configuration.Configuration conf = new org.apache.ambari.server.configuration.Configuration(properties);
    org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo = new org.apache.ambari.server.api.services.AmbariMetaInfo(conf);
    org.apache.ambari.server.bootstrap.BootStrapImpl impl = new org.apache.ambari.server.bootstrap.BootStrapImpl(conf, ambariMetaInfo);
    impl.init();
    org.apache.ambari.server.bootstrap.SshHostInfo info = new org.apache.ambari.server.bootstrap.SshHostInfo();
    info.setSshKey(""xyz"");
    java.util.ArrayList<java.lang.String> hosts = new java.util.ArrayList<>();
    hosts.add(""host1"");
    hosts.add(""host2"");
    info.setHosts(hosts);
    info.setUser(""user"");
    info.setUserRunAs(""root"");
    info.setPassword(""passwd"");
    org.apache.ambari.server.bootstrap.BSResponse response = impl.runBootStrap(info);
    long requestId = response.getRequestId();
    org.apache.ambari.server.bootstrap.BootStrapTest.LOG.info(""Response id from bootstrap "" + requestId);
    java.io.File requestDir = new java.io.File(bootdir, java.lang.Long.toString(requestId));
    int num = 0;
    while ((!requestDir.exists()) && (num < 500)) {
        java.lang.Thread.sleep(100);
        num++;
    } 
    if (!requestDir.exists()) {
        org.apache.ambari.server.bootstrap.BootStrapTest.LOG.warn(""RequestDir does not exists"");
    }
    org.apache.commons.io.FileUtils.writeStringToFile(new java.io.File(requestDir, ""host1.done""), ""0"", java.nio.charset.Charset.defaultCharset());
    org.apache.commons.io.FileUtils.writeStringToFile(new java.io.File(requestDir, ""host2.done""), ""1"", java.nio.charset.Charset.defaultCharset());
    org.apache.ambari.server.bootstrap.BootStrapStatus status = impl.getStatus(response.getRequestId());
    org.apache.ambari.server.bootstrap.BootStrapTest.LOG.info(""Status "" + status.getStatus());
    num = 0;
    while ((status.getStatus() == org.apache.ambari.server.bootstrap.BootStrapStatus.BSStat.RUNNING) && (num < 500)) {
        status = impl.getStatus(response.getRequestId());
        java.lang.Thread.sleep(100);
        num++;
    } 
    org.apache.ambari.server.bootstrap.BootStrapTest.LOG.info(((""Status: log "" + status.getLog()) + "" status="") + status.getStatus());
    junit.framework.Assert.assertTrue(status.getLog().contains(""host1,host2""));
    junit.framework.Assert.assertEquals(org.apache.ambari.server.bootstrap.BootStrapStatus.BSStat.ERROR, status.getStatus());
    junit.framework.Assert.assertEquals(""DONE"", status.getHostsStatus().get(0).getStatus());
    junit.framework.Assert.assertEquals(""FAILED"", status.getHostsStatus().get(1).getStatus());
}","testHostFailure()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/bootstrap/BootStrapTest.java","c6db11c87f1cfd5bc9ace42de3616ea545490a9e
a0197938047d63a77c793ca85b7f35cd89ebbd60
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d4adc1a9fb2c28ca516f3c9911540db2eb5f2d78
922828e95be49263741a76fddaa8a2c216db4d87
03a927ddb2fca9c2984e554361ff98cd0fc1f8b0
e9c8b2660910c8f07ac78c4e60ef517a7d02f1c7
498a13bab6f38ffa529da1a5cdd7cc400728ca01
32187893edabcfc29f1cfb4961146566c2215433
e3c7dd2c8b507b287ae91910ce65c8aead1bd80f
b0740f535e4dee688468e29fc2b70a5572595d31
a1f4bb42d88e7163914caf95a688b626d6e61151
b64a4a8a0fb4ffeb8b2bc18f95f66fb7a0315446
eac4d558313ed34b1752bdf056f3ffa6ec70184b
01891a909bb01e0f45780d4c4d97c001c5241ec9
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
6cd090344849557de6409f033a1b7262675f4bdd
d5e552df33db9c6883ffd0db5d390b326e652c57
561c1649ad579869687bf19dbaca2e9c923d6dc9
47d1386ffb4c2b96f8d6b37607f5dae7cab268cb
897e5fd8b82d23cbb08304337fca34fac774c012
8d9a423e44630fb73ce70857069db7dc26eefbb1
e3e237a088626235d518087a25069115ea905bd4
0c5f8d21dc935bad434fd54f918b47e828f5a397
42118f0e8e56f41f4450c754d4066a58011dd778"
"testPolling","TRUE","8","assertTrue
assertEquals","{
    java.io.File tmpFolder = temp.newFolder(""bootstrap"");
    org.apache.commons.io.FileUtils.writeStringToFile(new java.io.File(tmpFolder, ""host1.done""), ""0"", java.nio.charset.Charset.defaultCharset());
    org.apache.commons.io.FileUtils.writeStringToFile(new java.io.File(tmpFolder, ""host1.log""), ""err_log_1"", java.nio.charset.Charset.defaultCharset());
    org.apache.commons.io.FileUtils.writeStringToFile(new java.io.File(tmpFolder, ""host2.done""), ""1"", java.nio.charset.Charset.defaultCharset());
    org.apache.commons.io.FileUtils.writeStringToFile(new java.io.File(tmpFolder, ""host2.log""), ""err_log_2"", java.nio.charset.Charset.defaultCharset());
    java.util.List<java.lang.String> listHosts = new java.util.ArrayList<>();
    listHosts.add(""host1"");
    listHosts.add(""host2"");
    org.apache.ambari.server.bootstrap.BSHostStatusCollector collector = new org.apache.ambari.server.bootstrap.BSHostStatusCollector(tmpFolder, listHosts);
    collector.run();
    java.util.List<org.apache.ambari.server.bootstrap.BSHostStatus> polledHostStatus = collector.getHostStatus();
    junit.framework.Assert.assertTrue(polledHostStatus.size() == 2);
    junit.framework.Assert.assertEquals(polledHostStatus.get(0).getHostName(), ""host1"");
    junit.framework.Assert.assertEquals(polledHostStatus.get(0).getLog(), ""err_log_1"");
    junit.framework.Assert.assertEquals(polledHostStatus.get(0).getStatus(), ""DONE"");
    junit.framework.Assert.assertEquals(polledHostStatus.get(1).getHostName(), ""host2"");
    junit.framework.Assert.assertEquals(polledHostStatus.get(1).getLog(), ""err_log_2"");
    junit.framework.Assert.assertEquals(polledHostStatus.get(1).getStatus(), ""FAILED"");
}","testPolling()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/bootstrap/BootStrapTest.java","c6db11c87f1cfd5bc9ace42de3616ea545490a9e
a0197938047d63a77c793ca85b7f35cd89ebbd60
219f22345e6f7b7ad38cdaac02e9bbe8c8ad7254
c2409e740f84d6f051659b3b36d853902e698a60
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
d4adc1a9fb2c28ca516f3c9911540db2eb5f2d78
922828e95be49263741a76fddaa8a2c216db4d87
03a927ddb2fca9c2984e554361ff98cd0fc1f8b0
e9c8b2660910c8f07ac78c4e60ef517a7d02f1c7
498a13bab6f38ffa529da1a5cdd7cc400728ca01
32187893edabcfc29f1cfb4961146566c2215433
e3c7dd2c8b507b287ae91910ce65c8aead1bd80f
b0740f535e4dee688468e29fc2b70a5572595d31
a1f4bb42d88e7163914caf95a688b626d6e61151
b64a4a8a0fb4ffeb8b2bc18f95f66fb7a0315446
eac4d558313ed34b1752bdf056f3ffa6ec70184b
01891a909bb01e0f45780d4c4d97c001c5241ec9
b87dc45ed36daeb9823df1a1849cc8b67fbd6a86
6cd090344849557de6409f033a1b7262675f4bdd
d5e552df33db9c6883ffd0db5d390b326e652c57
561c1649ad579869687bf19dbaca2e9c923d6dc9
47d1386ffb4c2b96f8d6b37607f5dae7cab268cb
897e5fd8b82d23cbb08304337fca34fac774c012
8d9a423e44630fb73ce70857069db7dc26eefbb1
e3e237a088626235d518087a25069115ea905bd4
0c5f8d21dc935bad434fd54f918b47e828f5a397
42118f0e8e56f41f4450c754d4066a58011dd778"
"testIsApplicable","TRUE","3","assertTrue","{
    org.junit.Assert.assertTrue(m_check.getApplicableServices().contains(""HDFS""));
    org.junit.Assert.assertTrue(m_check.getApplicableServices().contains(""AMBARI_METRICS""));
}","testIsApplicable()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/AmbariMetricsHadoopSinkVersionCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
607fe42f121e9453de3938fcff3f850c89866e0a"
"testPerform","TRUE","2","assertEquals","{
    org.apache.ambari.server.controller.AmbariManagementController ambariManagementControllerMock = org.mockito.Mockito.mock(org.apache.ambari.server.controller.AmbariManagementController.class);
    org.powermock.api.mockito.PowerMockito.mockStatic(org.apache.ambari.server.controller.AmbariServer.class);
    Mockito.when(org.apache.ambari.server.controller.AmbariServer.getController()).thenReturn(ambariManagementControllerMock);
    org.apache.ambari.server.controller.spi.ResourceProvider resourceProviderMock = Mockito.mock(org.apache.ambari.server.controller.spi.ResourceProvider.class);
    org.powermock.api.mockito.PowerMockito.mockStatic(org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.class);
    Mockito.when(org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider(Matchers.eq(org.apache.ambari.server.controller.spi.Resource.Type.Request), Matchers.any(org.apache.ambari.server.controller.AmbariManagementController.class))).thenReturn(resourceProviderMock);
    org.powermock.api.mockito.PowerMockito.mockStatic(org.apache.ambari.server.controller.utilities.PropertyHelper.class);
    org.apache.ambari.server.controller.spi.Request requestMock = Mockito.mock(org.apache.ambari.server.controller.spi.Request.class);
    Mockito.when(org.apache.ambari.server.controller.utilities.PropertyHelper.getCreateRequest(Matchers.any(), Matchers.any())).thenReturn(requestMock);
    Mockito.when(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Requests"", ""id"")).thenReturn(""requestIdProp"");
    org.apache.ambari.server.controller.spi.RequestStatus requestStatusMock = Mockito.mock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource responseResourceMock = Mockito.mock(org.apache.ambari.server.controller.spi.Resource.class);
    Mockito.when(resourceProviderMock.createResources(requestMock)).thenReturn(requestStatusMock);
    Mockito.when(requestStatusMock.getRequestResource()).thenReturn(responseResourceMock);
    Mockito.when(responseResourceMock.getPropertyValue(Matchers.anyString())).thenReturn(100L);
    org.apache.ambari.server.state.Clusters clustersMock = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    Mockito.when(ambariManagementControllerMock.getClusters()).thenReturn(clustersMock);
    org.apache.ambari.server.state.Cluster clusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    Mockito.when(clustersMock.getCluster(""c1"")).thenReturn(clusterMock);
    Mockito.when(clusterMock.getHosts(Matchers.eq(""AMBARI_METRICS""), Matchers.eq(""METRICS_MONITOR""))).thenReturn(java.util.Collections.singleton(""h1""));
    org.apache.ambari.server.orm.dao.RequestDAO requestDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.RequestDAO.class);
    org.apache.ambari.server.orm.entities.RequestEntity requestEntityMock = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(requestDAOMock.findByPks(java.util.Collections.singleton(100L), true)).thenReturn(java.util.Collections.singletonList(requestEntityMock));
    Mockito.when(requestEntityMock.getStatus()).thenReturn(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS).thenReturn(org.apache.ambari.server.actionmanager.HostRoleStatus.COMPLETED);
    java.lang.reflect.Field requestDaoField = m_check.getClass().getDeclaredField(""requestDAO"");
    requestDaoField.setAccessible(true);
    requestDaoField.set(m_check, requestDAOMock);
    java.util.Map<java.lang.String, java.lang.String> checkProperties = new java.util.HashMap<>();
    checkProperties.put(org.apache.ambari.server.checks.AmbariMetricsHadoopSinkVersionCompatibilityCheck.MIN_HADOOP_SINK_VERSION_PROPERTY_NAME, ""2.7.0.0"");
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""c1"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, checkProperties, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = m_check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
}","testPerform()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/AmbariMetricsHadoopSinkVersionCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
607fe42f121e9453de3938fcff3f850c89866e0a"
"testPerformFail","TRUE","5","assertEquals
assertTrue","{
    org.apache.ambari.server.controller.AmbariManagementController ambariManagementControllerMock = org.mockito.Mockito.mock(org.apache.ambari.server.controller.AmbariManagementController.class);
    org.powermock.api.mockito.PowerMockito.mockStatic(org.apache.ambari.server.controller.AmbariServer.class);
    Mockito.when(org.apache.ambari.server.controller.AmbariServer.getController()).thenReturn(ambariManagementControllerMock);
    org.apache.ambari.server.controller.spi.ResourceProvider resourceProviderMock = Mockito.mock(org.apache.ambari.server.controller.spi.ResourceProvider.class);
    org.powermock.api.mockito.PowerMockito.mockStatic(org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.class);
    Mockito.when(org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider(Matchers.eq(org.apache.ambari.server.controller.spi.Resource.Type.Request), Matchers.any(org.apache.ambari.server.controller.AmbariManagementController.class))).thenReturn(resourceProviderMock);
    org.powermock.api.mockito.PowerMockito.mockStatic(org.apache.ambari.server.controller.utilities.PropertyHelper.class);
    org.apache.ambari.server.controller.spi.Request requestMock = Mockito.mock(org.apache.ambari.server.controller.spi.Request.class);
    Mockito.when(org.apache.ambari.server.controller.utilities.PropertyHelper.getCreateRequest(Matchers.any(), Matchers.any())).thenReturn(requestMock);
    Mockito.when(org.apache.ambari.server.controller.utilities.PropertyHelper.getPropertyId(""Requests"", ""id"")).thenReturn(""requestIdProp"");
    org.apache.ambari.server.controller.spi.RequestStatus requestStatusMock = Mockito.mock(org.apache.ambari.server.controller.spi.RequestStatus.class);
    org.apache.ambari.server.controller.spi.Resource responseResourceMock = Mockito.mock(org.apache.ambari.server.controller.spi.Resource.class);
    Mockito.when(resourceProviderMock.createResources(requestMock)).thenReturn(requestStatusMock);
    Mockito.when(requestStatusMock.getRequestResource()).thenReturn(responseResourceMock);
    Mockito.when(responseResourceMock.getPropertyValue(Matchers.anyString())).thenReturn(101L);
    org.apache.ambari.server.state.Clusters clustersMock = Mockito.mock(org.apache.ambari.server.state.Clusters.class);
    Mockito.when(ambariManagementControllerMock.getClusters()).thenReturn(clustersMock);
    org.apache.ambari.server.state.Cluster clusterMock = Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    Mockito.when(clustersMock.getCluster(""c1"")).thenReturn(clusterMock);
    Mockito.when(clusterMock.getHosts(Matchers.eq(""AMBARI_METRICS""), Matchers.eq(""METRICS_MONITOR""))).thenReturn(java.util.Collections.singleton(""h1_fail""));
    org.apache.ambari.server.orm.dao.RequestDAO requestDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.RequestDAO.class);
    org.apache.ambari.server.orm.entities.RequestEntity requestEntityMock = Mockito.mock(org.apache.ambari.server.orm.entities.RequestEntity.class);
    Mockito.when(requestDAOMock.findByPks(java.util.Collections.singleton(101L), true)).thenReturn(java.util.Collections.singletonList(requestEntityMock));
    Mockito.when(requestEntityMock.getStatus()).thenReturn(org.apache.ambari.server.actionmanager.HostRoleStatus.IN_PROGRESS).thenReturn(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED);
    java.lang.reflect.Field requestDaoField = m_check.getClass().getDeclaredField(""requestDAO"");
    requestDaoField.setAccessible(true);
    requestDaoField.set(m_check, requestDAOMock);
    Mockito.when(requestEntityMock.getRequestId()).thenReturn(101L);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO hostRoleCommandDAOMock = Mockito.mock(org.apache.ambari.server.orm.dao.HostRoleCommandDAO.class);
    org.apache.ambari.server.orm.entities.HostRoleCommandEntity hrcEntityMock = Mockito.mock(org.apache.ambari.server.orm.entities.HostRoleCommandEntity.class);
    Mockito.when(hostRoleCommandDAOMock.findByRequest(101L, true)).thenReturn(java.util.Collections.singletonList(hrcEntityMock));
    Mockito.when(hrcEntityMock.getStatus()).thenReturn(org.apache.ambari.server.actionmanager.HostRoleStatus.FAILED);
    Mockito.when(hrcEntityMock.getHostName()).thenReturn(""h1_fail"");
    java.lang.reflect.Field hrcDaoField = m_check.getClass().getDeclaredField(""hostRoleCommandDAO"");
    hrcDaoField.setAccessible(true);
    hrcDaoField.set(m_check, hostRoleCommandDAOMock);
    java.util.Map<java.lang.String, java.lang.String> checkProperties = new java.util.HashMap<>();
    checkProperties.put(org.apache.ambari.server.checks.AmbariMetricsHadoopSinkVersionCompatibilityCheck.MIN_HADOOP_SINK_VERSION_PROPERTY_NAME, ""2.7.0.0"");
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""c1"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, checkProperties, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = m_check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailReason().contains(""upgrade 'ambari-metrics-hadoop-sink'""));
    org.junit.Assert.assertEquals(check.getFailedOn().size(), 1);
    org.junit.Assert.assertTrue(check.getFailedOn().iterator().next().contains(""h1_fail""));
}","testPerformFail()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/AmbariMetricsHadoopSinkVersionCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
607fe42f121e9453de3938fcff3f850c89866e0a"
"testIsApplicable","TRUE","2","assertTrue","{
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, repositoryVersion, m_configMap, null);
    org.apache.ambari.server.state.CheckHelper checkHelper = new org.apache.ambari.server.state.CheckHelper();
    java.util.List<org.apache.ambari.spi.upgrade.UpgradeCheck> applicableChecks = checkHelper.getApplicableChecks(request, com.google.common.collect.Lists.newArrayList(m_check));
    org.junit.Assert.assertTrue(applicableChecks.size() == 1);
}","testIsApplicable()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/AutoStartDisabledCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
6f2622c76d63a49f9bf06cb062b939836a8a96b7
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c19f363c877776623fd42d285717e6e95b9036ad
c2409e740f84d6f051659b3b36d853902e698a60
74d33276c9e1672b70edd2ba18bfaa668ba2c88d
f297c48f016c9deab2cf423fab3a87948496682b"
"testNoAutoStart","TRUE","3","assertEquals
assertTrue","{
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, repositoryVersion, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = m_check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(org.apache.commons.lang.StringUtils.isBlank(check.getFailReason()));
}","testNoAutoStart()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/AutoStartDisabledCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
6f2622c76d63a49f9bf06cb062b939836a8a96b7
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c19f363c877776623fd42d285717e6e95b9036ad
c2409e740f84d6f051659b3b36d853902e698a60
74d33276c9e1672b70edd2ba18bfaa668ba2c88d
f297c48f016c9deab2cf423fab3a87948496682b"
"testAutoStartFalse","TRUE","3","assertEquals
assertTrue","{
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, repositoryVersion, null, null);
    m_configMap.put(org.apache.ambari.server.checks.AutoStartDisabledCheck.RECOVERY_ENABLED_KEY, ""false"");
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = m_check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(org.apache.commons.lang.StringUtils.isBlank(check.getFailReason()));
}","testAutoStartFalse()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/AutoStartDisabledCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
6f2622c76d63a49f9bf06cb062b939836a8a96b7
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c19f363c877776623fd42d285717e6e95b9036ad
c2409e740f84d6f051659b3b36d853902e698a60
74d33276c9e1672b70edd2ba18bfaa668ba2c88d
f297c48f016c9deab2cf423fab3a87948496682b"
"testAutoStartTrue","TRUE","4","assertEquals
assertTrue","{
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, repositoryVersion, null, null);
    m_configMap.put(org.apache.ambari.server.checks.AutoStartDisabledCheck.RECOVERY_ENABLED_KEY, ""true"");
    m_configMap.put(org.apache.ambari.server.checks.AutoStartDisabledCheck.RECOVERY_TYPE_KEY, org.apache.ambari.server.checks.AutoStartDisabledCheck.RECOVERY_AUTO_START);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = m_check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
    org.junit.Assert.assertTrue(org.apache.commons.lang.StringUtils.isNotBlank(check.getFailReason()));
    org.junit.Assert.assertEquals(""Auto Start must be disabled before performing an Upgrade. To disable Auto Start, navigate to "" + ""Admin > Service Auto Start. Turn the toggle switch off to Disabled and hit Save."", check.getFailReason());
}","testAutoStartTrue()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/AutoStartDisabledCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
6f2622c76d63a49f9bf06cb062b939836a8a96b7
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c19f363c877776623fd42d285717e6e95b9036ad
c2409e740f84d6f051659b3b36d853902e698a60
74d33276c9e1672b70edd2ba18bfaa668ba2c88d
f297c48f016c9deab2cf423fab3a87948496682b"
"testFormatEntityList","TRUE","9","assertEquals","{
    org.apache.ambari.server.checks.ClusterCheck check = new org.apache.ambari.server.checks.ClusterCheckTest.TestCheckImpl(org.apache.ambari.spi.upgrade.UpgradeCheckType.HOST);
    junit.framework.Assert.assertEquals("""", check.formatEntityList(null));
    final java.util.LinkedHashSet<java.lang.String> failedOn = new java.util.LinkedHashSet<>();
    junit.framework.Assert.assertEquals("""", check.formatEntityList(failedOn));
    failedOn.add(""host1"");
    junit.framework.Assert.assertEquals(""host1"", check.formatEntityList(failedOn));
    failedOn.add(""host2"");
    junit.framework.Assert.assertEquals(""host1 and host2"", check.formatEntityList(failedOn));
    failedOn.add(""host3"");
    junit.framework.Assert.assertEquals(""host1, host2 and host3"", check.formatEntityList(failedOn));
    check = new org.apache.ambari.server.checks.ClusterCheckTest.TestCheckImpl(org.apache.ambari.spi.upgrade.UpgradeCheckType.CLUSTER);
    junit.framework.Assert.assertEquals(""host1, host2 and host3"", check.formatEntityList(failedOn));
    check = new org.apache.ambari.server.checks.ClusterCheckTest.TestCheckImpl(org.apache.ambari.spi.upgrade.UpgradeCheckType.SERVICE);
    junit.framework.Assert.assertEquals(""host1, host2 and host3"", check.formatEntityList(failedOn));
    check = new org.apache.ambari.server.checks.ClusterCheckTest.TestCheckImpl(null);
    junit.framework.Assert.assertEquals(""host1, host2 and host3"", check.formatEntityList(failedOn));
}","testFormatEntityList()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ClusterCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c19f363c877776623fd42d285717e6e95b9036ad
1433ecff108df159f71961e23a34d248e1684c85
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
cd245c00abaa5720675324a383e691434eabcf32
2304971d09f3c525ebd2b1cf864d82ee9b858d5e
e4db57093f4d17497366cdfbf02127f36399bf42
e2085dd6fdeb7add7eacbccc293fe4df7a617fe7
6c36aa437d0e86ac9b82cab52b221af837c47519
5afeaea3bcf567356fbfb28c88edea41f58f00fc
5a2dbeab0e7d5601dccad16940b28a6edf19bdc0
d248fd7c150db9e827fe5f1b837c43d89e6fef08
0cbc4f114c2e0708c166c223cbb7b41f08220bee
2e78ed709d82b6f1b19f881c6d1f29f8a32bf7b1"
"testIsApplicable","TRUE","4","assertTrue","{
    final java.lang.String clusterName = ""c1"";
    final org.apache.ambari.server.state.Cluster cluster = createMock(org.apache.ambari.server.state.Cluster.class);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Service> services = new java.util.HashMap<java.lang.String, org.apache.ambari.server.state.Service>() {
        {
            put(""SERVICE1"", null);
            put(""SERVICE2"", null);
            put(""SERVICE3"", null);
        }
    };
    java.util.Set<java.lang.String> oneServiceList = com.google.common.collect.Sets.newHashSet(""SERVICE1"");
    java.util.Set<java.lang.String> atLeastOneServiceList = com.google.common.collect.Sets.newHashSet(""SERVICE1"", ""MISSING_SERVICE"");
    java.util.Set<java.lang.String> allServicesList = com.google.common.collect.Sets.newHashSet(""SERVICE1"", ""SERVICE2"");
    java.util.Set<java.lang.String> missingServiceList = com.google.common.collect.Sets.newHashSet(""MISSING_SERVICE"");
    EasyMock.expect(clusters.getCluster(EasyMock.anyString())).andReturn(cluster).atLeastOnce();
    EasyMock.expect(cluster.getServices()).andReturn(services).atLeastOnce();
    org.apache.ambari.spi.RepositoryVersion repositoryVersion = createNiceMock(org.apache.ambari.spi.RepositoryVersion.class);
    EasyMock.expect(repositoryVersion.getId()).andReturn(1L).anyTimes();
    EasyMock.expect(repositoryVersion.getRepositoryType()).andReturn(org.apache.ambari.spi.RepositoryType.STANDARD).anyTimes();
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersionEntity = createNiceMock(org.apache.ambari.server.orm.entities.RepositoryVersionEntity.class);
    EasyMock.expect(repositoryVersionEntity.getType()).andReturn(org.apache.ambari.spi.RepositoryType.STANDARD).anyTimes();
    EasyMock.expect(repositoryVersionEntity.getRepositoryXml()).andReturn(m_vdfXml).atLeastOnce();
    EasyMock.expect(m_vdfXml.getClusterSummary(org.easymock.EasyMock.anyObject(org.apache.ambari.server.state.Cluster.class), org.easymock.EasyMock.anyObject(org.apache.ambari.server.api.services.AmbariMetaInfo.class))).andReturn(m_clusterVersionSummary).atLeastOnce();
    EasyMock.expect(m_clusterVersionSummary.getAvailableServiceNames()).andReturn(allServicesList).atLeastOnce();
    final org.apache.ambari.server.api.services.AmbariMetaInfo ami = createNiceMock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    m_mockCheckHelper.setMetaInfoProvider(new com.google.inject.Provider<org.apache.ambari.server.api.services.AmbariMetaInfo>() {
        @java.lang.Override
        public org.apache.ambari.server.api.services.AmbariMetaInfo get() {
            return ami;
        }
    });
    org.mockito.Mockito.when(m_mockCheckHelper.m_repositoryVersionDAO.findByPK(org.mockito.Mockito.anyLong())).thenReturn(repositoryVersionEntity);
    replayAll();
    org.apache.ambari.server.checks.ClusterCheckTest.TestCheckImpl check = new org.apache.ambari.server.checks.ClusterCheckTest.TestCheckImpl(org.apache.ambari.spi.upgrade.UpgradeCheckType.SERVICE);
    check.checkHelperProvider = new com.google.inject.Provider<org.apache.ambari.server.state.CheckHelper>() {
        @java.lang.Override
        public org.apache.ambari.server.state.CheckHelper get() {
            return m_mockCheckHelper;
        }
    };
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(clusterName, false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, repositoryVersion, null, null);
    check.setApplicableServices(oneServiceList);
    junit.framework.Assert.assertTrue(m_mockCheckHelper.getApplicableChecks(request, com.google.common.collect.Lists.newArrayList(check)).size() == 1);
    check.setApplicableServices(atLeastOneServiceList);
    junit.framework.Assert.assertTrue(m_mockCheckHelper.getApplicableChecks(request, com.google.common.collect.Lists.newArrayList(check)).size() == 1);
    check.setApplicableServices(missingServiceList);
    junit.framework.Assert.assertTrue(m_mockCheckHelper.getApplicableChecks(request, com.google.common.collect.Lists.newArrayList(check)).size() == 0);
}","testIsApplicable()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ClusterCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c19f363c877776623fd42d285717e6e95b9036ad
1433ecff108df159f71961e23a34d248e1684c85
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
cd245c00abaa5720675324a383e691434eabcf32
2304971d09f3c525ebd2b1cf864d82ee9b858d5e
e4db57093f4d17497366cdfbf02127f36399bf42
e2085dd6fdeb7add7eacbccc293fe4df7a617fe7
6c36aa437d0e86ac9b82cab52b221af837c47519
5afeaea3bcf567356fbfb28c88edea41f58f00fc
5a2dbeab0e7d5601dccad16940b28a6edf19bdc0
d248fd7c150db9e827fe5f1b837c43d89e6fef08
0cbc4f114c2e0708c166c223cbb7b41f08220bee
2e78ed709d82b6f1b19f881c6d1f29f8a32bf7b1"
"testIsApplicableForPatch","TRUE","3","assertTrue","{
    final java.lang.String clusterName = ""c1"";
    final org.apache.ambari.server.state.Cluster cluster = createMock(org.apache.ambari.server.state.Cluster.class);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Service> services = new java.util.HashMap<java.lang.String, org.apache.ambari.server.state.Service>() {
        {
            put(""SERVICE1"", null);
            put(""SERVICE2"", null);
            put(""SERVICE3"", null);
        }
    };
    java.util.Set<java.lang.String> oneServiceList = com.google.common.collect.Sets.newHashSet(""SERVICE1"");
    EasyMock.expect(clusters.getCluster(EasyMock.anyString())).andReturn(cluster).atLeastOnce();
    EasyMock.expect(cluster.getServices()).andReturn(services).atLeastOnce();
    org.apache.ambari.spi.RepositoryVersion repositoryVersion = createNiceMock(org.apache.ambari.spi.RepositoryVersion.class);
    EasyMock.expect(repositoryVersion.getId()).andReturn(1L).anyTimes();
    EasyMock.expect(repositoryVersion.getRepositoryType()).andReturn(org.apache.ambari.spi.RepositoryType.STANDARD).anyTimes();
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersionEntity = createNiceMock(org.apache.ambari.server.orm.entities.RepositoryVersionEntity.class);
    EasyMock.expect(repositoryVersionEntity.getType()).andReturn(org.apache.ambari.spi.RepositoryType.STANDARD).anyTimes();
    EasyMock.expect(repositoryVersionEntity.getRepositoryXml()).andReturn(m_vdfXml).atLeastOnce();
    EasyMock.expect(m_vdfXml.getClusterSummary(org.easymock.EasyMock.anyObject(org.apache.ambari.server.state.Cluster.class), org.easymock.EasyMock.anyObject(org.apache.ambari.server.api.services.AmbariMetaInfo.class))).andReturn(m_clusterVersionSummary).atLeastOnce();
    EasyMock.expect(m_clusterVersionSummary.getAvailableServiceNames()).andReturn(oneServiceList).atLeastOnce();
    m_mockCheckHelper.m_clusters = clusters;
    org.mockito.Mockito.when(m_mockCheckHelper.m_repositoryVersionDAO.findByPK(org.mockito.Mockito.anyLong())).thenReturn(repositoryVersionEntity);
    final org.apache.ambari.server.api.services.AmbariMetaInfo ami = createNiceMock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    m_mockCheckHelper.setMetaInfoProvider(new com.google.inject.Provider<org.apache.ambari.server.api.services.AmbariMetaInfo>() {
        @java.lang.Override
        public org.apache.ambari.server.api.services.AmbariMetaInfo get() {
            return ami;
        }
    });
    replayAll();
    org.apache.ambari.server.checks.ClusterCheckTest.TestCheckImpl check = new org.apache.ambari.server.checks.ClusterCheckTest.TestCheckImpl(org.apache.ambari.spi.upgrade.UpgradeCheckType.SERVICE);
    check.checkHelperProvider = new com.google.inject.Provider<org.apache.ambari.server.state.CheckHelper>() {
        @java.lang.Override
        public org.apache.ambari.server.state.CheckHelper get() {
            return m_mockCheckHelper;
        }
    };
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(clusterName, false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, repositoryVersion, null, null);
    check.setApplicableServices(com.google.common.collect.Sets.newHashSet(""SERVICE2""));
    junit.framework.Assert.assertTrue(m_mockCheckHelper.getApplicableChecks(request, com.google.common.collect.Lists.newArrayList(check)).size() == 0);
    check.setApplicableServices(com.google.common.collect.Sets.newHashSet(""SERVICE1""));
    junit.framework.Assert.assertTrue(m_mockCheckHelper.getApplicableChecks(request, com.google.common.collect.Lists.newArrayList(check)).size() == 1);
}","testIsApplicableForPatch()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ClusterCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
6f2622c76d63a49f9bf06cb062b939836a8a96b7
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c19f363c877776623fd42d285717e6e95b9036ad
1433ecff108df159f71961e23a34d248e1684c85
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
cd245c00abaa5720675324a383e691434eabcf32
2304971d09f3c525ebd2b1cf864d82ee9b858d5e
e4db57093f4d17497366cdfbf02127f36399bf42
e2085dd6fdeb7add7eacbccc293fe4df7a617fe7
6c36aa437d0e86ac9b82cab52b221af837c47519
5afeaea3bcf567356fbfb28c88edea41f58f00fc
5a2dbeab0e7d5601dccad16940b28a6edf19bdc0
d248fd7c150db9e827fe5f1b837c43d89e6fef08
0cbc4f114c2e0708c166c223cbb7b41f08220bee
2e78ed709d82b6f1b19f881c6d1f29f8a32bf7b1"
"testPassesWhenNoUnsupportedInTargetStack","TRUE","2","assertEquals","{
    EasyMock.expect(serviceComponentSupport.allUnsupported(cluster, org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest.STACK_NAME, org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest.STACK_VERSION)).andReturn(java.util.Collections.emptyList()).anyTimes();
    replayAll();
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, result.getStatus());
}","testPassesWhenNoUnsupportedInTargetStack()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ComponentExistsInRepoCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
ed1f013086b227471dcb1a17f56c644814fb7706
ba010cfa0c7813a6bf2730b95192d6d705e171b8
c3a05fe8872398c9362f7e3323f47cdce9a0a471
c19f363c877776623fd42d285717e6e95b9036ad
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5"
"testFailsWhenUnsupportedFoundInTargetStack","TRUE","2","assertEquals","{
    EasyMock.expect(serviceComponentSupport.allUnsupported(cluster, org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest.STACK_NAME, org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest.STACK_VERSION)).andReturn(java.util.Collections.singletonList(""ANY_SERVICE"")).anyTimes();
    suggestedUpgradePackIs(new org.apache.ambari.server.stack.upgrade.UpgradePack());
    replayAll();
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
}","testFailsWhenUnsupportedFoundInTargetStack()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ComponentExistsInRepoCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
ed1f013086b227471dcb1a17f56c644814fb7706
ba010cfa0c7813a6bf2730b95192d6d705e171b8
c3a05fe8872398c9362f7e3323f47cdce9a0a471
c19f363c877776623fd42d285717e6e95b9036ad
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5"
"testWarnsWhenUnsupportedFoundInTargetStackAndUpgradePackHasAutoDeleteTask","TRUE","2","assertEquals","{
    EasyMock.expect(serviceComponentSupport.allUnsupported(cluster, org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest.STACK_NAME, org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest.STACK_VERSION)).andReturn(java.util.Collections.singletonList(""ANY_SERVICE"")).anyTimes();
    suggestedUpgradePackIs(upgradePackWithDeleteUnsupportedTask());
    replayAll();
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.WARNING, result.getStatus());
}","testWarnsWhenUnsupportedFoundInTargetStackAndUpgradePackHasAutoDeleteTask()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ComponentExistsInRepoCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
ed1f013086b227471dcb1a17f56c644814fb7706
ba010cfa0c7813a6bf2730b95192d6d705e171b8
c3a05fe8872398c9362f7e3323f47cdce9a0a471
c19f363c877776623fd42d285717e6e95b9036ad
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5"
"testPerform","TRUE","12","assertEquals
assertTrue","{
    org.powermock.api.mockito.PowerMockito.mockStatic(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.checks.ComponentsInstallationCheck componentsInstallationCheck = new org.apache.ambari.server.checks.ComponentsInstallationCheck();
    componentsInstallationCheck.clustersProvider = new com.google.inject.Provider<org.apache.ambari.server.state.Clusters>() {
        @java.lang.Override
        public org.apache.ambari.server.state.Clusters get() {
            return clusters;
        }
    };
    componentsInstallationCheck.ambariMetaInfo = new com.google.inject.Provider<org.apache.ambari.server.api.services.AmbariMetaInfo>() {
        @java.lang.Override
        public org.apache.ambari.server.api.services.AmbariMetaInfo get() {
            return ambariMetaInfo;
        }
    };
    componentsInstallationCheck.checkHelperProvider = new com.google.inject.Provider<org.apache.ambari.server.state.CheckHelper>() {
        @java.lang.Override
        public org.apache.ambari.server.state.CheckHelper get() {
            return m_checkHelper;
        }
    };
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(cluster.getCurrentStackVersion()).thenReturn(new org.apache.ambari.server.state.StackId(""HDP"", ""2.2""));
    org.mockito.Mockito.when(clusters.getCluster(""cluster"")).thenReturn(cluster);
    final org.apache.ambari.server.state.Service hdfsService = org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class);
    final org.apache.ambari.server.state.Service tezService = org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class);
    final org.apache.ambari.server.state.Service amsService = org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.mockito.Mockito.when(hdfsService.getMaintenanceState()).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(tezService.getMaintenanceState()).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(amsService.getMaintenanceState()).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    m_services.put(""HDFS"", hdfsService);
    m_services.put(""TEZ"", tezService);
    m_services.put(""AMBARI_METRICS"", amsService);
    org.mockito.Mockito.when(hdfsService.getName()).thenReturn(""HDFS"");
    org.mockito.Mockito.when(tezService.getName()).thenReturn(""TEZ"");
    org.mockito.Mockito.when(amsService.getName()).thenReturn(""AMBARI_METRICS"");
    org.mockito.Mockito.when(hdfsService.isClientOnlyService()).thenReturn(false);
    org.mockito.Mockito.when(tezService.isClientOnlyService()).thenReturn(true);
    org.mockito.Mockito.when(amsService.isClientOnlyService()).thenReturn(false);
    org.mockito.Mockito.when(cluster.getServices()).thenReturn(m_services);
    org.mockito.Mockito.when(cluster.getService(""HDFS"")).thenReturn(hdfsService);
    org.mockito.Mockito.when(cluster.getService(""TEZ"")).thenReturn(tezService);
    org.mockito.Mockito.when(cluster.getService(""AMBARI_METRICS"")).thenReturn(amsService);
    org.mockito.Mockito.when(ambariMetaInfo.getComponent(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenAnswer(new org.mockito.stubbing.Answer<org.apache.ambari.server.state.ComponentInfo>() {
        @java.lang.Override
        public org.apache.ambari.server.state.ComponentInfo answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            org.apache.ambari.server.state.ComponentInfo anyInfo = org.mockito.Mockito.mock(org.apache.ambari.server.state.ComponentInfo.class);
            if ((invocation.getArguments().length > 3) && ""DATANODE"".equals(invocation.getArguments()[3])) {
                org.mockito.Mockito.when(anyInfo.getCardinality()).thenReturn(""1+"");
            } else {
                org.mockito.Mockito.when(anyInfo.getCardinality()).thenReturn(null);
            }
            return anyInfo;
        }
    });
    java.util.Map<java.lang.String, org.apache.ambari.server.state.ServiceComponent> hdfsComponents = new java.util.HashMap<>();
    org.apache.ambari.server.state.ServiceComponent nameNode = org.mockito.Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.mockito.Mockito.when(nameNode.getName()).thenReturn(""NAMENODE"");
    org.mockito.Mockito.when(nameNode.isClientComponent()).thenReturn(false);
    org.mockito.Mockito.when(nameNode.isVersionAdvertised()).thenReturn(true);
    org.mockito.Mockito.when(nameNode.isMasterComponent()).thenReturn(true);
    org.apache.ambari.server.state.ServiceComponent dataNode = org.mockito.Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.mockito.Mockito.when(dataNode.getName()).thenReturn(""DATANODE"");
    org.mockito.Mockito.when(dataNode.isClientComponent()).thenReturn(false);
    org.mockito.Mockito.when(dataNode.isVersionAdvertised()).thenReturn(true);
    org.mockito.Mockito.when(dataNode.isMasterComponent()).thenReturn(false);
    org.apache.ambari.server.state.ServiceComponent zkfc = org.mockito.Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.mockito.Mockito.when(zkfc.getName()).thenReturn(""ZKFC"");
    org.mockito.Mockito.when(zkfc.isClientComponent()).thenReturn(false);
    org.mockito.Mockito.when(zkfc.isVersionAdvertised()).thenReturn(false);
    org.mockito.Mockito.when(zkfc.isMasterComponent()).thenReturn(false);
    hdfsComponents.put(""NAMENODE"", nameNode);
    hdfsComponents.put(""DATANODE"", dataNode);
    hdfsComponents.put(""ZKFC"", zkfc);
    org.mockito.Mockito.when(hdfsService.getServiceComponents()).thenReturn(hdfsComponents);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.ServiceComponent> tezComponents = new java.util.HashMap<>();
    org.apache.ambari.server.state.ServiceComponent tezClient = org.mockito.Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.mockito.Mockito.when(tezClient.getName()).thenReturn(""TEZ_CLIENT"");
    org.mockito.Mockito.when(tezClient.isClientComponent()).thenReturn(true);
    org.mockito.Mockito.when(tezClient.isVersionAdvertised()).thenReturn(true);
    tezComponents.put(""TEZ_CLIENT"", tezClient);
    org.mockito.Mockito.when(tezService.getServiceComponents()).thenReturn(tezComponents);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.ServiceComponent> amsComponents = new java.util.HashMap<>();
    org.apache.ambari.server.state.ServiceComponent metricsCollector = org.mockito.Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.mockito.Mockito.when(metricsCollector.getName()).thenReturn(""METRICS_COLLECTOR"");
    org.mockito.Mockito.when(metricsCollector.isClientComponent()).thenReturn(false);
    org.mockito.Mockito.when(metricsCollector.isVersionAdvertised()).thenReturn(false);
    org.apache.ambari.server.state.ServiceComponent metricsMonitor = org.mockito.Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.mockito.Mockito.when(metricsMonitor.getName()).thenReturn(""METRICS_MONITOR"");
    org.mockito.Mockito.when(metricsMonitor.isClientComponent()).thenReturn(false);
    org.mockito.Mockito.when(metricsMonitor.isVersionAdvertised()).thenReturn(false);
    amsComponents.put(""METRICS_COLLECTOR"", metricsCollector);
    amsComponents.put(""METRICS_MONITOR"", metricsMonitor);
    org.mockito.Mockito.when(amsService.getServiceComponents()).thenReturn(amsComponents);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsNameNode = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsDataNode1 = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsDataNode2 = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsDataNode3 = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsZKFC = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsTezClient = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsMetricsCollector = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsMetricsMonitor = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    java.util.List<org.apache.ambari.server.orm.models.HostComponentSummary> allHostComponentSummaries = new java.util.ArrayList<>();
    allHostComponentSummaries.add(hcsNameNode);
    allHostComponentSummaries.add(hcsDataNode1);
    allHostComponentSummaries.add(hcsDataNode2);
    allHostComponentSummaries.add(hcsDataNode3);
    allHostComponentSummaries.add(hcsZKFC);
    allHostComponentSummaries.add(hcsTezClient);
    allHostComponentSummaries.add(hcsMetricsCollector);
    allHostComponentSummaries.add(hcsMetricsMonitor);
    final java.util.Map<java.lang.String, org.apache.ambari.server.state.Host> hosts = new java.util.HashMap<>();
    final org.apache.ambari.server.state.Host host1 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.Host host2 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.Host host3 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    org.mockito.Mockito.when(host1.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host2.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host3.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    hosts.put(""host1"", host1);
    hosts.put(""host2"", host2);
    hosts.put(""host3"", host3);
    org.mockito.Mockito.when(hcsNameNode.getHostName()).thenReturn(""host1"");
    org.mockito.Mockito.when(hcsDataNode1.getHostName()).thenReturn(""host1"");
    org.mockito.Mockito.when(hcsDataNode2.getHostName()).thenReturn(""host2"");
    org.mockito.Mockito.when(hcsDataNode3.getHostName()).thenReturn(""host3"");
    org.mockito.Mockito.when(hcsZKFC.getHostName()).thenReturn(""host1"");
    org.mockito.Mockito.when(hcsTezClient.getHostName()).thenReturn(""host2"");
    org.mockito.Mockito.when(hcsMetricsCollector.getHostName()).thenReturn(""host3"");
    org.mockito.Mockito.when(hcsMetricsMonitor.getHostName()).thenReturn(""host3"");
    org.mockito.Mockito.when(org.apache.ambari.server.orm.models.HostComponentSummary.getHostComponentSummaries(""HDFS"", ""NAMENODE"")).thenReturn(java.util.Arrays.asList(hcsNameNode));
    org.mockito.Mockito.when(org.apache.ambari.server.orm.models.HostComponentSummary.getHostComponentSummaries(""HDFS"", ""DATANODE"")).thenReturn(java.util.Arrays.asList(hcsDataNode1, hcsDataNode2, hcsDataNode3));
    org.mockito.Mockito.when(org.apache.ambari.server.orm.models.HostComponentSummary.getHostComponentSummaries(""HDFS"", ""ZKFC"")).thenReturn(java.util.Arrays.asList(hcsZKFC));
    org.mockito.Mockito.when(org.apache.ambari.server.orm.models.HostComponentSummary.getHostComponentSummaries(""TEZ"", ""TEZ_CLIENT"")).thenReturn(java.util.Arrays.asList(hcsTezClient));
    org.mockito.Mockito.when(org.apache.ambari.server.orm.models.HostComponentSummary.getHostComponentSummaries(""AMBARI_METRICS"", ""METRICS_COLLECTOR"")).thenReturn(java.util.Arrays.asList(hcsMetricsCollector));
    org.mockito.Mockito.when(org.apache.ambari.server.orm.models.HostComponentSummary.getHostComponentSummaries(""AMBARI_METRICS"", ""METRICS_MONITOR"")).thenReturn(java.util.Arrays.asList(hcsMetricsMonitor));
    for (java.lang.String hostName : hosts.keySet()) {
        org.mockito.Mockito.when(clusters.getHost(hostName)).thenReturn(hosts.get(hostName));
    }
    for (org.apache.ambari.server.orm.models.HostComponentSummary hcs : allHostComponentSummaries) {
        org.mockito.Mockito.when(hcs.getDesiredState()).thenReturn(org.apache.ambari.server.state.State.INSTALLED);
        org.mockito.Mockito.when(hcs.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.STARTED);
    }
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, null, null);
    org.mockito.Mockito.when(hcsTezClient.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALLED);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = componentsInstallationCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailedDetail().isEmpty());
    org.mockito.Mockito.when(hcsMetricsCollector.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALL_FAILED);
    org.mockito.Mockito.when(hcsMetricsMonitor.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALL_FAILED);
    check = new org.apache.ambari.spi.upgrade.UpgradeCheckResult(null, null);
    check = componentsInstallationCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailedDetail().isEmpty());
    org.mockito.Mockito.when(hcsTezClient.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALL_FAILED);
    check = new org.apache.ambari.spi.upgrade.UpgradeCheckResult(null, null);
    check = componentsInstallationCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailReason().indexOf(""Service components in INSTALL_FAILED state"") > (-1));
    org.junit.Assert.assertEquals(1, check.getFailedDetail().size());
    org.mockito.Mockito.when(tezService.getMaintenanceState()).thenReturn(org.apache.ambari.server.state.MaintenanceState.ON);
    org.mockito.Mockito.when(hcsTezClient.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALL_FAILED);
    check = new org.apache.ambari.spi.upgrade.UpgradeCheckResult(null, null);
    check = componentsInstallationCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailedDetail().isEmpty());
    org.mockito.Mockito.when(tezService.getMaintenanceState()).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host2.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.ON);
    org.mockito.Mockito.when(hcsTezClient.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALL_FAILED);
    check = new org.apache.ambari.spi.upgrade.UpgradeCheckResult(null, null);
    check = componentsInstallationCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailedDetail().isEmpty());
}","testPerform()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ComponentsInstallationCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c3a05fe8872398c9362f7e3323f47cdce9a0a471
c19f363c877776623fd42d285717e6e95b9036ad
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
2a970f8de48656012d7aba364f1066cec31de99b
f859570ae8cedbff71986e5940f42bba195b9f2f
520e41f8c4a51cfc238f9cac7619e78cff191ad0
25237d3fe11bc0bd436d20774a4371d7794f7725
35dc8d8588f3b3f0d292e66eda270003fc03ae56
a394f2f7a1277da9abe576d1bf3f5ec6ba2b0c57
fea608d052a0538b3f7900ca785aa9d378a36dab
5a2dbeab0e7d5601dccad16940b28a6edf19bdc0
53241b914dbb2dc6d967f22cc18ee51217bec18c"
"testPerform","TRUE","15","assertEquals","{
    org.apache.ambari.server.checks.ConfigurationMergeCheck cmc = new org.apache.ambari.server.checks.ConfigurationMergeCheck();
    final org.apache.ambari.server.orm.dao.RepositoryVersionDAO repositoryVersionDAO = org.easymock.EasyMock.createMock(org.apache.ambari.server.orm.dao.RepositoryVersionDAO.class);
    EasyMock.expect(repositoryVersionDAO.findByStackNameAndVersion(""HDP"", ""1.0"")).andReturn(createFor(""1.0"")).anyTimes();
    EasyMock.expect(repositoryVersionDAO.findByStackNameAndVersion(""HDP"", ""1.1.0.0-1234"")).andReturn(createFor(""1.1"")).anyTimes();
    EasyMock.replay(repositoryVersionDAO);
    cmc.repositoryVersionDaoProvider = new com.google.inject.Provider<org.apache.ambari.server.orm.dao.RepositoryVersionDAO>() {
        @java.lang.Override
        public org.apache.ambari.server.orm.dao.RepositoryVersionDAO get() {
            return repositoryVersionDAO;
        }
    };
    cmc.clustersProvider = new com.google.inject.Provider<org.apache.ambari.server.state.Clusters>() {
        @java.lang.Override
        public org.apache.ambari.server.state.Clusters get() {
            return clusters;
        }
    };
    cmc.m_mergeHelper = new org.apache.ambari.server.state.ConfigMergeHelper();
    java.lang.reflect.Field field = org.apache.ambari.server.state.ConfigMergeHelper.class.getDeclaredField(""m_clusters"");
    field.setAccessible(true);
    field.set(cmc.m_mergeHelper, cmc.clustersProvider);
    final org.apache.ambari.server.api.services.AmbariMetaInfo ami = org.easymock.EasyMock.createMock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    field = org.apache.ambari.server.state.ConfigMergeHelper.class.getDeclaredField(""m_ambariMetaInfo"");
    field.setAccessible(true);
    field.set(cmc.m_mergeHelper, new com.google.inject.Provider<org.apache.ambari.server.api.services.AmbariMetaInfo>() {
        @java.lang.Override
        public org.apache.ambari.server.api.services.AmbariMetaInfo get() {
            return ami;
        }
    });
    org.apache.ambari.server.state.PropertyInfo pi10 = new org.apache.ambari.server.state.PropertyInfo();
    pi10.setFilename(org.apache.ambari.server.checks.ConfigurationMergeCheckTest.CONFIG_FILE);
    pi10.setName(org.apache.ambari.server.checks.ConfigurationMergeCheckTest.CONFIG_PROPERTY);
    pi10.setValue(""1024"");
    org.apache.ambari.server.state.PropertyInfo pi11 = new org.apache.ambari.server.state.PropertyInfo();
    pi11.setFilename(org.apache.ambari.server.checks.ConfigurationMergeCheckTest.CONFIG_FILE);
    pi11.setName(org.apache.ambari.server.checks.ConfigurationMergeCheckTest.CONFIG_PROPERTY);
    pi11.setValue(""1024"");
    EasyMock.expect(ami.getServiceProperties(""HDP"", ""1.0"", ""HDFS"")).andReturn(java.util.Collections.singleton(pi10)).anyTimes();
    EasyMock.expect(ami.getServiceProperties(""HDP"", ""1.1"", ""HDFS"")).andReturn(java.util.Collections.singleton(pi11)).anyTimes();
    EasyMock.expect(ami.getStackProperties(EasyMock.anyObject(java.lang.String.class), EasyMock.anyObject(java.lang.String.class))).andReturn(java.util.Collections.emptySet()).anyTimes();
    EasyMock.replay(ami);
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = cmc.perform(request);
    org.junit.Assert.assertEquals(""Expect no warnings"", 0, check.getFailedOn().size());
    m_configMap.put(org.apache.ambari.server.checks.ConfigurationMergeCheckTest.CONFIG_PROPERTY, ""1025m"");
    pi11.setValue(""1026"");
    check = cmc.perform(request);
    org.junit.Assert.assertEquals(""Expect warning when user-set has changed from new default"", 1, check.getFailedOn().size());
    org.junit.Assert.assertEquals(1, check.getFailedDetail().size());
    org.apache.ambari.server.checks.ConfigurationMergeCheck.MergeDetail detail = ((org.apache.ambari.server.checks.ConfigurationMergeCheck.MergeDetail) (check.getFailedDetail().get(0)));
    org.junit.Assert.assertEquals(""1025m"", detail.current);
    org.junit.Assert.assertEquals(""1026m"", detail.new_stack_value);
    org.junit.Assert.assertEquals(""1025m"", detail.result_value);
    org.junit.Assert.assertEquals(org.apache.ambari.server.checks.ConfigurationMergeCheckTest.CONFIG_TYPE, detail.type);
    org.junit.Assert.assertEquals(org.apache.ambari.server.checks.ConfigurationMergeCheckTest.CONFIG_PROPERTY, detail.property);
    pi11.setName(org.apache.ambari.server.checks.ConfigurationMergeCheckTest.CONFIG_PROPERTY + "".foo"");
    check = cmc.perform(request);
    org.junit.Assert.assertEquals(""Expect no warning when user new stack is empty"", 0, check.getFailedOn().size());
    org.junit.Assert.assertEquals(0, check.getFailedDetail().size());
    pi11.setName(org.apache.ambari.server.checks.ConfigurationMergeCheckTest.CONFIG_PROPERTY);
    pi10.setName(org.apache.ambari.server.checks.ConfigurationMergeCheckTest.CONFIG_PROPERTY + "".foo"");
    check = cmc.perform(request);
    org.junit.Assert.assertEquals(""Expect warning when user old stack is empty, and value changed"", 1, check.getFailedOn().size());
    org.junit.Assert.assertEquals(1, check.getFailedDetail().size());
    detail = ((org.apache.ambari.server.checks.ConfigurationMergeCheck.MergeDetail) (check.getFailedDetail().get(0)));
    org.junit.Assert.assertEquals(""1025m"", detail.current);
    org.junit.Assert.assertEquals(""1026m"", detail.new_stack_value);
}","testPerform()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ConfigurationMergeCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c19f363c877776623fd42d285717e6e95b9036ad
ab8d58ba4464791b95b56be75fd44ce9c20349c6
d77bde7fde932529dca524bf7112dd64f5c56b4d
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
2a970f8de48656012d7aba364f1066cec31de99b
520e41f8c4a51cfc238f9cac7619e78cff191ad0
c58162fe3538f8e4d67ad11da6f7d3c8940012a6
25237d3fe11bc0bd436d20774a4371d7794f7725
71f80203df3c32bea91f60e84eb1c4aee37caa46
08e5eef44d34935a5551af2beb7ea4e9cd8372f1
f23f12618223d556a79c24fc061d21c95b821b52
3d2684addc4108cd7a3f6a4d429dd2a1511cd748"
"testCheckForConfigsSelectedMoreThanOnce","FALSE","0","None","{
    org.easymock.EasyMockSupport easyMockSupport = new org.easymock.EasyMockSupport();
    final org.apache.ambari.server.orm.DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.DBAccessor.class);
    final java.sql.Connection mockConnection = easyMockSupport.createNiceMock(java.sql.Connection.class);
    final java.sql.ResultSet mockResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.Statement mockStatement = easyMockSupport.createNiceMock(java.sql.Statement.class);
    final org.apache.ambari.server.stack.StackManagerFactory mockStackManagerFactory = easyMockSupport.createNiceMock(org.apache.ambari.server.stack.StackManagerFactory.class);
    final javax.persistence.EntityManager mockEntityManager = easyMockSupport.createNiceMock(javax.persistence.EntityManager.class);
    final org.apache.ambari.server.state.Clusters mockClusters = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Clusters.class);
    final org.apache.ambari.server.state.stack.OsFamily mockOSFamily = easyMockSupport.createNiceMock(org.apache.ambari.server.state.stack.OsFamily.class);
    final com.google.inject.Injector mockInjector = com.google.inject.Guice.createInjector(new com.google.inject.AbstractModule() {
        @java.lang.Override
        protected void configure() {
            bind(org.apache.ambari.server.stack.StackManagerFactory.class).toInstance(mockStackManagerFactory);
            bind(javax.persistence.EntityManager.class).toInstance(mockEntityManager);
            bind(org.apache.ambari.server.orm.DBAccessor.class).toInstance(mockDBDbAccessor);
            bind(org.apache.ambari.server.state.Clusters.class).toInstance(mockClusters);
            bind(org.apache.ambari.server.state.stack.OsFamily.class).toInstance(mockOSFamily);
        }
    });
    EasyMock.expect(mockConnection.createStatement(java.sql.ResultSet.TYPE_SCROLL_SENSITIVE, java.sql.ResultSet.CONCUR_UPDATABLE)).andReturn(mockStatement);
    EasyMock.expect(mockStatement.executeQuery(""select c.cluster_name, cc.type_name from clusterconfig cc "" + ((""join clusters c on cc.cluster_id=c.cluster_id "" + ""group by c.cluster_name, cc.type_name "") + ""having sum(selected) > 1""))).andReturn(mockResultSet);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector(mockInjector);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setConnection(mockConnection);
    easyMockSupport.replayAll();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForConfigsSelectedMoreThanOnce();
    easyMockSupport.verifyAll();
}","testCheckForConfigsSelectedMoreThanOnce()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testCheckForHostsWithoutState","FALSE","0","None","{
    org.easymock.EasyMockSupport easyMockSupport = new org.easymock.EasyMockSupport();
    final org.apache.ambari.server.orm.DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.DBAccessor.class);
    final java.sql.Connection mockConnection = easyMockSupport.createNiceMock(java.sql.Connection.class);
    final java.sql.ResultSet mockResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.Statement mockStatement = easyMockSupport.createNiceMock(java.sql.Statement.class);
    final org.apache.ambari.server.stack.StackManagerFactory mockStackManagerFactory = easyMockSupport.createNiceMock(org.apache.ambari.server.stack.StackManagerFactory.class);
    final javax.persistence.EntityManager mockEntityManager = easyMockSupport.createNiceMock(javax.persistence.EntityManager.class);
    final org.apache.ambari.server.state.Clusters mockClusters = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Clusters.class);
    final org.apache.ambari.server.state.stack.OsFamily mockOSFamily = easyMockSupport.createNiceMock(org.apache.ambari.server.state.stack.OsFamily.class);
    final com.google.inject.Injector mockInjector = com.google.inject.Guice.createInjector(new com.google.inject.AbstractModule() {
        @java.lang.Override
        protected void configure() {
            bind(org.apache.ambari.server.stack.StackManagerFactory.class).toInstance(mockStackManagerFactory);
            bind(javax.persistence.EntityManager.class).toInstance(mockEntityManager);
            bind(org.apache.ambari.server.orm.DBAccessor.class).toInstance(mockDBDbAccessor);
            bind(org.apache.ambari.server.state.Clusters.class).toInstance(mockClusters);
            bind(org.apache.ambari.server.state.stack.OsFamily.class).toInstance(mockOSFamily);
        }
    });
    EasyMock.expect(mockConnection.createStatement(java.sql.ResultSet.TYPE_SCROLL_SENSITIVE, java.sql.ResultSet.CONCUR_UPDATABLE)).andReturn(mockStatement);
    EasyMock.expect(mockStatement.executeQuery(""select host_name from hosts where host_id not in (select host_id from hoststate)"")).andReturn(mockResultSet);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector(mockInjector);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setConnection(mockConnection);
    easyMockSupport.replayAll();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState();
    easyMockSupport.verifyAll();
}","testCheckForHostsWithoutState()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testCheckHostComponentStatesCountEqualsHostComponentsDesiredStates","FALSE","0","None","{
    org.easymock.EasyMockSupport easyMockSupport = new org.easymock.EasyMockSupport();
    final org.apache.ambari.server.orm.DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.DBAccessor.class);
    final java.sql.Connection mockConnection = easyMockSupport.createNiceMock(java.sql.Connection.class);
    final java.sql.ResultSet mockResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.Statement mockStatement = easyMockSupport.createNiceMock(java.sql.Statement.class);
    final org.apache.ambari.server.stack.StackManagerFactory mockStackManagerFactory = easyMockSupport.createNiceMock(org.apache.ambari.server.stack.StackManagerFactory.class);
    final javax.persistence.EntityManager mockEntityManager = easyMockSupport.createNiceMock(javax.persistence.EntityManager.class);
    final org.apache.ambari.server.state.Clusters mockClusters = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Clusters.class);
    final org.apache.ambari.server.state.stack.OsFamily mockOSFamily = easyMockSupport.createNiceMock(org.apache.ambari.server.state.stack.OsFamily.class);
    final com.google.inject.Injector mockInjector = com.google.inject.Guice.createInjector(new com.google.inject.AbstractModule() {
        @java.lang.Override
        protected void configure() {
            bind(org.apache.ambari.server.stack.StackManagerFactory.class).toInstance(mockStackManagerFactory);
            bind(javax.persistence.EntityManager.class).toInstance(mockEntityManager);
            bind(org.apache.ambari.server.orm.DBAccessor.class).toInstance(mockDBDbAccessor);
            bind(org.apache.ambari.server.state.Clusters.class).toInstance(mockClusters);
            bind(org.apache.ambari.server.state.stack.OsFamily.class).toInstance(mockOSFamily);
        }
    });
    EasyMock.expect(mockConnection.createStatement(java.sql.ResultSet.TYPE_SCROLL_SENSITIVE, java.sql.ResultSet.CONCUR_UPDATABLE)).andReturn(mockStatement);
    EasyMock.expect(mockStatement.executeQuery(""select count(*) from hostcomponentstate"")).andReturn(mockResultSet);
    EasyMock.expect(mockStatement.executeQuery(""select count(*) from hostcomponentdesiredstate"")).andReturn(mockResultSet);
    EasyMock.expect(mockStatement.executeQuery(""select count(*) FROM hostcomponentstate hcs "" + (""JOIN hostcomponentdesiredstate hcds ON hcs.service_name=hcds.service_name AND "" + ""hcs.component_name=hcds.component_name AND hcs.host_id=hcds.host_id""))).andReturn(mockResultSet);
    EasyMock.expect(mockStatement.executeQuery(""select component_name, host_id from hostcomponentstate group by component_name, host_id having count(component_name) > 1"")).andReturn(mockResultSet);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector(mockInjector);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setConnection(mockConnection);
    easyMockSupport.replayAll();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkHostComponentStates();
    easyMockSupport.verifyAll();
}","testCheckHostComponentStatesCountEqualsHostComponentsDesiredStates()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testCheckServiceConfigs","FALSE","0","None","{
    org.easymock.EasyMockSupport easyMockSupport = new org.easymock.EasyMockSupport();
    final org.apache.ambari.server.api.services.AmbariMetaInfo mockAmbariMetainfo = easyMockSupport.createNiceMock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    final org.apache.ambari.server.orm.DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.DBAccessor.class);
    final java.sql.Connection mockConnection = easyMockSupport.createNiceMock(java.sql.Connection.class);
    final java.sql.ResultSet mockResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.ResultSet stackResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.ResultSet serviceConfigResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.Statement mockStatement = easyMockSupport.createNiceMock(java.sql.Statement.class);
    final org.apache.ambari.server.state.ServiceInfo mockHDFSServiceInfo = easyMockSupport.createNiceMock(org.apache.ambari.server.state.ServiceInfo.class);
    final org.apache.ambari.server.stack.StackManagerFactory mockStackManagerFactory = easyMockSupport.createNiceMock(org.apache.ambari.server.stack.StackManagerFactory.class);
    final javax.persistence.EntityManager mockEntityManager = easyMockSupport.createNiceMock(javax.persistence.EntityManager.class);
    final org.apache.ambari.server.state.Clusters mockClusters = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Clusters.class);
    final org.apache.ambari.server.state.stack.OsFamily mockOSFamily = easyMockSupport.createNiceMock(org.apache.ambari.server.state.stack.OsFamily.class);
    final com.google.inject.Injector mockInjector = createInjectorWithAmbariMetaInfo(mockAmbariMetainfo, mockDBDbAccessor);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.ServiceInfo> services = new java.util.HashMap<>();
    services.put(""HDFS"", mockHDFSServiceInfo);
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>>> configAttributes = new java.util.HashMap<>();
    configAttributes.put(""core-site"", new java.util.HashMap<>());
    EasyMock.expect(mockHDFSServiceInfo.getConfigTypeAttributes()).andReturn(configAttributes);
    EasyMock.expect(mockAmbariMetainfo.getServices(""HDP"", ""2.2"")).andReturn(services);
    EasyMock.expect(serviceConfigResultSet.next()).andReturn(true).times(2);
    EasyMock.expect(serviceConfigResultSet.getString(""service_name"")).andReturn(""HDFS"").andReturn(""HBASE"");
    EasyMock.expect(serviceConfigResultSet.getString(""type_name"")).andReturn(""core-site"").andReturn(""hbase-env"");
    EasyMock.expect(stackResultSet.next()).andReturn(true);
    EasyMock.expect(stackResultSet.getString(""stack_name"")).andReturn(""HDP"");
    EasyMock.expect(stackResultSet.getString(""stack_version"")).andReturn(""2.2"");
    EasyMock.expect(mockConnection.createStatement(java.sql.ResultSet.TYPE_SCROLL_SENSITIVE, java.sql.ResultSet.CONCUR_UPDATABLE)).andReturn(mockStatement);
    EasyMock.expect(mockStatement.executeQuery(""select c.cluster_name, service_name from clusterservices cs "" + (""join clusters c on cs.cluster_id=c.cluster_id "" + ""where service_name not in (select service_name from serviceconfig sc where sc.cluster_id=cs.cluster_id and sc.service_name=cs.service_name and sc.group_id is null)""))).andReturn(mockResultSet);
    EasyMock.expect(mockStatement.executeQuery(""select c.cluster_name, sc.service_name, sc.version from serviceconfig sc "" + (""join clusters c on sc.cluster_id=c.cluster_id "" + ""where service_config_id not in (select service_config_id from serviceconfigmapping) and group_id is null""))).andReturn(mockResultSet);
    EasyMock.expect(mockStatement.executeQuery(""select c.cluster_name, s.stack_name, s.stack_version from clusters c "" + ""join stack s on c.desired_stack_id = s.stack_id"")).andReturn(stackResultSet);
    EasyMock.expect(mockStatement.executeQuery(""select c.cluster_name, cs.service_name, cc.type_name, sc.version from clusterservices cs "" + (((((""join serviceconfig sc on cs.service_name=sc.service_name and cs.cluster_id=sc.cluster_id "" + ""join serviceconfigmapping scm on sc.service_config_id=scm.service_config_id "") + ""join clusterconfig cc on scm.config_id=cc.config_id and sc.cluster_id=cc.cluster_id "") + ""join clusters c on cc.cluster_id=c.cluster_id and sc.stack_id=c.desired_stack_id "") + ""where sc.group_id is null and sc.service_config_id=(select max(service_config_id) from serviceconfig sc2 where sc2.service_name=sc.service_name and sc2.cluster_id=sc.cluster_id) "") + ""group by c.cluster_name, cs.service_name, cc.type_name, sc.version""))).andReturn(serviceConfigResultSet);
    EasyMock.expect(mockStatement.executeQuery(""select c.cluster_name, cs.service_name, cc.type_name from clusterservices cs "" + ((((((""join serviceconfig sc on cs.service_name=sc.service_name and cs.cluster_id=sc.cluster_id "" + ""join serviceconfigmapping scm on sc.service_config_id=scm.service_config_id "") + ""join clusterconfig cc on scm.config_id=cc.config_id and cc.cluster_id=sc.cluster_id "") + ""join clusters c on cc.cluster_id=c.cluster_id "") + ""where sc.group_id is null and sc.service_config_id = (select max(service_config_id) from serviceconfig sc2 where sc2.service_name=sc.service_name and sc2.cluster_id=sc.cluster_id) "") + ""group by c.cluster_name, cs.service_name, cc.type_name "") + ""having sum(cc.selected) < 1""))).andReturn(mockResultSet);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector(mockInjector);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setConnection(mockConnection);
    easyMockSupport.replayAll();
    mockAmbariMetainfo.init();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkServiceConfigs();
    easyMockSupport.verifyAll();
}","testCheckServiceConfigs()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testSchemaName_NoIssues","TRUE","3","assertFalse","{
    setupMocksForTestSchemaName(""ambari"", ""ambari, public"", com.google.common.collect.Lists.newArrayList(""ambari"", ""public""), com.google.common.collect.Lists.newArrayList(""ambari""));
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName();
    org.junit.Assert.assertFalse(""No warnings were expected."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult() == org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.DB_CHECK_WARNING);
    org.junit.Assert.assertFalse(""No errors were expected."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult().isError());
}","testSchemaName_NoIssues()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testSchemaName_WrongSearchPathOrder","TRUE","3","assertTrue
assertFalse","{
    setupMocksForTestSchemaName(""ambari"", ""public, ambari"", com.google.common.collect.Lists.newArrayList(""ambari"", ""public""), com.google.common.collect.Lists.newArrayList(""ambari""));
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName();
    org.junit.Assert.assertTrue(""Warnings were expected."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult() == org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.DB_CHECK_WARNING);
    org.junit.Assert.assertFalse(""No errors were expected."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult().isError());
}","testSchemaName_WrongSearchPathOrder()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testSchemaName_NoSearchPath","TRUE","3","assertTrue
assertFalse","{
    setupMocksForTestSchemaName(""ambari"", null, com.google.common.collect.Lists.newArrayList(""ambari"", ""public""), com.google.common.collect.Lists.newArrayList(""ambari""));
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName();
    org.junit.Assert.assertTrue(""Warnings were expected."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult() == org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.DB_CHECK_WARNING);
    org.junit.Assert.assertFalse(""No errors were expected."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult().isError());
}","testSchemaName_NoSearchPath()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testSchemaName_NoAmbariSchema","TRUE","3","assertTrue
assertFalse","{
    setupMocksForTestSchemaName(""ambari"", null, com.google.common.collect.Lists.newArrayList(""public""), com.google.common.collect.Lists.newArrayList());
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName();
    org.junit.Assert.assertTrue(""Warnings were expected."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult() == org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.DB_CHECK_WARNING);
    org.junit.Assert.assertFalse(""No errors were expected."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult().isError());
}","testSchemaName_NoAmbariSchema()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testSchemaName_NoTablesInAmbariSchema","TRUE","3","assertTrue
assertFalse","{
    setupMocksForTestSchemaName(""ambari"", ""ambari"", com.google.common.collect.Lists.newArrayList(""ambari"", ""public""), com.google.common.collect.Lists.newArrayList(""public""));
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName();
    org.junit.Assert.assertTrue(""Warnings were expected."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult() == org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.DB_CHECK_WARNING);
    org.junit.Assert.assertFalse(""No errors were expected."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult().isError());
}","testSchemaName_NoTablesInAmbariSchema()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testSchemaName_AmbariTablesInMultipleSchemas","TRUE","3","assertTrue
assertFalse","{
    setupMocksForTestSchemaName(""ambari"", ""ambari"", com.google.common.collect.Lists.newArrayList(""ambari"", ""public""), com.google.common.collect.Lists.newArrayList(""ambari"", ""public""));
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName();
    org.junit.Assert.assertTrue(""Warnings were expected."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult() == org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.DB_CHECK_WARNING);
    org.junit.Assert.assertFalse(""No errors were expected."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult().isError());
}","testSchemaName_AmbariTablesInMultipleSchemas()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testSchemaName_NullsAreTolerated","TRUE","3","assertTrue
assertFalse","{
    setupMocksForTestSchemaName(null, null, null, null);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName();
    org.junit.Assert.assertTrue(""Warnings were expected."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult() == org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.DB_CHECK_WARNING);
    org.junit.Assert.assertFalse(""No errors were expected."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult().isError());
}","testSchemaName_NullsAreTolerated()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testCheckServiceConfigs_missingServiceConfigGeneratesWarning","TRUE","3","assertTrue
assertFalse","{
    org.easymock.EasyMockSupport easyMockSupport = new org.easymock.EasyMockSupport();
    final org.apache.ambari.server.api.services.AmbariMetaInfo mockAmbariMetainfo = easyMockSupport.createNiceMock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    final org.apache.ambari.server.orm.DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.DBAccessor.class);
    final java.sql.Connection mockConnection = easyMockSupport.createNiceMock(java.sql.Connection.class);
    final java.sql.ResultSet mockResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.ResultSet clusterServicesResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.ResultSet stackResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.ResultSet serviceConfigResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.Statement mockStatement = easyMockSupport.createNiceMock(java.sql.Statement.class);
    final org.apache.ambari.server.state.ServiceInfo mockHDFSServiceInfo = easyMockSupport.createNiceMock(org.apache.ambari.server.state.ServiceInfo.class);
    final org.apache.ambari.server.stack.StackManagerFactory mockStackManagerFactory = easyMockSupport.createNiceMock(org.apache.ambari.server.stack.StackManagerFactory.class);
    final javax.persistence.EntityManager mockEntityManager = easyMockSupport.createNiceMock(javax.persistence.EntityManager.class);
    final org.apache.ambari.server.state.Clusters mockClusters = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Clusters.class);
    final org.apache.ambari.server.state.stack.OsFamily mockOSFamily = easyMockSupport.createNiceMock(org.apache.ambari.server.state.stack.OsFamily.class);
    final com.google.inject.Injector mockInjector = createInjectorWithAmbariMetaInfo(mockAmbariMetainfo, mockDBDbAccessor);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.ServiceInfo> services = new java.util.HashMap<>();
    services.put(""HDFS"", mockHDFSServiceInfo);
    java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>>> configAttributes = new java.util.HashMap<>();
    configAttributes.put(""core-site"", new java.util.HashMap<>());
    EasyMock.expect(mockHDFSServiceInfo.getConfigTypeAttributes()).andReturn(configAttributes);
    EasyMock.expect(mockAmbariMetainfo.getServices(""HDP"", ""2.2"")).andReturn(services);
    EasyMock.expect(clusterServicesResultSet.next()).andReturn(true);
    EasyMock.expect(clusterServicesResultSet.getString(""service_name"")).andReturn(""OPENSOFT R"");
    EasyMock.expect(clusterServicesResultSet.getString(""cluster_name"")).andReturn(""My Cluster"");
    EasyMock.expect(serviceConfigResultSet.next()).andReturn(true);
    EasyMock.expect(serviceConfigResultSet.getString(""service_name"")).andReturn(""HDFS"");
    EasyMock.expect(serviceConfigResultSet.getString(""type_name"")).andReturn(""core-site"");
    EasyMock.expect(stackResultSet.next()).andReturn(true);
    EasyMock.expect(stackResultSet.getString(""stack_name"")).andReturn(""HDP"");
    EasyMock.expect(stackResultSet.getString(""stack_version"")).andReturn(""2.2"");
    EasyMock.expect(mockConnection.createStatement(java.sql.ResultSet.TYPE_SCROLL_SENSITIVE, java.sql.ResultSet.CONCUR_UPDATABLE)).andReturn(mockStatement);
    EasyMock.expect(mockStatement.executeQuery(""select c.cluster_name, service_name from clusterservices cs "" + (""join clusters c on cs.cluster_id=c.cluster_id "" + ""where service_name not in (select service_name from serviceconfig sc where sc.cluster_id=cs.cluster_id and sc.service_name=cs.service_name and sc.group_id is null)""))).andReturn(clusterServicesResultSet);
    EasyMock.expect(mockStatement.executeQuery(""select c.cluster_name, sc.service_name, sc.version from serviceconfig sc "" + (""join clusters c on sc.cluster_id=c.cluster_id "" + ""where service_config_id not in (select service_config_id from serviceconfigmapping) and group_id is null""))).andReturn(mockResultSet);
    EasyMock.expect(mockStatement.executeQuery(""select c.cluster_name, s.stack_name, s.stack_version from clusters c "" + ""join stack s on c.desired_stack_id = s.stack_id"")).andReturn(stackResultSet);
    EasyMock.expect(mockStatement.executeQuery(""select c.cluster_name, cs.service_name, cc.type_name, sc.version from clusterservices cs "" + (((((""join serviceconfig sc on cs.service_name=sc.service_name and cs.cluster_id=sc.cluster_id "" + ""join serviceconfigmapping scm on sc.service_config_id=scm.service_config_id "") + ""join clusterconfig cc on scm.config_id=cc.config_id and sc.cluster_id=cc.cluster_id "") + ""join clusters c on cc.cluster_id=c.cluster_id and sc.stack_id=c.desired_stack_id "") + ""where sc.group_id is null and sc.service_config_id=(select max(service_config_id) from serviceconfig sc2 where sc2.service_name=sc.service_name and sc2.cluster_id=sc.cluster_id) "") + ""group by c.cluster_name, cs.service_name, cc.type_name, sc.version""))).andReturn(serviceConfigResultSet);
    EasyMock.expect(mockStatement.executeQuery(""select c.cluster_name, cs.service_name, cc.type_name from clusterservices cs "" + ((((((""join serviceconfig sc on cs.service_name=sc.service_name and cs.cluster_id=sc.cluster_id "" + ""join serviceconfigmapping scm on sc.service_config_id=scm.service_config_id "") + ""join clusterconfig cc on scm.config_id=cc.config_id and cc.cluster_id=sc.cluster_id "") + ""join clusters c on cc.cluster_id=c.cluster_id "") + ""where sc.group_id is null and sc.service_config_id = (select max(service_config_id) from serviceconfig sc2 where sc2.service_name=sc.service_name and sc2.cluster_id=sc.cluster_id) "") + ""group by c.cluster_name, cs.service_name, cc.type_name "") + ""having sum(cc.selected) < 1""))).andReturn(mockResultSet);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector(mockInjector);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setConnection(mockConnection);
    easyMockSupport.replayAll();
    mockAmbariMetainfo.init();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.resetCheckResult();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkServiceConfigs();
    easyMockSupport.verifyAll();
    org.junit.Assert.assertTrue(""Missing service config for OPENSOFT R should have triggered a warning."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult() == org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.DB_CHECK_WARNING);
    org.junit.Assert.assertFalse(""No errors should have been triggered."", org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult().isError());
}","testCheckServiceConfigs_missingServiceConfigGeneratesWarning()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testCheckForLargeTables","FALSE","0","None","{
    org.easymock.EasyMockSupport easyMockSupport = new org.easymock.EasyMockSupport();
    final org.apache.ambari.server.api.services.AmbariMetaInfo mockAmbariMetainfo = easyMockSupport.createNiceMock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
    final org.apache.ambari.server.orm.DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.DBAccessor.class);
    final java.sql.Connection mockConnection = easyMockSupport.createNiceMock(java.sql.Connection.class);
    final java.sql.Statement mockStatement = easyMockSupport.createNiceMock(java.sql.Statement.class);
    final javax.persistence.EntityManager mockEntityManager = easyMockSupport.createNiceMock(javax.persistence.EntityManager.class);
    final org.apache.ambari.server.state.Clusters mockClusters = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Clusters.class);
    final org.apache.ambari.server.state.stack.OsFamily mockOSFamily = easyMockSupport.createNiceMock(org.apache.ambari.server.state.stack.OsFamily.class);
    final org.apache.ambari.server.stack.StackManagerFactory mockStackManagerFactory = easyMockSupport.createNiceMock(org.apache.ambari.server.stack.StackManagerFactory.class);
    final java.sql.ResultSet hostRoleCommandResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.ResultSet executionCommandResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.ResultSet stageResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.ResultSet requestResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.ResultSet alertHistoryResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final com.google.inject.Injector mockInjector = createInjectorWithAmbariMetaInfo(mockAmbariMetainfo, mockDBDbAccessor);
    EasyMock.expect(hostRoleCommandResultSet.next()).andReturn(true).once();
    EasyMock.expect(executionCommandResultSet.next()).andReturn(true).once();
    EasyMock.expect(stageResultSet.next()).andReturn(true).once();
    EasyMock.expect(requestResultSet.next()).andReturn(true).once();
    EasyMock.expect(alertHistoryResultSet.next()).andReturn(true).once();
    EasyMock.expect(hostRoleCommandResultSet.getLong(1)).andReturn(2345L).atLeastOnce();
    EasyMock.expect(executionCommandResultSet.getLong(1)).andReturn(12345L).atLeastOnce();
    EasyMock.expect(stageResultSet.getLong(1)).andReturn(2321L).atLeastOnce();
    EasyMock.expect(requestResultSet.getLong(1)).andReturn(1111L).atLeastOnce();
    EasyMock.expect(alertHistoryResultSet.getLong(1)).andReturn(2223L).atLeastOnce();
    EasyMock.expect(mockDBDbAccessor.getConnection()).andReturn(mockConnection);
    EasyMock.expect(mockDBDbAccessor.getDbType()).andReturn(org.apache.ambari.server.orm.DBAccessor.DbType.MYSQL);
    EasyMock.expect(mockDBDbAccessor.getDbSchema()).andReturn(""test_schema"");
    EasyMock.expect(mockConnection.createStatement(java.sql.ResultSet.TYPE_SCROLL_SENSITIVE, java.sql.ResultSet.CONCUR_UPDATABLE)).andReturn(mockStatement).anyTimes();
    EasyMock.expect(mockStatement.executeQuery(""SELECT (data_length + index_length) \""Table Size\"" "" + ""FROM information_schema.TABLES WHERE table_schema = \""test_schema\"" AND table_name =\""host_role_command\"""")).andReturn(hostRoleCommandResultSet);
    EasyMock.expect(mockStatement.executeQuery(""SELECT (data_length + index_length) \""Table Size\"" "" + ""FROM information_schema.TABLES WHERE table_schema = \""test_schema\"" AND table_name =\""execution_command\"""")).andReturn(executionCommandResultSet);
    EasyMock.expect(mockStatement.executeQuery(""SELECT (data_length + index_length) \""Table Size\"" "" + ""FROM information_schema.TABLES WHERE table_schema = \""test_schema\"" AND table_name =\""stage\"""")).andReturn(stageResultSet);
    EasyMock.expect(mockStatement.executeQuery(""SELECT (data_length + index_length) \""Table Size\"" "" + ""FROM information_schema.TABLES WHERE table_schema = \""test_schema\"" AND table_name =\""request\"""")).andReturn(requestResultSet);
    EasyMock.expect(mockStatement.executeQuery(""SELECT (data_length + index_length) \""Table Size\"" "" + ""FROM information_schema.TABLES WHERE table_schema = \""test_schema\"" AND table_name =\""alert_history\"""")).andReturn(alertHistoryResultSet);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector(mockInjector);
    easyMockSupport.replayAll();
    mockAmbariMetainfo.init();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.resetCheckResult();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForLargeTables();
    easyMockSupport.verifyAll();
}","testCheckForLargeTables()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testConfigGroupHostMappings","TRUE","5","assertNotNull
assertEquals","{
    org.easymock.EasyMockSupport easyMockSupport = new org.easymock.EasyMockSupport();
    final org.apache.ambari.server.orm.DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.DBAccessor.class);
    final org.apache.ambari.server.stack.StackManagerFactory mockStackManagerFactory = easyMockSupport.createNiceMock(org.apache.ambari.server.stack.StackManagerFactory.class);
    final javax.persistence.EntityManager mockEntityManager = easyMockSupport.createNiceMock(javax.persistence.EntityManager.class);
    final org.apache.ambari.server.state.Clusters mockClusters = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Clusters.class);
    final org.apache.ambari.server.state.stack.OsFamily mockOSFamily = easyMockSupport.createNiceMock(org.apache.ambari.server.state.stack.OsFamily.class);
    final com.google.inject.Injector mockInjector = com.google.inject.Guice.createInjector(new com.google.inject.AbstractModule() {
        @java.lang.Override
        protected void configure() {
            bind(org.apache.ambari.server.stack.StackManagerFactory.class).toInstance(mockStackManagerFactory);
            bind(javax.persistence.EntityManager.class).toInstance(mockEntityManager);
            bind(org.apache.ambari.server.orm.DBAccessor.class).toInstance(mockDBDbAccessor);
            bind(org.apache.ambari.server.state.Clusters.class).toInstance(mockClusters);
            bind(org.apache.ambari.server.state.stack.OsFamily.class).toInstance(mockOSFamily);
        }
    });
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Cluster> clusters = new java.util.HashMap<>();
    org.apache.ambari.server.state.Cluster cluster = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Cluster.class);
    clusters.put(""c1"", cluster);
    EasyMock.expect(mockClusters.getClusters()).andReturn(clusters).anyTimes();
    java.util.Map<java.lang.Long, org.apache.ambari.server.state.configgroup.ConfigGroup> configGroupMap = new java.util.HashMap<>();
    org.apache.ambari.server.state.configgroup.ConfigGroup cg1 = easyMockSupport.createNiceMock(org.apache.ambari.server.state.configgroup.ConfigGroup.class);
    org.apache.ambari.server.state.configgroup.ConfigGroup cg2 = easyMockSupport.createNiceMock(org.apache.ambari.server.state.configgroup.ConfigGroup.class);
    configGroupMap.put(1L, cg1);
    configGroupMap.put(2L, cg2);
    EasyMock.expect(cluster.getConfigGroups()).andReturn(configGroupMap).anyTimes();
    EasyMock.expect(cluster.getClusterName()).andReturn(""c1"").anyTimes();
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Host> hosts = new java.util.HashMap<>();
    org.apache.ambari.server.state.Host h1 = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Host.class);
    org.apache.ambari.server.state.Host h2 = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Host.class);
    hosts.put(""h1"", h1);
    EasyMock.expect(mockClusters.getHostsForCluster(""c1"")).andReturn(hosts);
    java.util.Map<java.lang.Long, org.apache.ambari.server.state.Host> cgHosts = new java.util.HashMap<>();
    cgHosts.put(1L, h1);
    cgHosts.put(2L, h2);
    EasyMock.expect(cg1.getHosts()).andReturn(cgHosts);
    EasyMock.expect(h1.getHostName()).andReturn(""h1"").anyTimes();
    EasyMock.expect(h2.getHostName()).andReturn(""h2"").anyTimes();
    EasyMock.expect(h1.getHostId()).andReturn(1L).anyTimes();
    EasyMock.expect(h2.getHostId()).andReturn(2L).anyTimes();
    EasyMock.expect(cg1.getId()).andReturn(1L).anyTimes();
    EasyMock.expect(cg2.getId()).andReturn(2L).anyTimes();
    EasyMock.expect(cg1.getName()).andReturn(""cg1"").anyTimes();
    EasyMock.expect(cg2.getName()).andReturn(""cg2"").anyTimes();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector(mockInjector);
    easyMockSupport.replayAll();
    java.util.Map<java.lang.Long, java.util.Set<java.lang.Long>> hostIds = org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkConfigGroupHostMapping(true);
    easyMockSupport.verifyAll();
    org.junit.Assert.assertNotNull(hostIds);
    org.junit.Assert.assertEquals(1, hostIds.size());
    org.junit.Assert.assertEquals(1L, hostIds.keySet().iterator().next().longValue());
    org.junit.Assert.assertEquals(2L, hostIds.get(1L).iterator().next().longValue());
}","testConfigGroupHostMappings()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testConfigGroupForDeletedServices","TRUE","6","assertFalse
assertEquals
assertTrue","{
    org.easymock.EasyMockSupport easyMockSupport = new org.easymock.EasyMockSupport();
    final org.apache.ambari.server.orm.DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.DBAccessor.class);
    final org.apache.ambari.server.stack.StackManagerFactory mockStackManagerFactory = easyMockSupport.createNiceMock(org.apache.ambari.server.stack.StackManagerFactory.class);
    final javax.persistence.EntityManager mockEntityManager = easyMockSupport.createNiceMock(javax.persistence.EntityManager.class);
    final org.apache.ambari.server.state.Clusters mockClusters = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Clusters.class);
    final org.apache.ambari.server.state.stack.OsFamily mockOSFamily = easyMockSupport.createNiceMock(org.apache.ambari.server.state.stack.OsFamily.class);
    final com.google.inject.Injector mockInjector = com.google.inject.Guice.createInjector(new com.google.inject.AbstractModule() {
        @java.lang.Override
        protected void configure() {
            bind(org.apache.ambari.server.stack.StackManagerFactory.class).toInstance(mockStackManagerFactory);
            bind(javax.persistence.EntityManager.class).toInstance(mockEntityManager);
            bind(org.apache.ambari.server.orm.DBAccessor.class).toInstance(mockDBDbAccessor);
            bind(org.apache.ambari.server.state.Clusters.class).toInstance(mockClusters);
            bind(org.apache.ambari.server.state.stack.OsFamily.class).toInstance(mockOSFamily);
        }
    });
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Cluster> clusters = new java.util.HashMap<>();
    org.apache.ambari.server.state.Cluster cluster = easyMockSupport.createStrictMock(org.apache.ambari.server.state.Cluster.class);
    clusters.put(""c1"", cluster);
    EasyMock.expect(mockClusters.getClusters()).andReturn(clusters).anyTimes();
    java.util.Map<java.lang.Long, org.apache.ambari.server.state.configgroup.ConfigGroup> configGroupMap = new java.util.HashMap<>();
    org.apache.ambari.server.state.configgroup.ConfigGroup cg1 = easyMockSupport.createNiceMock(org.apache.ambari.server.state.configgroup.ConfigGroup.class);
    org.apache.ambari.server.state.configgroup.ConfigGroup cg2 = easyMockSupport.createNiceMock(org.apache.ambari.server.state.configgroup.ConfigGroup.class);
    org.apache.ambari.server.state.configgroup.ConfigGroup cgWithoutServiceName = easyMockSupport.createNiceMock(org.apache.ambari.server.state.configgroup.ConfigGroup.class);
    configGroupMap.put(1L, cg1);
    configGroupMap.put(2L, cg2);
    configGroupMap.put(3L, cgWithoutServiceName);
    EasyMock.expect(cluster.getConfigGroups()).andStubReturn(configGroupMap);
    EasyMock.expect(cg1.getName()).andReturn(""cg1"").anyTimes();
    EasyMock.expect(cg1.getId()).andReturn(1L).anyTimes();
    EasyMock.expect(cg1.getServiceName()).andReturn(""YARN"").anyTimes();
    EasyMock.expect(cg2.getServiceName()).andReturn(""HDFS"").anyTimes();
    EasyMock.expect(cgWithoutServiceName.getName()).andReturn(""cg3"").anyTimes();
    EasyMock.expect(cgWithoutServiceName.getId()).andReturn(3L).anyTimes();
    EasyMock.expect(cgWithoutServiceName.getServiceName()).andReturn(null).anyTimes();
    org.apache.ambari.server.state.Service service = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Service.class);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Service> services = new java.util.HashMap<>();
    services.put(""HDFS"", service);
    EasyMock.expect(cluster.getServices()).andReturn(services).anyTimes();
    EasyMock.expect(cg1.getClusterName()).andReturn(""c1"");
    EasyMock.expect(mockClusters.getCluster(""c1"")).andReturn(cluster).anyTimes();
    cluster.deleteConfigGroup(1L);
    EasyMock.expectLastCall();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector(mockInjector);
    easyMockSupport.replayAll();
    java.util.Map<java.lang.Long, org.apache.ambari.server.state.configgroup.ConfigGroup> configGroups = org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkConfigGroupsForDeletedServices(true);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.fixConfigGroupsForDeletedServices();
    easyMockSupport.verifyAll();
    org.junit.Assert.assertFalse(org.apache.commons.collections.MapUtils.isEmpty(configGroups));
    org.junit.Assert.assertEquals(2, configGroups.size());
    org.junit.Assert.assertTrue(configGroups.containsKey(1L));
    org.junit.Assert.assertFalse(configGroups.containsKey(2L));
    org.junit.Assert.assertTrue(configGroups.containsKey(3L));
}","testConfigGroupForDeletedServices()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testCheckForStalealertdefs","TRUE","2","assertEquals","{
    org.easymock.EasyMockSupport easyMockSupport = new org.easymock.EasyMockSupport();
    final org.apache.ambari.server.state.alert.AlertDefinition alertDefinition = easyMockSupport.createNiceMock(org.apache.ambari.server.state.alert.AlertDefinition.class);
    final org.apache.ambari.server.orm.DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.DBAccessor.class);
    final org.apache.ambari.server.stack.StackManagerFactory mockStackManagerFactory = easyMockSupport.createNiceMock(org.apache.ambari.server.stack.StackManagerFactory.class);
    final javax.persistence.EntityManager mockEntityManager = easyMockSupport.createNiceMock(javax.persistence.EntityManager.class);
    final org.apache.ambari.server.state.Clusters mockClusters = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Clusters.class);
    final org.apache.ambari.server.state.stack.OsFamily mockOSFamily = easyMockSupport.createNiceMock(org.apache.ambari.server.state.stack.OsFamily.class);
    final com.google.inject.Injector mockInjector = com.google.inject.Guice.createInjector(new com.google.inject.AbstractModule() {
        @java.lang.Override
        protected void configure() {
            bind(org.apache.ambari.server.state.alert.AlertDefinition.class).toInstance(alertDefinition);
            bind(org.apache.ambari.server.stack.StackManagerFactory.class).toInstance(mockStackManagerFactory);
            bind(javax.persistence.EntityManager.class).toInstance(mockEntityManager);
            bind(org.apache.ambari.server.orm.DBAccessor.class).toInstance(mockDBDbAccessor);
            bind(org.apache.ambari.server.state.Clusters.class).toInstance(mockClusters);
            bind(org.apache.ambari.server.state.stack.OsFamily.class).toInstance(mockOSFamily);
        }
    });
    final java.sql.ResultSet staleAlertResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    EasyMock.expect(staleAlertResultSet.next()).andReturn(true).once();
    EasyMock.expect(staleAlertResultSet.getString(""definition_name"")).andReturn(""ALERT-NAME"").atLeastOnce();
    EasyMock.expect(staleAlertResultSet.getString(""service_name"")).andReturn(""SERVICE-DELETED"").atLeastOnce();
    final java.sql.Connection mockConnection = easyMockSupport.createNiceMock(java.sql.Connection.class);
    final java.sql.Statement mockStatement = easyMockSupport.createNiceMock(java.sql.Statement.class);
    EasyMock.expect(mockDBDbAccessor.getConnection()).andReturn(mockConnection);
    EasyMock.expect(mockDBDbAccessor.getDbType()).andReturn(org.apache.ambari.server.orm.DBAccessor.DbType.MYSQL);
    EasyMock.expect(mockDBDbAccessor.getDbSchema()).andReturn(""test_schema"");
    EasyMock.expect(mockConnection.createStatement(java.sql.ResultSet.TYPE_SCROLL_SENSITIVE, java.sql.ResultSet.CONCUR_UPDATABLE)).andReturn(mockStatement).anyTimes();
    EasyMock.expect(mockStatement.executeQuery(""select definition_name, service_name from alert_definition where service_name not in "" + ""(select service_name from clusterservices) and service_name not in ('AMBARI')"")).andReturn(staleAlertResultSet);
    EasyMock.expect(alertDefinition.getDefinitionId()).andReturn(1L);
    EasyMock.expect(alertDefinition.getName()).andReturn(""AlertTest"");
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector(mockInjector);
    easyMockSupport.replayAll();
    java.util.Map<java.lang.String, java.lang.String> stalealertdefs1 = org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForStalealertdefs();
    org.junit.Assert.assertEquals(1, stalealertdefs1.size());
}","testCheckForStalealertdefs()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testCollectConfigGroupsWithoutServiceName","TRUE","6","assertFalse
assertEquals
assertTrue","{
    org.easymock.EasyMockSupport easyMockSupport = new org.easymock.EasyMockSupport();
    final org.apache.ambari.server.orm.DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.DBAccessor.class);
    final org.apache.ambari.server.stack.StackManagerFactory mockStackManagerFactory = easyMockSupport.createNiceMock(org.apache.ambari.server.stack.StackManagerFactory.class);
    final javax.persistence.EntityManager mockEntityManager = easyMockSupport.createNiceMock(javax.persistence.EntityManager.class);
    final org.apache.ambari.server.state.Clusters mockClusters = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Clusters.class);
    final org.apache.ambari.server.state.stack.OsFamily mockOSFamily = easyMockSupport.createNiceMock(org.apache.ambari.server.state.stack.OsFamily.class);
    final com.google.inject.Injector mockInjector = com.google.inject.Guice.createInjector(new com.google.inject.AbstractModule() {
        @java.lang.Override
        protected void configure() {
            bind(org.apache.ambari.server.stack.StackManagerFactory.class).toInstance(mockStackManagerFactory);
            bind(javax.persistence.EntityManager.class).toInstance(mockEntityManager);
            bind(org.apache.ambari.server.orm.DBAccessor.class).toInstance(mockDBDbAccessor);
            bind(org.apache.ambari.server.state.Clusters.class).toInstance(mockClusters);
            bind(org.apache.ambari.server.state.stack.OsFamily.class).toInstance(mockOSFamily);
        }
    });
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Cluster> clusters = new java.util.HashMap<>();
    org.apache.ambari.server.state.Cluster cluster1 = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Cluster.class);
    clusters.put(""c1"", cluster1);
    org.apache.ambari.server.state.Cluster cluster2 = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Cluster.class);
    clusters.put(""c2"", cluster2);
    EasyMock.expect(cluster2.getConfigGroups()).andReturn(new java.util.HashMap<java.lang.Long, org.apache.ambari.server.state.configgroup.ConfigGroup>(0)).anyTimes();
    EasyMock.expect(mockClusters.getClusters()).andReturn(clusters).anyTimes();
    EasyMock.expect(mockClusters.getCluster(""c1"")).andReturn(cluster1).anyTimes();
    EasyMock.expect(mockClusters.getCluster(""c2"")).andReturn(cluster2).anyTimes();
    java.util.Map<java.lang.Long, org.apache.ambari.server.state.configgroup.ConfigGroup> configGroupMap = new java.util.HashMap<>();
    org.apache.ambari.server.state.configgroup.ConfigGroup cgWithoutServiceName = easyMockSupport.createNiceMock(org.apache.ambari.server.state.configgroup.ConfigGroup.class);
    org.apache.ambari.server.state.configgroup.ConfigGroup cgWithServiceName = easyMockSupport.createNiceMock(org.apache.ambari.server.state.configgroup.ConfigGroup.class);
    org.apache.ambari.server.state.configgroup.ConfigGroup cgForNonExistentService = easyMockSupport.createNiceMock(org.apache.ambari.server.state.configgroup.ConfigGroup.class);
    configGroupMap.put(1L, cgWithoutServiceName);
    configGroupMap.put(2L, cgWithServiceName);
    configGroupMap.put(3L, cgForNonExistentService);
    EasyMock.expect(cluster1.getConfigGroups()).andReturn(configGroupMap).anyTimes();
    EasyMock.expect(cgWithoutServiceName.getId()).andReturn(1L).anyTimes();
    EasyMock.expect(cgWithoutServiceName.getClusterName()).andReturn(""c1"").anyTimes();
    EasyMock.expect(cgWithoutServiceName.getServiceName()).andReturn(null).anyTimes();
    EasyMock.expect(cgWithoutServiceName.getTag()).andReturn(""YARN"").anyTimes();
    cgWithoutServiceName.setServiceName(""YARN"");
    EasyMock.expectLastCall();
    EasyMock.expect(cgWithServiceName.getId()).andReturn(2L).anyTimes();
    EasyMock.expect(cgWithServiceName.getClusterName()).andReturn(""c1"").anyTimes();
    EasyMock.expect(cgWithServiceName.getServiceName()).andReturn(""HDFS"").anyTimes();
    EasyMock.expect(cgForNonExistentService.getId()).andReturn(3L).anyTimes();
    EasyMock.expect(cgForNonExistentService.getClusterName()).andReturn(""c1"").anyTimes();
    EasyMock.expect(cgForNonExistentService.getServiceName()).andReturn(null).anyTimes();
    EasyMock.expect(cgForNonExistentService.getTag()).andReturn(""NOT_EXISTS"").anyTimes();
    org.apache.ambari.server.state.Service hdfsService = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Service.class);
    org.apache.ambari.server.state.Service yarnService = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Service.class);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Service> services = new java.util.HashMap<>();
    services.put(""HDFS"", hdfsService);
    services.put(""YARN"", yarnService);
    EasyMock.expect(cluster1.getServices()).andReturn(services).anyTimes();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector(mockInjector);
    easyMockSupport.replayAll();
    java.util.Map<java.lang.Long, org.apache.ambari.server.state.configgroup.ConfigGroup> configGroups = org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.collectConfigGroupsWithoutServiceName();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.fixConfigGroupServiceNames();
    easyMockSupport.verifyAll();
    org.junit.Assert.assertFalse(org.apache.commons.collections.MapUtils.isEmpty(configGroups));
    org.junit.Assert.assertEquals(2, configGroups.size());
    org.junit.Assert.assertTrue(configGroups.containsKey(1L));
    org.junit.Assert.assertFalse(configGroups.containsKey(2L));
    org.junit.Assert.assertTrue(configGroups.containsKey(3L));
}","testCollectConfigGroupsWithoutServiceName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testCollectConfigGroupsWithoutServiceNameReturnsEmptyMapWhenNoClusters","TRUE","2","assertTrue","{
    org.easymock.EasyMockSupport easyMockSupport = new org.easymock.EasyMockSupport();
    final org.apache.ambari.server.orm.DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.DBAccessor.class);
    final org.apache.ambari.server.stack.StackManagerFactory mockStackManagerFactory = easyMockSupport.createNiceMock(org.apache.ambari.server.stack.StackManagerFactory.class);
    final javax.persistence.EntityManager mockEntityManager = easyMockSupport.createNiceMock(javax.persistence.EntityManager.class);
    final org.apache.ambari.server.state.Clusters mockClusters = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Clusters.class);
    final org.apache.ambari.server.state.stack.OsFamily mockOSFamily = easyMockSupport.createNiceMock(org.apache.ambari.server.state.stack.OsFamily.class);
    final com.google.inject.Injector mockInjector = com.google.inject.Guice.createInjector(new com.google.inject.AbstractModule() {
        @java.lang.Override
        protected void configure() {
            bind(org.apache.ambari.server.stack.StackManagerFactory.class).toInstance(mockStackManagerFactory);
            bind(javax.persistence.EntityManager.class).toInstance(mockEntityManager);
            bind(org.apache.ambari.server.orm.DBAccessor.class).toInstance(mockDBDbAccessor);
            bind(org.apache.ambari.server.state.Clusters.class).toInstance(mockClusters);
            bind(org.apache.ambari.server.state.stack.OsFamily.class).toInstance(mockOSFamily);
        }
    });
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Cluster> clusters = new java.util.HashMap<>();
    EasyMock.expect(mockClusters.getClusters()).andReturn(clusters).anyTimes();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector(mockInjector);
    easyMockSupport.replayAll();
    java.util.Map<java.lang.Long, org.apache.ambari.server.state.configgroup.ConfigGroup> configGroups = org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.collectConfigGroupsWithoutServiceName();
    easyMockSupport.verifyAll();
    org.junit.Assert.assertTrue(org.apache.commons.collections.MapUtils.isEmpty(configGroups));
}","testCollectConfigGroupsWithoutServiceNameReturnsEmptyMapWhenNoClusters()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testFixConfigsSelectedMoreThanOnce","FALSE","0","None","{
    org.easymock.EasyMockSupport easyMockSupport = new org.easymock.EasyMockSupport();
    final java.sql.Connection mockConnection = easyMockSupport.createNiceMock(java.sql.Connection.class);
    final org.apache.ambari.server.orm.dao.ClusterDAO clusterDAO = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.dao.ClusterDAO.class);
    final org.apache.ambari.server.orm.DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.DBAccessor.class);
    final javax.persistence.EntityManager mockEntityManager = easyMockSupport.createNiceMock(javax.persistence.EntityManager.class);
    final org.apache.ambari.server.state.Clusters mockClusters = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Clusters.class);
    final java.sql.ResultSet mockResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final java.sql.Statement mockStatement = easyMockSupport.createNiceMock(java.sql.Statement.class);
    final org.apache.ambari.server.stack.StackManagerFactory mockStackManagerFactory = easyMockSupport.createNiceMock(org.apache.ambari.server.stack.StackManagerFactory.class);
    final org.apache.ambari.server.state.stack.OsFamily mockOSFamily = easyMockSupport.createNiceMock(org.apache.ambari.server.state.stack.OsFamily.class);
    final com.google.inject.Injector mockInjector = com.google.inject.Guice.createInjector(new com.google.inject.AbstractModule() {
        @java.lang.Override
        protected void configure() {
            bind(javax.persistence.EntityManager.class).toInstance(mockEntityManager);
            bind(org.apache.ambari.server.state.Clusters.class).toInstance(mockClusters);
            bind(org.apache.ambari.server.orm.dao.ClusterDAO.class).toInstance(clusterDAO);
            bind(org.apache.ambari.server.orm.DBAccessor.class).toInstance(mockDBDbAccessor);
            bind(org.apache.ambari.server.stack.StackManagerFactory.class).toInstance(mockStackManagerFactory);
            bind(org.apache.ambari.server.state.stack.OsFamily.class).toInstance(mockOSFamily);
        }
    });
    EasyMock.expect(mockConnection.createStatement(java.sql.ResultSet.TYPE_SCROLL_SENSITIVE, java.sql.ResultSet.CONCUR_UPDATABLE)).andReturn(mockStatement);
    EasyMock.expect(mockStatement.executeQuery(""select c.cluster_name, cc.type_name from clusterconfig cc "" + ((""join clusters c on cc.cluster_id=c.cluster_id "" + ""group by c.cluster_name, cc.type_name "") + ""having sum(cc.selected) > 1""))).andReturn(mockResultSet);
    EasyMock.expect(mockResultSet.next()).andReturn(true).once();
    EasyMock.expect(mockResultSet.getString(""cluster_name"")).andReturn(""123"").once();
    EasyMock.expect(mockResultSet.getString(""type_name"")).andReturn(""type1"").once();
    EasyMock.expect(mockResultSet.next()).andReturn(false).once();
    org.apache.ambari.server.state.Cluster clusterMock = easyMockSupport.createNiceMock(org.apache.ambari.server.state.Cluster.class);
    EasyMock.expect(mockClusters.getCluster(""123"")).andReturn(clusterMock);
    EasyMock.expect(clusterMock.getClusterId()).andReturn(123L).once();
    org.apache.ambari.server.orm.entities.ClusterConfigEntity clusterConfigEntity1 = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.entities.ClusterConfigEntity.class);
    org.apache.ambari.server.orm.entities.ClusterConfigEntity clusterConfigEntity2 = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.entities.ClusterConfigEntity.class);
    EasyMock.expect(clusterConfigEntity1.getType()).andReturn(""type1"").anyTimes();
    EasyMock.expect(clusterConfigEntity1.getSelectedTimestamp()).andReturn(123L);
    clusterConfigEntity1.setSelected(false);
    EasyMock.expectLastCall().once();
    EasyMock.expect(clusterConfigEntity2.getType()).andReturn(""type1"").anyTimes();
    EasyMock.expect(clusterConfigEntity2.getSelectedTimestamp()).andReturn(321L);
    clusterConfigEntity2.setSelected(false);
    EasyMock.expectLastCall().once();
    clusterConfigEntity2.setSelected(true);
    EasyMock.expectLastCall().once();
    javax.persistence.TypedQuery queryMock = easyMockSupport.createNiceMock(javax.persistence.TypedQuery.class);
    EasyMock.expect(mockEntityManager.createNamedQuery(EasyMock.anyString(), EasyMock.anyObject(java.lang.Class.class))).andReturn(queryMock).anyTimes();
    EasyMock.expect(queryMock.setParameter(EasyMock.anyString(), EasyMock.anyString())).andReturn(queryMock).once();
    EasyMock.expect(queryMock.setParameter(EasyMock.anyString(), EasyMock.anyLong())).andReturn(queryMock).once();
    EasyMock.expect(queryMock.getResultList()).andReturn(java.util.Arrays.asList(clusterConfigEntity1, clusterConfigEntity2)).once();
    EasyMock.expect(clusterDAO.merge(EasyMock.anyObject(org.apache.ambari.server.orm.entities.ClusterConfigEntity.class), EasyMock.anyBoolean())).andReturn(null).times(3);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector(mockInjector);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setConnection(mockConnection);
    easyMockSupport.replayAll();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.fixConfigsSelectedMoreThanOnce();
    easyMockSupport.verifyAll();
}","testFixConfigsSelectedMoreThanOnce()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testCheckForConfigsNotMappedToService","TRUE","3","assertEquals","{
    injector = com.google.inject.Guice.createInjector(new org.apache.ambari.server.orm.InMemoryDefaultTestModule());
    injector.getInstance(org.apache.ambari.server.orm.GuiceJpaInitializer.class);
    org.apache.ambari.server.state.Clusters clusters = injector.getInstance(org.apache.ambari.server.state.Clusters.class);
    org.apache.ambari.server.state.ServiceFactory serviceFactory = injector.getInstance(org.apache.ambari.server.state.ServiceFactory.class);
    org.apache.ambari.server.state.ConfigFactory configFactory = injector.getInstance(org.apache.ambari.server.state.ConfigFactory.class);
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector(injector);
    java.lang.String STACK_VERSION = ""0.1"";
    java.lang.String REPO_VERSION = ""0.1-1234"";
    org.apache.ambari.server.state.StackId STACK_ID = new org.apache.ambari.server.state.StackId(""HDP"", STACK_VERSION);
    org.apache.ambari.server.orm.OrmTestHelper ormTestHelper = injector.getInstance(org.apache.ambari.server.orm.OrmTestHelper.class);
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion = ormTestHelper.getOrCreateRepositoryVersion(STACK_ID, REPO_VERSION);
    java.lang.String clusterName = ""foo"";
    clusters.addCluster(clusterName, STACK_ID);
    org.apache.ambari.server.state.Cluster cluster = clusters.getCluster(clusterName);
    java.lang.String serviceName = ""HDFS"";
    org.apache.ambari.server.state.Service s = serviceFactory.createNew(cluster, serviceName, repositoryVersion);
    cluster.addService(s);
    configFactory.createNew(cluster, ""hdfs-site"", ""version1"", new java.util.HashMap<java.lang.String, java.lang.String>() {
        {
            put(""a"", ""b"");
        }
    }, new java.util.HashMap<>());
    configFactory.createNew(cluster, ""hdfs-site"", ""version2"", new java.util.HashMap<java.lang.String, java.lang.String>() {
        {
            put(""a"", ""b"");
        }
    }, new java.util.HashMap<>());
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForConfigsNotMappedToService();
    org.junit.Assert.assertEquals(org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.DB_CHECK_WARNING, org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult());
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.fixClusterConfigsNotMappedToAnyService();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.resetCheckResult();
    org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForConfigsNotMappedToService();
    org.junit.Assert.assertEquals(org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.DB_CHECK_SUCCESS, org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult());
}","testCheckForConfigsNotMappedToService()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/DatabaseConsistencyCheckHelperTest.java","604c82e3cd49e71643a870dd9ca77576cc2268c9
845f7773f85b93b16cf6fd547b171c1474e8e5f9
296484db88ec8cb8b4753f6e69e23db3975dfc1b
048b0d49b173d02cc0bad89135e3100b6e1df3f1
30b6f5b61400efda3bff9a64b06ba57938433df3
5ae98dbeb1ad7752d02235a61d2869be2e284f55
d8e621e5ed292f3fb644f8f93f22695540278e08
5f6ce4ea53bcaaec35040c08600d606d7d194460
ab8d58ba4464791b95b56be75fd44ce9c20349c6
79cca1c7184f1661236971dac70d85a83fab6c11
5d6d3599172be85304e4c9e6b6628a10aa5b2aea
11ab63f7ffa99a7d381b86282846fa7c80ddc88e
f4638d24dd5f9d320392ef8b7b064c73c50f649c
fa527360b28e956e3e931449e8740ed07ed407ed
4ad3a2b3611a38aeea3d64411feec8776a6af554
e4db57093f4d17497366cdfbf02127f36399bf42
dbe77dda8a21dffa7edc8228a9e65d8b72492034
6180afee4680cba15fbfcd0d0e7d15cdbb3b1852
1aa13da878a0ccc6a0f40efae823ab767417462f
8242c7f06f2fdaf1efd623e2b6a545fec5582c6c
cb8dca09c7794c93233b2546464f1327be261c60
0521787d8a2de8124ab9d84cca228ba560eaab5c
38f363f1816ab1a4fe5e0cf704b945717b814d8f
29d3f6cc7fdb03619de8e6819832927315b303b7
4761fe7c40b10d4a5c1f7b2564df475c4a66222b
604040fbf71654c2218baef970c27d71b5f449c1
6d258d7c0ddebcc4a9e172e3c473b5ea462d79bf"
"testGetHardcodeSearchPattern","TRUE","2","assertEquals","{
    java.util.regex.Pattern p = org.apache.ambari.server.checks.HardcodedStackVersionPropertiesCheck.getHardcodeSearchPattern(org.apache.ambari.server.checks.HardcodedStackVersionPropertiesCheckTest.currentVersion);
    org.junit.Assert.assertEquals(p.pattern(), ""(?<!-Dhdp\\.version=)2\\.3\\.4\\.0-1234"");
}","testGetHardcodeSearchPattern()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/HardcodedStackVersionPropertiesCheckTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
bb864df5da25093ff386433dd591898d713fd092"
"testStringContainsVersionHardcode","TRUE","7","assertFalse
assertTrue","{
    java.util.regex.Pattern pattern = org.apache.ambari.server.checks.HardcodedStackVersionPropertiesCheck.getHardcodeSearchPattern(org.apache.ambari.server.checks.HardcodedStackVersionPropertiesCheckTest.currentVersion);
    java.lang.String content = """";
    org.junit.Assert.assertFalse(org.apache.ambari.server.checks.HardcodedStackVersionPropertiesCheck.stringContainsVersionHardcode(content, pattern));
    content = ""2.3.4.0-1234"";
    org.junit.Assert.assertTrue(org.apache.ambari.server.checks.HardcodedStackVersionPropertiesCheck.stringContainsVersionHardcode(content, pattern));
    content = ""dfsdfds fdsfds -Dhdp.version=2.3.4.0-1234 sfdfdsfds"";
    org.junit.Assert.assertFalse(org.apache.ambari.server.checks.HardcodedStackVersionPropertiesCheck.stringContainsVersionHardcode(content, pattern));
    content = ""dfsdfds fdsfds -Dhdp.version=2.3.4.0-1234 \n sfdfdsfds 2.3.4.0-1234 \n fdsfds"";
    org.junit.Assert.assertTrue(org.apache.ambari.server.checks.HardcodedStackVersionPropertiesCheck.stringContainsVersionHardcode(content, pattern));
    content = ""hdp.version=2.3.4.0-1234"";
    org.junit.Assert.assertTrue(org.apache.ambari.server.checks.HardcodedStackVersionPropertiesCheck.stringContainsVersionHardcode(content, pattern));
    content = ""kgflkfld fdf\nld;ls;f d hdp.version=2.3.4.0-1234 \n sfdfdsfds \n fdsfds"";
    org.junit.Assert.assertTrue(org.apache.ambari.server.checks.HardcodedStackVersionPropertiesCheck.stringContainsVersionHardcode(content, pattern));
}","testStringContainsVersionHardcode()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/HardcodedStackVersionPropertiesCheckTest.java","c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
bb864df5da25093ff386433dd591898d713fd092"
"testWarningWhenNoAlertsExist","TRUE","3","assertEquals
assertTrue","{
    Mockito.when(alertsDAO.findCurrentByCluster(Matchers.eq(org.apache.ambari.server.checks.HealthCheckTest.CLUSTER_ID))).thenReturn(java.util.Collections.emptyList());
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(org.apache.ambari.server.checks.HealthCheckTest.CLUSTER_NAME, false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = healthCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, result.getStatus());
    org.junit.Assert.assertTrue(result.getFailedDetail().isEmpty());
}","testWarningWhenNoAlertsExist()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/HealthCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c3a05fe8872398c9362f7e3323f47cdce9a0a471
ab8d58ba4464791b95b56be75fd44ce9c20349c6
784c5414d4ee0e1cb475a91ea2e854b3695986ec"
"testWarningWhenCriticalAlertExists","FALSE","0","None","{
    expectWarning(org.apache.ambari.server.state.AlertState.CRITICAL);
}","testWarningWhenCriticalAlertExists()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/HealthCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c3a05fe8872398c9362f7e3323f47cdce9a0a471
ab8d58ba4464791b95b56be75fd44ce9c20349c6
784c5414d4ee0e1cb475a91ea2e854b3695986ec"
"testWarningWhenWarningAlertExists","FALSE","0","None","{
    expectWarning(org.apache.ambari.server.state.AlertState.WARNING);
}","testWarningWhenWarningAlertExists()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/HealthCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c3a05fe8872398c9362f7e3323f47cdce9a0a471
ab8d58ba4464791b95b56be75fd44ce9c20349c6
784c5414d4ee0e1cb475a91ea2e854b3695986ec"
"testPerform","TRUE","3","assertEquals","{
    final org.apache.ambari.server.checks.HostMaintenanceModeCheck hostMaintenanceModeCheck = new org.apache.ambari.server.checks.HostMaintenanceModeCheck();
    hostMaintenanceModeCheck.clustersProvider = new com.google.inject.Provider<org.apache.ambari.server.state.Clusters>() {
        @java.lang.Override
        public org.apache.ambari.server.state.Clusters get() {
            return clusters;
        }
    };
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(cluster.getCurrentStackVersion()).thenReturn(new org.apache.ambari.server.state.StackId(""HDP"", ""2.2""));
    org.mockito.Mockito.when(clusters.getCluster(""cluster"")).thenReturn(cluster);
    final java.util.List<org.apache.ambari.server.state.Host> hosts = new java.util.ArrayList<>();
    final org.apache.ambari.server.state.Host host1 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.Host host2 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.Host host3 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    org.mockito.Mockito.when(host1.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host2.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host3.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    hosts.add(host1);
    hosts.add(host2);
    hosts.add(host3);
    org.mockito.Mockito.when(cluster.getHosts()).thenReturn(hosts);
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = hostMaintenanceModeCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.mockito.Mockito.when(host3.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.ON);
    check = hostMaintenanceModeCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.WARNING, check.getStatus());
}","testPerform()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/HostMaintenanceModeCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c3a05fe8872398c9362f7e3323f47cdce9a0a471
6143203c0a147d0c8363c8709aaf7e35dea6928a
c715189ab50311f5fc2ed0b089e426173b59fd25
59dd207c39968df161341568f7538b9e3a990de2
25237d3fe11bc0bd436d20774a4371d7794f7725
fea608d052a0538b3f7900ca785aa9d378a36dab
5a2dbeab0e7d5601dccad16940b28a6edf19bdc0
53241b914dbb2dc6d967f22cc18ee51217bec18c"
"testPerformHostOrdered","TRUE","6","assertEquals
assertTrue
assertFalse","{
    final org.apache.ambari.server.checks.HostMaintenanceModeCheck hostMaintenanceModeCheck = new org.apache.ambari.server.checks.HostMaintenanceModeCheck();
    hostMaintenanceModeCheck.clustersProvider = new com.google.inject.Provider<org.apache.ambari.server.state.Clusters>() {
        @java.lang.Override
        public org.apache.ambari.server.state.Clusters get() {
            return clusters;
        }
    };
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(cluster.getCurrentStackVersion()).thenReturn(new org.apache.ambari.server.state.StackId(""HDP"", ""2.2""));
    org.mockito.Mockito.when(clusters.getCluster(""cluster"")).thenReturn(cluster);
    final java.util.List<org.apache.ambari.server.state.Host> hosts = new java.util.ArrayList<>();
    final org.apache.ambari.server.state.Host host1 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.Host host2 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.Host host3 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    org.mockito.Mockito.when(host1.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host2.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host3.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host1.getHostName()).thenReturn(""h1"");
    org.mockito.Mockito.when(host2.getHostName()).thenReturn(""h2"");
    org.mockito.Mockito.when(host3.getHostName()).thenReturn(""h3"");
    hosts.add(host1);
    hosts.add(host2);
    hosts.add(host3);
    org.mockito.Mockito.when(cluster.getHosts()).thenReturn(hosts);
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = hostMaintenanceModeCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailedDetail().isEmpty());
    org.mockito.Mockito.when(host3.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.ON);
    request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.HOST_ORDERED, null, null, null);
    check = hostMaintenanceModeCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
    org.junit.Assert.assertFalse(check.getFailedDetail().isEmpty());
    org.junit.Assert.assertEquals(""The following hosts cannot be in Maintenance Mode: h3."", check.getFailReason());
}","testPerformHostOrdered()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/HostMaintenanceModeCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c3a05fe8872398c9362f7e3323f47cdce9a0a471
6143203c0a147d0c8363c8709aaf7e35dea6928a
c715189ab50311f5fc2ed0b089e426173b59fd25
59dd207c39968df161341568f7538b9e3a990de2
25237d3fe11bc0bd436d20774a4371d7794f7725
fea608d052a0538b3f7900ca785aa9d378a36dab
5a2dbeab0e7d5601dccad16940b28a6edf19bdc0
53241b914dbb2dc6d967f22cc18ee51217bec18c"
"testPerform","TRUE","7","assertEquals
assertFalse
assertTrue","{
    final org.apache.ambari.server.checks.HostsHeartbeatCheck hostHeartbeatCheck = new org.apache.ambari.server.checks.HostsHeartbeatCheck();
    hostHeartbeatCheck.clustersProvider = new com.google.inject.Provider<org.apache.ambari.server.state.Clusters>() {
        @java.lang.Override
        public org.apache.ambari.server.state.Clusters get() {
            return clusters;
        }
    };
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(cluster.getCurrentStackVersion()).thenReturn(new org.apache.ambari.server.state.StackId(""HDP"", ""2.2""));
    org.mockito.Mockito.when(clusters.getCluster(""cluster"")).thenReturn(cluster);
    final java.util.List<org.apache.ambari.server.state.Host> hosts = new java.util.ArrayList<>();
    final org.apache.ambari.server.state.Host host1 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.Host host2 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.Host host3 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.HostHealthStatus status1 = org.mockito.Mockito.mock(org.apache.ambari.server.state.HostHealthStatus.class);
    final org.apache.ambari.server.state.HostHealthStatus status2 = org.mockito.Mockito.mock(org.apache.ambari.server.state.HostHealthStatus.class);
    final org.apache.ambari.server.state.HostHealthStatus status3 = org.mockito.Mockito.mock(org.apache.ambari.server.state.HostHealthStatus.class);
    org.mockito.Mockito.when(host1.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host2.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host3.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host1.getHealthStatus()).thenReturn(status1);
    org.mockito.Mockito.when(host2.getHealthStatus()).thenReturn(status2);
    org.mockito.Mockito.when(host3.getHealthStatus()).thenReturn(status3);
    org.mockito.Mockito.when(status1.getHealthStatus()).thenReturn(org.apache.ambari.server.state.HostHealthStatus.HealthStatus.HEALTHY);
    org.mockito.Mockito.when(status2.getHealthStatus()).thenReturn(org.apache.ambari.server.state.HostHealthStatus.HealthStatus.HEALTHY);
    org.mockito.Mockito.when(status3.getHealthStatus()).thenReturn(org.apache.ambari.server.state.HostHealthStatus.HealthStatus.UNKNOWN);
    hosts.add(host1);
    hosts.add(host2);
    hosts.add(host3);
    org.mockito.Mockito.when(cluster.getHosts()).thenReturn(hosts);
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = hostHeartbeatCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
    org.junit.Assert.assertFalse(check.getFailedDetail().isEmpty());
    check = new org.apache.ambari.spi.upgrade.UpgradeCheckResult(null, null);
    org.mockito.Mockito.when(host3.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.ON);
    check = hostHeartbeatCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailedDetail().isEmpty());
    org.mockito.Mockito.when(status3.getHealthStatus()).thenReturn(org.apache.ambari.server.state.HostHealthStatus.HealthStatus.HEALTHY);
    check = new org.apache.ambari.spi.upgrade.UpgradeCheckResult(null, null);
    org.mockito.Mockito.when(host3.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    check = hostHeartbeatCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailedDetail().isEmpty());
}","testPerform()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/HostsHeartbeatCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c3a05fe8872398c9362f7e3323f47cdce9a0a471
c19f363c877776623fd42d285717e6e95b9036ad
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
2a970f8de48656012d7aba364f1066cec31de99b
c715189ab50311f5fc2ed0b089e426173b59fd25
59dd207c39968df161341568f7538b9e3a990de2
25237d3fe11bc0bd436d20774a4371d7794f7725
fea608d052a0538b3f7900ca785aa9d378a36dab
5a2dbeab0e7d5601dccad16940b28a6edf19bdc0
53241b914dbb2dc6d967f22cc18ee51217bec18c"
"testPerform","TRUE","4","assertEquals","{
    org.mockito.Mockito.when(m_repositoryVersion.getVersion()).thenReturn(""1.0.0.0-1234"");
    org.mockito.Mockito.when(m_repositoryVersion.getStackId()).thenReturn(new org.apache.ambari.server.state.StackId(""HDP"", ""1.0"").getStackId());
    org.mockito.Mockito.when(m_repositoryVersionEntity.getVersion()).thenReturn(""1.0.0.0-1234"");
    org.mockito.Mockito.when(m_repositoryVersionEntity.getStackId()).thenReturn(new org.apache.ambari.server.state.StackId(""HDP"", ""1.0""));
    final java.lang.String upgradePackName = ""upgrade_pack"";
    final org.apache.ambari.server.checks.HostsMasterMaintenanceCheck hostsMasterMaintenanceCheck = new org.apache.ambari.server.checks.HostsMasterMaintenanceCheck();
    hostsMasterMaintenanceCheck.clustersProvider = new com.google.inject.Provider<org.apache.ambari.server.state.Clusters>() {
        @java.lang.Override
        public org.apache.ambari.server.state.Clusters get() {
            return clusters;
        }
    };
    hostsMasterMaintenanceCheck.repositoryVersionDaoProvider = new com.google.inject.Provider<org.apache.ambari.server.orm.dao.RepositoryVersionDAO>() {
        @java.lang.Override
        public org.apache.ambari.server.orm.dao.RepositoryVersionDAO get() {
            return repositoryVersionDAO;
        }
    };
    hostsMasterMaintenanceCheck.repositoryVersionHelper = new com.google.inject.Provider<org.apache.ambari.server.stack.upgrade.RepositoryVersionHelper>() {
        @java.lang.Override
        public org.apache.ambari.server.stack.upgrade.RepositoryVersionHelper get() {
            return repositoryVersionHelper;
        }
    };
    hostsMasterMaintenanceCheck.ambariMetaInfo = new com.google.inject.Provider<org.apache.ambari.server.api.services.AmbariMetaInfo>() {
        @java.lang.Override
        public org.apache.ambari.server.api.services.AmbariMetaInfo get() {
            return ambariMetaInfo;
        }
    };
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(clusters.getCluster(""cluster"")).thenReturn(cluster);
    org.mockito.Mockito.when(cluster.getDesiredStackVersion()).thenReturn(new org.apache.ambari.server.state.StackId(""HDP"", ""1.0""));
    org.mockito.Mockito.when(repositoryVersionHelper.getUpgradePackageName(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), ((org.apache.ambari.spi.upgrade.UpgradeType) (org.mockito.Mockito.anyObject())))).thenReturn(null);
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest checkRequest = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = hostsMasterMaintenanceCheck.perform(checkRequest);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
    org.mockito.Mockito.when(repositoryVersionHelper.getUpgradePackageName(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), ((org.apache.ambari.spi.upgrade.UpgradeType) (org.mockito.Mockito.anyObject())))).thenReturn(upgradePackName);
    org.mockito.Mockito.when(ambariMetaInfo.getUpgradePacks(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenReturn(new java.util.HashMap<>());
    result = hostsMasterMaintenanceCheck.perform(checkRequest);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
    final java.util.Map<java.lang.String, org.apache.ambari.server.stack.upgrade.UpgradePack> upgradePacks = new java.util.HashMap<>();
    final org.apache.ambari.server.stack.upgrade.UpgradePack upgradePack = org.mockito.Mockito.mock(org.apache.ambari.server.stack.upgrade.UpgradePack.class);
    org.mockito.Mockito.when(upgradePack.getName()).thenReturn(upgradePackName);
    upgradePacks.put(upgradePack.getName(), upgradePack);
    org.mockito.Mockito.when(ambariMetaInfo.getUpgradePacks(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenReturn(upgradePacks);
    org.mockito.Mockito.when(upgradePack.getTasks()).thenReturn(new java.util.HashMap<>());
    org.mockito.Mockito.when(cluster.getServices()).thenReturn(new java.util.HashMap<>());
    org.mockito.Mockito.when(clusters.getHostsForCluster(org.mockito.Mockito.anyString())).thenReturn(new java.util.HashMap<>());
    result = hostsMasterMaintenanceCheck.perform(checkRequest);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, result.getStatus());
}","testPerform()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/HostsMasterMaintenanceCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c19f363c877776623fd42d285717e6e95b9036ad
ab8d58ba4464791b95b56be75fd44ce9c20349c6
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
a45f5427b08fc354e8b54481e7da3d6083112345
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
2a970f8de48656012d7aba364f1066cec31de99b
c9d75dd5d5e14c5b971c86795d49a8d27bf0a454
c58162fe3538f8e4d67ad11da6f7d3c8940012a6
25237d3fe11bc0bd436d20774a4371d7794f7725
5a2dbeab0e7d5601dccad16940b28a6edf19bdc0
53241b914dbb2dc6d967f22cc18ee51217bec18c"
"testPerform","TRUE","3","assertEquals","{
    final org.apache.ambari.server.checks.HostsRepositoryVersionCheck hostsRepositoryVersionCheck = new org.apache.ambari.server.checks.HostsRepositoryVersionCheck();
    hostsRepositoryVersionCheck.clustersProvider = new com.google.inject.Provider<org.apache.ambari.server.state.Clusters>() {
        @java.lang.Override
        public org.apache.ambari.server.state.Clusters get() {
            return clusters;
        }
    };
    hostsRepositoryVersionCheck.repositoryVersionDaoProvider = new com.google.inject.Provider<org.apache.ambari.server.orm.dao.RepositoryVersionDAO>() {
        @java.lang.Override
        public org.apache.ambari.server.orm.dao.RepositoryVersionDAO get() {
            return repositoryVersionDAO;
        }
    };
    hostsRepositoryVersionCheck.hostVersionDaoProvider = new com.google.inject.Provider<org.apache.ambari.server.orm.dao.HostVersionDAO>() {
        @java.lang.Override
        public org.apache.ambari.server.orm.dao.HostVersionDAO get() {
            return hostVersionDAO;
        }
    };
    hostsRepositoryVersionCheck.checkHelperProvider = new com.google.inject.Provider<org.apache.ambari.server.state.CheckHelper>() {
        @java.lang.Override
        public org.apache.ambari.server.state.CheckHelper get() {
            return m_checkHelper;
        }
    };
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(cluster.getDesiredStackVersion()).thenReturn(new org.apache.ambari.server.state.StackId());
    org.mockito.Mockito.when(clusters.getCluster(""cluster"")).thenReturn(cluster);
    final java.util.Map<java.lang.String, org.apache.ambari.server.state.Host> hosts = new java.util.HashMap<>();
    final org.apache.ambari.server.state.Host host1 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.Host host2 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.Host host3 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    org.mockito.Mockito.when(host1.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host2.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host3.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    hosts.put(""host1"", host1);
    hosts.put(""host2"", host2);
    hosts.put(""host3"", host3);
    org.mockito.Mockito.when(clusters.getHostsForCluster(""cluster"")).thenReturn(hosts);
    org.mockito.Mockito.when(repositoryVersionDAO.findByStackAndVersion(org.mockito.Mockito.any(org.apache.ambari.server.state.StackId.class), org.mockito.Mockito.anyString())).thenReturn(null);
    org.mockito.Mockito.when(repositoryVersionDAO.findByStackAndVersion(org.mockito.Mockito.any(org.apache.ambari.server.orm.entities.StackEntity.class), org.mockito.Mockito.anyString())).thenReturn(null);
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = hostsRepositoryVersionCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
    org.apache.ambari.server.orm.entities.StackEntity stackEntity = new org.apache.ambari.server.orm.entities.StackEntity();
    stackEntity.setStackName(""HDP"");
    stackEntity.setStackVersion(""2.0.6"");
    final org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion = new org.apache.ambari.server.orm.entities.RepositoryVersionEntity();
    repositoryVersion.setStack(stackEntity);
    org.mockito.Mockito.when(repositoryVersionDAO.findByStackAndVersion(org.mockito.Mockito.any(org.apache.ambari.server.state.StackId.class), org.mockito.Mockito.anyString())).thenReturn(repositoryVersion);
    org.mockito.Mockito.when(repositoryVersionDAO.findByStackAndVersion(org.mockito.Mockito.any(org.apache.ambari.server.orm.entities.StackEntity.class), org.mockito.Mockito.anyString())).thenReturn(repositoryVersion);
    final org.apache.ambari.server.orm.entities.HostVersionEntity hostVersion = new org.apache.ambari.server.orm.entities.HostVersionEntity();
    hostVersion.setState(org.apache.ambari.server.state.RepositoryVersionState.INSTALLED);
    org.mockito.Mockito.when(hostVersionDAO.findByClusterStackVersionAndHost(org.mockito.Mockito.anyString(), org.mockito.Mockito.any(org.apache.ambari.server.state.StackId.class), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenReturn(hostVersion);
    check = hostsRepositoryVersionCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
}","testPerform()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/HostsRepositoryVersionCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c19f363c877776623fd42d285717e6e95b9036ad
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
a2561302530c859f27c678920014db4e4c4a5f7d
2a970f8de48656012d7aba364f1066cec31de99b
c9d75dd5d5e14c5b971c86795d49a8d27bf0a454
c58162fe3538f8e4d67ad11da6f7d3c8940012a6
25237d3fe11bc0bd436d20774a4371d7794f7725
3d2684addc4108cd7a3f6a4d429dd2a1511cd748
746df034c630081df187dd442fb460596568113f
5a2dbeab0e7d5601dccad16940b28a6edf19bdc0
53241b914dbb2dc6d967f22cc18ee51217bec18c"
"testPerformWithVersion","TRUE","2","assertEquals","{
    final org.apache.ambari.server.checks.HostsRepositoryVersionCheck hostsRepositoryVersionCheck = new org.apache.ambari.server.checks.HostsRepositoryVersionCheck();
    hostsRepositoryVersionCheck.clustersProvider = new com.google.inject.Provider<org.apache.ambari.server.state.Clusters>() {
        @java.lang.Override
        public org.apache.ambari.server.state.Clusters get() {
            return clusters;
        }
    };
    hostsRepositoryVersionCheck.repositoryVersionDaoProvider = new com.google.inject.Provider<org.apache.ambari.server.orm.dao.RepositoryVersionDAO>() {
        @java.lang.Override
        public org.apache.ambari.server.orm.dao.RepositoryVersionDAO get() {
            return repositoryVersionDAO;
        }
    };
    hostsRepositoryVersionCheck.hostVersionDaoProvider = new com.google.inject.Provider<org.apache.ambari.server.orm.dao.HostVersionDAO>() {
        @java.lang.Override
        public org.apache.ambari.server.orm.dao.HostVersionDAO get() {
            return hostVersionDAO;
        }
    };
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(cluster.getDesiredStackVersion()).thenReturn(new org.apache.ambari.server.state.StackId());
    org.mockito.Mockito.when(clusters.getCluster(""cluster"")).thenReturn(cluster);
    final java.util.Map<java.lang.String, org.apache.ambari.server.state.Host> hosts = new java.util.HashMap<>();
    final org.apache.ambari.server.state.Host host1 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.Host host2 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.Host host3 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    org.mockito.Mockito.when(host1.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host2.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host3.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host1.getHostName()).thenReturn(""host1"");
    org.mockito.Mockito.when(host2.getHostName()).thenReturn(""host2"");
    org.mockito.Mockito.when(host3.getHostName()).thenReturn(""host3"");
    hosts.put(""host1"", host1);
    hosts.put(""host2"", host2);
    hosts.put(""host3"", host3);
    org.mockito.Mockito.when(clusters.getHostsForCluster(""cluster"")).thenReturn(hosts);
    org.apache.ambari.server.orm.entities.HostVersionEntity hve = new org.apache.ambari.server.orm.entities.HostVersionEntity();
    hve.setRepositoryVersion(m_repositoryVersionEntity);
    hve.setState(org.apache.ambari.server.state.RepositoryVersionState.INSTALLED);
    for (java.lang.String hostName : hosts.keySet()) {
        org.mockito.Mockito.when(hostVersionDAO.findByClusterStackVersionAndHost(""cluster"", m_repositoryVersionEntity.getStackId(), m_repositoryVersion.getVersion(), hostName)).thenReturn(hve);
    }
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = hostsRepositoryVersionCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
}","testPerformWithVersion()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/HostsRepositoryVersionCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c19f363c877776623fd42d285717e6e95b9036ad
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
a2561302530c859f27c678920014db4e4c4a5f7d
2a970f8de48656012d7aba364f1066cec31de99b
c9d75dd5d5e14c5b971c86795d49a8d27bf0a454
c58162fe3538f8e4d67ad11da6f7d3c8940012a6
25237d3fe11bc0bd436d20774a4371d7794f7725
3d2684addc4108cd7a3f6a4d429dd2a1511cd748
746df034c630081df187dd442fb460596568113f
5a2dbeab0e7d5601dccad16940b28a6edf19bdc0
53241b914dbb2dc6d967f22cc18ee51217bec18c"
"testPerformWithVersionNotRequired","TRUE","2","assertEquals","{
    final org.apache.ambari.server.checks.HostsRepositoryVersionCheck hostsRepositoryVersionCheck = new org.apache.ambari.server.checks.HostsRepositoryVersionCheck();
    hostsRepositoryVersionCheck.clustersProvider = new com.google.inject.Provider<org.apache.ambari.server.state.Clusters>() {
        @java.lang.Override
        public org.apache.ambari.server.state.Clusters get() {
            return clusters;
        }
    };
    hostsRepositoryVersionCheck.repositoryVersionDaoProvider = new com.google.inject.Provider<org.apache.ambari.server.orm.dao.RepositoryVersionDAO>() {
        @java.lang.Override
        public org.apache.ambari.server.orm.dao.RepositoryVersionDAO get() {
            return repositoryVersionDAO;
        }
    };
    hostsRepositoryVersionCheck.hostVersionDaoProvider = new com.google.inject.Provider<org.apache.ambari.server.orm.dao.HostVersionDAO>() {
        @java.lang.Override
        public org.apache.ambari.server.orm.dao.HostVersionDAO get() {
            return hostVersionDAO;
        }
    };
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(cluster.getDesiredStackVersion()).thenReturn(new org.apache.ambari.server.state.StackId());
    org.mockito.Mockito.when(clusters.getCluster(""cluster"")).thenReturn(cluster);
    final java.util.Map<java.lang.String, org.apache.ambari.server.state.Host> hosts = new java.util.HashMap<>();
    final org.apache.ambari.server.state.Host host1 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.Host host2 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    final org.apache.ambari.server.state.Host host3 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    org.mockito.Mockito.when(host1.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host2.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host3.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host1.getHostName()).thenReturn(""host1"");
    org.mockito.Mockito.when(host2.getHostName()).thenReturn(""host2"");
    org.mockito.Mockito.when(host3.getHostName()).thenReturn(""host3"");
    hosts.put(""host1"", host1);
    hosts.put(""host2"", host2);
    hosts.put(""host3"", host3);
    org.mockito.Mockito.when(clusters.getHostsForCluster(""cluster"")).thenReturn(hosts);
    org.apache.ambari.server.orm.entities.HostVersionEntity hve = new org.apache.ambari.server.orm.entities.HostVersionEntity();
    hve.setRepositoryVersion(m_repositoryVersionEntity);
    hve.setState(org.apache.ambari.server.state.RepositoryVersionState.NOT_REQUIRED);
    for (java.lang.String hostName : hosts.keySet()) {
        org.mockito.Mockito.when(hostVersionDAO.findByClusterStackVersionAndHost(""cluster"", m_repositoryVersionEntity.getStackId(), m_repositoryVersion.getVersion(), hostName)).thenReturn(hve);
    }
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = hostsRepositoryVersionCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
}","testPerformWithVersionNotRequired()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/HostsRepositoryVersionCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c19f363c877776623fd42d285717e6e95b9036ad
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
a2561302530c859f27c678920014db4e4c4a5f7d
2a970f8de48656012d7aba364f1066cec31de99b
c9d75dd5d5e14c5b971c86795d49a8d27bf0a454
c58162fe3538f8e4d67ad11da6f7d3c8940012a6
25237d3fe11bc0bd436d20774a4371d7794f7725
3d2684addc4108cd7a3f6a4d429dd2a1511cd748
746df034c630081df187dd442fb460596568113f
5a2dbeab0e7d5601dccad16940b28a6edf19bdc0
53241b914dbb2dc6d967f22cc18ee51217bec18c"
"testPerform","TRUE","7","assertEquals
assertTrue
assertNotNull
assertFalse","{
    org.apache.ambari.server.state.StackId stackId = new org.apache.ambari.server.state.StackId(""HDP"", ""2.2"");
    org.powermock.api.mockito.PowerMockito.mockStatic(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.checks.InstallPackagesCheck installPackagesCheck = new org.apache.ambari.server.checks.InstallPackagesCheck();
    installPackagesCheck.clustersProvider = new com.google.inject.Provider<org.apache.ambari.server.state.Clusters>() {
        @java.lang.Override
        public org.apache.ambari.server.state.Clusters get() {
            return clusters;
        }
    };
    installPackagesCheck.ambariMetaInfo = new com.google.inject.Provider<org.apache.ambari.server.api.services.AmbariMetaInfo>() {
        @java.lang.Override
        public org.apache.ambari.server.api.services.AmbariMetaInfo get() {
            return ambariMetaInfo;
        }
    };
    installPackagesCheck.hostVersionDaoProvider = new com.google.inject.Provider<org.apache.ambari.server.orm.dao.HostVersionDAO>() {
        @java.lang.Override
        public org.apache.ambari.server.orm.dao.HostVersionDAO get() {
            return hostVersionDAO;
        }
    };
    installPackagesCheck.repositoryVersionDaoProvider = new com.google.inject.Provider<org.apache.ambari.server.orm.dao.RepositoryVersionDAO>() {
        @java.lang.Override
        public org.apache.ambari.server.orm.dao.RepositoryVersionDAO get() {
            return repositoryVersionDAO;
        }
    };
    org.apache.ambari.server.orm.entities.StackEntity stack = new org.apache.ambari.server.orm.entities.StackEntity();
    stack.setStackName(stackId.getStackName());
    stack.setStackVersion(stackId.getStackVersion());
    java.util.List<org.apache.ambari.server.orm.entities.RepoOsEntity> osEntities = new java.util.ArrayList<>();
    org.apache.ambari.server.orm.entities.RepoOsEntity repoOsEntity = new org.apache.ambari.server.orm.entities.RepoOsEntity();
    repoOsEntity.setFamily(""rhel6"");
    repoOsEntity.setAmbariManaged(true);
    osEntities.add(repoOsEntity);
    org.apache.ambari.server.orm.entities.RepositoryVersionEntity rve = new org.apache.ambari.server.orm.entities.RepositoryVersionEntity(stack, repositoryVersion, repositoryVersion, osEntities);
    org.mockito.Mockito.when(repositoryVersionDAO.findByStackNameAndVersion(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenReturn(rve);
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterName()).thenReturn(clusterName);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(cluster.getCurrentStackVersion()).thenReturn(stackId);
    org.mockito.Mockito.when(clusters.getCluster(clusterName)).thenReturn(cluster);
    final java.util.List<java.lang.String> hostNames = new java.util.ArrayList<>();
    hostNames.add(""host1"");
    hostNames.add(""host2"");
    hostNames.add(""host3"");
    final java.util.List<org.apache.ambari.server.state.Host> hosts = new java.util.ArrayList<>();
    final java.util.List<org.apache.ambari.server.orm.entities.HostVersionEntity> hostVersionEntities = new java.util.ArrayList<>();
    for (java.lang.String hostName : hostNames) {
        org.apache.ambari.server.state.Host host = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
        org.mockito.Mockito.when(host.getHostName()).thenReturn(hostName);
        org.mockito.Mockito.when(host.getMaintenanceState(1L)).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
        hosts.add(host);
        org.apache.ambari.server.orm.entities.HostVersionEntity hve = org.mockito.Mockito.mock(org.apache.ambari.server.orm.entities.HostVersionEntity.class);
        org.mockito.Mockito.when(hve.getRepositoryVersion()).thenReturn(rve);
        org.mockito.Mockito.when(hve.getState()).thenReturn(org.apache.ambari.server.state.RepositoryVersionState.INSTALLED);
        hostVersionEntities.add(hve);
        org.mockito.Mockito.when(hostVersionDAO.findByHost(hostName)).thenReturn(java.util.Collections.singletonList(hve));
    }
    org.mockito.Mockito.when(cluster.getHosts()).thenReturn(hosts);
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = installPackagesCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailedDetail().isEmpty());
    org.mockito.Mockito.when(hostVersionEntities.get(0).getState()).thenReturn(org.apache.ambari.server.state.RepositoryVersionState.INSTALL_FAILED);
    check = installPackagesCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
    org.junit.Assert.assertNotNull(check.getFailedOn());
    org.junit.Assert.assertTrue(check.getFailedOn().contains(""host1""));
    org.junit.Assert.assertFalse(check.getFailedDetail().isEmpty());
}","testPerform()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/InstallPackagesCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c3a05fe8872398c9362f7e3323f47cdce9a0a471
c086dd1dcf3d7dd30de07e09277e78f48307d160
c19f363c877776623fd42d285717e6e95b9036ad
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
aaa821cc2455a29b1e83caf5eab98272053d5aa5
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
38700445bd793d27a8747d4c1d06b70f531ab677
30424f72d35351e8bacc285d7e93c66bc3e56d1f
2a970f8de48656012d7aba364f1066cec31de99b
f859570ae8cedbff71986e5940f42bba195b9f2f"
"testMissingCredentialStoreKerberosEnabledManagingIdentities","TRUE","3","assertEquals
assertTrue","{
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = executeCheck(true, true, false, false);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
    org.junit.Assert.assertTrue(result.getFailReason().startsWith(""Ambari's credential store has not been configured.""));
}","testMissingCredentialStoreKerberosEnabledManagingIdentities()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/KerberosAdminPersistedCredentialCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
296484db88ec8cb8b4753f6e69e23db3975dfc1b
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
9c61584bba46820f506b8cecd480da912df2fa90
a0197938047d63a77c793ca85b7f35cd89ebbd60
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c2400f824209d0c5f54e095cf41738bae089d999
ed1f013086b227471dcb1a17f56c644814fb7706
ceaf5cfb1b79a973724bbe13596213555c5c1893"
"testMissingCredentialStoreKerberosEnabledNotManagingIdentities","TRUE","2","assertEquals","{
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = executeCheck(true, false, false, false);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, result.getStatus());
}","testMissingCredentialStoreKerberosEnabledNotManagingIdentities()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/KerberosAdminPersistedCredentialCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
296484db88ec8cb8b4753f6e69e23db3975dfc1b
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
9c61584bba46820f506b8cecd480da912df2fa90
a0197938047d63a77c793ca85b7f35cd89ebbd60
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c2400f824209d0c5f54e095cf41738bae089d999
ed1f013086b227471dcb1a17f56c644814fb7706
ceaf5cfb1b79a973724bbe13596213555c5c1893"
"testMissingCredentialStoreKerberosNotEnabled","TRUE","2","assertEquals","{
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = executeCheck(false, false, false, false);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, result.getStatus());
}","testMissingCredentialStoreKerberosNotEnabled()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/KerberosAdminPersistedCredentialCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
296484db88ec8cb8b4753f6e69e23db3975dfc1b
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
9c61584bba46820f506b8cecd480da912df2fa90
a0197938047d63a77c793ca85b7f35cd89ebbd60
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c2400f824209d0c5f54e095cf41738bae089d999
ed1f013086b227471dcb1a17f56c644814fb7706
ceaf5cfb1b79a973724bbe13596213555c5c1893"
"testMissingCredentialKerberosEnabledManagingIdentities","TRUE","3","assertEquals
assertTrue","{
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = executeCheck(true, true, true, false);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
    org.junit.Assert.assertTrue(result.getFailReason().startsWith(""The KDC administrator credential has not been stored in the persisted credential store.""));
}","testMissingCredentialKerberosEnabledManagingIdentities()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/KerberosAdminPersistedCredentialCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
296484db88ec8cb8b4753f6e69e23db3975dfc1b
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
9c61584bba46820f506b8cecd480da912df2fa90
a0197938047d63a77c793ca85b7f35cd89ebbd60
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c2400f824209d0c5f54e095cf41738bae089d999
ed1f013086b227471dcb1a17f56c644814fb7706
ceaf5cfb1b79a973724bbe13596213555c5c1893"
"testMissingCredentialKerberosEnabledNotManagingIdentities","TRUE","2","assertEquals","{
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = executeCheck(true, false, true, false);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, result.getStatus());
}","testMissingCredentialKerberosEnabledNotManagingIdentities()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/KerberosAdminPersistedCredentialCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
296484db88ec8cb8b4753f6e69e23db3975dfc1b
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
9c61584bba46820f506b8cecd480da912df2fa90
a0197938047d63a77c793ca85b7f35cd89ebbd60
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c2400f824209d0c5f54e095cf41738bae089d999
ed1f013086b227471dcb1a17f56c644814fb7706
ceaf5cfb1b79a973724bbe13596213555c5c1893"
"testMissingCredentialKerberosNotEnabled","TRUE","2","assertEquals","{
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = executeCheck(false, true, true, false);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, result.getStatus());
}","testMissingCredentialKerberosNotEnabled()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/KerberosAdminPersistedCredentialCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
296484db88ec8cb8b4753f6e69e23db3975dfc1b
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
9c61584bba46820f506b8cecd480da912df2fa90
a0197938047d63a77c793ca85b7f35cd89ebbd60
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c2400f824209d0c5f54e095cf41738bae089d999
ed1f013086b227471dcb1a17f56c644814fb7706
ceaf5cfb1b79a973724bbe13596213555c5c1893"
"testCredentialsSetKerberosNotEnabled","TRUE","2","assertEquals","{
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = executeCheck(false, false, true, true);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, result.getStatus());
}","testCredentialsSetKerberosNotEnabled()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/KerberosAdminPersistedCredentialCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
296484db88ec8cb8b4753f6e69e23db3975dfc1b
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
9c61584bba46820f506b8cecd480da912df2fa90
a0197938047d63a77c793ca85b7f35cd89ebbd60
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c2400f824209d0c5f54e095cf41738bae089d999
ed1f013086b227471dcb1a17f56c644814fb7706
ceaf5cfb1b79a973724bbe13596213555c5c1893"
"testCredentialsSetKerberosEnabledNotManagingIdentities","TRUE","2","assertEquals","{
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = executeCheck(true, false, true, true);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, result.getStatus());
}","testCredentialsSetKerberosEnabledNotManagingIdentities()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/KerberosAdminPersistedCredentialCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
296484db88ec8cb8b4753f6e69e23db3975dfc1b
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
9c61584bba46820f506b8cecd480da912df2fa90
a0197938047d63a77c793ca85b7f35cd89ebbd60
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c2400f824209d0c5f54e095cf41738bae089d999
ed1f013086b227471dcb1a17f56c644814fb7706
ceaf5cfb1b79a973724bbe13596213555c5c1893"
"testCredentialsSetKerberosEnabledManagingIdentities","TRUE","2","assertEquals","{
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = executeCheck(true, true, true, true);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, result.getStatus());
}","testCredentialsSetKerberosEnabledManagingIdentities()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/KerberosAdminPersistedCredentialCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
296484db88ec8cb8b4753f6e69e23db3975dfc1b
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
9c61584bba46820f506b8cecd480da912df2fa90
a0197938047d63a77c793ca85b7f35cd89ebbd60
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
c2400f824209d0c5f54e095cf41738bae089d999
ed1f013086b227471dcb1a17f56c644814fb7706
ceaf5cfb1b79a973724bbe13596213555c5c1893"
"testPerform","TRUE","7","assertEquals","{
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    final java.util.Map<java.lang.String, org.apache.ambari.server.state.Service> services = new java.util.HashMap<>();
    org.mockito.Mockito.when(cluster.getServices()).thenReturn(services);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(clusters.getCluster(""cluster"")).thenReturn(cluster);
    final org.apache.ambari.server.state.DesiredConfig desiredConfig = org.mockito.Mockito.mock(org.apache.ambari.server.state.DesiredConfig.class);
    org.mockito.Mockito.when(desiredConfig.getTag()).thenReturn(""tag"");
    java.util.Map<java.lang.String, org.apache.ambari.server.state.DesiredConfig> configMap = new java.util.HashMap<>();
    configMap.put(""core-site"", desiredConfig);
    org.mockito.Mockito.when(cluster.getDesiredConfigs()).thenReturn(configMap);
    final org.apache.ambari.server.state.Config config = org.mockito.Mockito.mock(org.apache.ambari.server.state.Config.class);
    org.mockito.Mockito.when(cluster.getConfig(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenReturn(config);
    final java.util.Map<java.lang.String, java.lang.String> properties = new java.util.HashMap<>();
    org.mockito.Mockito.when(config.getProperties()).thenReturn(properties);
    org.mockito.Mockito.when(configuration.getGplLicenseAccepted()).thenReturn(false);
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = lZOCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, result.getStatus());
    properties.put(org.apache.ambari.server.checks.LZOCheck.IO_COMPRESSION_CODECS, ""test,"" + org.apache.ambari.server.checks.LZOCheck.LZO_ENABLE_VALUE);
    result = lZOCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.WARNING, result.getStatus());
    properties.put(org.apache.ambari.server.checks.LZOCheck.IO_COMPRESSION_CODECS, ""test"");
    result = lZOCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, result.getStatus());
    properties.put(org.apache.ambari.server.checks.LZOCheck.LZO_ENABLE_KEY, org.apache.ambari.server.checks.LZOCheck.LZO_ENABLE_VALUE);
    result = lZOCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.WARNING, result.getStatus());
    properties.put(org.apache.ambari.server.checks.LZOCheck.LZO_ENABLE_KEY, org.apache.ambari.server.checks.LZOCheck.LZO_ENABLE_VALUE);
    properties.put(org.apache.ambari.server.checks.LZOCheck.IO_COMPRESSION_CODECS, ""test,"" + org.apache.ambari.server.checks.LZOCheck.LZO_ENABLE_VALUE);
    result = lZOCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.WARNING, result.getStatus());
    org.mockito.Mockito.when(configuration.getGplLicenseAccepted()).thenReturn(true);
    result = lZOCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, result.getStatus());
}","testPerform()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/LZOCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
cadbf3542ce9e8ffad2aa32668518cb07464234d
76349ac20d8955b3f25383b6f4f209a690b38bef
c19f363c877776623fd42d285717e6e95b9036ad
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
b03e8d8e7e178f1e03ccb21ba794fdb3f05db2d1
2a970f8de48656012d7aba364f1066cec31de99b
c58162fe3538f8e4d67ad11da6f7d3c8940012a6
25237d3fe11bc0bd436d20774a4371d7794f7725
5a2dbeab0e7d5601dccad16940b28a6edf19bdc0
53241b914dbb2dc6d967f22cc18ee51217bec18c"
"testSuccessWhenOsExistsBothInTargetAndSource","TRUE","2","assertEquals","{
    sourceStackRepoIs(org.apache.ambari.server.checks.MissingOsInRepoVersionCheckTest.OS_FAMILY_IN_CLUSTER);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = request(targetRepo(org.apache.ambari.server.checks.MissingOsInRepoVersionCheckTest.OS_FAMILY_IN_CLUSTER));
    replayAll();
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = performPrerequisite(request);
    verifyAll();
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
}","testSuccessWhenOsExistsBothInTargetAndSource()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/MissingOsInRepoVersionCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
5b08b29802d334cc921d81ffe7b60456de497271"
"testFailsWhenOsDoesntExistInSource","TRUE","2","assertEquals","{
    sourceStackRepoIs(""different-os"");
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = request(targetRepo(org.apache.ambari.server.checks.MissingOsInRepoVersionCheckTest.OS_FAMILY_IN_CLUSTER));
    replayAll();
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = performPrerequisite(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
    verifyAll();
}","testFailsWhenOsDoesntExistInSource()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/MissingOsInRepoVersionCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
5b08b29802d334cc921d81ffe7b60456de497271"
"testFailsWhenOsDoesntExistInTarget","TRUE","2","assertEquals","{
    sourceStackRepoIs(org.apache.ambari.server.checks.MissingOsInRepoVersionCheckTest.OS_FAMILY_IN_CLUSTER);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = request(targetRepo(""different-os""));
    replayAll();
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = performPrerequisite(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
    verifyAll();
}","testFailsWhenOsDoesntExistInTarget()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/MissingOsInRepoVersionCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
5b08b29802d334cc921d81ffe7b60456de497271"
"testCheckValidClusters","TRUE","2","assertFalse","{
    org.easymock.EasyMockSupport easyMockSupport = new org.easymock.EasyMockSupport();
    final java.sql.Connection mockConnection = easyMockSupport.createNiceMock(java.sql.Connection.class);
    final java.sql.Statement mockStatement = easyMockSupport.createNiceMock(java.sql.Statement.class);
    final java.sql.ResultSet stackResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final org.apache.ambari.server.orm.DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.DBAccessor.class);
    final com.google.inject.persist.PersistService mockPersistService = easyMockSupport.createNiceMock(com.google.inject.persist.PersistService.class);
    final com.google.inject.Injector mockInjector = com.google.inject.Guice.createInjector(new com.google.inject.AbstractModule() {
        @java.lang.Override
        protected void configure() {
            bind(org.apache.ambari.server.orm.DBAccessor.class).toInstance(mockDBDbAccessor);
            bind(com.google.inject.persist.PersistService.class).toInstance(mockPersistService);
        }
    });
    org.apache.ambari.server.checks.MpackInstallChecker mpackInstallChecker = mockInjector.getInstance(org.apache.ambari.server.checks.MpackInstallChecker.class);
    java.util.HashSet<java.lang.String> stacksInMpack = new java.util.HashSet<>();
    stacksInMpack.add(""HDF"");
    EasyMock.expect(mpackInstallChecker.getConnection()).andReturn(mockConnection);
    EasyMock.expect(mockConnection.createStatement(java.sql.ResultSet.TYPE_SCROLL_SENSITIVE, java.sql.ResultSet.CONCUR_UPDATABLE)).andReturn(mockStatement);
    EasyMock.expect(mockStatement.executeQuery(""select c.cluster_name, s.stack_name, s.stack_version from clusters c "" + ""join stack s on c.desired_stack_id = s.stack_id"")).andReturn(stackResultSet);
    EasyMock.expect(stackResultSet.next()).andReturn(true);
    EasyMock.expect(stackResultSet.getString(""stack_name"")).andReturn(""HDF"");
    EasyMock.expect(stackResultSet.getString(""stack_version"")).andReturn(""2.0"");
    EasyMock.expect(stackResultSet.getString(""cluster_name"")).andReturn(""cl1"");
    easyMockSupport.replayAll();
    mpackInstallChecker.checkClusters(stacksInMpack);
    easyMockSupport.verifyAll();
    junit.framework.Assert.assertFalse(""No errors should have been triggered."", mpackInstallChecker.isErrorsFound());
}","testCheckValidClusters()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/MpackInstallCheckerTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
8eead14916ddd86658c488dd07f9432dadcc2331"
"testCheckInvalidClusters","TRUE","2","assertTrue","{
    org.easymock.EasyMockSupport easyMockSupport = new org.easymock.EasyMockSupport();
    final java.sql.Connection mockConnection = easyMockSupport.createNiceMock(java.sql.Connection.class);
    final java.sql.Statement mockStatement = easyMockSupport.createNiceMock(java.sql.Statement.class);
    final java.sql.ResultSet stackResultSet = easyMockSupport.createNiceMock(java.sql.ResultSet.class);
    final org.apache.ambari.server.orm.DBAccessor mockDBDbAccessor = easyMockSupport.createNiceMock(org.apache.ambari.server.orm.DBAccessor.class);
    final com.google.inject.persist.PersistService mockPersistService = easyMockSupport.createNiceMock(com.google.inject.persist.PersistService.class);
    final com.google.inject.Injector mockInjector = com.google.inject.Guice.createInjector(new com.google.inject.AbstractModule() {
        @java.lang.Override
        protected void configure() {
            bind(org.apache.ambari.server.orm.DBAccessor.class).toInstance(mockDBDbAccessor);
            bind(com.google.inject.persist.PersistService.class).toInstance(mockPersistService);
        }
    });
    org.apache.ambari.server.checks.MpackInstallChecker mpackInstallChecker = mockInjector.getInstance(org.apache.ambari.server.checks.MpackInstallChecker.class);
    java.util.HashSet<java.lang.String> stacksInMpack = new java.util.HashSet<>();
    stacksInMpack.add(""HDF"");
    EasyMock.expect(mpackInstallChecker.getConnection()).andReturn(mockConnection);
    EasyMock.expect(mockConnection.createStatement(java.sql.ResultSet.TYPE_SCROLL_SENSITIVE, java.sql.ResultSet.CONCUR_UPDATABLE)).andReturn(mockStatement);
    EasyMock.expect(mockStatement.executeQuery(""select c.cluster_name, s.stack_name, s.stack_version from clusters c "" + ""join stack s on c.desired_stack_id = s.stack_id"")).andReturn(stackResultSet);
    EasyMock.expect(stackResultSet.next()).andReturn(true);
    EasyMock.expect(stackResultSet.getString(""stack_name"")).andReturn(""HDP"");
    EasyMock.expect(stackResultSet.getString(""stack_version"")).andReturn(""2.5"");
    EasyMock.expect(stackResultSet.getString(""cluster_name"")).andReturn(""cl1"");
    easyMockSupport.replayAll();
    mpackInstallChecker.checkClusters(stacksInMpack);
    easyMockSupport.verifyAll();
    junit.framework.Assert.assertTrue(""Installing HDF mpack on HDP cluster with purge option should have triggered an error."", mpackInstallChecker.isErrorsFound());
}","testCheckInvalidClusters()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/MpackInstallCheckerTest.java","e4db57093f4d17497366cdfbf02127f36399bf42
8eead14916ddd86658c488dd07f9432dadcc2331"
"testPerform","TRUE","5","assertEquals
assertTrue","{
    java.util.Set<java.lang.String> failedClasses = com.google.common.collect.Sets.newHashSet(""foo.bar.Baz"", ""foo.bar.Baz2"");
    EasyMock.expect(m_upgradeCheckRegistry.getFailedPluginClassNames()).andReturn(failedClasses).atLeastOnce();
    replayAll();
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(null, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = m_check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.WARNING, check.getStatus());
    java.util.List<java.lang.Object> failedDetails = check.getFailedDetail();
    org.junit.Assert.assertEquals(2, failedDetails.size());
    org.junit.Assert.assertEquals(2, check.getFailedOn().size());
    org.junit.Assert.assertTrue(check.getFailedOn().contains(""Baz""));
    verifyAll();
}","testPerform()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/PluginChecksLoadedCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
cd397373e6d7a0d976ee50e61466cfe184cfb6a7"
"testPerformWithSuccess","TRUE","3","assertEquals
assertTrue","{
    EasyMock.expect(m_upgradeCheckRegistry.getFailedPluginClassNames()).andReturn(new java.util.HashSet<>()).atLeastOnce();
    replayAll();
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(null, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = m_check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(org.apache.commons.lang.StringUtils.isBlank(check.getFailReason()));
    verifyAll();
}","testPerformWithSuccess()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/PluginChecksLoadedCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
cd397373e6d7a0d976ee50e61466cfe184cfb6a7"
"testPerform","TRUE","3","assertEquals","{
    org.mockito.Mockito.when(cluster.getUpgradeInProgress()).thenReturn(null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = puc.perform(checkRequest);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.apache.ambari.server.orm.entities.UpgradeEntity upgradeInProgress = org.mockito.Mockito.mock(org.apache.ambari.server.orm.entities.UpgradeEntity.class);
    org.mockito.Mockito.when(upgradeInProgress.getDirection()).thenReturn(org.apache.ambari.server.stack.upgrade.Direction.UPGRADE);
    org.mockito.Mockito.when(upgradeInProgress.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(upgradeInProgress.getRepositoryVersion()).thenReturn(toRepsitoryVersionEntity);
    org.mockito.Mockito.when(cluster.getUpgradeInProgress()).thenReturn(upgradeInProgress);
    check = puc.perform(checkRequest);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
}","testPerform()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/PreviousUpgradeCompletedTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
d77bde7fde932529dca524bf7112dd64f5c56b4d
522039ebd3f259c2a54db5102108209b94d5d004
f207b95f586a5d218d0059c767825d1baa6bd856
e4db57093f4d17497366cdfbf02127f36399bf42
ba97f134153fdd91e20a96d624314e8cb9e2f8e0"
"testNoMissingServices","TRUE","3","assertEquals
assertTrue","{
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(org.apache.ambari.server.checks.RequiredServicesInRepositoryCheckTest.CLUSTER_NAME, false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = m_requiredServicesCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailedDetail().isEmpty());
}","testNoMissingServices()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/RequiredServicesInRepositoryCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c3a05fe8872398c9362f7e3323f47cdce9a0a471
620543c6c20307b35bd3ff433edf5b5dfdc33599
08bdd803c51b6a1c7c16d7aa04b6207538f2fd9c
c19f363c877776623fd42d285717e6e95b9036ad"
"testMissingRequiredService","TRUE","3","assertEquals
assertFalse","{
    m_missingDependencies.add(""BAR"");
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(org.apache.ambari.server.checks.RequiredServicesInRepositoryCheckTest.CLUSTER_NAME, false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = m_requiredServicesCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
    org.junit.Assert.assertFalse(check.getFailedDetail().isEmpty());
}","testMissingRequiredService()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/RequiredServicesInRepositoryCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c3a05fe8872398c9362f7e3323f47cdce9a0a471
620543c6c20307b35bd3ff433edf5b5dfdc33599
08bdd803c51b6a1c7c16d7aa04b6207538f2fd9c
c19f363c877776623fd42d285717e6e95b9036ad"
"testWithNullCommandDetailAtCommand","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.ServiceComponent serviceComponent = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    Mockito.when(serviceComponent.isVersionAdvertised()).thenReturn(true);
    Mockito.when(service.getMaintenanceState()).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    Mockito.when(service.getServiceComponents()).thenReturn(com.google.common.collect.ImmutableMap.of(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_COMPONENT_NAME, serviceComponent));
    org.apache.ambari.server.orm.entities.ServiceConfigEntity serviceConfigEntity = new org.apache.ambari.server.orm.entities.ServiceConfigEntity();
    serviceConfigEntity.setServiceName(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_NAME);
    serviceConfigEntity.setCreateTimestamp(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CONFIG_CREATE_TIMESTAMP);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO lastServiceCheckDTO1 = new org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO(org.apache.ambari.server.Role.ZOOKEEPER_QUORUM_SERVICE_CHECK.name(), org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_CHECK_START_TIME);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO lastServiceCheckDTO2 = new org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO(org.apache.ambari.server.Role.HDFS_SERVICE_CHECK.name(), org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_CHECK_START_TIME);
    Mockito.when(serviceConfigDAO.getLastServiceConfig(Matchers.eq(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CLUSTER_ID), Matchers.eq(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_NAME))).thenReturn(serviceConfigEntity);
    Mockito.when(hostRoleCommandDAO.getLatestServiceChecksByRole(Matchers.any(java.lang.Long.class))).thenReturn(java.util.Arrays.asList(lastServiceCheckDTO1, lastServiceCheckDTO2));
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CLUSTER_NAME, false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, null, null, null);
    try {
        org.apache.ambari.spi.upgrade.UpgradeCheckResult result = serviceCheckValidityCheck.perform(request);
        org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
    } catch (java.lang.NullPointerException ex) {
        org.junit.Assert.fail(""serviceCheckValidityCheck failed due to null at start_time were not handled"");
    }
}","testWithNullCommandDetailAtCommand()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ServiceCheckValidityCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
5ae98dbeb1ad7752d02235a61d2869be2e284f55
6cee80b1894276608e53f3b0f4711acf23b1a975
ab8d58ba4464791b95b56be75fd44ce9c20349c6
1586a1a9253e5c456161331a5766ed52e250ad99
b3425c9841b4153b1cf3b15dc6f55e67f1754f3b
a45f5427b08fc354e8b54481e7da3d6083112345
cbb1e9059669b2af7d63323321980d8cc0f9203f
9433038b1446c66c0ae704657c62b97839c3877a
25bfb9ec62a44d525a19340d25276f3358f672e5
84ecbb404280b541f15e2b23068ecd449bdd930c
57180810c5963c7f436370ac6e5983cf630e32ac
4ea207290dfa27c18aeb647220ce9ce10fae6668
1b49c6c97f3a38652b9b8231b7c65cec2c2a0a2e"
"testFailWhenServiceWithOutdatedServiceCheckExists","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.ServiceComponent serviceComponent = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    Mockito.when(serviceComponent.isVersionAdvertised()).thenReturn(true);
    Mockito.when(service.getMaintenanceState()).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    Mockito.when(service.getServiceComponents()).thenReturn(com.google.common.collect.ImmutableMap.of(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_COMPONENT_NAME, serviceComponent));
    org.apache.ambari.server.orm.entities.ServiceConfigEntity serviceConfigEntity = new org.apache.ambari.server.orm.entities.ServiceConfigEntity();
    serviceConfigEntity.setServiceName(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_NAME);
    serviceConfigEntity.setCreateTimestamp(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CONFIG_CREATE_TIMESTAMP);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO lastServiceCheckDTO = new org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO(org.apache.ambari.server.Role.HDFS_SERVICE_CHECK.name(), org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_CHECK_START_TIME);
    Mockito.when(serviceConfigDAO.getLastServiceConfig(Matchers.eq(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CLUSTER_ID), Matchers.eq(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_NAME))).thenReturn(serviceConfigEntity);
    Mockito.when(hostRoleCommandDAO.getLatestServiceChecksByRole(Matchers.any(java.lang.Long.class))).thenReturn(java.util.Collections.singletonList(lastServiceCheckDTO));
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CLUSTER_NAME, false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = serviceCheckValidityCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
}","testFailWhenServiceWithOutdatedServiceCheckExists()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ServiceCheckValidityCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
5ae98dbeb1ad7752d02235a61d2869be2e284f55
6cee80b1894276608e53f3b0f4711acf23b1a975
ab8d58ba4464791b95b56be75fd44ce9c20349c6
1586a1a9253e5c456161331a5766ed52e250ad99
b3425c9841b4153b1cf3b15dc6f55e67f1754f3b
a45f5427b08fc354e8b54481e7da3d6083112345
cbb1e9059669b2af7d63323321980d8cc0f9203f
9433038b1446c66c0ae704657c62b97839c3877a
25bfb9ec62a44d525a19340d25276f3358f672e5
84ecbb404280b541f15e2b23068ecd449bdd930c
57180810c5963c7f436370ac6e5983cf630e32ac
4ea207290dfa27c18aeb647220ce9ce10fae6668
1b49c6c97f3a38652b9b8231b7c65cec2c2a0a2e"
"testFailWhenServiceWithNoServiceCheckExists","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.ServiceComponent serviceComponent = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    Mockito.when(serviceComponent.isVersionAdvertised()).thenReturn(true);
    Mockito.when(service.getMaintenanceState()).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    Mockito.when(service.getServiceComponents()).thenReturn(com.google.common.collect.ImmutableMap.of(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_COMPONENT_NAME, serviceComponent));
    org.apache.ambari.server.orm.entities.ServiceConfigEntity serviceConfigEntity = new org.apache.ambari.server.orm.entities.ServiceConfigEntity();
    serviceConfigEntity.setServiceName(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_NAME);
    serviceConfigEntity.setCreateTimestamp(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CONFIG_CREATE_TIMESTAMP);
    Mockito.when(serviceConfigDAO.getLastServiceConfig(Matchers.eq(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CLUSTER_ID), Matchers.eq(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_NAME))).thenReturn(serviceConfigEntity);
    Mockito.when(hostRoleCommandDAO.getLatestServiceChecksByRole(Matchers.any(java.lang.Long.class))).thenReturn(java.util.Collections.<org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO>emptyList());
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CLUSTER_NAME, false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = serviceCheckValidityCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
}","testFailWhenServiceWithNoServiceCheckExists()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ServiceCheckValidityCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
5ae98dbeb1ad7752d02235a61d2869be2e284f55
6cee80b1894276608e53f3b0f4711acf23b1a975
ab8d58ba4464791b95b56be75fd44ce9c20349c6
1586a1a9253e5c456161331a5766ed52e250ad99
b3425c9841b4153b1cf3b15dc6f55e67f1754f3b
a45f5427b08fc354e8b54481e7da3d6083112345
cbb1e9059669b2af7d63323321980d8cc0f9203f
9433038b1446c66c0ae704657c62b97839c3877a
25bfb9ec62a44d525a19340d25276f3358f672e5
84ecbb404280b541f15e2b23068ecd449bdd930c
57180810c5963c7f436370ac6e5983cf630e32ac
4ea207290dfa27c18aeb647220ce9ce10fae6668
1b49c6c97f3a38652b9b8231b7c65cec2c2a0a2e"
"testFailWhenServiceWithOutdatedServiceCheckExistsRepeated","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.ServiceComponent serviceComponent = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    Mockito.when(serviceComponent.isVersionAdvertised()).thenReturn(true);
    Mockito.when(service.getMaintenanceState()).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    Mockito.when(service.getServiceComponents()).thenReturn(com.google.common.collect.ImmutableMap.of(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_COMPONENT_NAME, serviceComponent));
    org.apache.ambari.server.orm.entities.ServiceConfigEntity serviceConfigEntity = new org.apache.ambari.server.orm.entities.ServiceConfigEntity();
    serviceConfigEntity.setServiceName(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_NAME);
    serviceConfigEntity.setCreateTimestamp(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CONFIG_CREATE_TIMESTAMP);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO lastServiceCheckDTO1 = new org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO(org.apache.ambari.server.Role.HDFS_SERVICE_CHECK.name(), org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_CHECK_START_TIME);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO lastServiceCheckDTO2 = new org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO(org.apache.ambari.server.Role.HDFS_SERVICE_CHECK.name(), org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CONFIG_CREATE_TIMESTAMP - 1L);
    Mockito.when(serviceConfigDAO.getLastServiceConfig(Matchers.eq(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CLUSTER_ID), Matchers.eq(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_NAME))).thenReturn(serviceConfigEntity);
    Mockito.when(hostRoleCommandDAO.getLatestServiceChecksByRole(Matchers.any(java.lang.Long.class))).thenReturn(java.util.Arrays.asList(lastServiceCheckDTO1, lastServiceCheckDTO2));
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CLUSTER_NAME, false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = serviceCheckValidityCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
}","testFailWhenServiceWithOutdatedServiceCheckExistsRepeated()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ServiceCheckValidityCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
5ae98dbeb1ad7752d02235a61d2869be2e284f55
6cee80b1894276608e53f3b0f4711acf23b1a975
ab8d58ba4464791b95b56be75fd44ce9c20349c6
1586a1a9253e5c456161331a5766ed52e250ad99
b3425c9841b4153b1cf3b15dc6f55e67f1754f3b
a45f5427b08fc354e8b54481e7da3d6083112345
cbb1e9059669b2af7d63323321980d8cc0f9203f
9433038b1446c66c0ae704657c62b97839c3877a
25bfb9ec62a44d525a19340d25276f3358f672e5
84ecbb404280b541f15e2b23068ecd449bdd930c
57180810c5963c7f436370ac6e5983cf630e32ac
4ea207290dfa27c18aeb647220ce9ce10fae6668
1b49c6c97f3a38652b9b8231b7c65cec2c2a0a2e"
"testPassWhenSimilarlyNamedServiceIsOutdated","TRUE","2","assertEquals","{
    org.apache.ambari.server.state.ServiceComponent serviceComponent = Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    Mockito.when(serviceComponent.isVersionAdvertised()).thenReturn(true);
    Mockito.when(service.getMaintenanceState()).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    Mockito.when(service.getServiceComponents()).thenReturn(com.google.common.collect.ImmutableMap.of(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_COMPONENT_NAME, serviceComponent));
    org.apache.ambari.server.orm.entities.ServiceConfigEntity serviceConfigEntity = new org.apache.ambari.server.orm.entities.ServiceConfigEntity();
    serviceConfigEntity.setServiceName(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_NAME);
    serviceConfigEntity.setCreateTimestamp(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CONFIG_CREATE_TIMESTAMP);
    java.lang.String hdfsRole = org.apache.ambari.server.Role.HDFS_SERVICE_CHECK.name();
    java.lang.String hdfs2Role = hdfsRole.replace(""HDFS"", ""HDFS2"");
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO lastServiceCheckDTO1 = new org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO(hdfsRole, org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_CHECK_START_TIME);
    org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO lastServiceCheckDTO2 = new org.apache.ambari.server.orm.dao.HostRoleCommandDAO.LastServiceCheckDTO(hdfs2Role, org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CONFIG_CREATE_TIMESTAMP - 1L);
    Mockito.when(serviceConfigDAO.getLastServiceConfig(Matchers.eq(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CLUSTER_ID), Matchers.eq(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.SERVICE_NAME))).thenReturn(serviceConfigEntity);
    Mockito.when(hostRoleCommandDAO.getLatestServiceChecksByRole(Matchers.any(java.lang.Long.class))).thenReturn(java.util.Arrays.asList(lastServiceCheckDTO1, lastServiceCheckDTO2));
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(org.apache.ambari.server.checks.ServiceCheckValidityCheckTest.CLUSTER_NAME, false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = serviceCheckValidityCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
}","testPassWhenSimilarlyNamedServiceIsOutdated()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ServiceCheckValidityCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
5ae98dbeb1ad7752d02235a61d2869be2e284f55
6cee80b1894276608e53f3b0f4711acf23b1a975
ab8d58ba4464791b95b56be75fd44ce9c20349c6
1586a1a9253e5c456161331a5766ed52e250ad99
b3425c9841b4153b1cf3b15dc6f55e67f1754f3b
a45f5427b08fc354e8b54481e7da3d6083112345
cbb1e9059669b2af7d63323321980d8cc0f9203f
9433038b1446c66c0ae704657c62b97839c3877a
25bfb9ec62a44d525a19340d25276f3358f672e5
84ecbb404280b541f15e2b23068ecd449bdd930c
57180810c5963c7f436370ac6e5983cf630e32ac
4ea207290dfa27c18aeb647220ce9ce10fae6668
1b49c6c97f3a38652b9b8231b7c65cec2c2a0a2e"
"testPerformPass","TRUE","2","assertEquals","{
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(m_clusters.getCluster(""cluster"")).thenReturn(cluster);
    java.util.Map<java.lang.String, java.lang.String> checkProperties = new java.util.HashMap<>();
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.NO_UPGRADE_SUPPORT_SERVICES_PROPERTY_NAME, ""MyServiceOne, MyServiceTwo"");
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.REMOVED_SERVICES_PROPERTY_NAME, ""RemovedServiceOne, RemovedServiceTwo"");
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.REPLACED_SERVICES_PROPERTY_NAME, ""OldServiceOne, OldServiceTwo"");
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.NEW_SERVICES_PROPERTY_NAME, ""NewServiceOne, NewServiceTwo"");
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, checkProperties, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = m_check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, result.getStatus());
}","testPerformPass()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ServicePresenceCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
45d8baf1ab64c42bba012fef95a74e64063e78f6
3ca41f26205de3ac6c316dde749abcedf4082509
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bb803fb332d8d247e236b5e1b29fe97acfd7a7ec"
"testPerformHasNoUpgradeSupportServices","TRUE","2","assertEquals","{
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(m_clusters.getCluster(""cluster"")).thenReturn(cluster);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Service> services = new java.util.HashMap<>();
    services.put(""ATLAS"", org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class));
    org.mockito.Mockito.when(cluster.getServices()).thenReturn(services);
    java.util.Map<java.lang.String, java.lang.String> checkProperties = new java.util.HashMap<>();
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.NO_UPGRADE_SUPPORT_SERVICES_PROPERTY_NAME, ""Atlas, MyService"");
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, checkProperties, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = m_check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
}","testPerformHasNoUpgradeSupportServices()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ServicePresenceCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
45d8baf1ab64c42bba012fef95a74e64063e78f6
3ca41f26205de3ac6c316dde749abcedf4082509
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bb803fb332d8d247e236b5e1b29fe97acfd7a7ec"
"testPerformHasReplacedServices","TRUE","2","assertEquals","{
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(m_clusters.getCluster(""cluster"")).thenReturn(cluster);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Service> services = new java.util.HashMap<>();
    services.put(""ATLAS"", org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class));
    services.put(""OLDSERVICE"", org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class));
    org.mockito.Mockito.when(cluster.getServices()).thenReturn(services);
    java.util.Map<java.lang.String, java.lang.String> checkProperties = new java.util.HashMap<>();
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.REPLACED_SERVICES_PROPERTY_NAME, ""Atlas, OldService"");
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.NEW_SERVICES_PROPERTY_NAME, ""Atlas2, NewService"");
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, checkProperties, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = m_check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
}","testPerformHasReplacedServices()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ServicePresenceCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
45d8baf1ab64c42bba012fef95a74e64063e78f6
3ca41f26205de3ac6c316dde749abcedf4082509
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bb803fb332d8d247e236b5e1b29fe97acfd7a7ec"
"testPerformHasRemovedServices","TRUE","2","assertEquals","{
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(m_clusters.getCluster(""cluster"")).thenReturn(cluster);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Service> services = new java.util.HashMap<>();
    services.put(""ATLAS"", org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class));
    services.put(""OLDSERVICE"", org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class));
    org.mockito.Mockito.when(cluster.getServices()).thenReturn(services);
    java.util.Map<java.lang.String, java.lang.String> checkProperties = new java.util.HashMap<>();
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.REMOVED_SERVICES_PROPERTY_NAME, ""OldService"");
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, checkProperties, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = m_check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
}","testPerformHasRemovedServices()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ServicePresenceCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
45d8baf1ab64c42bba012fef95a74e64063e78f6
3ca41f26205de3ac6c316dde749abcedf4082509
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bb803fb332d8d247e236b5e1b29fe97acfd7a7ec"
"testPerformMixOne","TRUE","2","assertEquals","{
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(m_clusters.getCluster(""cluster"")).thenReturn(cluster);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Service> services = new java.util.HashMap<>();
    services.put(""ATLAS"", org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class));
    services.put(""REMOVEDSERVICE"", org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class));
    org.mockito.Mockito.when(cluster.getServices()).thenReturn(services);
    java.util.Map<java.lang.String, java.lang.String> checkProperties = new java.util.HashMap<>();
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.NO_UPGRADE_SUPPORT_SERVICES_PROPERTY_NAME, ""MyServiceOne, MyServiceTwo"");
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.REPLACED_SERVICES_PROPERTY_NAME, ""Atlas, OldService"");
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.NEW_SERVICES_PROPERTY_NAME, ""Atlas2, NewService"");
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.REMOVED_SERVICES_PROPERTY_NAME, ""RemovedService"");
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, checkProperties, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = m_check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
}","testPerformMixOne()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ServicePresenceCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
45d8baf1ab64c42bba012fef95a74e64063e78f6
3ca41f26205de3ac6c316dde749abcedf4082509
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bb803fb332d8d247e236b5e1b29fe97acfd7a7ec"
"testPerformMixTwo","TRUE","2","assertEquals","{
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(m_clusters.getCluster(""cluster"")).thenReturn(cluster);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Service> services = new java.util.HashMap<>();
    services.put(""OLDSERVICE"", org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class));
    org.mockito.Mockito.when(cluster.getServices()).thenReturn(services);
    java.util.Map<java.lang.String, java.lang.String> checkProperties = new java.util.HashMap<>();
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.NO_UPGRADE_SUPPORT_SERVICES_PROPERTY_NAME, ""Atlas, MyService"");
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.REPLACED_SERVICES_PROPERTY_NAME, ""OldService"");
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.NEW_SERVICES_PROPERTY_NAME, ""NewService"");
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, checkProperties, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = m_check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
}","testPerformMixTwo()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ServicePresenceCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
45d8baf1ab64c42bba012fef95a74e64063e78f6
3ca41f26205de3ac6c316dde749abcedf4082509
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bb803fb332d8d247e236b5e1b29fe97acfd7a7ec"
"testPerformMixThree","TRUE","2","assertEquals","{
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(m_clusters.getCluster(""cluster"")).thenReturn(cluster);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.Service> services = new java.util.HashMap<>();
    services.put(""ATLAS"", org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class));
    services.put(""HDFS"", org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class));
    services.put(""STORM"", org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class));
    services.put(""RANGER"", org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class));
    org.mockito.Mockito.when(cluster.getServices()).thenReturn(services);
    java.util.Map<java.lang.String, java.lang.String> checkProperties = new java.util.HashMap<>();
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.NO_UPGRADE_SUPPORT_SERVICES_PROPERTY_NAME, ""Atlas, HDFS"");
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.REPLACED_SERVICES_PROPERTY_NAME, ""Storm, Ranger"");
    checkProperties.put(org.apache.ambari.server.checks.ServicePresenceCheck.NEW_SERVICES_PROPERTY_NAME, ""Storm2, Ranger2"");
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, checkProperties, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult result = m_check.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, result.getStatus());
}","testPerformMixThree()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ServicePresenceCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
b145740dced09143d6cbeae5c52a8ec99a30f234
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
45d8baf1ab64c42bba012fef95a74e64063e78f6
3ca41f26205de3ac6c316dde749abcedf4082509
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
bb803fb332d8d247e236b5e1b29fe97acfd7a7ec"
"testPerform","TRUE","3","assertEquals","{
    final org.apache.ambari.server.checks.ServicesMaintenanceModeCheck servicesMaintenanceModeCheck = new org.apache.ambari.server.checks.ServicesMaintenanceModeCheck();
    servicesMaintenanceModeCheck.clustersProvider = new com.google.inject.Provider<org.apache.ambari.server.state.Clusters>() {
        @java.lang.Override
        public org.apache.ambari.server.state.Clusters get() {
            return clusters;
        }
    };
    servicesMaintenanceModeCheck.ambariMetaInfo = new com.google.inject.Provider<org.apache.ambari.server.api.services.AmbariMetaInfo>() {
        @java.lang.Override
        public org.apache.ambari.server.api.services.AmbariMetaInfo get() {
            return org.mockito.Mockito.mock(org.apache.ambari.server.api.services.AmbariMetaInfo.class);
        }
    };
    m_checkHelper.setMetaInfoProvider(servicesMaintenanceModeCheck.ambariMetaInfo);
    servicesMaintenanceModeCheck.checkHelperProvider = new com.google.inject.Provider<org.apache.ambari.server.state.CheckHelper>() {
        @java.lang.Override
        public org.apache.ambari.server.state.CheckHelper get() {
            return m_checkHelper;
        }
    };
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(cluster.getCurrentStackVersion()).thenReturn(new org.apache.ambari.server.state.StackId(""HDP"", ""2.2""));
    org.mockito.Mockito.when(clusters.getCluster(""cluster"")).thenReturn(cluster);
    final org.apache.ambari.server.state.Service service = org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class);
    org.mockito.Mockito.when(cluster.getServices()).thenReturn(java.util.Collections.singletonMap(""service"", service));
    org.mockito.Mockito.when(service.isClientOnlyService()).thenReturn(false);
    org.mockito.Mockito.when(service.getDesiredState()).thenReturn(org.apache.ambari.server.state.State.UNKNOWN);
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = servicesMaintenanceModeCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.mockito.Mockito.when(service.getDesiredState()).thenReturn(org.apache.ambari.server.state.State.STARTED);
    check = servicesMaintenanceModeCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
}","testPerform()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ServicesMaintenanceModeCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c19f363c877776623fd42d285717e6e95b9036ad
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
2a970f8de48656012d7aba364f1066cec31de99b
25237d3fe11bc0bd436d20774a4371d7794f7725
7e8d3dea89a9ff80f7e7e315498f71ff97c521b2
fea608d052a0538b3f7900ca785aa9d378a36dab
5a2dbeab0e7d5601dccad16940b28a6edf19bdc0
53241b914dbb2dc6d967f22cc18ee51217bec18c"
"testPerform","TRUE","20","assertEquals
assertTrue
assertFalse","{
    org.powermock.api.mockito.PowerMockito.mockStatic(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.checks.ServicesUpCheck servicesUpCheck = new org.apache.ambari.server.checks.ServicesUpCheck();
    servicesUpCheck.clustersProvider = new com.google.inject.Provider<org.apache.ambari.server.state.Clusters>() {
        @java.lang.Override
        public org.apache.ambari.server.state.Clusters get() {
            return clusters;
        }
    };
    servicesUpCheck.ambariMetaInfo = new com.google.inject.Provider<org.apache.ambari.server.api.services.AmbariMetaInfo>() {
        @java.lang.Override
        public org.apache.ambari.server.api.services.AmbariMetaInfo get() {
            return ambariMetaInfo;
        }
    };
    servicesUpCheck.checkHelperProvider = new com.google.inject.Provider<org.apache.ambari.server.state.CheckHelper>() {
        @java.lang.Override
        public org.apache.ambari.server.state.CheckHelper get() {
            org.apache.ambari.server.checks.MockCheckHelper mockCheckHelper = new org.apache.ambari.server.checks.MockCheckHelper();
            mockCheckHelper.m_clusters = clusters;
            mockCheckHelper.m_repositoryVersionDAO = m_repositoryVersionDAO;
            mockCheckHelper.setMetaInfoProvider(servicesUpCheck.ambariMetaInfo);
            return mockCheckHelper;
        }
    };
    org.apache.ambari.server.state.Host host1 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    org.apache.ambari.server.state.Host host2 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    org.apache.ambari.server.state.Host host3 = org.mockito.Mockito.mock(org.apache.ambari.server.state.Host.class);
    org.mockito.Mockito.when(host1.getMaintenanceState(org.mockito.Mockito.anyLong())).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host2.getMaintenanceState(org.mockito.Mockito.anyLong())).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host3.getMaintenanceState(org.mockito.Mockito.anyLong())).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    final org.apache.ambari.server.state.Cluster cluster = org.mockito.Mockito.mock(org.apache.ambari.server.state.Cluster.class);
    org.mockito.Mockito.when(cluster.getClusterId()).thenReturn(1L);
    org.mockito.Mockito.when(cluster.getCurrentStackVersion()).thenReturn(new org.apache.ambari.server.state.StackId(""HDP"", ""2.2""));
    org.mockito.Mockito.when(clusters.getCluster(""cluster"")).thenReturn(cluster);
    org.mockito.Mockito.when(clusters.getHostById(java.lang.Long.valueOf(1))).thenReturn(host1);
    org.mockito.Mockito.when(clusters.getHostById(java.lang.Long.valueOf(2))).thenReturn(host2);
    org.mockito.Mockito.when(clusters.getHostById(java.lang.Long.valueOf(3))).thenReturn(host3);
    final org.apache.ambari.server.state.Service hdfsService = org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class);
    final org.apache.ambari.server.state.Service tezService = org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class);
    final org.apache.ambari.server.state.Service amsService = org.mockito.Mockito.mock(org.apache.ambari.server.state.Service.class);
    m_services.put(""HDFS"", hdfsService);
    m_services.put(""TEZ"", tezService);
    m_services.put(""AMBARI_METRICS"", amsService);
    org.mockito.Mockito.when(hdfsService.getName()).thenReturn(""HDFS"");
    org.mockito.Mockito.when(tezService.getName()).thenReturn(""TEZ"");
    org.mockito.Mockito.when(amsService.getName()).thenReturn(""AMBARI_METRICS"");
    org.apache.ambari.server.state.StackId stackId = new org.apache.ambari.server.state.StackId(""HDP"", ""2.2"");
    org.mockito.Mockito.when(hdfsService.getDesiredStackId()).thenReturn(stackId);
    org.mockito.Mockito.when(tezService.getDesiredStackId()).thenReturn(stackId);
    org.mockito.Mockito.when(amsService.getDesiredStackId()).thenReturn(stackId);
    org.mockito.Mockito.when(hdfsService.isClientOnlyService()).thenReturn(false);
    org.mockito.Mockito.when(tezService.isClientOnlyService()).thenReturn(true);
    org.mockito.Mockito.when(amsService.isClientOnlyService()).thenReturn(false);
    org.mockito.Mockito.when(cluster.getServices()).thenReturn(m_services);
    org.mockito.Mockito.when(cluster.getService(""HDFS"")).thenReturn(hdfsService);
    org.mockito.Mockito.when(cluster.getService(""TEZ"")).thenReturn(tezService);
    org.mockito.Mockito.when(cluster.getService(""AMBARI_METRICS"")).thenReturn(amsService);
    org.mockito.Mockito.when(ambariMetaInfo.getComponent(org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString(), org.mockito.Mockito.anyString())).thenAnswer(new org.mockito.stubbing.Answer<org.apache.ambari.server.state.ComponentInfo>() {
        @java.lang.Override
        public org.apache.ambari.server.state.ComponentInfo answer(org.mockito.invocation.InvocationOnMock invocation) throws java.lang.Throwable {
            org.apache.ambari.server.state.ComponentInfo anyInfo = org.mockito.Mockito.mock(org.apache.ambari.server.state.ComponentInfo.class);
            if ((invocation.getArguments().length > 3) && ""DATANODE"".equals(invocation.getArguments()[3])) {
                org.mockito.Mockito.when(anyInfo.getCardinality()).thenReturn(""1+"");
            } else {
                org.mockito.Mockito.when(anyInfo.getCardinality()).thenReturn(null);
            }
            return anyInfo;
        }
    });
    java.util.Map<java.lang.String, org.apache.ambari.server.state.ServiceComponent> hdfsComponents = new java.util.HashMap<>();
    org.apache.ambari.server.state.ServiceComponent nameNode = org.mockito.Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.mockito.Mockito.when(nameNode.getName()).thenReturn(""NAMENODE"");
    org.mockito.Mockito.when(nameNode.isClientComponent()).thenReturn(false);
    org.mockito.Mockito.when(nameNode.isVersionAdvertised()).thenReturn(true);
    org.mockito.Mockito.when(nameNode.isMasterComponent()).thenReturn(true);
    org.apache.ambari.server.state.ServiceComponent dataNode = org.mockito.Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.mockito.Mockito.when(dataNode.getName()).thenReturn(""DATANODE"");
    org.mockito.Mockito.when(dataNode.isClientComponent()).thenReturn(false);
    org.mockito.Mockito.when(dataNode.isVersionAdvertised()).thenReturn(true);
    org.mockito.Mockito.when(dataNode.isMasterComponent()).thenReturn(false);
    org.apache.ambari.server.state.ServiceComponent zkfc = org.mockito.Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.mockito.Mockito.when(zkfc.getName()).thenReturn(""ZKFC"");
    org.mockito.Mockito.when(zkfc.isClientComponent()).thenReturn(false);
    org.mockito.Mockito.when(zkfc.isVersionAdvertised()).thenReturn(false);
    org.mockito.Mockito.when(zkfc.isMasterComponent()).thenReturn(false);
    hdfsComponents.put(""NAMENODE"", nameNode);
    hdfsComponents.put(""DATANODE"", dataNode);
    hdfsComponents.put(""ZKFC"", zkfc);
    org.mockito.Mockito.when(hdfsService.getServiceComponents()).thenReturn(hdfsComponents);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.ServiceComponent> tezComponents = new java.util.HashMap<>();
    org.apache.ambari.server.state.ServiceComponent tezClient = org.mockito.Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.mockito.Mockito.when(tezClient.getName()).thenReturn(""TEZ_CLIENT"");
    org.mockito.Mockito.when(tezClient.isClientComponent()).thenReturn(true);
    org.mockito.Mockito.when(tezClient.isVersionAdvertised()).thenReturn(true);
    tezComponents.put(""TEZ_CLIENT"", tezClient);
    org.mockito.Mockito.when(tezService.getServiceComponents()).thenReturn(tezComponents);
    java.util.Map<java.lang.String, org.apache.ambari.server.state.ServiceComponent> amsComponents = new java.util.HashMap<>();
    org.apache.ambari.server.state.ServiceComponent metricsCollector = org.mockito.Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.mockito.Mockito.when(metricsCollector.getName()).thenReturn(""METRICS_COLLECTOR"");
    org.mockito.Mockito.when(metricsCollector.isClientComponent()).thenReturn(false);
    org.mockito.Mockito.when(metricsCollector.isVersionAdvertised()).thenReturn(false);
    org.apache.ambari.server.state.ServiceComponent metricsMonitor = org.mockito.Mockito.mock(org.apache.ambari.server.state.ServiceComponent.class);
    org.mockito.Mockito.when(metricsMonitor.getName()).thenReturn(""METRICS_MONITOR"");
    org.mockito.Mockito.when(metricsMonitor.isClientComponent()).thenReturn(false);
    org.mockito.Mockito.when(metricsMonitor.isVersionAdvertised()).thenReturn(false);
    amsComponents.put(""METRICS_COLLECTOR"", metricsCollector);
    amsComponents.put(""METRICS_MONITOR"", metricsMonitor);
    org.mockito.Mockito.when(amsService.getServiceComponents()).thenReturn(amsComponents);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsNameNode = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsDataNode1 = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsDataNode2 = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsDataNode3 = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsZKFC = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsTezClient = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsMetricsCollector = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    final org.apache.ambari.server.orm.models.HostComponentSummary hcsMetricsMonitor = org.mockito.Mockito.mock(org.apache.ambari.server.orm.models.HostComponentSummary.class);
    org.mockito.Mockito.when(hcsNameNode.getHostId()).thenReturn(java.lang.Long.valueOf(1));
    org.mockito.Mockito.when(hcsDataNode1.getHostId()).thenReturn(java.lang.Long.valueOf(1));
    org.mockito.Mockito.when(hcsDataNode2.getHostId()).thenReturn(java.lang.Long.valueOf(2));
    org.mockito.Mockito.when(hcsDataNode3.getHostId()).thenReturn(java.lang.Long.valueOf(3));
    org.mockito.Mockito.when(hcsZKFC.getHostId()).thenReturn(java.lang.Long.valueOf(1));
    org.mockito.Mockito.when(hcsTezClient.getHostId()).thenReturn(java.lang.Long.valueOf(2));
    org.mockito.Mockito.when(hcsMetricsCollector.getHostId()).thenReturn(java.lang.Long.valueOf(1));
    org.mockito.Mockito.when(hcsMetricsMonitor.getHostId()).thenReturn(java.lang.Long.valueOf(1));
    java.util.List<org.apache.ambari.server.orm.models.HostComponentSummary> allHostComponentSummaries = new java.util.ArrayList<>();
    allHostComponentSummaries.add(hcsNameNode);
    allHostComponentSummaries.add(hcsDataNode1);
    allHostComponentSummaries.add(hcsDataNode2);
    allHostComponentSummaries.add(hcsDataNode3);
    allHostComponentSummaries.add(hcsZKFC);
    allHostComponentSummaries.add(hcsTezClient);
    allHostComponentSummaries.add(hcsMetricsCollector);
    allHostComponentSummaries.add(hcsMetricsMonitor);
    org.mockito.Mockito.when(org.apache.ambari.server.orm.models.HostComponentSummary.getHostComponentSummaries(""HDFS"", ""NAMENODE"")).thenReturn(java.util.Arrays.asList(hcsNameNode));
    org.mockito.Mockito.when(org.apache.ambari.server.orm.models.HostComponentSummary.getHostComponentSummaries(""HDFS"", ""DATANODE"")).thenReturn(java.util.Arrays.asList(hcsDataNode1, hcsDataNode2, hcsDataNode3));
    org.mockito.Mockito.when(org.apache.ambari.server.orm.models.HostComponentSummary.getHostComponentSummaries(""HDFS"", ""ZKFC"")).thenReturn(java.util.Arrays.asList(hcsZKFC));
    org.mockito.Mockito.when(org.apache.ambari.server.orm.models.HostComponentSummary.getHostComponentSummaries(""TEZ"", ""TEZ_CLIENT"")).thenReturn(java.util.Arrays.asList(hcsTezClient));
    org.mockito.Mockito.when(org.apache.ambari.server.orm.models.HostComponentSummary.getHostComponentSummaries(""AMBARI_METRICS"", ""METRICS_COLLECTOR"")).thenReturn(java.util.Arrays.asList(hcsMetricsCollector));
    org.mockito.Mockito.when(org.apache.ambari.server.orm.models.HostComponentSummary.getHostComponentSummaries(""AMBARI_METRICS"", ""METRICS_MONITOR"")).thenReturn(java.util.Arrays.asList(hcsMetricsMonitor));
    for (org.apache.ambari.server.orm.models.HostComponentSummary hcs : allHostComponentSummaries) {
        org.mockito.Mockito.when(hcs.getDesiredState()).thenReturn(org.apache.ambari.server.state.State.INSTALLED);
        org.mockito.Mockito.when(hcs.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.STARTED);
    }
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(""cluster"", false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, m_repositoryVersion, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = servicesUpCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailedDetail().isEmpty());
    org.mockito.Mockito.when(hcsNameNode.getDesiredState()).thenReturn(org.apache.ambari.server.state.State.STARTED);
    org.mockito.Mockito.when(hcsDataNode1.getDesiredState()).thenReturn(org.apache.ambari.server.state.State.STARTED);
    check = new org.apache.ambari.spi.upgrade.UpgradeCheckResult(null, null);
    check = servicesUpCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailedDetail().isEmpty());
    org.mockito.Mockito.when(hcsZKFC.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALLED);
    org.mockito.Mockito.when(hcsMetricsCollector.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALLED);
    org.mockito.Mockito.when(hcsMetricsMonitor.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALLED);
    check = new org.apache.ambari.spi.upgrade.UpgradeCheckResult(null, null);
    check = servicesUpCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailedDetail().isEmpty());
    org.mockito.Mockito.when(hcsNameNode.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALLED);
    org.mockito.Mockito.when(hcsDataNode1.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALLED);
    check = new org.apache.ambari.spi.upgrade.UpgradeCheckResult(null, null);
    check = servicesUpCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
    org.junit.Assert.assertFalse(check.getFailedDetail().isEmpty());
    org.mockito.Mockito.when(hcsNameNode.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.STARTED);
    org.mockito.Mockito.when(hcsDataNode1.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALLED);
    check = new org.apache.ambari.spi.upgrade.UpgradeCheckResult(null, null);
    check = servicesUpCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailedDetail().isEmpty());
    org.mockito.Mockito.when(hcsNameNode.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.STARTED);
    org.mockito.Mockito.when(hcsDataNode1.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALLED);
    org.mockito.Mockito.when(hcsDataNode2.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALLED);
    check = new org.apache.ambari.spi.upgrade.UpgradeCheckResult(null, null);
    check = servicesUpCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailReason().indexOf(""50%"") > (-1));
    org.junit.Assert.assertFalse(check.getFailedDetail().isEmpty());
    org.mockito.Mockito.when(host1.getMaintenanceState(org.mockito.Mockito.anyLong())).thenReturn(org.apache.ambari.server.state.MaintenanceState.ON);
    org.mockito.Mockito.when(host3.getMaintenanceState(org.mockito.Mockito.anyLong())).thenReturn(org.apache.ambari.server.state.MaintenanceState.ON);
    check = new org.apache.ambari.spi.upgrade.UpgradeCheckResult(null, null);
    check = servicesUpCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
    org.junit.Assert.assertTrue(check.getFailedDetail().isEmpty());
    org.mockito.Mockito.when(hcsNameNode.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.INSTALLED);
    org.mockito.Mockito.when(hcsDataNode1.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.STARTED);
    org.mockito.Mockito.when(hcsDataNode2.getCurrentState()).thenReturn(org.apache.ambari.server.state.State.STARTED);
    org.mockito.Mockito.when(host1.getMaintenanceState(org.mockito.Mockito.anyLong())).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    org.mockito.Mockito.when(host3.getMaintenanceState(org.mockito.Mockito.anyLong())).thenReturn(org.apache.ambari.server.state.MaintenanceState.OFF);
    check = new org.apache.ambari.spi.upgrade.UpgradeCheckResult(null, null);
    check = servicesUpCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
    org.junit.Assert.assertFalse(check.getFailedDetail().isEmpty());
    org.mockito.Mockito.when(host1.getMaintenanceState(org.mockito.Mockito.anyLong())).thenReturn(org.apache.ambari.server.state.MaintenanceState.ON);
    check = new org.apache.ambari.spi.upgrade.UpgradeCheckResult(null, null);
    check = servicesUpCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.FAIL, check.getStatus());
    org.junit.Assert.assertFalse(check.getFailedDetail().isEmpty());
}","testPerform()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/ServicesUpCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
26bb2ebc342c9f9b56088280e2f852eb1cfa1fa4
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c3a05fe8872398c9362f7e3323f47cdce9a0a471
c19f363c877776623fd42d285717e6e95b9036ad
108ad9b4a0d154abcfff9e4fe5fd965ae81d62e5
d77bde7fde932529dca524bf7112dd64f5c56b4d
a45f5427b08fc354e8b54481e7da3d6083112345
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
2491dee6f925f64f0df3aa84813d5a4614e33aa8
2a970f8de48656012d7aba364f1066cec31de99b
520e41f8c4a51cfc238f9cac7619e78cff191ad0
25237d3fe11bc0bd436d20774a4371d7794f7725
35dc8d8588f3b3f0d292e66eda270003fc03ae56
a394f2f7a1277da9abe576d1bf3f5ec6ba2b0c57
fea608d052a0538b3f7900ca785aa9d378a36dab
5a2dbeab0e7d5601dccad16940b28a6edf19bdc0
53241b914dbb2dc6d967f22cc18ee51217bec18c"
"testUpgradeOrder","TRUE","6","assertEquals
assertTrue","{
    java.lang.String sourceResourceDirectory = (((""src"" + java.io.File.separator) + ""test"") + java.io.File.separator) + ""resources"";
    java.util.Properties properties = new java.util.Properties();
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.SERVER_PERSISTENCE_TYPE.getKey(), ""in-memory"");
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.OS_VERSION.getKey(), ""centos6"");
    properties.setProperty(org.apache.ambari.server.configuration.Configuration.SHARED_RESOURCES_DIR.getKey(), sourceResourceDirectory);
    com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new org.apache.ambari.server.controller.ControllerModule(properties), new org.apache.ambari.server.audit.AuditLoggerModule(), new org.apache.ambari.server.ldap.LdapModule());
    org.apache.ambari.server.checks.UpgradeCheckRegistry registry = injector.getInstance(org.apache.ambari.server.checks.UpgradeCheckRegistry.class);
    org.apache.ambari.server.checks.UpgradeCheckRegistry registry2 = injector.getInstance(org.apache.ambari.server.checks.UpgradeCheckRegistry.class);
    org.junit.Assert.assertEquals(registry, registry2);
    java.util.List<org.apache.ambari.spi.upgrade.UpgradeCheck> checks = registry.getBuiltInUpgradeChecks();
    org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider scanner = new org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider(false);
    org.springframework.core.type.filter.AssignableTypeFilter filter = new org.springframework.core.type.filter.AssignableTypeFilter(org.apache.ambari.spi.upgrade.UpgradeCheck.class);
    scanner.addIncludeFilter(filter);
    java.util.Set<org.springframework.beans.factory.config.BeanDefinition> beanDefinitions = scanner.findCandidateComponents(""org.apache.ambari.server.checks"");
    org.junit.Assert.assertTrue(checks.size() > 0);
    org.junit.Assert.assertTrue(beanDefinitions.size() > 0);
    org.junit.Assert.assertEquals(beanDefinitions.size(), checks.size());
    org.apache.ambari.spi.upgrade.UpgradeCheck lastCheck = null;
    for (org.apache.ambari.spi.upgrade.UpgradeCheck check : checks) {
        org.apache.ambari.spi.upgrade.UpgradeCheckGroup group = org.apache.ambari.spi.upgrade.UpgradeCheckGroup.DEFAULT;
        org.apache.ambari.spi.upgrade.UpgradeCheckGroup lastGroup = org.apache.ambari.spi.upgrade.UpgradeCheckGroup.DEFAULT;
        if (null != lastCheck) {
            org.apache.ambari.annotations.UpgradeCheckInfo annotation = check.getClass().getAnnotation(org.apache.ambari.annotations.UpgradeCheckInfo.class);
            org.apache.ambari.annotations.UpgradeCheckInfo lastAnnotation = lastCheck.getClass().getAnnotation(org.apache.ambari.annotations.UpgradeCheckInfo.class);
            if ((null != annotation) && (null != lastAnnotation)) {
                group = annotation.group();
                lastGroup = lastAnnotation.group();
                org.junit.Assert.assertTrue(lastGroup.getOrder().compareTo(group.getOrder()) <= 0);
            }
        }
        lastCheck = check;
    }
}","testUpgradeOrder()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/UpgradeCheckOrderTest.java","6f2622c76d63a49f9bf06cb062b939836a8a96b7
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
6b7a7a706d6e4d8c4a5e0300666e56f6704eb00a
c2409e740f84d6f051659b3b36d853902e698a60
26425953175f1167a7040b5c37985eee8724bb28
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
46a34ccdeeeeabe0ad4172e94a63c9b077e17861
77ea2eba044f7ca9761e6e77799751d1b3a9f263
f4725228e79416712986d0c2de1cb251c47e80b0"
"testRequired","TRUE","5","assertTrue
assertFalse","{
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest rolling = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(null, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest express = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(null, org.apache.ambari.spi.upgrade.UpgradeType.NON_ROLLING, null, null, null);
    org.apache.ambari.server.checks.UpgradeTypeQualification rollingQualification = new org.apache.ambari.server.checks.UpgradeTypeQualification(org.apache.ambari.server.checks.UpgradeTypeQualificationTest.RollingTestCheckImpl.class);
    junit.framework.Assert.assertTrue(rollingQualification.isApplicable(rolling));
    junit.framework.Assert.assertFalse(rollingQualification.isApplicable(express));
    org.apache.ambari.server.checks.UpgradeTypeQualification notRequiredQualification = new org.apache.ambari.server.checks.UpgradeTypeQualification(org.apache.ambari.server.checks.UpgradeTypeQualificationTest.NotRequiredCheckTest.class);
    junit.framework.Assert.assertTrue(notRequiredQualification.isApplicable(rolling));
    junit.framework.Assert.assertTrue(notRequiredQualification.isApplicable(express));
}","testRequired()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/UpgradeTypeQualificationTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
6f2622c76d63a49f9bf06cb062b939836a8a96b7"
"testWarningWhenHostWithVersionMismatchExists","TRUE","2","assertEquals","{
    Mockito.when(firstServiceComponentHosts.get(org.apache.ambari.server.checks.VersionMismatchCheckTest.FIRST_SERVICE_COMPONENT_HOST_NAME).getUpgradeState()).thenReturn(org.apache.ambari.server.state.UpgradeState.VERSION_MISMATCH);
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(org.apache.ambari.server.checks.VersionMismatchCheckTest.CLUSTER_NAME, false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = versionMismatchCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.WARNING, check.getStatus());
}","testWarningWhenHostWithVersionMismatchExists()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/VersionMismatchCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
7ee9fa8759818d80e15783afda1aa2e5c25ee802
c4e5cdf5c68563f3b8a5c7e0d1043eddfc236ae0"
"testWarningWhenHostWithVersionMismatchDoesNotExist","TRUE","2","assertEquals","{
    Mockito.when(firstServiceComponentHosts.get(org.apache.ambari.server.checks.VersionMismatchCheckTest.FIRST_SERVICE_COMPONENT_HOST_NAME).getUpgradeState()).thenReturn(org.apache.ambari.server.state.UpgradeState.IN_PROGRESS);
    org.apache.ambari.spi.ClusterInformation clusterInformation = new org.apache.ambari.spi.ClusterInformation(org.apache.ambari.server.checks.VersionMismatchCheckTest.CLUSTER_NAME, false, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckRequest request = new org.apache.ambari.spi.upgrade.UpgradeCheckRequest(clusterInformation, org.apache.ambari.spi.upgrade.UpgradeType.ROLLING, null, null, null);
    org.apache.ambari.spi.upgrade.UpgradeCheckResult check = versionMismatchCheck.perform(request);
    org.junit.Assert.assertEquals(org.apache.ambari.spi.upgrade.UpgradeCheckStatus.PASS, check.getStatus());
}","testWarningWhenHostWithVersionMismatchDoesNotExist()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/checks/VersionMismatchCheckTest.java","0e97706c7b5b4f9b43d9bee961ce7b4a735eb638
d7ce1ef3668d551061fa0539fda7befdb6cb1b43
25f6e0cdf8535a1491b2efe97c5ed0b524226b6b
c2409e740f84d6f051659b3b36d853902e698a60
e4db57093f4d17497366cdfbf02127f36399bf42
7ee9fa8759818d80e15783afda1aa2e5c25ee802
c4e5cdf5c68563f3b8a5c7e0d1043eddfc236ae0"
"testIOCContext","TRUE","2","assertNotNull","{
    org.apache.ambari.server.cleanup.CleanupServiceImpl cleanupService = org.apache.ambari.server.cleanup.CleanupServiceFunctionalTest.injector.getInstance(org.apache.ambari.server.cleanup.CleanupServiceImpl.class);
    junit.framework.Assert.assertNotNull(""The cleanupService instance should be present in the IoC context"", cleanupService);
}","testIOCContext()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/cleanup/CleanupServiceFunctionalTest.java","edce0b1173b6629e50b053be140490fa288ec361
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
271412882b03950b66bf04e69c92731e6fbf9421
cc4c739845f587cbbe8b746f537ba1a149270da5
c871f286d90119b2b606b266204ba3e7eae08f8a"
"testRunCleanup","FALSE","0","None","{
    org.apache.ambari.server.cleanup.CleanupService<org.apache.ambari.server.cleanup.TimeBasedCleanupPolicy> cleanupService = org.apache.ambari.server.cleanup.CleanupServiceFunctionalTest.injector.getInstance(org.apache.ambari.server.cleanup.CleanupServiceImpl.class);
    org.apache.ambari.server.cleanup.TimeBasedCleanupPolicy cleanupPolicy = new org.apache.ambari.server.cleanup.TimeBasedCleanupPolicy(""cluster-1"", 1455891250758L);
    cleanupService.cleanup(cleanupPolicy);
}","testRunCleanup()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/cleanup/CleanupServiceFunctionalTest.java","edce0b1173b6629e50b053be140490fa288ec361
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
271412882b03950b66bf04e69c92731e6fbf9421
cc4c739845f587cbbe8b746f537ba1a149270da5
c871f286d90119b2b606b266204ba3e7eae08f8a"
"testServicesShouldBeInSingletonScope","TRUE","2","assertEquals","{
    org.apache.ambari.server.cleanup.CleanupService cleanupService1 = org.apache.ambari.server.cleanup.CleanupServiceFunctionalTest.injector.getInstance(org.apache.ambari.server.cleanup.CleanupServiceImpl.class);
    org.apache.ambari.server.cleanup.CleanupService cleanupService2 = org.apache.ambari.server.cleanup.CleanupServiceFunctionalTest.injector.getInstance(org.apache.ambari.server.cleanup.CleanupServiceImpl.class);
    junit.framework.Assert.assertEquals(""The ChainedCleanupService is not in Singleton scope!"", cleanupService1, cleanupService2);
}","testServicesShouldBeInSingletonScope()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/cleanup/CleanupServiceFunctionalTest.java","edce0b1173b6629e50b053be140490fa288ec361
b1a63404a0efb7fabce77f7a87df1033f8cf2fe0
271412882b03950b66bf04e69c92731e6fbf9421
cc4c739845f587cbbe8b746f537ba1a149270da5
c871f286d90119b2b606b266204ba3e7eae08f8a"
"testShouldDaosBeCalledWithTheCleanupPolicy","TRUE","4","assertNotNull
assertEquals","{
    cleanables = new java.util.HashSet<>();
    cleanables.add(cleanableDao);
    EasyMock.expect(cleanableDao.cleanup(EasyMock.capture(timeBasedCleanupPolicyCapture))).andReturn(2L);
    EasyMock.replay(cleanableDao);
    cleanupServiceImpl = new org.apache.ambari.server.cleanup.CleanupServiceImpl(cleanables);
    cleanupServiceImpl.cleanup(cleanupPolicy);
    junit.framework.Assert.assertNotNull(""The argument is null"", timeBasedCleanupPolicyCapture.getValue());
    junit.framework.Assert.assertEquals(""The cluster name is wrong!"", timeBasedCleanupPolicyCapture.getValue().getClusterName(), org.apache.ambari.server.cleanup.CleanupServiceImplTest.CLUSTER_NAME);
    junit.framework.Assert.assertEquals(""The to date is wrong!"", timeBasedCleanupPolicyCapture.getValue().getToDateInMillis(), org.apache.ambari.server.cleanup.CleanupServiceImplTest.FROM_DATE_TIMESTAMP);
}","testShouldDaosBeCalledWithTheCleanupPolicy()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/cleanup/CleanupServiceImplTest.java","834cb6655b4b56846f41141c5c55aa70c1eb5cf4
c2409e740f84d6f051659b3b36d853902e698a60
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
271412882b03950b66bf04e69c92731e6fbf9421
cc4c739845f587cbbe8b746f537ba1a149270da5
c871f286d90119b2b606b266204ba3e7eae08f8a"
"testAffectedRowsNoError","TRUE","3","assertEquals","{
    cleanables = new java.util.HashSet<>();
    cleanables.add(cleanableDao);
    EasyMock.expect(cleanableDao.cleanup(cleanupPolicy)).andReturn(2L);
    EasyMock.replay(cleanableDao);
    cleanupServiceImpl = new org.apache.ambari.server.cleanup.CleanupServiceImpl(cleanables);
    org.apache.ambari.server.cleanup.CleanupService.CleanupResult res = cleanupServiceImpl.cleanup(cleanupPolicy);
    junit.framework.Assert.assertEquals(""The affected rows count is wrong"", 2L, res.getAffectedRows());
    junit.framework.Assert.assertEquals(""The error count is wrong"", 0L, res.getErrorCount());
}","testAffectedRowsNoError()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/cleanup/CleanupServiceImplTest.java","834cb6655b4b56846f41141c5c55aa70c1eb5cf4
c2409e740f84d6f051659b3b36d853902e698a60
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
271412882b03950b66bf04e69c92731e6fbf9421
cc4c739845f587cbbe8b746f537ba1a149270da5
c871f286d90119b2b606b266204ba3e7eae08f8a"
"testAffectedRowsWithErrors","TRUE","3","assertEquals","{
    cleanables = new java.util.HashSet<>();
    cleanables.add(cleanableDao);
    EasyMock.expect(cleanableDao.cleanup(cleanupPolicy)).andThrow(new java.lang.RuntimeException());
    EasyMock.replay(cleanableDao);
    cleanupServiceImpl = new org.apache.ambari.server.cleanup.CleanupServiceImpl(cleanables);
    org.apache.ambari.server.cleanup.CleanupService.CleanupResult res = cleanupServiceImpl.cleanup(cleanupPolicy);
    junit.framework.Assert.assertEquals(""The affected rows count is wrong"", 0L, res.getAffectedRows());
    junit.framework.Assert.assertEquals(""The error count is wrong"", 1L, res.getErrorCount());
}","testAffectedRowsWithErrors()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/cleanup/CleanupServiceImplTest.java","834cb6655b4b56846f41141c5c55aa70c1eb5cf4
c2409e740f84d6f051659b3b36d853902e698a60
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
271412882b03950b66bf04e69c92731e6fbf9421
cc4c739845f587cbbe8b746f537ba1a149270da5
c871f286d90119b2b606b266204ba3e7eae08f8a"
"toMap","TRUE","3","assertNull
assertEquals","{
    junit.framework.Assert.assertNull(org.apache.ambari.server.collections.PredicateUtils.toMap(null));
    junit.framework.Assert.assertEquals(createMap(), org.apache.ambari.server.collections.PredicateUtils.toMap(createPredicate()));
}","toMap()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/PredicateUtilsTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"fromMap","FALSE","0","None","{
    verifyPredicate(org.apache.ambari.server.collections.PredicateUtils.fromMap(createMap()));
}","fromMap()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/PredicateUtilsTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"toJSON","TRUE","3","assertNull
assertEquals","{
    junit.framework.Assert.assertNull(org.apache.ambari.server.collections.PredicateUtils.toJSON(null));
    junit.framework.Assert.assertEquals(createJSON(), org.apache.ambari.server.collections.PredicateUtils.toJSON(createPredicate()));
}","toJSON()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/PredicateUtilsTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"fromJSON","FALSE","0","None","{
    verifyPredicate(org.apache.ambari.server.collections.PredicateUtils.fromJSON(createJSON()));
}","fromJSON()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/PredicateUtilsTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testEvaluate","TRUE","2","assertArrayEquals","{
    org.apache.ambari.server.collections.Predicate mockPredicate1 = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate1.evaluate(""context"")).andReturn(true).times(1);
    EasyMock.expect(mockPredicate1.evaluate(""context"")).andReturn(false).times(1);
    EasyMock.expect(mockPredicate1.evaluate(""context"")).andReturn(true).times(1);
    org.apache.ambari.server.collections.Predicate mockPredicate2 = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate2.evaluate(""context"")).andReturn(true).times(1);
    EasyMock.expect(mockPredicate2.evaluate(""context"")).andReturn(true).times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.AndPredicate predicate = new org.apache.ambari.server.collections.functors.AndPredicate(mockPredicate1, mockPredicate2);
    predicate.evaluate(""context"");
    predicate.evaluate(""context"");
    predicate.evaluate(""context"");
    verifyAll();
    org.junit.Assert.assertArrayEquals(new org.apache.ambari.server.collections.Predicate[]{ mockPredicate1, mockPredicate2 }, predicate.getPredicates());
}","testEvaluate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/AndPredicateTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testToMap","TRUE","2","assertEquals","{
    org.apache.ambari.server.collections.Predicate mockPredicate1 = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate1.toMap()).andReturn(java.util.Collections.singletonMap(""nop"", ""foo"")).times(1);
    org.apache.ambari.server.collections.Predicate mockPredicate2 = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate2.toMap()).andReturn(java.util.Collections.singletonMap(""nop"", ""baz"")).times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.AndPredicate predicate = new org.apache.ambari.server.collections.functors.AndPredicate(mockPredicate1, mockPredicate2);
    java.util.Map<java.lang.String, java.lang.Object> actualMap = predicate.toMap();
    verifyAll();
    java.util.Map<java.lang.String, java.lang.Object> expectedMap = new java.util.HashMap<>();
    expectedMap.put(""and"", new java.util.ArrayList<>(java.util.Arrays.asList(java.util.Collections.<java.lang.String, java.lang.Object>singletonMap(""nop"", ""foo""), java.util.Collections.<java.lang.String, java.lang.Object>singletonMap(""nop"", ""baz""))));
    org.junit.Assert.assertEquals(expectedMap, actualMap);
}","testToMap()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/AndPredicateTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testToJSON","TRUE","2","assertEquals","{
    org.apache.ambari.server.collections.Predicate mockPredicate1 = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate1.toMap()).andReturn(java.util.Collections.singletonMap(""nop"", ""foo"")).times(1);
    org.apache.ambari.server.collections.Predicate mockPredicate2 = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate2.toMap()).andReturn(java.util.Collections.singletonMap(""nop"", ""baz"")).times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.AndPredicate predicate = new org.apache.ambari.server.collections.functors.AndPredicate(mockPredicate1, mockPredicate2);
    java.lang.String actualJSON = predicate.toJSON();
    verifyAll();
    java.lang.String expectedJSON = ""{\""and\"":[{\""nop\"":\""foo\""},{\""nop\"":\""baz\""}]}"";
    org.junit.Assert.assertEquals(expectedJSON, actualJSON);
}","testToJSON()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/AndPredicateTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testEvaluate","TRUE","3","assertTrue
assertFalse","{
    java.util.Set<java.lang.String> data1 = new java.util.HashSet<>(java.util.Arrays.asList(""ONE"", ""TWO"", ""THREE""));
    java.util.Set<java.lang.String> data2 = new java.util.HashSet<>(java.util.Arrays.asList(""TWO"", ""THREE""));
    org.apache.ambari.server.collections.functors.ContextTransformer transformer = createStrictMock(org.apache.ambari.server.collections.functors.ContextTransformer.class);
    EasyMock.expect(transformer.transform(org.easymock.EasyMock.<java.util.Map<?, ?>>anyObject())).andReturn(data1).times(1);
    EasyMock.expect(transformer.transform(org.easymock.EasyMock.<java.util.Map<?, ?>>anyObject())).andReturn(data2).times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.ContainsPredicate predicate = new org.apache.ambari.server.collections.functors.ContainsPredicate(transformer, ""ONE"");
    org.junit.Assert.assertTrue(predicate.evaluate(java.util.Collections.singletonMap(""data"", data1)));
    org.junit.Assert.assertFalse(predicate.evaluate(java.util.Collections.singletonMap(""data"", data2)));
    verifyAll();
}","testEvaluate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/ContainsPredicateTest.java","e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testToMap","TRUE","2","assertEquals","{
    org.apache.ambari.server.collections.functors.ContextTransformer transformer = createStrictMock(org.apache.ambari.server.collections.functors.ContextTransformer.class);
    EasyMock.expect(transformer.getKey()).andReturn(""data"").times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.ContainsPredicate predicate = new org.apache.ambari.server.collections.functors.ContainsPredicate(transformer, ""ONE"");
    java.util.Map<java.lang.String, java.lang.Object> actualMap = predicate.toMap();
    verifyAll();
    java.util.Map<java.lang.String, java.lang.Object> expectedMap = new java.util.HashMap<>();
    expectedMap.put(""contains"", new java.util.ArrayList<>(java.util.Arrays.asList(""data"", ""ONE"")));
    org.junit.Assert.assertEquals(expectedMap, actualMap);
}","testToMap()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/ContainsPredicateTest.java","e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testToJSON","TRUE","2","assertEquals","{
    org.apache.ambari.server.collections.functors.ContextTransformer transformer = createStrictMock(org.apache.ambari.server.collections.functors.ContextTransformer.class);
    EasyMock.expect(transformer.getKey()).andReturn(""data"").times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.ContainsPredicate predicate = new org.apache.ambari.server.collections.functors.ContainsPredicate(transformer, ""ONE"");
    java.lang.String actualJSON = predicate.toJSON();
    verifyAll();
    java.lang.String expectedJSON = ""{\""contains\"":[\""data\"",\""ONE\""]}"";
    org.junit.Assert.assertEquals(expectedJSON, actualJSON);
}","testToJSON()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/ContainsPredicateTest.java","e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testGetKey","TRUE","2","assertEquals","{
    org.apache.ambari.server.collections.functors.ContextTransformer transformer = new org.apache.ambari.server.collections.functors.ContextTransformer(""key"");
    junit.framework.Assert.assertEquals(""key"", transformer.getKey());
}","testGetKey()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/ContextTransformerTest.java","e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testTransformSimple","TRUE","2","assertEquals","{
    java.util.Map<java.lang.String, java.lang.Object> context = new java.util.HashMap<>();
    context.put(""key"", ""value"");
    context.put(""key1"", ""value1"");
    context.put(""key2"", ""value2"");
    org.apache.ambari.server.collections.functors.ContextTransformer transformer = new org.apache.ambari.server.collections.functors.ContextTransformer(""key"");
    junit.framework.Assert.assertEquals(""value"", transformer.transform(context));
}","testTransformSimple()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/ContextTransformerTest.java","e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testTransformTree","TRUE","4","assertEquals","{
    java.util.Map<java.lang.String, java.lang.Object> serviceSite = new java.util.HashMap<>();
    serviceSite.put(""property"", ""service-site-property"");
    java.util.Map<java.lang.String, java.lang.Object> configurations = new java.util.HashMap<>();
    configurations.put(""service-site"", serviceSite);
    configurations.put(""property"", ""configuration-property"");
    java.util.Map<java.lang.String, java.lang.Object> context = new java.util.HashMap<>();
    context.put(""configurations"", configurations);
    context.put(""property"", ""context-property"");
    org.apache.ambari.server.collections.functors.ContextTransformer transformer;
    transformer = new org.apache.ambari.server.collections.functors.ContextTransformer(""configurations/service-site/property"");
    junit.framework.Assert.assertEquals(""service-site-property"", transformer.transform(context));
    transformer = new org.apache.ambari.server.collections.functors.ContextTransformer(""/configurations/service-site/property"");
    junit.framework.Assert.assertEquals(""service-site-property"", transformer.transform(context));
    transformer = new org.apache.ambari.server.collections.functors.ContextTransformer(""/configurations/service-site"");
    junit.framework.Assert.assertEquals(serviceSite, transformer.transform(context));
}","testTransformTree()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/ContextTransformerTest.java","e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testEvaluate","TRUE","3","assertTrue
assertFalse","{
    java.lang.String data1 = ""value1"";
    java.lang.String data2 = ""value2"";
    org.apache.ambari.server.collections.functors.ContextTransformer transformer = createStrictMock(org.apache.ambari.server.collections.functors.ContextTransformer.class);
    EasyMock.expect(transformer.transform(org.easymock.EasyMock.<java.util.Map<?, ?>>anyObject())).andReturn(data1).times(1);
    EasyMock.expect(transformer.transform(org.easymock.EasyMock.<java.util.Map<?, ?>>anyObject())).andReturn(data2).times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.EqualsPredicate predicate = new org.apache.ambari.server.collections.functors.EqualsPredicate(transformer, ""value1"");
    org.junit.Assert.assertTrue(predicate.evaluate(java.util.Collections.singletonMap(""data"", data1)));
    org.junit.Assert.assertFalse(predicate.evaluate(java.util.Collections.singletonMap(""data"", data2)));
    verifyAll();
}","testEvaluate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/EqualsPredicateTest.java","e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testToMap","TRUE","2","assertEquals","{
    org.apache.ambari.server.collections.functors.ContextTransformer transformer = createStrictMock(org.apache.ambari.server.collections.functors.ContextTransformer.class);
    EasyMock.expect(transformer.getKey()).andReturn(""data"").times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.EqualsPredicate predicate = new org.apache.ambari.server.collections.functors.EqualsPredicate(transformer, ""value"");
    java.util.Map<java.lang.String, java.lang.Object> actualMap = predicate.toMap();
    verifyAll();
    java.util.Map<java.lang.String, java.lang.Object> expectedMap = new java.util.HashMap<>();
    expectedMap.put(""equals"", new java.util.ArrayList<>(java.util.Arrays.asList(""data"", ""value"")));
    org.junit.Assert.assertEquals(expectedMap, actualMap);
}","testToMap()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/EqualsPredicateTest.java","e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testToJSON","TRUE","2","assertEquals","{
    org.apache.ambari.server.collections.functors.ContextTransformer transformer = createStrictMock(org.apache.ambari.server.collections.functors.ContextTransformer.class);
    EasyMock.expect(transformer.getKey()).andReturn(""data"").times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.EqualsPredicate predicate = new org.apache.ambari.server.collections.functors.EqualsPredicate(transformer, ""value"");
    java.lang.String actualJSON = predicate.toJSON();
    verifyAll();
    java.lang.String expectedJSON = ""{\""equals\"":[\""data\"",\""value\""]}"";
    org.junit.Assert.assertEquals(expectedJSON, actualJSON);
}","testToJSON()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/EqualsPredicateTest.java","e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
edce0b1173b6629e50b053be140490fa288ec361
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testEvaluate","TRUE","4","assertFalse
assertTrue
assertArrayEquals","{
    org.apache.ambari.server.collections.Predicate mockPredicate = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate.evaluate(""context"")).andReturn(true).times(1);
    EasyMock.expect(mockPredicate.evaluate(""context"")).andReturn(false).times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.NotPredicate predicate = new org.apache.ambari.server.collections.functors.NotPredicate(mockPredicate);
    org.junit.Assert.assertFalse(predicate.evaluate(""context""));
    org.junit.Assert.assertTrue(predicate.evaluate(""context""));
    verifyAll();
    org.junit.Assert.assertArrayEquals(new org.apache.ambari.server.collections.Predicate[]{ mockPredicate }, predicate.getPredicates());
}","testEvaluate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/NotPredicateTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testToMap","TRUE","2","assertEquals","{
    org.apache.ambari.server.collections.Predicate mockPredicate = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate.toMap()).andReturn(java.util.Collections.singletonMap(""nop"", ""foo"")).times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.NotPredicate predicate = new org.apache.ambari.server.collections.functors.NotPredicate(mockPredicate);
    java.util.Map<java.lang.String, java.lang.Object> actualMap = predicate.toMap();
    verifyAll();
    java.util.Map<java.lang.String, java.lang.Object> expectedMap = new java.util.HashMap<>();
    expectedMap.put(""not"", java.util.Collections.<java.lang.String, java.lang.Object>singletonMap(""nop"", ""foo""));
    org.junit.Assert.assertEquals(expectedMap, actualMap);
}","testToMap()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/NotPredicateTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testToJSON","TRUE","2","assertEquals","{
    org.apache.ambari.server.collections.Predicate mockPredicate = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate.toMap()).andReturn(java.util.Collections.singletonMap(""nop"", ""foo"")).times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.NotPredicate predicate = new org.apache.ambari.server.collections.functors.NotPredicate(mockPredicate);
    java.lang.String actualJSON = predicate.toJSON();
    verifyAll();
    java.lang.String expectedJSON = ""{\""not\"":{\""nop\"":\""foo\""}}"";
    org.junit.Assert.assertEquals(expectedJSON, actualJSON);
}","testToJSON()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/NotPredicateTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testEvaluate","TRUE","2","assertArrayEquals","{
    org.apache.ambari.server.collections.Predicate mockPredicate1 = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate1.evaluate(""context"")).andReturn(true).times(1);
    EasyMock.expect(mockPredicate1.evaluate(""context"")).andReturn(false).times(1);
    EasyMock.expect(mockPredicate1.evaluate(""context"")).andReturn(true).times(1);
    org.apache.ambari.server.collections.Predicate mockPredicate2 = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate2.evaluate(""context"")).andReturn(true).times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.OrPredicate predicate = new org.apache.ambari.server.collections.functors.OrPredicate(mockPredicate1, mockPredicate2);
    predicate.evaluate(""context"");
    predicate.evaluate(""context"");
    predicate.evaluate(""context"");
    verifyAll();
    org.junit.Assert.assertArrayEquals(new org.apache.ambari.server.collections.Predicate[]{ mockPredicate1, mockPredicate2 }, predicate.getPredicates());
}","testEvaluate()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/OrPredicateTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testToMap","TRUE","2","assertEquals","{
    org.apache.ambari.server.collections.Predicate mockPredicate1 = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate1.toMap()).andReturn(java.util.Collections.singletonMap(""nop"", ""foo"")).times(1);
    org.apache.ambari.server.collections.Predicate mockPredicate2 = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate2.toMap()).andReturn(java.util.Collections.singletonMap(""nop"", ""baz"")).times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.OrPredicate predicate = new org.apache.ambari.server.collections.functors.OrPredicate(mockPredicate1, mockPredicate2);
    java.util.Map<java.lang.String, java.lang.Object> actualMap = predicate.toMap();
    verifyAll();
    java.util.Map<java.lang.String, java.lang.Object> expectedMap = new java.util.HashMap<>();
    expectedMap.put(""or"", new java.util.ArrayList<>(java.util.Arrays.asList(java.util.Collections.<java.lang.String, java.lang.Object>singletonMap(""nop"", ""foo""), java.util.Collections.<java.lang.String, java.lang.Object>singletonMap(""nop"", ""baz""))));
    org.junit.Assert.assertEquals(expectedMap, actualMap);
}","testToMap()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/OrPredicateTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testToJSON","TRUE","2","assertEquals","{
    org.apache.ambari.server.collections.Predicate mockPredicate1 = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate1.toMap()).andReturn(java.util.Collections.singletonMap(""nop"", ""foo"")).times(1);
    org.apache.ambari.server.collections.Predicate mockPredicate2 = createStrictMock(org.apache.ambari.server.collections.Predicate.class);
    EasyMock.expect(mockPredicate2.toMap()).andReturn(java.util.Collections.singletonMap(""nop"", ""baz"")).times(1);
    replayAll();
    org.apache.ambari.server.collections.functors.OrPredicate predicate = new org.apache.ambari.server.collections.functors.OrPredicate(mockPredicate1, mockPredicate2);
    java.lang.String actualJSON = predicate.toJSON();
    verifyAll();
    java.lang.String expectedJSON = ""{\""or\"":[{\""nop\"":\""foo\""},{\""nop\"":\""baz\""}]}"";
    org.junit.Assert.assertEquals(expectedJSON, actualJSON);
}","testToJSON()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/collections/functors/OrPredicateTest.java","ab8d58ba4464791b95b56be75fd44ce9c20349c6
e8080350f531f30abc129545e5ade90550d45bff
edbb549206a0a48b9e6619fa702fd7f5a8d451aa
e4db57093f4d17497366cdfbf02127f36399bf42
2fcc947530eb521bbcb3bdc941a5a680a4145140"
"testTranslateNullCategory","TRUE","2","assertNull","{
    org.junit.Assert.assertNull(org.apache.ambari.server.configuration.AmbariServerConfigurationKey.translate(null, ""some.property""));
}","testTranslateNullCategory()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/configuration/AmbariServerConfigurationKeyTest.java","563d508f6eedf730e9d15183afb50790c4ffb52f
fb70eddf5000e9b86302f67404c68385eb1010bb"
"testTranslateNullPropertyName","TRUE","2","assertNull","{
    org.junit.Assert.assertNull(org.apache.ambari.server.configuration.AmbariServerConfigurationKey.translate(org.apache.ambari.server.configuration.AmbariServerConfigurationCategory.LDAP_CONFIGURATION, null));
}","testTranslateNullPropertyName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/configuration/AmbariServerConfigurationKeyTest.java","563d508f6eedf730e9d15183afb50790c4ffb52f
fb70eddf5000e9b86302f67404c68385eb1010bb"
"testTranslateInvalidPropertyName","TRUE","2","assertNull","{
    org.junit.Assert.assertNull(org.apache.ambari.server.configuration.AmbariServerConfigurationKey.translate(org.apache.ambari.server.configuration.AmbariServerConfigurationCategory.LDAP_CONFIGURATION, ""invalid_property_name""));
}","testTranslateInvalidPropertyName()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/configuration/AmbariServerConfigurationKeyTest.java","563d508f6eedf730e9d15183afb50790c4ffb52f
fb70eddf5000e9b86302f67404c68385eb1010bb"
"testTranslateExpected","TRUE","2","assertSame","{
    org.junit.Assert.assertSame(org.apache.ambari.server.configuration.AmbariServerConfigurationKey.LDAP_ENABLED, org.apache.ambari.server.configuration.AmbariServerConfigurationKey.translate(org.apache.ambari.server.configuration.AmbariServerConfigurationCategory.LDAP_CONFIGURATION, org.apache.ambari.server.configuration.AmbariServerConfigurationKey.LDAP_ENABLED.key()));
}","testTranslateExpected()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/configuration/AmbariServerConfigurationKeyTest.java","563d508f6eedf730e9d15183afb50790c4ffb52f
fb70eddf5000e9b86302f67404c68385eb1010bb"
"testTranslateRegex","TRUE","7","assertTrue
assertSame
assertNotNull
assertNotSame
assertNull","{
    org.apache.ambari.server.configuration.AmbariServerConfigurationKey keyWithRegex = org.apache.ambari.server.configuration.AmbariServerConfigurationKey.TPROXY_ALLOWED_HOSTS;
    org.junit.Assert.assertTrue(keyWithRegex.isRegex());
    org.junit.Assert.assertSame(keyWithRegex, org.apache.ambari.server.configuration.AmbariServerConfigurationKey.translate(keyWithRegex.getConfigurationCategory(), ""ambari.tproxy.proxyuser.knox.hosts""));
    org.junit.Assert.assertSame(keyWithRegex, org.apache.ambari.server.configuration.AmbariServerConfigurationKey.translate(keyWithRegex.getConfigurationCategory(), ""ambari.tproxy.proxyuser.not.knox.hosts""));
    org.apache.ambari.server.configuration.AmbariServerConfigurationKey translatedKey = org.apache.ambari.server.configuration.AmbariServerConfigurationKey.translate(keyWithRegex.getConfigurationCategory(), ""ambari.tproxy.proxyuser.not.knox.groups"");
    org.junit.Assert.assertNotNull(translatedKey);
    org.junit.Assert.assertNotSame(keyWithRegex, translatedKey);
    org.junit.Assert.assertNull(org.apache.ambari.server.configuration.AmbariServerConfigurationKey.translate(keyWithRegex.getConfigurationCategory(), ""ambari.tproxy.proxyuser.not.knox.invalid""));
}","testTranslateRegex()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/configuration/AmbariServerConfigurationKeyTest.java","563d508f6eedf730e9d15183afb50790c4ffb52f
fb70eddf5000e9b86302f67404c68385eb1010bb"
"testFindPasswordConfigurations","TRUE","4","assertEquals
assertTrue","{
    final java.util.Set<java.lang.String> passwordConfigurations = org.apache.ambari.server.configuration.AmbariServerConfigurationKey.findPasswordConfigurations();
    org.junit.Assert.assertEquals(2, passwordConfigurations.size());
    org.junit.Assert.assertTrue(passwordConfigurations.contains(org.apache.ambari.server.configuration.AmbariServerConfigurationKey.BIND_PASSWORD.key()));
    org.junit.Assert.assertTrue(passwordConfigurations.contains(org.apache.ambari.server.configuration.AmbariServerConfigurationKey.TRUST_STORE_PASSWORD.key()));
}","testFindPasswordConfigurations()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/configuration/AmbariServerConfigurationKeyTest.java","563d508f6eedf730e9d15183afb50790c4ffb52f
fb70eddf5000e9b86302f67404c68385eb1010bb"
"testGetAndLoadDataForVariousEvents","TRUE","5","assertSame
assertNotSame","{
    com.google.inject.Injector injector = getInjector();
    org.apache.ambari.server.configuration.AmbariServerConfiguration emptyTestConfiguration = createMock(org.apache.ambari.server.configuration.AmbariServerConfiguration.class);
    org.apache.ambari.server.configuration.AmbariServerConfiguration filledTestConfiguration1 = createMock(org.apache.ambari.server.configuration.AmbariServerConfiguration.class);
    org.apache.ambari.server.configuration.AmbariServerConfiguration filledTestConfiguration2 = createMock(org.apache.ambari.server.configuration.AmbariServerConfiguration.class);
    org.apache.ambari.server.events.publishers.AmbariEventPublisher publisher = injector.getInstance(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class);
    com.google.inject.persist.jpa.AmbariJpaPersistService persistService = injector.getInstance(com.google.inject.persist.jpa.AmbariJpaPersistService.class);
    org.apache.ambari.server.configuration.AmbariServerConfigurationProvider provider = createMockBuilder(org.apache.ambari.server.configuration.AmbariServerConfigurationProvider.class).addMockedMethod(""loadInstance"", java.util.Collection.class).withConstructor(org.apache.ambari.server.configuration.AmbariServerConfigurationProviderTest.TEST_CONFIGURATION, publisher, persistService).createMock();
    EasyMock.expect(provider.loadInstance(java.util.Collections.emptyList())).andReturn(emptyTestConfiguration).once();
    EasyMock.expect(provider.loadInstance(null)).andReturn(filledTestConfiguration1).once();
    EasyMock.expect(provider.loadInstance(null)).andReturn(filledTestConfiguration2).once();
    replayAll();
    injector.injectMembers(provider);
    org.apache.ambari.server.configuration.AmbariServerConfiguration configuration = provider.get();
    org.junit.Assert.assertSame(emptyTestConfiguration, configuration);
    provider.ambariConfigurationChanged(new org.apache.ambari.server.events.AmbariConfigurationChangedEvent(org.apache.ambari.server.configuration.AmbariServerConfigurationProviderTest.TEST_CONFIGURATION.getCategoryName()));
    org.apache.ambari.server.configuration.AmbariServerConfiguration configuration2 = provider.get();
    org.junit.Assert.assertSame(configuration, configuration2);
    provider.jpaInitialized(new org.apache.ambari.server.events.JpaInitializedEvent());
    org.apache.ambari.server.configuration.AmbariServerConfiguration configuration3 = provider.get();
    org.junit.Assert.assertSame(filledTestConfiguration1, configuration3);
    provider.ambariConfigurationChanged(new org.apache.ambari.server.events.AmbariConfigurationChangedEvent(org.apache.ambari.server.configuration.AmbariServerConfigurationProviderTest.TEST_CONFIGURATION.getCategoryName()));
    org.apache.ambari.server.configuration.AmbariServerConfiguration configuration4 = provider.get();
    org.junit.Assert.assertNotSame(configuration3, configuration4);
    verifyAll();
}","testGetAndLoadDataForVariousEvents()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/configuration/AmbariServerConfigurationProviderTest.java","563d508f6eedf730e9d15183afb50790c4ffb52f
60a05a806fc3203cda35cc3a6be3a5c713d18be3
3b5343e14a9f9b5c103f4f2280ea735670dc8fd8"
"testToProperties","TRUE","8","assertNotNull
assertEquals
assertNotSame","{
    com.google.inject.Injector injector = getInjector();
    org.apache.ambari.server.events.publishers.AmbariEventPublisher publisher = injector.getInstance(org.apache.ambari.server.events.publishers.AmbariEventPublisher.class);
    com.google.inject.persist.jpa.AmbariJpaPersistService persistService = injector.getInstance(com.google.inject.persist.jpa.AmbariJpaPersistService.class);
    org.apache.ambari.server.configuration.AmbariServerConfigurationProvider provider = createMockBuilder(org.apache.ambari.server.configuration.AmbariServerConfigurationProvider.class).withConstructor(org.apache.ambari.server.configuration.AmbariServerConfigurationProviderTest.TEST_CONFIGURATION, publisher, persistService).createMock();
    replayAll();
    java.util.Map actualProperties;
    actualProperties = provider.toProperties(null);
    org.junit.Assert.assertNotNull(actualProperties);
    org.junit.Assert.assertEquals(java.util.Collections.emptyMap(), actualProperties);
    actualProperties = provider.toProperties(java.util.Collections.emptyList());
    org.junit.Assert.assertNotNull(actualProperties);
    org.junit.Assert.assertEquals(java.util.Collections.emptyMap(), actualProperties);
    java.util.Map<java.lang.String, java.lang.String> expectedProperties = new java.util.HashMap<>();
    expectedProperties.put(""one"", ""1"");
    expectedProperties.put(""two"", ""2"");
    expectedProperties.put(""three"", ""3"");
    actualProperties = provider.toProperties(createAmbariConfigurationEntities(expectedProperties));
    org.junit.Assert.assertNotNull(actualProperties);
    org.junit.Assert.assertNotSame(expectedProperties, actualProperties);
    org.junit.Assert.assertEquals(expectedProperties, actualProperties);
    verifyAll();
}","testToProperties()","Test","ambari/ambari-server/src/test/java/org/apache/ambari/server/configuration/AmbariServerConfigurationProviderTest.java","563d508f6eedf730e9d15183afb50790c4ffb52f
60a05a806fc3203cda35cc3a6be3a5c713d18be3
3b5343e14a9f9b5c103f4f2280ea735670dc8fd8"
"testGetValue","TRUE","8","assertEquals
assertNull","{
    final java.util.Map<java.lang.String, java.lang.String> configurationMap = java.util.Collections.singletonMap(org.apache.ambari.server.configuration.AmbariServerConfigurationKey.TPROXY_AUTHENTICATION_ENABLED.key(), ""true"");
    final org.apache.ambari.server.configuration.AmbariServerConfiguration ambariServerConfiguration = new org.apache.ambari.server.configuration.AmbariServerConfiguration(configurationMap) {
        @java.lang.Override
        protected org.apache.ambari.server.configuration.AmbariServerConfigurationCategory getCategory() {
            return null;
        }
    };
    org.junit.Assert.assertEquals(""true"", ambariServerConfiguration.getValue(org.apache.ambari.server.configuration.AmbariServerConfigurationKey.TPROXY_AUTHENTICATION_ENABLED, configurationMap));
    org.junit.Assert.assertEquals(""false"", org.apache.ambari.server.configu