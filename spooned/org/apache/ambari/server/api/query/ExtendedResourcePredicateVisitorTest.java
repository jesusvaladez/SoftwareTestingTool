package org.apache.ambari.server.api.query;
public class ExtendedResourcePredicateVisitorTest {
    @org.junit.Test
    public void testGetExtendedPredicate() throws java.lang.Exception {
        org.apache.ambari.server.controller.spi.Resource resource1 = new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.Service);
        resource1.setProperty("name", "service1");
        org.apache.ambari.server.controller.spi.Resource resource2 = new org.apache.ambari.server.controller.internal.ResourceImpl(org.apache.ambari.server.controller.spi.Resource.Type.Service);
        resource2.setProperty("name", "service2");
        java.util.Map<java.lang.String, java.lang.Object> resource1SubProperties1 = new java.util.HashMap<>();
        resource1SubProperties1.put("sub1/category/p1", 1);
        resource1SubProperties1.put("sub1/category/p2", 2);
        resource1SubProperties1.put("sub1/category/p3", 3);
        java.util.Map<java.lang.String, java.lang.Object> resource1SubProperties2 = new java.util.HashMap<>();
        resource1SubProperties2.put("sub1/category/p1", 1);
        resource1SubProperties2.put("sub1/category/p2", 4);
        resource1SubProperties2.put("sub1/category/p3", 6);
        java.util.Map<java.lang.String, java.lang.Object> resource1SubProperties3 = new java.util.HashMap<>();
        resource1SubProperties3.put("sub1/category/p1", 1);
        resource1SubProperties3.put("sub1/category/p2", 8);
        resource1SubProperties3.put("sub1/category/p3", 12);
        java.util.Set<java.util.Map<java.lang.String, java.lang.Object>> resource1SubPropertiesSet = new java.util.HashSet<>();
        resource1SubPropertiesSet.add(resource1SubProperties1);
        resource1SubPropertiesSet.add(resource1SubProperties2);
        resource1SubPropertiesSet.add(resource1SubProperties3);
        java.util.Map<java.lang.String, java.lang.Object> resource2SubProperties1 = new java.util.HashMap<>();
        resource2SubProperties1.put("sub1/category/p1", 2);
        resource2SubProperties1.put("sub1/category/p2", 2);
        resource2SubProperties1.put("sub1/category/p3", 3);
        java.util.Map<java.lang.String, java.lang.Object> resource2SubProperties2 = new java.util.HashMap<>();
        resource2SubProperties2.put("sub1/category/p1", 2);
        resource2SubProperties2.put("sub1/category/p2", 4);
        resource2SubProperties2.put("sub1/category/p3", 6);
        java.util.Map<java.lang.String, java.lang.Object> resource2SubProperties3 = new java.util.HashMap<>();
        resource2SubProperties3.put("sub1/category/p1", 2);
        resource2SubProperties3.put("sub1/category/p2", 8);
        resource2SubProperties3.put("sub1/category/p3", 12);
        java.util.Set<java.util.Map<java.lang.String, java.lang.Object>> resource2SubPropertiesSet = new java.util.HashSet<>();
        resource2SubPropertiesSet.add(resource2SubProperties1);
        resource2SubPropertiesSet.add(resource2SubProperties2);
        resource2SubPropertiesSet.add(resource2SubProperties3);
        java.util.Map<org.apache.ambari.server.controller.spi.Resource, java.util.Set<java.util.Map<java.lang.String, java.lang.Object>>> extendedPropertyMap = new java.util.HashMap<>();
        extendedPropertyMap.put(resource1, resource1SubPropertiesSet);
        extendedPropertyMap.put(resource2, resource2SubPropertiesSet);
        org.apache.ambari.server.controller.spi.Predicate predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property("sub1/category/p1").equals(1).toPredicate();
        org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor visitor = new org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor(extendedPropertyMap);
        org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
        org.apache.ambari.server.controller.spi.Predicate extendedPredicate = visitor.getExtendedPredicate();
        org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource1));
        org.junit.Assert.assertFalse(extendedPredicate.evaluate(resource2));
        predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property("sub1/category/p1").equals(2).toPredicate();
        visitor = new org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor(extendedPropertyMap);
        org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
        extendedPredicate = visitor.getExtendedPredicate();
        org.junit.Assert.assertFalse(extendedPredicate.evaluate(resource1));
        org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource2));
        predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property("sub1/category/p2").equals(4).toPredicate();
        visitor = new org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor(extendedPropertyMap);
        org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
        extendedPredicate = visitor.getExtendedPredicate();
        org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource1));
        org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource2));
        predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property("sub1/category/p2").equals(5).toPredicate();
        visitor = new org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor(extendedPropertyMap);
        org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
        extendedPredicate = visitor.getExtendedPredicate();
        org.junit.Assert.assertFalse(extendedPredicate.evaluate(resource1));
        org.junit.Assert.assertFalse(extendedPredicate.evaluate(resource2));
        predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().not().property("sub1/category/p2").equals(5).toPredicate();
        visitor = new org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor(extendedPropertyMap);
        org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
        extendedPredicate = visitor.getExtendedPredicate();
        org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource1));
        org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource2));
        predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property("sub1/category/p1").equals(1).and().property("sub1/category/p2").equals(4).toPredicate();
        visitor = new org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor(extendedPropertyMap);
        org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
        extendedPredicate = visitor.getExtendedPredicate();
        org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource1));
        org.junit.Assert.assertFalse(extendedPredicate.evaluate(resource2));
        predicate = new org.apache.ambari.server.controller.utilities.PredicateBuilder().property("sub1/category/p1").equals(1).or().property("sub1/category/p2").equals(4).toPredicate();
        visitor = new org.apache.ambari.server.api.query.ExtendedResourcePredicateVisitor(extendedPropertyMap);
        org.apache.ambari.server.controller.utilities.PredicateHelper.visit(predicate, visitor);
        extendedPredicate = visitor.getExtendedPredicate();
        org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource1));
        org.junit.Assert.assertTrue(extendedPredicate.evaluate(resource2));
    }
}